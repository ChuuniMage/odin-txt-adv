; ModuleID = 'odin_package'
source_filename = "odin_package"
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-windows-msvc"

%runtime.Type_Info = type { i64, i64, i32, [4 x i8], i64, { [15 x i64], i64 } }
%..string = type { i8*, i64 }
%runtime.Default_Temp_Allocator = type { { i8*, i64 }, i64, i8*, %runtime.Allocator, { { i8*, i64 }*, i64, i64, %runtime.Allocator } }
%runtime.Allocator = type { i8*, i8* }
%odin_gl.DrawArraysIndirectCommand = type { i32, i32, i32, i32 }
%odin_gl.DrawElementsIndirectCommand = type { i32, i32, i32, i32, i32 }
%odin_gl.DispatchIndirectCommand = type { i32, i32, i32 }
%strconv.Float_Info = type { i64, i64, i64 }
%utf8.Accept_Range = type { i8, i8 }
%io.Stream_VTable = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%runtime.Type_Info_Named = type { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }
%runtime.Source_Code_Location = type { %..string, i32, i32, %..string }
%runtime.Type_Info_Struct = type { { %runtime.Type_Info**, i64 }, { %..string*, i64 }, { i64*, i64 }, { i8*, i64 }, { %..string*, i64 }, i8, i8, i8, [5 x i8], i8*, i8, [7 x i8], %runtime.Type_Info*, i64 }
%runtime.string_decode_rune.Accept_Range-1 = type { i8, i8 }
%fmt.Info = type { i8, i8, i8, i8, i8, i8, i8, [1 x i8], i64, i64, i64, i8, i8, i8, i8, [4 x i8], %io.Writer, %..any, i64, i64, %"runtime.Maybe(int)-16164", i8, [7 x i8], i64 }
%io.Writer = type { %io.Stream }
%io.Stream = type { %io.Stream_VTable*, i8* }
%..any = type { i8*, i64 }
%"runtime.Maybe(int)-16164" = type { i64, i64 }
%runtime.Type_Info_Enum = type { %runtime.Type_Info*, { %..string*, i64 }, { i64*, i64 } }
%runtime.Type_Info_Integer = type { i8, i8 }
%runtime.Type_Info_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Bit_Set = type { %runtime.Type_Info*, %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Union = type { { %runtime.Type_Info**, i64 }, i64, %runtime.Type_Info*, i8 (i8*, i8*)*, i8, i8, i8, [5 x i8] }
%runtime.Type_Info_Slice = type { %runtime.Type_Info*, i64 }
%runtime.Type_Info_Procedure = type { %runtime.Type_Info*, %runtime.Type_Info*, i8, i8, [6 x i8] }
%runtime.Type_Info_Tuple = type { { %runtime.Type_Info**, i64 }, { %..string*, i64 } }
%runtime.Raw_String = type { i8*, i64 }
%strings.Builder = type { { i8*, i64, i64, %runtime.Allocator } }
%runtime.Context = type { %runtime.Allocator, %runtime.Allocator, i8*, %runtime.Logger, i8*, i64, i8* }
%runtime.Logger = type { i8*, i8*, i64, i16, [6 x i8] }
%runtime.Raw_Dynamic_Array = type { i8*, i64, i64, %runtime.Allocator }
%runtime.Map_Hash = type { i64, i8* }
%runtime.Map_Header = type { %runtime.Raw_Map*, i8 (i8*, i8*)*, i64, i64, i64, i64, i64, i64 }
%runtime.Raw_Map = type { { i64*, i64 }, %runtime.Raw_Dynamic_Array }
%runtime.Map_Entry_Header = type { i64, i64 }
%runtime.Map_Find_Result = type { i64, i64, i64 }
%__gnu_h2f_ieee.fp32-2 = type { i32 }
%runtime.Type_Info_Rune = type {}
%runtime.Type_Info_Float = type { i8 }
%runtime.Type_Info_Complex = type {}
%runtime.Type_Info_Quaternion = type {}
%runtime.Type_Info_String = type { i8 }
%runtime.Type_Info_Boolean = type {}
%runtime.Type_Info_Any = type {}
%runtime.Type_Info_Type_Id = type {}
%runtime.Type_Info_Multi_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Soa_Pointer = type { %runtime.Type_Info* }
%runtime.Type_Info_Array = type { %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Enumerated_Array = type { %runtime.Type_Info*, %runtime.Type_Info*, i64, i64, i64, i64, i8, [7 x i8] }
%runtime.Type_Info_Dynamic_Array = type { %runtime.Type_Info*, i64 }
%runtime.Type_Info_Map = type { %runtime.Type_Info*, %runtime.Type_Info*, %runtime.Type_Info*, i8 (i8*, i8*)*, i64 (i8*, i64)* }
%runtime.Type_Info_Simd_Vector = type { %runtime.Type_Info*, i64, i64 }
%runtime.Type_Info_Relative_Pointer = type { %runtime.Type_Info*, %runtime.Type_Info* }
%runtime.Type_Info_Relative_Slice = type { %runtime.Type_Info*, %runtime.Type_Info* }
%runtime.Type_Info_Matrix = type { %runtime.Type_Info*, i64, i64, i64, i64 }
%enbench.DataToWrite = type { %enbench.ENUM, %enbench.ENUM_CASE_RELATIONS }
%enbench.ENUM = type { { %..string*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } }
%enbench.ENUM_CASE_RELATIONS = type { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } }
%enbench.Backings = type { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } }
%sdl2.Window = type {}
%main.Imgui_State = type { %imgui_impl_sdl.SDL_State, %imgui_impl_opengl.OpenGL_State, [4 x i8] }
%imgui_impl_sdl.SDL_State = type { i64, [3 x i8], [5 x i8], [9 x %sdl2.Cursor*] }
%sdl2.Cursor = type {}
%imgui_impl_opengl.OpenGL_State = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%sdl2.Event = type { [7 x i64] }
%imgui.IO = type { i32, i32, %imgui.Vec2, float, float, i8*, i8*, float, float, float, float, float, [4 x i8], i8*, %imgui.Font_Atlas*, float, i8, [3 x i8], %imgui.ImFont*, %imgui.Vec2, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [1 x i8], float, [4 x i8], i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, [1 x i8], float, i32, i32, i32, i32, i32, %imgui.Vec2, [645 x i32], [645 x i8], [3 x i8], %imgui.Vec2, [5 x i8], [3 x i8], float, float, i32, i8, i8, i8, i8, [20 x float], i32, [645 x %imgui.Key_Data], i8, [3 x i8], %imgui.Vec2, [5 x %imgui.Vec2], [4 x i8], [5 x double], [5 x i8], [5 x i8], [5 x i16], [5 x i16], [5 x i8], [5 x i8], [5 x i8], [3 x i8], [5 x float], [5 x float], [5 x %imgui.Vec2], [5 x float], [20 x float], [20 x float], float, i8, i8, i8, i8, i16, [2 x i8], %"imgui.Im_Vector(Wchar)-27553" }
%imgui.Font_Atlas = type { i32, [4 x i8], i8*, i32, i32, i8, i8, i8, [5 x i8], i8*, i32*, i32, i32, %imgui.Vec2, %imgui.Vec2, %"imgui.Im_Vector(^ImFont)-27591", %"imgui.Im_Vector(Font_Atlas_Custom_Rect)-27605", %"imgui.Im_Vector(Font_Config)-27630", [64 x %imgui.Vec4], %imgui.Font_Builder_Io*, i32, i32, i32, [4 x i8] }
%"imgui.Im_Vector(^ImFont)-27591" = type { i32, i32, %imgui.ImFont** }
%"imgui.Im_Vector(Font_Atlas_Custom_Rect)-27605" = type { i32, i32, %imgui.Font_Atlas_Custom_Rect* }
%imgui.Font_Atlas_Custom_Rect = type { i16, i16, i16, i16, i32, float, %imgui.Vec2, %imgui.ImFont* }
%"imgui.Im_Vector(Font_Config)-27630" = type { i32, i32, %imgui.Font_Config* }
%imgui.Font_Config = type { i8*, i32, i8, [3 x i8], i32, float, i32, i32, i8, [3 x i8], %imgui.Vec2, %imgui.Vec2, [4 x i8], i16*, float, float, i8, [3 x i8], i32, float, i16, [40 x i8], [2 x i8], %imgui.ImFont* }
%imgui.Vec4 = type { float, float, float, float }
%imgui.Font_Builder_Io = type {}
%imgui.ImFont = type { %"imgui.Im_Vector(f32)-27545", float, float, %"imgui.Im_Vector(Wchar)-27553", %"imgui.Im_Vector(Font_Glyph)-27571", %imgui.Font_Glyph*, %imgui.Font_Atlas*, %imgui.Font_Config*, i16, i16, i16, i16, i8, [3 x i8], float, float, float, i32, [2 x i8], [2 x i8] }
%"imgui.Im_Vector(f32)-27545" = type { i32, i32, float* }
%"imgui.Im_Vector(Font_Glyph)-27571" = type { i32, i32, %imgui.Font_Glyph* }
%imgui.Font_Glyph = type { i32, i32, i32, float, float, float, float, float, float, float, float, float }
%imgui.Key_Data = type { i8, [3 x i8], float, float, float }
%imgui.Vec2 = type { float, float }
%"imgui.Im_Vector(Wchar)-27553" = type { i32, i32, i16* }
%sdl2.KeyboardEvent = type { i32, i32, i32, i8, i8, i8, i8, %sdl2.Keysym }
%sdl2.Keysym = type { i32, i32, i16, [2 x i8], i32 }
%imgui.Draw_Data = type { i8, [3 x i8], i32, i32, i32, %imgui.Draw_List**, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, %imgui.Viewport* }
%imgui.Draw_List = type { %"imgui.Im_Vector(Draw_Cmd)-26689", %"imgui.Im_Vector(Draw_Idx)-26695", %"imgui.Im_Vector(Draw_Vert)-26706", i32, i32, %imgui.Draw_List_Shared_Data*, i8*, %imgui.Draw_Vert*, i16*, %"imgui.Im_Vector(Vec4)-26723", %"imgui.Im_Vector(Texture_ID)-26729", %"imgui.Im_Vector(Vec2)-26735", %imgui.Draw_Cmd_Header, %imgui.Draw_List_Splitter, float, [4 x i8] }
%"imgui.Im_Vector(Draw_Cmd)-26689" = type { i32, i32, %imgui.Draw_Cmd* }
%imgui.Draw_Cmd = type { %imgui.Vec4, i8*, i32, i32, i32, [4 x i8], i8*, i8* }
%"imgui.Im_Vector(Draw_Idx)-26695" = type { i32, i32, i16* }
%"imgui.Im_Vector(Draw_Vert)-26706" = type { i32, i32, %imgui.Draw_Vert* }
%imgui.Draw_List_Shared_Data = type {}
%imgui.Draw_Vert = type { %imgui.Vec2, %imgui.Vec2, i32 }
%"imgui.Im_Vector(Vec4)-26723" = type { i32, i32, %imgui.Vec4* }
%"imgui.Im_Vector(Texture_ID)-26729" = type { i32, i32, i8** }
%"imgui.Im_Vector(Vec2)-26735" = type { i32, i32, %imgui.Vec2* }
%imgui.Draw_Cmd_Header = type { %imgui.Vec4, i8*, i32, [4 x i8] }
%imgui.Draw_List_Splitter = type { i32, i32, %"imgui.Im_Vector(Draw_Channel)-26749" }
%"imgui.Im_Vector(Draw_Channel)-26749" = type { i32, i32, %imgui.Draw_Channel* }
%imgui.Draw_Channel = type { %"imgui.Im_Vector(Draw_Cmd)-26689", %"imgui.Im_Vector(Draw_Idx)-26695" }
%imgui.Viewport = type { i32, i32, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, float, i32, %imgui.Draw_Data*, i8*, i8*, i8*, i8*, i8, i8, i8, [5 x i8] }
%imgui.Context = type {}
%imgui.Style = type { float, float, %imgui.Vec2, float, float, %imgui.Vec2, %imgui.Vec2, i32, float, float, float, float, %imgui.Vec2, float, float, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, float, float, float, float, float, float, float, float, float, float, i32, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, %imgui.Vec2, float, i8, i8, i8, [1 x i8], float, float, [55 x %imgui.Vec4] }
%io.Flusher = type { %io.Stream }
%runtime.Raw_Soa_Pointer = type { i8*, i64 }
%time.Time = type { i64 }
%runtime.Raw_Slice = type { i8*, i64 }
%..complex128 = type { double, double }
%..quaternion256 = type { double, double, double, double }
%..complex32 = type { half, half }
%..complex64 = type { float, float }
%..quaternion64 = type { half, half, half, half }
%..quaternion128 = type { float, float, float, float }
%sys_windows.SECURITY_ATTRIBUTES = type { i32, [4 x i8], i8*, i32, [4 x i8] }
%sys_windows.CONSOLE_READCONSOLE_CONTROL = type { i32, i32, i32, i32 }
%sys_windows.OVERLAPPED = type { i32*, i32*, i32, i32, i8* }
%imgui_impl_opengl.OpenGL_Backup_State = type { i32, i32, i32, i32, i32, [2 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i8, i8, i8, i8 }
%io.Byte_Writer = type { %io.Stream }
%sys_windows.FILETIME = type { i32, i32 }
%strconv.Decimal_Slice = type { { i8*, i64 }, i64, i64, i8, [7 x i8] }
%strconv_decimal.Decimal = type { [384 x i8], i64, i64, i8, i8, [6 x i8] }
%log.File_Console_Logger_Data = type { i64, %..string }

@"__$type_info_data" = internal global [164 x %runtime.Type_Info] zeroinitializer
@"__$type_info_types_data" = internal global [113 x %runtime.Type_Info*] zeroinitializer
@"__$type_info_names_data" = internal global [113 x %..string] zeroinitializer
@"__$type_info_offsets_data" = internal global [113 x i64] zeroinitializer
@"__$type_info_usings_data" = internal global [113 x i8] zeroinitializer
@"__$type_info_tags_data" = internal global [113 x %..string] zeroinitializer
@runtime.type_table = internal global { %runtime.Type_Info*, i64 } { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 0), i64 164 }
@runtime.args__ = internal global { i8**, i64 } zeroinitializer
@runtime.global_default_temp_allocator_data = internal thread_local global %runtime.Default_Temp_Allocator zeroinitializer
@fmt.__DIGITS_LOWER = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$0", i64 0, i64 0), i64 17 }
@"csbs$0" = private unnamed_addr constant [18 x i8] c"0123456789abcdefx\00", align 1
@fmt.__DIGITS_UPPER = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1", i64 0, i64 0), i64 17 }
@"csbs$1" = private unnamed_addr constant [18 x i8] c"0123456789ABCDEFX\00", align 1
@log.Level_Headers = internal global [50 x %..string] [%..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$6", i64 0, i64 0), i64 12 }]
@"csbs$2" = private unnamed_addr constant [13 x i8] c"[DEBUG] --- \00", align 1
@"csbs$3" = private unnamed_addr constant [13 x i8] c"[INFO ] --- \00", align 1
@"csbs$4" = private unnamed_addr constant [13 x i8] c"[WARN ] --- \00", align 1
@"csbs$5" = private unnamed_addr constant [13 x i8] c"[ERROR] --- \00", align 1
@"csbs$6" = private unnamed_addr constant [13 x i8] c"[FATAL] --- \00", align 1
@odin_gl.loaded_up_to = internal global [2 x i64] zeroinitializer
@odin_gl.loaded_up_to_major = internal global i64 0
@odin_gl.loaded_up_to_minor = internal global i64 0
@odin_gl.impl_CullFace = internal global void (i32)* null
@odin_gl.impl_FrontFace = internal global void (i32)* null
@odin_gl.impl_Hint = internal global void (i32, i32)* null
@odin_gl.impl_LineWidth = internal global void (float)* null
@odin_gl.impl_PointSize = internal global void (float)* null
@odin_gl.impl_PolygonMode = internal global void (i32, i32)* null
@odin_gl.impl_Scissor = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_TexParameterf = internal global void (i32, i32, float)* null
@odin_gl.impl_TexParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_TexParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_TexParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TexImage1D = internal global void (i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TexImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_DrawBuffer = internal global void (i32)* null
@odin_gl.impl_Clear = internal global void (i32)* null
@odin_gl.impl_ClearColor = internal global void (float, float, float, float)* null
@odin_gl.impl_ClearStencil = internal global void (i32)* null
@odin_gl.impl_ClearDepth = internal global void (double)* null
@odin_gl.impl_StencilMask = internal global void (i32)* null
@odin_gl.impl_ColorMask = internal global void (i1, i1, i1, i1)* null
@odin_gl.impl_DepthMask = internal global void (i1)* null
@odin_gl.impl_Disable = internal global void (i32)* null
@odin_gl.impl_Enable = internal global void (i32)* null
@odin_gl.impl_Finish = internal global void ()* null
@odin_gl.impl_Flush = internal global void ()* null
@odin_gl.impl_BlendFunc = internal global void (i32, i32)* null
@odin_gl.impl_LogicOp = internal global void (i32)* null
@odin_gl.impl_StencilFunc = internal global void (i32, i32, i32)* null
@odin_gl.impl_StencilOp = internal global void (i32, i32, i32)* null
@odin_gl.impl_DepthFunc = internal global void (i32)* null
@odin_gl.impl_PixelStoref = internal global void (i32, float)* null
@odin_gl.impl_PixelStorei = internal global void (i32, i32)* null
@odin_gl.impl_ReadBuffer = internal global void (i32)* null
@odin_gl.impl_ReadPixels = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetBooleanv = internal global void (i32, i8*)* null
@odin_gl.impl_GetDoublev = internal global void (i32, double*)* null
@odin_gl.impl_GetError = internal global i32 ()* null
@odin_gl.impl_GetFloatv = internal global void (i32, float*)* null
@odin_gl.impl_GetIntegerv = internal global void (i32, i32*)* null
@odin_gl.impl_GetString = internal global i8* (i32)* null
@odin_gl.impl_GetTexImage = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetTexParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetTexParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTexLevelParameterfv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_GetTexLevelParameteriv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_IsEnabled = internal global i8 (i32)* null
@odin_gl.impl_DepthRange = internal global void (double, double)* null
@odin_gl.impl_Viewport = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_DrawArrays = internal global void (i32, i32, i32)* null
@odin_gl.impl_DrawElements = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_PolygonOffset = internal global void (float, float)* null
@odin_gl.impl_CopyTexImage1D = internal global void (i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CopyTexImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CopyTexSubImage1D = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CopyTexSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_TexSubImage1D = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TexSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_BindTexture = internal global void (i32, i32)* null
@odin_gl.impl_DeleteTextures = internal global void (i32, i32*)* null
@odin_gl.impl_GenTextures = internal global void (i32, i32*)* null
@odin_gl.impl_IsTexture = internal global i8 (i32)* null
@odin_gl.impl_DrawRangeElements = internal global void (i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TexImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TexSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CopyTexSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_ActiveTexture = internal global void (i32)* null
@odin_gl.impl_SampleCoverage = internal global void (float, i1)* null
@odin_gl.impl_CompressedTexImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTexImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTexImage1D = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTexSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTexSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTexSubImage1D = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetCompressedTexImage = internal global void (i32, i32, i8*)* null
@odin_gl.impl_BlendFuncSeparate = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_MultiDrawArrays = internal global void (i32, i32*, i32*, i32)* null
@odin_gl.impl_MultiDrawElements = internal global void (i32, i32*, i32, i8**, i32)* null
@odin_gl.impl_PointParameterf = internal global void (i32, float)* null
@odin_gl.impl_PointParameterfv = internal global void (i32, float*)* null
@odin_gl.impl_PointParameteri = internal global void (i32, i32)* null
@odin_gl.impl_PointParameteriv = internal global void (i32, i32*)* null
@odin_gl.impl_BlendColor = internal global void (float, float, float, float)* null
@odin_gl.impl_BlendEquation = internal global void (i32)* null
@odin_gl.impl_GenQueries = internal global void (i32, i32*)* null
@odin_gl.impl_DeleteQueries = internal global void (i32, i32*)* null
@odin_gl.impl_IsQuery = internal global i8 (i32)* null
@odin_gl.impl_BeginQuery = internal global void (i32, i32)* null
@odin_gl.impl_EndQuery = internal global void (i32)* null
@odin_gl.impl_GetQueryiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetQueryObjectiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetQueryObjectuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_BindBuffer = internal global void (i32, i32)* null
@odin_gl.impl_DeleteBuffers = internal global void (i32, i32*)* null
@odin_gl.impl_GenBuffers = internal global void (i32, i32*)* null
@odin_gl.impl_IsBuffer = internal global i8 (i32)* null
@odin_gl.impl_BufferData = internal global void (i32, i64, i8*, i32)* null
@odin_gl.impl_BufferSubData = internal global void (i32, i64, i64, i8*)* null
@odin_gl.impl_GetBufferSubData = internal global void (i32, i64, i64, i8*)* null
@odin_gl.impl_MapBuffer = internal global i8* (i32, i32)* null
@odin_gl.impl_UnmapBuffer = internal global i8 (i32)* null
@odin_gl.impl_GetBufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetBufferPointerv = internal global void (i32, i32, i8**)* null
@odin_gl.impl_BlendEquationSeparate = internal global void (i32, i32)* null
@odin_gl.impl_DrawBuffers = internal global void (i32, i32*)* null
@odin_gl.impl_StencilOpSeparate = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_StencilFuncSeparate = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_StencilMaskSeparate = internal global void (i32, i32)* null
@odin_gl.impl_AttachShader = internal global void (i32, i32)* null
@odin_gl.impl_BindAttribLocation = internal global void (i32, i32, i8*)* null
@odin_gl.impl_CompileShader = internal global void (i32)* null
@odin_gl.impl_CreateProgram = internal global i32 ()* null
@odin_gl.impl_CreateShader = internal global i32 (i32)* null
@odin_gl.impl_DeleteProgram = internal global void (i32)* null
@odin_gl.impl_DeleteShader = internal global void (i32)* null
@odin_gl.impl_DetachShader = internal global void (i32, i32)* null
@odin_gl.impl_DisableVertexAttribArray = internal global void (i32)* null
@odin_gl.impl_EnableVertexAttribArray = internal global void (i32)* null
@odin_gl.impl_GetActiveAttrib = internal global void (i32, i32, i32, i32*, i32*, i32*, i8*)* null
@odin_gl.impl_GetActiveUniform = internal global void (i32, i32, i32, i32*, i32*, i32*, i8*)* null
@odin_gl.impl_GetAttachedShaders = internal global void (i32, i32, i32*, i32*)* null
@odin_gl.impl_GetAttribLocation = internal global i32 (i32, i8*)* null
@odin_gl.impl_GetProgramiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetProgramInfoLog = internal global void (i32, i32, i32*, i8*)* null
@odin_gl.impl_GetShaderiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetShaderInfoLog = internal global void (i32, i32, i32*, i8*)* null
@odin_gl.impl_GetShaderSource = internal global void (i32, i32, i32*, i8*)* null
@odin_gl.impl_GetUniformLocation = internal global i32 (i32, i8*)* null
@odin_gl.impl_GetUniformfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetUniformiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetVertexAttribdv = internal global void (i32, i32, double*)* null
@odin_gl.impl_GetVertexAttribfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetVertexAttribiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetVertexAttribPointerv = internal global void (i32, i32, i64*)* null
@odin_gl.impl_IsProgram = internal global i8 (i32)* null
@odin_gl.impl_IsShader = internal global i8 (i32)* null
@odin_gl.impl_LinkProgram = internal global void (i32)* null
@odin_gl.impl_ShaderSource = internal global void (i32, i32, i8**, i32*)* null
@odin_gl.impl_UseProgram = internal global void (i32)* null
@odin_gl.impl_Uniform1f = internal global void (i32, float)* null
@odin_gl.impl_Uniform2f = internal global void (i32, float, float)* null
@odin_gl.impl_Uniform3f = internal global void (i32, float, float, float)* null
@odin_gl.impl_Uniform4f = internal global void (i32, float, float, float, float)* null
@odin_gl.impl_Uniform1i = internal global void (i32, i32)* null
@odin_gl.impl_Uniform2i = internal global void (i32, i32, i32)* null
@odin_gl.impl_Uniform3i = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_Uniform4i = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_Uniform1fv = internal global void (i32, i32, float*)* null
@odin_gl.impl_Uniform2fv = internal global void (i32, i32, float*)* null
@odin_gl.impl_Uniform3fv = internal global void (i32, i32, float*)* null
@odin_gl.impl_Uniform4fv = internal global void (i32, i32, float*)* null
@odin_gl.impl_Uniform1iv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform2iv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform3iv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform4iv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_UniformMatrix2fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix3fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix4fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_ValidateProgram = internal global void (i32)* null
@odin_gl.impl_VertexAttrib1d = internal global void (i32, double)* null
@odin_gl.impl_VertexAttrib1dv = internal global void (i32, double*)* null
@odin_gl.impl_VertexAttrib1f = internal global void (i32, float)* null
@odin_gl.impl_VertexAttrib1fv = internal global void (i32, float*)* null
@odin_gl.impl_VertexAttrib1s = internal global void (i32, i16)* null
@odin_gl.impl_VertexAttrib1sv = internal global void (i32, i16*)* null
@odin_gl.impl_VertexAttrib2d = internal global void (i32, double, double)* null
@odin_gl.impl_VertexAttrib2dv = internal global void (i32, [2 x double]*)* null
@odin_gl.impl_VertexAttrib2f = internal global void (i32, float, float)* null
@odin_gl.impl_VertexAttrib2fv = internal global void (i32, [2 x float]*)* null
@odin_gl.impl_VertexAttrib2s = internal global void (i32, i16, i16)* null
@odin_gl.impl_VertexAttrib2sv = internal global void (i32, [2 x i16]*)* null
@odin_gl.impl_VertexAttrib3d = internal global void (i32, double, double, double)* null
@odin_gl.impl_VertexAttrib3dv = internal global void (i32, [3 x double]*)* null
@odin_gl.impl_VertexAttrib3f = internal global void (i32, float, float, float)* null
@odin_gl.impl_VertexAttrib3fv = internal global void (i32, [3 x float]*)* null
@odin_gl.impl_VertexAttrib3s = internal global void (i32, i16, i16, i16)* null
@odin_gl.impl_VertexAttrib3sv = internal global void (i32, [3 x i16]*)* null
@odin_gl.impl_VertexAttrib4Nbv = internal global void (i32, [4 x i8]*)* null
@odin_gl.impl_VertexAttrib4Niv = internal global void (i32, [4 x i32]*)* null
@odin_gl.impl_VertexAttrib4Nsv = internal global void (i32, [4 x i16]*)* null
@odin_gl.impl_VertexAttrib4Nub = internal global void (i32, i8, i8, i8, i8)* null
@odin_gl.impl_VertexAttrib4Nubv = internal global void (i32, [4 x i8]*)* null
@odin_gl.impl_VertexAttrib4Nuiv = internal global void (i32, [4 x i32]*)* null
@odin_gl.impl_VertexAttrib4Nusv = internal global void (i32, [4 x i16]*)* null
@odin_gl.impl_VertexAttrib4bv = internal global void (i32, [4 x i8]*)* null
@odin_gl.impl_VertexAttrib4d = internal global void (i32, double, double, double, double)* null
@odin_gl.impl_VertexAttrib4dv = internal global void (i32, [4 x double]*)* null
@odin_gl.impl_VertexAttrib4f = internal global void (i32, float, float, float, float)* null
@odin_gl.impl_VertexAttrib4fv = internal global void (i32, [4 x float]*)* null
@odin_gl.impl_VertexAttrib4iv = internal global void (i32, [4 x i32]*)* null
@odin_gl.impl_VertexAttrib4s = internal global void (i32, i16, i16, i16, i16)* null
@odin_gl.impl_VertexAttrib4sv = internal global void (i32, [4 x i16]*)* null
@odin_gl.impl_VertexAttrib4ubv = internal global void (i32, [4 x i8]*)* null
@odin_gl.impl_VertexAttrib4uiv = internal global void (i32, [4 x i32]*)* null
@odin_gl.impl_VertexAttrib4usv = internal global void (i32, [4 x i16]*)* null
@odin_gl.impl_VertexAttribPointer = internal global void (i32, i32, i32, i1, i32, i64)* null
@odin_gl.impl_UniformMatrix2x3fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix3x2fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix2x4fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix4x2fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix3x4fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_UniformMatrix4x3fv = internal global void (i32, i32, i1, float*)* null
@odin_gl.impl_ColorMaski = internal global void (i32, i1, i1, i1, i1)* null
@odin_gl.impl_GetBooleani_v = internal global void (i32, i32, i8*)* null
@odin_gl.impl_GetIntegeri_v = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Enablei = internal global void (i32, i32)* null
@odin_gl.impl_Disablei = internal global void (i32, i32)* null
@odin_gl.impl_IsEnabledi = internal global i8 (i32, i32)* null
@odin_gl.impl_BeginTransformFeedback = internal global void (i32)* null
@odin_gl.impl_EndTransformFeedback = internal global void ()* null
@odin_gl.impl_BindBufferRange = internal global void (i32, i32, i32, i64, i64)* null
@odin_gl.impl_BindBufferBase = internal global void (i32, i32, i32)* null
@odin_gl.impl_TransformFeedbackVaryings = internal global void (i32, i32, i8**, i32)* null
@odin_gl.impl_GetTransformFeedbackVarying = internal global void (i32, i32, i32, i32*, i32*, i32*, i8*)* null
@odin_gl.impl_ClampColor = internal global void (i32, i32)* null
@odin_gl.impl_BeginConditionalRender = internal global void (i32, i32)* null
@odin_gl.impl_EndConditionalRender = internal global void ()* null
@odin_gl.impl_VertexAttribIPointer = internal global void (i32, i32, i32, i32, i64)* null
@odin_gl.impl_GetVertexAttribIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetVertexAttribIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_VertexAttribI1i = internal global void (i32, i32)* null
@odin_gl.impl_VertexAttribI2i = internal global void (i32, i32, i32)* null
@odin_gl.impl_VertexAttribI3i = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribI4i = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribI1ui = internal global void (i32, i32)* null
@odin_gl.impl_VertexAttribI2ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_VertexAttribI3ui = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribI4ui = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribI1iv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI2iv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI3iv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI4iv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI1uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI2uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI4uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexAttribI4bv = internal global void (i32, i8*)* null
@odin_gl.impl_VertexAttribI4sv = internal global void (i32, i16*)* null
@odin_gl.impl_VertexAttribI4ubv = internal global void (i32, i8*)* null
@odin_gl.impl_VertexAttribI4usv = internal global void (i32, i16*)* null
@odin_gl.impl_GetUniformuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_BindFragDataLocation = internal global void (i32, i32, i8*)* null
@odin_gl.impl_GetFragDataLocation = internal global i32 (i32, i8*)* null
@odin_gl.impl_Uniform1ui = internal global void (i32, i32)* null
@odin_gl.impl_Uniform2ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_Uniform3ui = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_Uniform4ui = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_Uniform1uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform2uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform3uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_Uniform4uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TexParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TexParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTexParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTexParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_ClearBufferiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_ClearBufferuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_ClearBufferfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_ClearBufferfi = internal global i8* (i32, i32, float, i32)* null
@odin_gl.impl_GetStringi = internal global i8* (i32, i32)* null
@odin_gl.impl_IsRenderbuffer = internal global i8 (i32)* null
@odin_gl.impl_BindRenderbuffer = internal global void (i32, i32)* null
@odin_gl.impl_DeleteRenderbuffers = internal global void (i32, i32*)* null
@odin_gl.impl_GenRenderbuffers = internal global void (i32, i32*)* null
@odin_gl.impl_RenderbufferStorage = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_GetRenderbufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_IsFramebuffer = internal global i8 (i32)* null
@odin_gl.impl_BindFramebuffer = internal global void (i32, i32)* null
@odin_gl.impl_DeleteFramebuffers = internal global void (i32, i32*)* null
@odin_gl.impl_GenFramebuffers = internal global void (i32, i32*)* null
@odin_gl.impl_CheckFramebufferStatus = internal global i32 (i32)* null
@odin_gl.impl_FramebufferTexture1D = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_FramebufferTexture2D = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_FramebufferTexture3D = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_FramebufferRenderbuffer = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_GetFramebufferAttachmentParameteriv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GenerateMipmap = internal global void (i32)* null
@odin_gl.impl_BlitFramebuffer = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_RenderbufferStorageMultisample = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_FramebufferTextureLayer = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_MapBufferRange = internal global i8* (i32, i64, i64, i32)* null
@odin_gl.impl_FlushMappedBufferRange = internal global void (i32, i64, i64)* null
@odin_gl.impl_BindVertexArray = internal global void (i32)* null
@odin_gl.impl_DeleteVertexArrays = internal global void (i32, i32*)* null
@odin_gl.impl_GenVertexArrays = internal global void (i32, i32*)* null
@odin_gl.impl_IsVertexArray = internal global i8 (i32)* null
@odin_gl.impl_DrawArraysInstanced = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_DrawElementsInstanced = internal global void (i32, i32, i32, i8*, i32)* null
@odin_gl.impl_TexBuffer = internal global void (i32, i32, i32)* null
@odin_gl.impl_PrimitiveRestartIndex = internal global void (i32)* null
@odin_gl.impl_CopyBufferSubData = internal global void (i32, i32, i64, i64, i64)* null
@odin_gl.impl_GetUniformIndices = internal global void (i32, i32, i8**, i32*)* null
@odin_gl.impl_GetActiveUniformsiv = internal global void (i32, i32, i32*, i32, i32*)* null
@odin_gl.impl_GetActiveUniformName = internal global void (i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_GetUniformBlockIndex = internal global i32 (i32, i8*)* null
@odin_gl.impl_GetActiveUniformBlockiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetActiveUniformBlockName = internal global void (i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_UniformBlockBinding = internal global void (i32, i32, i32)* null
@odin_gl.impl_DrawElementsBaseVertex = internal global void (i32, i32, i32, i8*, i32)* null
@odin_gl.impl_DrawRangeElementsBaseVertex = internal global void (i32, i32, i32, i32, i32, i8*, i32)* null
@odin_gl.impl_DrawElementsInstancedBaseVertex = internal global void (i32, i32, i32, i8*, i32, i32)* null
@odin_gl.impl_MultiDrawElementsBaseVertex = internal global void (i32, i32*, i32, i8**, i32, i32*)* null
@odin_gl.impl_ProvokingVertex = internal global void (i32)* null
@odin_gl.impl_FenceSync = internal global i8* (i32, i32)* null
@odin_gl.impl_IsSync = internal global i8 (i8*)* null
@odin_gl.impl_DeleteSync = internal global void (i8*)* null
@odin_gl.impl_ClientWaitSync = internal global i32 (i8*, i32, i64)* null
@odin_gl.impl_WaitSync = internal global void (i8*, i32, i64)* null
@odin_gl.impl_GetInteger64v = internal global void (i32, i64*)* null
@odin_gl.impl_GetSynciv = internal global void (i8*, i32, i32, i32*, i32*)* null
@odin_gl.impl_GetInteger64i_v = internal global void (i32, i32, i64*)* null
@odin_gl.impl_GetBufferParameteri64v = internal global void (i32, i32, i64*)* null
@odin_gl.impl_FramebufferTexture = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_TexImage2DMultisample = internal global void (i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_TexImage3DMultisample = internal global void (i32, i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_GetMultisamplefv = internal global void (i32, i32, float*)* null
@odin_gl.impl_SampleMaski = internal global void (i32, i32)* null
@odin_gl.impl_BindFragDataLocationIndexed = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_GetFragDataIndex = internal global i32 (i32, i8*)* null
@odin_gl.impl_GenSamplers = internal global void (i32, i32*)* null
@odin_gl.impl_DeleteSamplers = internal global void (i32, i32*)* null
@odin_gl.impl_IsSampler = internal global i8 (i32)* null
@odin_gl.impl_BindSampler = internal global void (i32, i32)* null
@odin_gl.impl_SamplerParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_SamplerParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_SamplerParameterf = internal global void (i32, i32, float)* null
@odin_gl.impl_SamplerParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_SamplerParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_SamplerParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetSamplerParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetSamplerParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetSamplerParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetSamplerParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_QueryCounter = internal global void (i32, i32)* null
@odin_gl.impl_GetQueryObjecti64v = internal global void (i32, i32, i64*)* null
@odin_gl.impl_GetQueryObjectui64v = internal global void (i32, i32, i64*)* null
@odin_gl.impl_VertexAttribDivisor = internal global void (i32, i32)* null
@odin_gl.impl_VertexAttribP1ui = internal global void (i32, i32, i1, i32)* null
@odin_gl.impl_VertexAttribP1uiv = internal global void (i32, i32, i1, i32*)* null
@odin_gl.impl_VertexAttribP2ui = internal global void (i32, i32, i1, i32)* null
@odin_gl.impl_VertexAttribP2uiv = internal global void (i32, i32, i1, i32*)* null
@odin_gl.impl_VertexAttribP3ui = internal global void (i32, i32, i1, i32)* null
@odin_gl.impl_VertexAttribP3uiv = internal global void (i32, i32, i1, i32*)* null
@odin_gl.impl_VertexAttribP4ui = internal global void (i32, i32, i1, i32)* null
@odin_gl.impl_VertexAttribP4uiv = internal global void (i32, i32, i1, i32*)* null
@odin_gl.impl_VertexP2ui = internal global void (i32, i32)* null
@odin_gl.impl_VertexP2uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexP3ui = internal global void (i32, i32)* null
@odin_gl.impl_VertexP3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_VertexP4ui = internal global void (i32, i32)* null
@odin_gl.impl_VertexP4uiv = internal global void (i32, i32*)* null
@odin_gl.impl_TexCoordP1ui = internal global void (i32, i32)* null
@odin_gl.impl_TexCoordP1uiv = internal global void (i32, i32*)* null
@odin_gl.impl_TexCoordP2ui = internal global void (i32, i32)* null
@odin_gl.impl_TexCoordP2uiv = internal global void (i32, i32*)* null
@odin_gl.impl_TexCoordP3ui = internal global void (i32, i32)* null
@odin_gl.impl_TexCoordP3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_TexCoordP4ui = internal global void (i32, i32)* null
@odin_gl.impl_TexCoordP4uiv = internal global void (i32, i32*)* null
@odin_gl.impl_MultiTexCoordP1ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_MultiTexCoordP1uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_MultiTexCoordP2ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_MultiTexCoordP2uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_MultiTexCoordP3ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_MultiTexCoordP3uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_MultiTexCoordP4ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_MultiTexCoordP4uiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_NormalP3ui = internal global void (i32, i32)* null
@odin_gl.impl_NormalP3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_ColorP3ui = internal global void (i32, i32)* null
@odin_gl.impl_ColorP3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_ColorP4ui = internal global void (i32, i32)* null
@odin_gl.impl_ColorP4uiv = internal global void (i32, i32*)* null
@odin_gl.impl_SecondaryColorP3ui = internal global void (i32, i32)* null
@odin_gl.impl_SecondaryColorP3uiv = internal global void (i32, i32*)* null
@odin_gl.impl_MinSampleShading = internal global void (float)* null
@odin_gl.impl_BlendEquationi = internal global void (i32, i32)* null
@odin_gl.impl_BlendEquationSeparatei = internal global void (i32, i32, i32)* null
@odin_gl.impl_BlendFunci = internal global void (i32, i32, i32)* null
@odin_gl.impl_BlendFuncSeparatei = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_DrawArraysIndirect = internal global void (i32, %odin_gl.DrawArraysIndirectCommand*)* null
@odin_gl.impl_DrawElementsIndirect = internal global void (i32, i32, %odin_gl.DrawElementsIndirectCommand*)* null
@odin_gl.impl_Uniform1d = internal global void (i32, double)* null
@odin_gl.impl_Uniform2d = internal global void (i32, double, double)* null
@odin_gl.impl_Uniform3d = internal global void (i32, double, double, double)* null
@odin_gl.impl_Uniform4d = internal global void (i32, double, double, double, double)* null
@odin_gl.impl_Uniform1dv = internal global void (i32, i32, double*)* null
@odin_gl.impl_Uniform2dv = internal global void (i32, i32, double*)* null
@odin_gl.impl_Uniform3dv = internal global void (i32, i32, double*)* null
@odin_gl.impl_Uniform4dv = internal global void (i32, i32, double*)* null
@odin_gl.impl_UniformMatrix2dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix3dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix4dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix2x3dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix2x4dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix3x2dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix3x4dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix4x2dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_UniformMatrix4x3dv = internal global void (i32, i32, i1, double*)* null
@odin_gl.impl_GetUniformdv = internal global void (i32, i32, double*)* null
@odin_gl.impl_GetSubroutineUniformLocation = internal global i32 (i32, i32, i8*)* null
@odin_gl.impl_GetSubroutineIndex = internal global i32 (i32, i32, i8*)* null
@odin_gl.impl_GetActiveSubroutineUniformiv = internal global void (i32, i32, i32, i32, i32*)* null
@odin_gl.impl_GetActiveSubroutineUniformName = internal global void (i32, i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_GetActiveSubroutineName = internal global void (i32, i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_UniformSubroutinesuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetUniformSubroutineuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetProgramStageiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_PatchParameteri = internal global void (i32, i32)* null
@odin_gl.impl_PatchParameterfv = internal global void (i32, float*)* null
@odin_gl.impl_BindTransformFeedback = internal global void (i32, i32)* null
@odin_gl.impl_DeleteTransformFeedbacks = internal global void (i32, i32*)* null
@odin_gl.impl_GenTransformFeedbacks = internal global void (i32, i32*)* null
@odin_gl.impl_IsTransformFeedback = internal global i8 (i32)* null
@odin_gl.impl_PauseTransformFeedback = internal global void ()* null
@odin_gl.impl_ResumeTransformFeedback = internal global void ()* null
@odin_gl.impl_DrawTransformFeedback = internal global void (i32, i32)* null
@odin_gl.impl_DrawTransformFeedbackStream = internal global void (i32, i32, i32)* null
@odin_gl.impl_BeginQueryIndexed = internal global void (i32, i32, i32)* null
@odin_gl.impl_EndQueryIndexed = internal global void (i32, i32)* null
@odin_gl.impl_GetQueryIndexediv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetTextureHandleARB = internal global i64 (i32)* null
@odin_gl.impl_GetTextureSamplerHandleARB = internal global i64 (i32, i32)* null
@odin_gl.impl_GetImageHandleARB = internal global i64 (i32, i32, i1, i32, i32)* null
@odin_gl.impl_MakeTextureHandleResidentARB = internal global void (i64)* null
@odin_gl.impl_MakeImageHandleResidentARB = internal global void (i64, i32)* null
@odin_gl.impl_MakeTextureHandleNonResidentARB = internal global void (i64)* null
@odin_gl.impl_MakeImageHandleNonResidentARB = internal global void (i64)* null
@odin_gl.impl_ReleaseShaderCompiler = internal global void ()* null
@odin_gl.impl_ShaderBinary = internal global void (i32, i32*, i32, i8*, i32)* null
@odin_gl.impl_GetShaderPrecisionFormat = internal global void (i32, i32, i32*, i32*)* null
@odin_gl.impl_DepthRangef = internal global void (float, float)* null
@odin_gl.impl_ClearDepthf = internal global void (float)* null
@odin_gl.impl_GetProgramBinary = internal global void (i32, i32, i32*, i32*, i8*)* null
@odin_gl.impl_ProgramBinary = internal global void (i32, i32, i8*, i32)* null
@odin_gl.impl_ProgramParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_UseProgramStages = internal global void (i32, i32, i32)* null
@odin_gl.impl_ActiveShaderProgram = internal global void (i32, i32)* null
@odin_gl.impl_CreateShaderProgramv = internal global i32 (i32, i32, i8**)* null
@odin_gl.impl_BindProgramPipeline = internal global void (i32)* null
@odin_gl.impl_DeleteProgramPipelines = internal global void (i32, i32*)* null
@odin_gl.impl_GenProgramPipelines = internal global void (i32, i32*)* null
@odin_gl.impl_IsProgramPipeline = internal global i8 (i32)* null
@odin_gl.impl_GetProgramPipelineiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform1i = internal global void (i32, i32, i32)* null
@odin_gl.impl_ProgramUniform1iv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform1f = internal global void (i32, i32, float)* null
@odin_gl.impl_ProgramUniform1fv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_ProgramUniform1d = internal global void (i32, i32, double)* null
@odin_gl.impl_ProgramUniform1dv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_ProgramUniform1ui = internal global void (i32, i32, i32)* null
@odin_gl.impl_ProgramUniform1uiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform2i = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform2iv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform2f = internal global void (i32, i32, float, float)* null
@odin_gl.impl_ProgramUniform2fv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_ProgramUniform2d = internal global void (i32, i32, double, double)* null
@odin_gl.impl_ProgramUniform2dv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_ProgramUniform2ui = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform2uiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform3i = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform3iv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform3f = internal global void (i32, i32, float, float, float)* null
@odin_gl.impl_ProgramUniform3fv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_ProgramUniform3d = internal global void (i32, i32, double, double, double)* null
@odin_gl.impl_ProgramUniform3dv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_ProgramUniform3ui = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform3uiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform4i = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform4iv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniform4f = internal global void (i32, i32, float, float, float, float)* null
@odin_gl.impl_ProgramUniform4fv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_ProgramUniform4d = internal global void (i32, i32, double, double, double, double)* null
@odin_gl.impl_ProgramUniform4dv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_ProgramUniform4ui = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_ProgramUniform4uiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ProgramUniformMatrix2fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix3fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix4fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix2dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix3dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix4dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix2x3fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix3x2fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix2x4fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix4x2fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix3x4fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix4x3fv = internal global void (i32, i32, i32, i1, float*)* null
@odin_gl.impl_ProgramUniformMatrix2x3dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix3x2dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix2x4dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix4x2dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix3x4dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ProgramUniformMatrix4x3dv = internal global void (i32, i32, i32, i1, double*)* null
@odin_gl.impl_ValidateProgramPipeline = internal global void (i32)* null
@odin_gl.impl_GetProgramPipelineInfoLog = internal global void (i32, i32, i32*, i8*)* null
@odin_gl.impl_VertexAttribL1d = internal global void (i32, double)* null
@odin_gl.impl_VertexAttribL2d = internal global void (i32, double, double)* null
@odin_gl.impl_VertexAttribL3d = internal global void (i32, double, double, double)* null
@odin_gl.impl_VertexAttribL4d = internal global void (i32, double, double, double, double)* null
@odin_gl.impl_VertexAttribL1dv = internal global void (i32, double*)* null
@odin_gl.impl_VertexAttribL2dv = internal global void (i32, [2 x double]*)* null
@odin_gl.impl_VertexAttribL3dv = internal global void (i32, [3 x double]*)* null
@odin_gl.impl_VertexAttribL4dv = internal global void (i32, [4 x double]*)* null
@odin_gl.impl_VertexAttribLPointer = internal global void (i32, i32, i32, i32, i64)* null
@odin_gl.impl_GetVertexAttribLdv = internal global void (i32, i32, double*)* null
@odin_gl.impl_ViewportArrayv = internal global void (i32, i32, float*)* null
@odin_gl.impl_ViewportIndexedf = internal global void (i32, float, float, float, float)* null
@odin_gl.impl_ViewportIndexedfv = internal global void (i32, [4 x float]*)* null
@odin_gl.impl_ScissorArrayv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_ScissorIndexed = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_ScissorIndexedv = internal global void (i32, [4 x i32]*)* null
@odin_gl.impl_DepthRangeArrayv = internal global void (i32, i32, double*)* null
@odin_gl.impl_DepthRangeIndexed = internal global void (i32, double, double)* null
@odin_gl.impl_GetFloati_v = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetDoublei_v = internal global void (i32, i32, double*)* null
@odin_gl.impl_DrawArraysInstancedBaseInstance = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_DrawElementsInstancedBaseInstance = internal global void (i32, i32, i32, i8*, i32, i32)* null
@odin_gl.impl_DrawElementsInstancedBaseVertexBaseInstance = internal global void (i32, i32, i32, i8*, i32, i32, i32)* null
@odin_gl.impl_GetInternalformativ = internal global void (i32, i32, i32, i32, i32*)* null
@odin_gl.impl_GetActiveAtomicCounterBufferiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_BindImageTexture = internal global void (i32, i32, i32, i1, i32, i32, i32)* null
@odin_gl.impl_MemoryBarrier = internal global void (i32)* null
@odin_gl.impl_TexStorage1D = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_TexStorage2D = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_TexStorage3D = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_DrawTransformFeedbackInstanced = internal global void (i32, i32, i32)* null
@odin_gl.impl_DrawTransformFeedbackStreamInstanced = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_ClearBufferData = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_ClearBufferSubData = internal global void (i32, i32, i64, i64, i32, i32, i8*)* null
@odin_gl.impl_DispatchCompute = internal global void (i32, i32, i32)* null
@odin_gl.impl_DispatchComputeIndirect = internal global void (%odin_gl.DispatchIndirectCommand*)* null
@odin_gl.impl_CopyImageSubData = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_FramebufferParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_GetFramebufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetInternalformati64v = internal global void (i32, i32, i32, i32, i64*)* null
@odin_gl.impl_InvalidateTexSubImage = internal global void (i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_InvalidateTexImage = internal global void (i32, i32)* null
@odin_gl.impl_InvalidateBufferSubData = internal global void (i32, i64, i64)* null
@odin_gl.impl_InvalidateBufferData = internal global void (i32)* null
@odin_gl.impl_InvalidateFramebuffer = internal global void (i32, i32, i32*)* null
@odin_gl.impl_InvalidateSubFramebuffer = internal global void (i32, i32, i32*, i32, i32, i32, i32)* null
@odin_gl.impl_MultiDrawArraysIndirect = internal global void (i32, %odin_gl.DrawArraysIndirectCommand*, i32, i32)* null
@odin_gl.impl_MultiDrawElementsIndirect = internal global void (i32, i32, %odin_gl.DrawElementsIndirectCommand*, i32, i32)* null
@odin_gl.impl_GetProgramInterfaceiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetProgramResourceIndex = internal global i32 (i32, i32, i8*)* null
@odin_gl.impl_GetProgramResourceName = internal global void (i32, i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_GetProgramResourceiv = internal global void (i32, i32, i32, i32, i32*, i32, i32*, i32*)* null
@odin_gl.impl_GetProgramResourceLocation = internal global i32 (i32, i32, i8*)* null
@odin_gl.impl_GetProgramResourceLocationIndex = internal global i32 (i32, i32, i8*)* null
@odin_gl.impl_ShaderStorageBlockBinding = internal global void (i32, i32, i32)* null
@odin_gl.impl_TexBufferRange = internal global void (i32, i32, i32, i64, i64)* null
@odin_gl.impl_TexStorage2DMultisample = internal global void (i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_TexStorage3DMultisample = internal global void (i32, i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_TextureView = internal global void (i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_BindVertexBuffer = internal global void (i32, i32, i64, i32)* null
@odin_gl.impl_VertexAttribFormat = internal global void (i32, i32, i32, i1, i32)* null
@odin_gl.impl_VertexAttribIFormat = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribLFormat = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_VertexAttribBinding = internal global void (i32, i32)* null
@odin_gl.impl_VertexBindingDivisor = internal global void (i32, i32)* null
@odin_gl.impl_DebugMessageControl = internal global void (i32, i32, i32, i32, i32*, i1)* null
@odin_gl.impl_DebugMessageInsert = internal global void (i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_DebugMessageCallback = internal global void (i8*, i8*)* null
@odin_gl.impl_GetDebugMessageLog = internal global i32 (i32, i32, i32*, i32*, i32*, i32*, i32*, i8*)* null
@odin_gl.impl_PushDebugGroup = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_PopDebugGroup = internal global void ()* null
@odin_gl.impl_ObjectLabel = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_GetObjectLabel = internal global void (i32, i32, i32, i32*, i8*)* null
@odin_gl.impl_ObjectPtrLabel = internal global void (i8*, i32, i8*)* null
@odin_gl.impl_GetObjectPtrLabel = internal global void (i8*, i32, i32*, i8*)* null
@odin_gl.impl_BufferStorage = internal global void (i32, i64, i8*, i32)* null
@odin_gl.impl_ClearTexImage = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_ClearTexSubImage = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_BindBuffersBase = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_BindBuffersRange = internal global void (i32, i32, i32, i32*, i64*, i64*)* null
@odin_gl.impl_BindTextures = internal global void (i32, i32, i32*)* null
@odin_gl.impl_BindSamplers = internal global void (i32, i32, i32*)* null
@odin_gl.impl_BindImageTextures = internal global void (i32, i32, i32*)* null
@odin_gl.impl_BindVertexBuffers = internal global void (i32, i32, i32*, i64*, i32*)* null
@odin_gl.impl_ClipControl = internal global void (i32, i32)* null
@odin_gl.impl_CreateTransformFeedbacks = internal global void (i32, i32*)* null
@odin_gl.impl_TransformFeedbackBufferBase = internal global void (i32, i32, i32)* null
@odin_gl.impl_TransformFeedbackBufferRange = internal global void (i32, i32, i32, i64, i64)* null
@odin_gl.impl_GetTransformFeedbackiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTransformFeedbacki_v = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetTransformFeedbacki64_v = internal global void (i32, i32, i32, i64*)* null
@odin_gl.impl_CreateBuffers = internal global void (i32, i32*)* null
@odin_gl.impl_NamedBufferStorage = internal global void (i32, i64, i8*, i32)* null
@odin_gl.impl_NamedBufferData = internal global void (i32, i64, i8*, i32)* null
@odin_gl.impl_NamedBufferSubData = internal global void (i32, i64, i64, i8*)* null
@odin_gl.impl_CopyNamedBufferSubData = internal global void (i32, i32, i64, i64, i64)* null
@odin_gl.impl_ClearNamedBufferData = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_ClearNamedBufferSubData = internal global void (i32, i32, i64, i64, i32, i32, i8*)* null
@odin_gl.impl_MapNamedBuffer = internal global i8* (i32, i32)* null
@odin_gl.impl_MapNamedBufferRange = internal global i8* (i32, i64, i64, i32)* null
@odin_gl.impl_UnmapNamedBuffer = internal global i8 (i32)* null
@odin_gl.impl_FlushMappedNamedBufferRange = internal global void (i32, i64, i64)* null
@odin_gl.impl_GetNamedBufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetNamedBufferParameteri64v = internal global void (i32, i32, i64*)* null
@odin_gl.impl_GetNamedBufferPointerv = internal global void (i32, i32, i8**)* null
@odin_gl.impl_GetNamedBufferSubData = internal global void (i32, i64, i64, i8*)* null
@odin_gl.impl_CreateFramebuffers = internal global void (i32, i32*)* null
@odin_gl.impl_NamedFramebufferRenderbuffer = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_NamedFramebufferParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_NamedFramebufferTexture = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_NamedFramebufferTextureLayer = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_NamedFramebufferDrawBuffer = internal global void (i32, i32)* null
@odin_gl.impl_NamedFramebufferDrawBuffers = internal global void (i32, i32, i32*)* null
@odin_gl.impl_NamedFramebufferReadBuffer = internal global void (i32, i32)* null
@odin_gl.impl_InvalidateNamedFramebufferData = internal global void (i32, i32, i32*)* null
@odin_gl.impl_InvalidateNamedFramebufferSubData = internal global void (i32, i32, i32*, i32, i32, i32, i32)* null
@odin_gl.impl_ClearNamedFramebufferiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ClearNamedFramebufferuiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ClearNamedFramebufferfv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_ClearNamedFramebufferfi = internal global void (i32, i32, i32, float, i32)* null
@odin_gl.impl_BlitNamedFramebuffer = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CheckNamedFramebufferStatus = internal global i32 (i32, i32)* null
@odin_gl.impl_GetNamedFramebufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetNamedFramebufferAttachmentParameteriv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_CreateRenderbuffers = internal global void (i32, i32*)* null
@odin_gl.impl_NamedRenderbufferStorage = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_NamedRenderbufferStorageMultisample = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_GetNamedRenderbufferParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_CreateTextures = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TextureBuffer = internal global void (i32, i32, i32)* null
@odin_gl.impl_TextureBufferRange = internal global void (i32, i32, i32, i64, i64)* null
@odin_gl.impl_TextureStorage1D = internal global void (i32, i32, i32, i32)* null
@odin_gl.impl_TextureStorage2D = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_TextureStorage3D = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_TextureStorage2DMultisample = internal global void (i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_TextureStorage3DMultisample = internal global void (i32, i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_TextureSubImage1D = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TextureSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_TextureSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTextureSubImage1D = internal global void (i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTextureSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CompressedTextureSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_CopyTextureSubImage1D = internal global void (i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CopyTextureSubImage2D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_CopyTextureSubImage3D = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32)* null
@odin_gl.impl_TextureParameterf = internal global void (i32, i32, float)* null
@odin_gl.impl_TextureParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_TextureParameteri = internal global void (i32, i32, i32)* null
@odin_gl.impl_TextureParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TextureParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_TextureParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GenerateTextureMipmap = internal global void (i32)* null
@odin_gl.impl_BindTextureUnit = internal global void (i32, i32)* null
@odin_gl.impl_GetTextureImage = internal global void (i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetCompressedTextureImage = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_GetTextureLevelParameterfv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_GetTextureLevelParameteriv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetTextureParameterfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetTextureParameterIiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTextureParameterIuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetTextureParameteriv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_CreateVertexArrays = internal global void (i32, i32*)* null
@odin_gl.impl_DisableVertexArrayAttrib = internal global void (i32, i32)* null
@odin_gl.impl_EnableVertexArrayAttrib = internal global void (i32, i32)* null
@odin_gl.impl_VertexArrayElementBuffer = internal global void (i32, i32)* null
@odin_gl.impl_VertexArrayVertexBuffer = internal global void (i32, i32, i32, i64, i32)* null
@odin_gl.impl_VertexArrayVertexBuffers = internal global void (i32, i32, i32, i32*, i64*, i32*)* null
@odin_gl.impl_VertexArrayAttribBinding = internal global void (i32, i32, i32)* null
@odin_gl.impl_VertexArrayAttribFormat = internal global void (i32, i32, i32, i32, i1, i32)* null
@odin_gl.impl_VertexArrayAttribIFormat = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_VertexArrayAttribLFormat = internal global void (i32, i32, i32, i32, i32)* null
@odin_gl.impl_VertexArrayBindingDivisor = internal global void (i32, i32, i32)* null
@odin_gl.impl_GetVertexArrayiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetVertexArrayIndexediv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetVertexArrayIndexed64iv = internal global void (i32, i32, i32, i64*)* null
@odin_gl.impl_CreateSamplers = internal global void (i32, i32*)* null
@odin_gl.impl_CreateProgramPipelines = internal global void (i32, i32*)* null
@odin_gl.impl_CreateQueries = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetQueryBufferObjecti64v = internal global void (i32, i32, i32, i64)* null
@odin_gl.impl_GetQueryBufferObjectiv = internal global void (i32, i32, i32, i64)* null
@odin_gl.impl_GetQueryBufferObjectui64v = internal global void (i32, i32, i32, i64)* null
@odin_gl.impl_GetQueryBufferObjectuiv = internal global void (i32, i32, i32, i64)* null
@odin_gl.impl_MemoryBarrierByRegion = internal global void (i32)* null
@odin_gl.impl_GetTextureSubImage = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetCompressedTextureSubImage = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetGraphicsResetStatus = internal global i32 ()* null
@odin_gl.impl_GetnCompressedTexImage = internal global void (i32, i32, i32, i8*)* null
@odin_gl.impl_GetnTexImage = internal global void (i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetnUniformdv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_GetnUniformfv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_GetnUniformiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetnUniformuiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_ReadnPixels = internal global void (i32, i32, i32, i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetnMapdv = internal global void (i32, i32, i32, double*)* null
@odin_gl.impl_GetnMapfv = internal global void (i32, i32, i32, float*)* null
@odin_gl.impl_GetnMapiv = internal global void (i32, i32, i32, i32*)* null
@odin_gl.impl_GetnPixelMapusv = internal global void (i32, i32, i16*)* null
@odin_gl.impl_GetnPixelMapfv = internal global void (i32, i32, float*)* null
@odin_gl.impl_GetnPixelMapuiv = internal global void (i32, i32, i32*)* null
@odin_gl.impl_GetnPolygonStipple = internal global void (i32, i8*)* null
@odin_gl.impl_GetnColorTable = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetnConvolutionFilter = internal global void (i32, i32, i32, i32, i8*)* null
@odin_gl.impl_GetnSeparableFilter = internal global void (i32, i32, i32, i32, i8*, i32, i8*, i8*)* null
@odin_gl.impl_GetnHistogram = internal global void (i32, i1, i32, i32, i32, i8*)* null
@odin_gl.impl_GetnMinmax = internal global void (i32, i1, i32, i32, i32, i8*)* null
@odin_gl.impl_TextureBarrier = internal global void ()* null
@odin_gl.impl_GetUnsignedBytevEXT = internal global void (i32, i8*)* null
@odin_gl.impl_TexPageCommitmentARB = internal global void (i32, i32, i32, i32, i32, i32, i32, i32, i1)* null
@odin_gl.impl_SpecializeShader = internal global void (i32, i8*, i32, i32*, i32*)* null
@odin_gl.impl_MultiDrawArraysIndirectCount = internal global void (i32, %odin_gl.DrawArraysIndirectCommand*, i32, i32, i32)* null
@odin_gl.impl_MultiDrawElementsIndirectCount = internal global void (i32, i32, %odin_gl.DrawElementsIndirectCommand*, i32, i32, i32)* null
@odin_gl.impl_PolygonOffsetClamp = internal global void (float, float, float)* null
@io.DIGITS_LOWER-6728 = internal global %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$0", i64 0, i64 0), i64 17 }
@time.days_before = internal global [13 x i32] [i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334, i32 365]
@strconv._f16_info = internal global %strconv.Float_Info { i64 10, i64 5, i64 -15 }
@strconv._f32_info = internal global %strconv.Float_Info { i64 23, i64 8, i64 -127 }
@strconv._f64_info = internal global %strconv.Float_Info { i64 52, i64 11, i64 -1023 }
@strconv.digits = internal global %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$7", i64 0, i64 0), i64 36 }
@"csbs$7" = private unnamed_addr constant [37 x i8] c"0123456789abcdefghijklmnopqrstuvwxyz\00", align 1
@utf8.accept_ranges = internal global [5 x %utf8.Accept_Range] [%utf8.Accept_Range { i8 -128, i8 -65 }, %utf8.Accept_Range { i8 -96, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -97 }, %utf8.Accept_Range { i8 -112, i8 -65 }, %utf8.Accept_Range { i8 -128, i8 -113 }]
@utf8.accept_sizes = internal global [256 x i8] c
@fmt._user_formatters = internal global { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* null
@os.stdout = internal global i64 0
@os.stderr = internal global i64 0
@strings._builder_stream_vtable-1334 = internal global %io.Stream_VTable* @"ggv$47"
@os._file_stream_vtable-1006 = internal global %io.Stream_VTable* @"ggv$49"
@"csbs$8" = private unnamed_addr constant [5 x i8] c"sdl2\00", align 1
@"csbs$9" = private unnamed_addr constant [77 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/vendor/sdl2/sdl_scancode.odin\00", align 1
@"csbs$a" = private unnamed_addr constant [9 x i8] c"Scancode\00", align 1
@"ggv$0" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$a", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$9", i64 0, i64 0), i64 76 }, i32 5, i32 1, %..string zeroinitializer } }
@"$enum_names-158" = private unnamed_addr global [244 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$b", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$10", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$11", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$12", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$13", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$14", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$15", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$16", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$17", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$18", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$19", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1a", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1b", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$20", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$21", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$22", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$23", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$26", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$27", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$28", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$29", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2b", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2c", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2d", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$30", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$31", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$32", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$33", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$34", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$35", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$36", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$37", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$38", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$39", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$3a", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$3b", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$3c", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$3d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$3e", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$3f", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$40", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$41", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$42", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$43", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$44", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$45", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$46", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$47", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$48", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$49", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$4a", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4b", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4c", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4d", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$4e", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$4f", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$50", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$51", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$52", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$53", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$54", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$55", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$56", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$57", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$58", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$59", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$5a", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$5b", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$5c", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$5d", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$5e", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$5f", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$60", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$61", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$62", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$63", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$64", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$65", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$66", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$67", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$68", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$69", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$6a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$6b", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$6c", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$6d", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$6e", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$6f", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$70", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$71", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$72", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$73", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$74", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$75", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$76", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$77", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$78", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$79", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$7a", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$7b", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$7c", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$7d", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$7e", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$7f", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$80", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$81", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$82", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$83", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$84", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$85", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$86", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$87", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$88", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$89", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$8a", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$8b", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$8c", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$8d", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$8e", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$8f", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$90", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$91", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$92", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$93", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$94", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$95", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$96", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$97", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$98", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$99", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$9a", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$9b", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$9c", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$9d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$9e", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$9f", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$a0", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a1", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a2", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$a3", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$a4", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$a5", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$a6", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$a7", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$a9", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$aa", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$ab", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$ac", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$ad", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$ae", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$af", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$b0", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$b1", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$b2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$b3", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$b4", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$b5", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$b6", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$b7", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$b8", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$b9", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$ba", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$bb", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$bc", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$bd", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$be", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$bf", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$c0", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$c1", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$c2", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$c3", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$c4", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$c5", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$c6", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$c7", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$c8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$c9", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$ca", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$cb", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$cc", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$cd", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$ce", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$cf", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$d0", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$d1", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$d2", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$d3", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$d4", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$d5", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$d6", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$d7", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$d8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$d9", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$da", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$db", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$dc", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$dd", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$de", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$df", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$e0", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e1", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e2", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e3", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e4", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$e5", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$e6", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$e7", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$e8", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$e9", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$ea", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$eb", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$ec", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$ed", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$ee", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$ef", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$f0", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$f1", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$f2", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$f3", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$f4", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$f5", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$f6", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$f7", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$f8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$f9", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$fa", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$fb", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$fc", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$fd", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$fe", i64 0, i64 0), i64 13 }]
@"$enum_values-158" = private unnamed_addr global [244 x i64] [i64 0, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22, i64 23, i64 24, i64 25, i64 26, i64 27, i64 28, i64 29, i64 30, i64 31, i64 32, i64 33, i64 34, i64 35, i64 36, i64 37, i64 38, i64 39, i64 40, i64 41, i64 42, i64 43, i64 44, i64 45, i64 46, i64 47, i64 48, i64 49, i64 50, i64 51, i64 52, i64 53, i64 54, i64 55, i64 56, i64 57, i64 58, i64 59, i64 60, i64 61, i64 62, i64 63, i64 64, i64 65, i64 66, i64 67, i64 68, i64 69, i64 70, i64 71, i64 72, i64 73, i64 74, i64 75, i64 76, i64 77, i64 78, i64 79, i64 80, i64 81, i64 82, i64 83, i64 84, i64 85, i64 86, i64 87, i64 88, i64 89, i64 90, i64 91, i64 92, i64 93, i64 94, i64 95, i64 96, i64 97, i64 98, i64 99, i64 100, i64 101, i64 102, i64 103, i64 104, i64 105, i64 106, i64 107, i64 108, i64 109, i64 110, i64 111, i64 112, i64 113, i64 114, i64 115, i64 116, i64 117, i64 118, i64 119, i64 120, i64 121, i64 122, i64 123, i64 124, i64 125, i64 126, i64 127, i64 128, i64 129, i64 133, i64 134, i64 135, i64 136, i64 137, i64 138, i64 139, i64 140, i64 141, i64 142, i64 143, i64 144, i64 145, i64 146, i64 147, i64 148, i64 149, i64 150, i64 151, i64 152, i64 153, i64 154, i64 155, i64 156, i64 157, i64 158, i64 159, i64 160, i64 161, i64 162, i64 163, i64 164, i64 176, i64 177, i64 178, i64 179, i64 180, i64 181, i64 182, i64 183, i64 184, i64 185, i64 186, i64 187, i64 188, i64 189, i64 190, i64 191, i64 192, i64 193, i64 194, i64 195, i64 196, i64 197, i64 198, i64 199, i64 200, i64 201, i64 202, i64 203, i64 204, i64 205, i64 206, i64 207, i64 208, i64 209, i64 210, i64 211, i64 212, i64 213, i64 214, i64 215, i64 216, i64 217, i64 218, i64 219, i64 220, i64 221, i64 224, i64 225, i64 226, i64 227, i64 228, i64 229, i64 230, i64 231, i64 257, i64 258, i64 259, i64 260, i64 261, i64 262, i64 263, i64 264, i64 265, i64 266, i64 267, i64 268, i64 269, i64 270, i64 271, i64 272, i64 273, i64 274, i64 275, i64 276, i64 277, i64 278, i64 279, i64 280, i64 281, i64 282, i64 283, i64 284, i64 285, i64 286, i64 512]
@"csbs$b" = private unnamed_addr constant [8 x i8] c"UNKNOWN\00", align 1
@"csbs$c" = private unnamed_addr constant [2 x i8] c"A\00", align 1
@"csbs$d" = private unnamed_addr constant [2 x i8] c"B\00", align 1
@"csbs$e" = private unnamed_addr constant [2 x i8] c"C\00", align 1
@"csbs$f" = private unnamed_addr constant [2 x i8] c"D\00", align 1
@"csbs$10" = private unnamed_addr constant [2 x i8] c"E\00", align 1
@"csbs$11" = private unnamed_addr constant [2 x i8] c"F\00", align 1
@"csbs$12" = private unnamed_addr constant [2 x i8] c"G\00", align 1
@"csbs$13" = private unnamed_addr constant [2 x i8] c"H\00", align 1
@"csbs$14" = private unnamed_addr constant [2 x i8] c"I\00", align 1
@"csbs$15" = private unnamed_addr constant [2 x i8] c"J\00", align 1
@"csbs$16" = private unnamed_addr constant [2 x i8] c"K\00", align 1
@"csbs$17" = private unnamed_addr constant [2 x i8] c"L\00", align 1
@"csbs$18" = private unnamed_addr constant [2 x i8] c"M\00", align 1
@"csbs$19" = private unnamed_addr constant [2 x i8] c"N\00", align 1
@"csbs$1a" = private unnamed_addr constant [2 x i8] c"O\00", align 1
@"csbs$1b" = private unnamed_addr constant [2 x i8] c"P\00", align 1
@"csbs$1c" = private unnamed_addr constant [2 x i8] c"Q\00", align 1
@"csbs$1d" = private unnamed_addr constant [2 x i8] c"R\00", align 1
@"csbs$1e" = private unnamed_addr constant [2 x i8] c"S\00", align 1
@"csbs$1f" = private unnamed_addr constant [2 x i8] c"T\00", align 1
@"csbs$20" = private unnamed_addr constant [2 x i8] c"U\00", align 1
@"csbs$21" = private unnamed_addr constant [2 x i8] c"V\00", align 1
@"csbs$22" = private unnamed_addr constant [2 x i8] c"W\00", align 1
@"csbs$23" = private unnamed_addr constant [2 x i8] c"X\00", align 1
@"csbs$24" = private unnamed_addr constant [2 x i8] c"Y\00", align 1
@"csbs$25" = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@"csbs$26" = private unnamed_addr constant [5 x i8] c"NUM1\00", align 1
@"csbs$27" = private unnamed_addr constant [5 x i8] c"NUM2\00", align 1
@"csbs$28" = private unnamed_addr constant [5 x i8] c"NUM3\00", align 1
@"csbs$29" = private unnamed_addr constant [5 x i8] c"NUM4\00", align 1
@"csbs$2a" = private unnamed_addr constant [5 x i8] c"NUM5\00", align 1
@"csbs$2b" = private unnamed_addr constant [5 x i8] c"NUM6\00", align 1
@"csbs$2c" = private unnamed_addr constant [5 x i8] c"NUM7\00", align 1
@"csbs$2d" = private unnamed_addr constant [5 x i8] c"NUM8\00", align 1
@"csbs$2e" = private unnamed_addr constant [5 x i8] c"NUM9\00", align 1
@"csbs$2f" = private unnamed_addr constant [5 x i8] c"NUM0\00", align 1
@"csbs$30" = private unnamed_addr constant [7 x i8] c"RETURN\00", align 1
@"csbs$31" = private unnamed_addr constant [7 x i8] c"ESCAPE\00", align 1
@"csbs$32" = private unnamed_addr constant [10 x i8] c"BACKSPACE\00", align 1
@"csbs$33" = private unnamed_addr constant [4 x i8] c"TAB\00", align 1
@"csbs$34" = private unnamed_addr constant [6 x i8] c"SPACE\00", align 1
@"csbs$35" = private unnamed_addr constant [6 x i8] c"MINUS\00", align 1
@"csbs$36" = private unnamed_addr constant [7 x i8] c"EQUALS\00", align 1
@"csbs$37" = private unnamed_addr constant [12 x i8] c"LEFTBRACKET\00", align 1
@"csbs$38" = private unnamed_addr constant [13 x i8] c"RIGHTBRACKET\00", align 1
@"csbs$39" = private unnamed_addr constant [10 x i8] c"BACKSLASH\00", align 1
@"csbs$3a" = private unnamed_addr constant [10 x i8] c"NONUSHASH\00", align 1
@"csbs$3b" = private unnamed_addr constant [10 x i8] c"SEMICOLON\00", align 1
@"csbs$3c" = private unnamed_addr constant [11 x i8] c"APOSTROPHE\00", align 1
@"csbs$3d" = private unnamed_addr constant [6 x i8] c"GRAVE\00", align 1
@"csbs$3e" = private unnamed_addr constant [6 x i8] c"COMMA\00", align 1
@"csbs$3f" = private unnamed_addr constant [7 x i8] c"PERIOD\00", align 1
@"csbs$40" = private unnamed_addr constant [6 x i8] c"SLASH\00", align 1
@"csbs$41" = private unnamed_addr constant [9 x i8] c"CAPSLOCK\00", align 1
@"csbs$42" = private unnamed_addr constant [3 x i8] c"F1\00", align 1
@"csbs$43" = private unnamed_addr constant [3 x i8] c"F2\00", align 1
@"csbs$44" = private unnamed_addr constant [3 x i8] c"F3\00", align 1
@"csbs$45" = private unnamed_addr constant [3 x i8] c"F4\00", align 1
@"csbs$46" = private unnamed_addr constant [3 x i8] c"F5\00", align 1
@"csbs$47" = private unnamed_addr constant [3 x i8] c"F6\00", align 1
@"csbs$48" = private unnamed_addr constant [3 x i8] c"F7\00", align 1
@"csbs$49" = private unnamed_addr constant [3 x i8] c"F8\00", align 1
@"csbs$4a" = private unnamed_addr constant [3 x i8] c"F9\00", align 1
@"csbs$4b" = private unnamed_addr constant [4 x i8] c"F10\00", align 1
@"csbs$4c" = private unnamed_addr constant [4 x i8] c"F11\00", align 1
@"csbs$4d" = private unnamed_addr constant [4 x i8] c"F12\00", align 1
@"csbs$4e" = private unnamed_addr constant [12 x i8] c"PRINTSCREEN\00", align 1
@"csbs$4f" = private unnamed_addr constant [11 x i8] c"SCROLLLOCK\00", align 1
@"csbs$50" = private unnamed_addr constant [6 x i8] c"PAUSE\00", align 1
@"csbs$51" = private unnamed_addr constant [7 x i8] c"INSERT\00", align 1
@"csbs$52" = private unnamed_addr constant [5 x i8] c"HOME\00", align 1
@"csbs$53" = private unnamed_addr constant [7 x i8] c"PAGEUP\00", align 1
@"csbs$54" = private unnamed_addr constant [7 x i8] c"DELETE\00", align 1
@"csbs$55" = private unnamed_addr constant [4 x i8] c"END\00", align 1
@"csbs$56" = private unnamed_addr constant [9 x i8] c"PAGEDOWN\00", align 1
@"csbs$57" = private unnamed_addr constant [6 x i8] c"RIGHT\00", align 1
@"csbs$58" = private unnamed_addr constant [5 x i8] c"LEFT\00", align 1
@"csbs$59" = private unnamed_addr constant [5 x i8] c"DOWN\00", align 1
@"csbs$5a" = private unnamed_addr constant [3 x i8] c"UP\00", align 1
@"csbs$5b" = private unnamed_addr constant [13 x i8] c"NUMLOCKCLEAR\00", align 1
@"csbs$5c" = private unnamed_addr constant [10 x i8] c"KP_DIVIDE\00", align 1
@"csbs$5d" = private unnamed_addr constant [12 x i8] c"KP_MULTIPLY\00", align 1
@"csbs$5e" = private unnamed_addr constant [9 x i8] c"KP_MINUS\00", align 1
@"csbs$5f" = private unnamed_addr constant [8 x i8] c"KP_PLUS\00", align 1
@"csbs$60" = private unnamed_addr constant [9 x i8] c"KP_ENTER\00", align 1
@"csbs$61" = private unnamed_addr constant [5 x i8] c"KP_1\00", align 1
@"csbs$62" = private unnamed_addr constant [5 x i8] c"KP_2\00", align 1
@"csbs$63" = private unnamed_addr constant [5 x i8] c"KP_3\00", align 1
@"csbs$64" = private unnamed_addr constant [5 x i8] c"KP_4\00", align 1
@"csbs$65" = private unnamed_addr constant [5 x i8] c"KP_5\00", align 1
@"csbs$66" = private unnamed_addr constant [5 x i8] c"KP_6\00", align 1
@"csbs$67" = private unnamed_addr constant [5 x i8] c"KP_7\00", align 1
@"csbs$68" = private unnamed_addr constant [5 x i8] c"KP_8\00", align 1
@"csbs$69" = private unnamed_addr constant [5 x i8] c"KP_9\00", align 1
@"csbs$6a" = private unnamed_addr constant [5 x i8] c"KP_0\00", align 1
@"csbs$6b" = private unnamed_addr constant [10 x i8] c"KP_PERIOD\00", align 1
@"csbs$6c" = private unnamed_addr constant [15 x i8] c"NONUSBACKSLASH\00", align 1
@"csbs$6d" = private unnamed_addr constant [12 x i8] c"APPLICATION\00", align 1
@"csbs$6e" = private unnamed_addr constant [6 x i8] c"POWER\00", align 1
@"csbs$6f" = private unnamed_addr constant [10 x i8] c"KP_EQUALS\00", align 1
@"csbs$70" = private unnamed_addr constant [4 x i8] c"F13\00", align 1
@"csbs$71" = private unnamed_addr constant [4 x i8] c"F14\00", align 1
@"csbs$72" = private unnamed_addr constant [4 x i8] c"F15\00", align 1
@"csbs$73" = private unnamed_addr constant [4 x i8] c"F16\00", align 1
@"csbs$74" = private unnamed_addr constant [4 x i8] c"F17\00", align 1
@"csbs$75" = private unnamed_addr constant [4 x i8] c"F18\00", align 1
@"csbs$76" = private unnamed_addr constant [4 x i8] c"F19\00", align 1
@"csbs$77" = private unnamed_addr constant [4 x i8] c"F20\00", align 1
@"csbs$78" = private unnamed_addr constant [4 x i8] c"F21\00", align 1
@"csbs$79" = private unnamed_addr constant [4 x i8] c"F22\00", align 1
@"csbs$7a" = private unnamed_addr constant [4 x i8] c"F23\00", align 1
@"csbs$7b" = private unnamed_addr constant [4 x i8] c"F24\00", align 1
@"csbs$7c" = private unnamed_addr constant [8 x i8] c"EXECUTE\00", align 1
@"csbs$7d" = private unnamed_addr constant [5 x i8] c"HELP\00", align 1
@"csbs$7e" = private unnamed_addr constant [5 x i8] c"MENU\00", align 1
@"csbs$7f" = private unnamed_addr constant [7 x i8] c"SELECT\00", align 1
@"csbs$80" = private unnamed_addr constant [5 x i8] c"STOP\00", align 1
@"csbs$81" = private unnamed_addr constant [6 x i8] c"AGAIN\00", align 1
@"csbs$82" = private unnamed_addr constant [5 x i8] c"UNDO\00", align 1
@"csbs$83" = private unnamed_addr constant [4 x i8] c"CUT\00", align 1
@"csbs$84" = private unnamed_addr constant [5 x i8] c"COPY\00", align 1
@"csbs$85" = private unnamed_addr constant [6 x i8] c"PASTE\00", align 1
@"csbs$86" = private unnamed_addr constant [5 x i8] c"FIND\00", align 1
@"csbs$87" = private unnamed_addr constant [5 x i8] c"MUTE\00", align 1
@"csbs$88" = private unnamed_addr constant [9 x i8] c"VOLUMEUP\00", align 1
@"csbs$89" = private unnamed_addr constant [11 x i8] c"VOLUMEDOWN\00", align 1
@"csbs$8a" = private unnamed_addr constant [9 x i8] c"KP_COMMA\00", align 1
@"csbs$8b" = private unnamed_addr constant [15 x i8] c"KP_EQUALSAS400\00", align 1
@"csbs$8c" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL1\00", align 1
@"csbs$8d" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL2\00", align 1
@"csbs$8e" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL3\00", align 1
@"csbs$8f" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL4\00", align 1
@"csbs$90" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL5\00", align 1
@"csbs$91" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL6\00", align 1
@"csbs$92" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL7\00", align 1
@"csbs$93" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL8\00", align 1
@"csbs$94" = private unnamed_addr constant [15 x i8] c"INTERNATIONAL9\00", align 1
@"csbs$95" = private unnamed_addr constant [6 x i8] c"LANG1\00", align 1
@"csbs$96" = private unnamed_addr constant [6 x i8] c"LANG2\00", align 1
@"csbs$97" = private unnamed_addr constant [6 x i8] c"LANG3\00", align 1
@"csbs$98" = private unnamed_addr constant [6 x i8] c"LANG4\00", align 1
@"csbs$99" = private unnamed_addr constant [6 x i8] c"LANG5\00", align 1
@"csbs$9a" = private unnamed_addr constant [6 x i8] c"LANG6\00", align 1
@"csbs$9b" = private unnamed_addr constant [6 x i8] c"LANG7\00", align 1
@"csbs$9c" = private unnamed_addr constant [6 x i8] c"LANG8\00", align 1
@"csbs$9d" = private unnamed_addr constant [6 x i8] c"LANG9\00", align 1
@"csbs$9e" = private unnamed_addr constant [9 x i8] c"ALTERASE\00", align 1
@"csbs$9f" = private unnamed_addr constant [7 x i8] c"SYSREQ\00", align 1
@"csbs$a0" = private unnamed_addr constant [7 x i8] c"CANCEL\00", align 1
@"csbs$a1" = private unnamed_addr constant [6 x i8] c"CLEAR\00", align 1
@"csbs$a2" = private unnamed_addr constant [6 x i8] c"PRIOR\00", align 1
@"csbs$a3" = private unnamed_addr constant [8 x i8] c"RETURN2\00", align 1
@"csbs$a4" = private unnamed_addr constant [10 x i8] c"SEPARATOR\00", align 1
@"csbs$a5" = private unnamed_addr constant [4 x i8] c"OUT\00", align 1
@"csbs$a6" = private unnamed_addr constant [5 x i8] c"OPER\00", align 1
@"csbs$a7" = private unnamed_addr constant [11 x i8] c"CLEARAGAIN\00", align 1
@"csbs$a8" = private unnamed_addr constant [6 x i8] c"CRSEL\00", align 1
@"csbs$a9" = private unnamed_addr constant [6 x i8] c"EXSEL\00", align 1
@"csbs$aa" = private unnamed_addr constant [6 x i8] c"KP_00\00", align 1
@"csbs$ab" = private unnamed_addr constant [7 x i8] c"KP_000\00", align 1
@"csbs$ac" = private unnamed_addr constant [19 x i8] c"THOUSANDSSEPARATOR\00", align 1
@"csbs$ad" = private unnamed_addr constant [17 x i8] c"DECIMALSEPARATOR\00", align 1
@"csbs$ae" = private unnamed_addr constant [13 x i8] c"CURRENCYUNIT\00", align 1
@"csbs$af" = private unnamed_addr constant [16 x i8] c"CURRENCYSUBUNIT\00", align 1
@"csbs$b0" = private unnamed_addr constant [13 x i8] c"KP_LEFTPAREN\00", align 1
@"csbs$b1" = private unnamed_addr constant [14 x i8] c"KP_RIGHTPAREN\00", align 1
@"csbs$b2" = private unnamed_addr constant [13 x i8] c"KP_LEFTBRACE\00", align 1
@"csbs$b3" = private unnamed_addr constant [14 x i8] c"KP_RIGHTBRACE\00", align 1
@"csbs$b4" = private unnamed_addr constant [7 x i8] c"KP_TAB\00", align 1
@"csbs$b5" = private unnamed_addr constant [13 x i8] c"KP_BACKSPACE\00", align 1
@"csbs$b6" = private unnamed_addr constant [5 x i8] c"KP_A\00", align 1
@"csbs$b7" = private unnamed_addr constant [5 x i8] c"KP_B\00", align 1
@"csbs$b8" = private unnamed_addr constant [5 x i8] c"KP_C\00", align 1
@"csbs$b9" = private unnamed_addr constant [5 x i8] c"KP_D\00", align 1
@"csbs$ba" = private unnamed_addr constant [5 x i8] c"KP_E\00", align 1
@"csbs$bb" = private unnamed_addr constant [5 x i8] c"KP_F\00", align 1
@"csbs$bc" = private unnamed_addr constant [7 x i8] c"KP_XOR\00", align 1
@"csbs$bd" = private unnamed_addr constant [9 x i8] c"KP_POWER\00", align 1
@"csbs$be" = private unnamed_addr constant [11 x i8] c"KP_PERCENT\00", align 1
@"csbs$bf" = private unnamed_addr constant [8 x i8] c"KP_LESS\00", align 1
@"csbs$c0" = private unnamed_addr constant [11 x i8] c"KP_GREATER\00", align 1
@"csbs$c1" = private unnamed_addr constant [13 x i8] c"KP_AMPERSAND\00", align 1
@"csbs$c2" = private unnamed_addr constant [16 x i8] c"KP_DBLAMPERSAND\00", align 1
@"csbs$c3" = private unnamed_addr constant [15 x i8] c"KP_VERTICALBAR\00", align 1
@"csbs$c4" = private unnamed_addr constant [18 x i8] c"KP_DBLVERTICALBAR\00", align 1
@"csbs$c5" = private unnamed_addr constant [9 x i8] c"KP_COLON\00", align 1
@"csbs$c6" = private unnamed_addr constant [8 x i8] c"KP_HASH\00", align 1
@"csbs$c7" = private unnamed_addr constant [9 x i8] c"KP_SPACE\00", align 1
@"csbs$c8" = private unnamed_addr constant [6 x i8] c"KP_AT\00", align 1
@"csbs$c9" = private unnamed_addr constant [10 x i8] c"KP_EXCLAM\00", align 1
@"csbs$ca" = private unnamed_addr constant [12 x i8] c"KP_MEMSTORE\00", align 1
@"csbs$cb" = private unnamed_addr constant [13 x i8] c"KP_MEMRECALL\00", align 1
@"csbs$cc" = private unnamed_addr constant [12 x i8] c"KP_MEMCLEAR\00", align 1
@"csbs$cd" = private unnamed_addr constant [10 x i8] c"KP_MEMADD\00", align 1
@"csbs$ce" = private unnamed_addr constant [15 x i8] c"KP_MEMSUBTRACT\00", align 1
@"csbs$cf" = private unnamed_addr constant [15 x i8] c"KP_MEMMULTIPLY\00", align 1
@"csbs$d0" = private unnamed_addr constant [13 x i8] c"KP_MEMDIVIDE\00", align 1
@"csbs$d1" = private unnamed_addr constant [13 x i8] c"KP_PLUSMINUS\00", align 1
@"csbs$d2" = private unnamed_addr constant [9 x i8] c"KP_CLEAR\00", align 1
@"csbs$d3" = private unnamed_addr constant [14 x i8] c"KP_CLEARENTRY\00", align 1
@"csbs$d4" = private unnamed_addr constant [10 x i8] c"KP_BINARY\00", align 1
@"csbs$d5" = private unnamed_addr constant [9 x i8] c"KP_OCTAL\00", align 1
@"csbs$d6" = private unnamed_addr constant [11 x i8] c"KP_DECIMAL\00", align 1
@"csbs$d7" = private unnamed_addr constant [15 x i8] c"KP_HEXADECIMAL\00", align 1
@"csbs$d8" = private unnamed_addr constant [6 x i8] c"LCTRL\00", align 1
@"csbs$d9" = private unnamed_addr constant [7 x i8] c"LSHIFT\00", align 1
@"csbs$da" = private unnamed_addr constant [5 x i8] c"LALT\00", align 1
@"csbs$db" = private unnamed_addr constant [5 x i8] c"LGUI\00", align 1
@"csbs$dc" = private unnamed_addr constant [6 x i8] c"RCTRL\00", align 1
@"csbs$dd" = private unnamed_addr constant [7 x i8] c"RSHIFT\00", align 1
@"csbs$de" = private unnamed_addr constant [5 x i8] c"RALT\00", align 1
@"csbs$df" = private unnamed_addr constant [5 x i8] c"RGUI\00", align 1
@"csbs$e0" = private unnamed_addr constant [5 x i8] c"MODE\00", align 1
@"csbs$e1" = private unnamed_addr constant [10 x i8] c"AUDIONEXT\00", align 1
@"csbs$e2" = private unnamed_addr constant [10 x i8] c"AUDIOPREV\00", align 1
@"csbs$e3" = private unnamed_addr constant [10 x i8] c"AUDIOSTOP\00", align 1
@"csbs$e4" = private unnamed_addr constant [10 x i8] c"AUDIOPLAY\00", align 1
@"csbs$e5" = private unnamed_addr constant [10 x i8] c"AUDIOMUTE\00", align 1
@"csbs$e6" = private unnamed_addr constant [12 x i8] c"MEDIASELECT\00", align 1
@"csbs$e7" = private unnamed_addr constant [4 x i8] c"WWW\00", align 1
@"csbs$e8" = private unnamed_addr constant [5 x i8] c"MAIL\00", align 1
@"csbs$e9" = private unnamed_addr constant [11 x i8] c"CALCULATOR\00", align 1
@"csbs$ea" = private unnamed_addr constant [9 x i8] c"COMPUTER\00", align 1
@"csbs$eb" = private unnamed_addr constant [10 x i8] c"AC_SEARCH\00", align 1
@"csbs$ec" = private unnamed_addr constant [8 x i8] c"AC_HOME\00", align 1
@"csbs$ed" = private unnamed_addr constant [8 x i8] c"AC_BACK\00", align 1
@"csbs$ee" = private unnamed_addr constant [11 x i8] c"AC_FORWARD\00", align 1
@"csbs$ef" = private unnamed_addr constant [8 x i8] c"AC_STOP\00", align 1
@"csbs$f0" = private unnamed_addr constant [11 x i8] c"AC_REFRESH\00", align 1
@"csbs$f1" = private unnamed_addr constant [13 x i8] c"AC_BOOKMARKS\00", align 1
@"csbs$f2" = private unnamed_addr constant [15 x i8] c"BRIGHTNESSDOWN\00", align 1
@"csbs$f3" = private unnamed_addr constant [13 x i8] c"BRIGHTNESSUP\00", align 1
@"csbs$f4" = private unnamed_addr constant [14 x i8] c"DISPLAYSWITCH\00", align 1
@"csbs$f5" = private unnamed_addr constant [15 x i8] c"KBDILLUMTOGGLE\00", align 1
@"csbs$f6" = private unnamed_addr constant [13 x i8] c"KBDILLUMDOWN\00", align 1
@"csbs$f7" = private unnamed_addr constant [11 x i8] c"KBDILLUMUP\00", align 1
@"csbs$f8" = private unnamed_addr constant [6 x i8] c"EJECT\00", align 1
@"csbs$f9" = private unnamed_addr constant [6 x i8] c"SLEEP\00", align 1
@"csbs$fa" = private unnamed_addr constant [5 x i8] c"APP1\00", align 1
@"csbs$fb" = private unnamed_addr constant [5 x i8] c"APP2\00", align 1
@"csbs$fc" = private unnamed_addr constant [12 x i8] c"AUDIOREWIND\00", align 1
@"csbs$fd" = private unnamed_addr constant [17 x i8] c"AUDIOFASTFORWARD\00", align 1
@"csbs$fe" = private unnamed_addr constant [14 x i8] c"NUM_SCANCODES\00", align 1
@"csbs$ff" = private unnamed_addr constant [6 x i8] c"imgui\00", align 1
@"csbs$100" = private unnamed_addr constant [84 x i8] c"C:/Users/krisd/Documents/Programming/Odin/odin-sftn/enumbench/odin-imgui/enums.odin\00", align 1
@"csbs$101" = private unnamed_addr constant [13 x i8] c"Mouse_Cursor\00", align 1
@"ggv$1" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$101", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$ff", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([84 x i8], [84 x i8]* @"csbs$100", i64 0, i64 0), i64 83 }, i32 437, i32 1, %..string zeroinitializer } }
@"$enum_names-154" = private unnamed_addr global [11 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$102", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$103", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$104", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$105", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$106", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$107", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$108", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$109", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$10a", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$10b", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$10c", i64 0, i64 0), i64 5 }]
@"$enum_values-154" = private unnamed_addr global [11 x i64] [i64 -1, i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9]
@"csbs$102" = private unnamed_addr constant [5 x i8] c"None\00", align 1
@"csbs$103" = private unnamed_addr constant [6 x i8] c"Arrow\00", align 1
@"csbs$104" = private unnamed_addr constant [10 x i8] c"TextInput\00", align 1
@"csbs$105" = private unnamed_addr constant [10 x i8] c"ResizeAll\00", align 1
@"csbs$106" = private unnamed_addr constant [9 x i8] c"ResizeNs\00", align 1
@"csbs$107" = private unnamed_addr constant [9 x i8] c"ResizeEw\00", align 1
@"csbs$108" = private unnamed_addr constant [11 x i8] c"ResizeNesw\00", align 1
@"csbs$109" = private unnamed_addr constant [11 x i8] c"ResizeNwse\00", align 1
@"csbs$10a" = private unnamed_addr constant [5 x i8] c"Hand\00", align 1
@"csbs$10b" = private unnamed_addr constant [11 x i8] c"NotAllowed\00", align 1
@"csbs$10c" = private unnamed_addr constant [6 x i8] c"Count\00", align 1
@"csbs$10d" = private unnamed_addr constant [8 x i8] c"runtime\00", align 1
@"csbs$10e" = private unnamed_addr constant [70 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/core.odin\00", align 1
@"csbs$10f" = private unnamed_addr constant [13 x i8] c"Logger_Level\00", align 1
@"ggv$2" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$10f", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 335, i32 1, %..string zeroinitializer } }
@"$enum_names-150" = private unnamed_addr global [5 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$110", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$111", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$112", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$113", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$114", i64 0, i64 0), i64 5 }]
@"$enum_values-150" = private unnamed_addr global [5 x i64] [i64 0, i64 10, i64 20, i64 30, i64 40]
@"csbs$110" = private unnamed_addr constant [6 x i8] c"Debug\00", align 1
@"csbs$111" = private unnamed_addr constant [5 x i8] c"Info\00", align 1
@"csbs$112" = private unnamed_addr constant [8 x i8] c"Warning\00", align 1
@"csbs$113" = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@"csbs$114" = private unnamed_addr constant [6 x i8] c"Fatal\00", align 1
@"csbs$115" = private unnamed_addr constant [10 x i8] c"Type_Info\00", align 1
@"ggv$3" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$115", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 189, i32 1, %..string zeroinitializer } }
@"csbs$116" = private unnamed_addr constant [5 x i8] c"size\00", align 1
@"csbs$117" = private unnamed_addr constant [6 x i8] c"align\00", align 1
@"csbs$118" = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@"csbs$119" = private unnamed_addr constant [3 x i8] c"id\00", align 1
@"csbs$11a" = private unnamed_addr constant [8 x i8] c"variant\00", align 1
@"ggv$4" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 0), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 0), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 0), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 0), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 0), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$11b" = private unnamed_addr constant [16 x i8] c"Type_Info_Flags\00", align 1
@"ggv$5" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$11b", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 187, i32 1, %..string zeroinitializer } }
@"csbs$11c" = private unnamed_addr constant [15 x i8] c"Type_Info_Flag\00", align 1
@"ggv$6" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$11c", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 183, i32 1, %..string zeroinitializer } }
@"$enum_names-14" = private unnamed_addr global [2 x %..string] [%..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$11d", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$11e", i64 0, i64 0), i64 14 }]
@"$enum_values-14" = private unnamed_addr global [2 x i64] [i64 0, i64 1]
@"csbs$11d" = private unnamed_addr constant [11 x i8] c"Comparable\00", align 1
@"csbs$11e" = private unnamed_addr constant [15 x i8] c"Simple_Compare\00", align 1
@"csbs$11f" = private unnamed_addr constant [16 x i8] c"Type_Info_Named\00", align 1
@"ggv$7" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$11f", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 64, i32 1, %..string zeroinitializer } }
@"csbs$120" = private unnamed_addr constant [5 x i8] c"name\00", align 1
@"csbs$121" = private unnamed_addr constant [5 x i8] c"base\00", align 1
@"csbs$122" = private unnamed_addr constant [4 x i8] c"pkg\00", align 1
@"csbs$123" = private unnamed_addr constant [4 x i8] c"loc\00", align 1
@"ggv$8" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 33), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 5), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 5), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 5), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 5), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal1" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$124" = private unnamed_addr constant [21 x i8] c"Source_Code_Location\00", align 1
@"ggv$9" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$124", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 290, i32 1, %..string zeroinitializer } }
@"csbs$125" = private unnamed_addr constant [10 x i8] c"file_path\00", align 1
@"csbs$126" = private unnamed_addr constant [5 x i8] c"line\00", align 1
@"csbs$127" = private unnamed_addr constant [7 x i8] c"column\00", align 1
@"csbs$128" = private unnamed_addr constant [10 x i8] c"procedure\00", align 1
@"ggv$a" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 37), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 9), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 9), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 9), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 9), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* bitcast (i8 (i8*, i8*)* @"__$equal2" to i8*), i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$129" = private unnamed_addr constant [18 x i8] c"Type_Info_Integer\00", align 1
@"ggv$b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$129", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 70, i32 1, %..string zeroinitializer } }
@"csbs$12a" = private unnamed_addr constant [7 x i8] c"signed\00", align 1
@"csbs$12b" = private unnamed_addr constant [11 x i8] c"endianness\00", align 1
@"ggv$c" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 41), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 13), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 13), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 13), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 13), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$12c" = private unnamed_addr constant [20 x i8] c"Platform_Endianness\00", align 1
@"ggv$d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$12c", i64 0, i64 0), i64 19 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 45, i32 1, %..string zeroinitializer } }
@"$enum_names-27" = private unnamed_addr global [3 x %..string] [%..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$12d", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$12e", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$12f", i64 0, i64 0), i64 3 }]
@"$enum_values-27" = private unnamed_addr global [3 x i64] [i64 0, i64 1, i64 2]
@"csbs$12d" = private unnamed_addr constant [9 x i8] c"Platform\00", align 1
@"csbs$12e" = private unnamed_addr constant [7 x i8] c"Little\00", align 1
@"csbs$12f" = private unnamed_addr constant [4 x i8] c"Big\00", align 1
@"csbs$130" = private unnamed_addr constant [15 x i8] c"Type_Info_Rune\00", align 1
@"ggv$e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$130", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 71, i32 1, %..string zeroinitializer } }
@"csbs$131" = private unnamed_addr constant [16 x i8] c"Type_Info_Float\00", align 1
@"ggv$f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$131", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 72, i32 1, %..string zeroinitializer } }
@"ggv$10" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 43), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 15), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 15), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 15), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 15), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$132" = private unnamed_addr constant [18 x i8] c"Type_Info_Complex\00", align 1
@"ggv$11" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$132", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 73, i32 1, %..string zeroinitializer } }
@"csbs$133" = private unnamed_addr constant [21 x i8] c"Type_Info_Quaternion\00", align 1
@"ggv$12" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$133", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 74, i32 1, %..string zeroinitializer } }
@"csbs$134" = private unnamed_addr constant [17 x i8] c"Type_Info_String\00", align 1
@"ggv$13" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$134", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 75, i32 1, %..string zeroinitializer } }
@"csbs$135" = private unnamed_addr constant [11 x i8] c"is_cstring\00", align 1
@"ggv$14" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 44), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 16), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 16), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 16), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 16), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$136" = private unnamed_addr constant [18 x i8] c"Type_Info_Boolean\00", align 1
@"ggv$15" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$136", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 76, i32 1, %..string zeroinitializer } }
@"csbs$137" = private unnamed_addr constant [14 x i8] c"Type_Info_Any\00", align 1
@"ggv$16" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$137", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 77, i32 1, %..string zeroinitializer } }
@"csbs$138" = private unnamed_addr constant [18 x i8] c"Type_Info_Type_Id\00", align 1
@"ggv$17" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$138", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 78, i32 1, %..string zeroinitializer } }
@"csbs$139" = private unnamed_addr constant [18 x i8] c"Type_Info_Pointer\00", align 1
@"ggv$18" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$139", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 79, i32 1, %..string zeroinitializer } }
@"csbs$13a" = private unnamed_addr constant [5 x i8] c"elem\00", align 1
@"ggv$19" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 45), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 17), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 17), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 17), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 17), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$13b" = private unnamed_addr constant [24 x i8] c"Type_Info_Multi_Pointer\00", align 1
@"ggv$1a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$13b", i64 0, i64 0), i64 23 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 82, i32 1, %..string zeroinitializer } }
@"csbs$13c" = private unnamed_addr constant [20 x i8] c"Type_Info_Procedure\00", align 1
@"ggv$1b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$13c", i64 0, i64 0), i64 19 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 85, i32 1, %..string zeroinitializer } }
@"csbs$13d" = private unnamed_addr constant [7 x i8] c"params\00", align 1
@"csbs$13e" = private unnamed_addr constant [8 x i8] c"results\00", align 1
@"csbs$13f" = private unnamed_addr constant [9 x i8] c"variadic\00", align 1
@"csbs$140" = private unnamed_addr constant [11 x i8] c"convention\00", align 1
@"ggv$1c" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 46), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 18), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 18), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 18), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 18), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$141" = private unnamed_addr constant [19 x i8] c"Calling_Convention\00", align 1
@"ggv$1d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$141", i64 0, i64 0), i64 18 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 26, i32 1, %..string zeroinitializer } }
@"$enum_names-45" = private unnamed_addr global [10 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$142", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$143", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$144", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$145", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$146", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$147", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$102", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$148", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$149", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$14a", i64 0, i64 0), i64 4 }]
@"$enum_values-45" = private unnamed_addr global [10 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 9, i64 10]
@"csbs$142" = private unnamed_addr constant [8 x i8] c"Invalid\00", align 1
@"csbs$143" = private unnamed_addr constant [5 x i8] c"Odin\00", align 1
@"csbs$144" = private unnamed_addr constant [12 x i8] c"Contextless\00", align 1
@"csbs$145" = private unnamed_addr constant [6 x i8] c"CDecl\00", align 1
@"csbs$146" = private unnamed_addr constant [9 x i8] c"Std_Call\00", align 1
@"csbs$147" = private unnamed_addr constant [10 x i8] c"Fast_Call\00", align 1
@"csbs$148" = private unnamed_addr constant [6 x i8] c"Naked\00", align 1
@"csbs$149" = private unnamed_addr constant [6 x i8] c"Win64\00", align 1
@"csbs$14a" = private unnamed_addr constant [5 x i8] c"SysV\00", align 1
@"csbs$14b" = private unnamed_addr constant [16 x i8] c"Type_Info_Array\00", align 1
@"ggv$1e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$14b", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 91, i32 1, %..string zeroinitializer } }
@"csbs$14c" = private unnamed_addr constant [10 x i8] c"elem_size\00", align 1
@"csbs$14d" = private unnamed_addr constant [6 x i8] c"count\00", align 1
@"ggv$1f" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 50), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 22), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 22), i64 3 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 22), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 22), i64 3 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$14e" = private unnamed_addr constant [27 x i8] c"Type_Info_Enumerated_Array\00", align 1
@"ggv$20" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"csbs$14e", i64 0, i64 0), i64 26 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 96, i32 1, %..string zeroinitializer } }
@"csbs$14f" = private unnamed_addr constant [6 x i8] c"index\00", align 1
@"csbs$150" = private unnamed_addr constant [10 x i8] c"min_value\00", align 1
@"csbs$151" = private unnamed_addr constant [10 x i8] c"max_value\00", align 1
@"csbs$152" = private unnamed_addr constant [10 x i8] c"is_sparse\00", align 1
@"ggv$21" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 53), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 25), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 25), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 25), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 25), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$153" = private unnamed_addr constant [21 x i8] c"Type_Info_Enum_Value\00", align 1
@"ggv$22" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$153", i64 0, i64 0), i64 20 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 43, i32 1, %..string zeroinitializer } }
@"csbs$154" = private unnamed_addr constant [24 x i8] c"Type_Info_Dynamic_Array\00", align 1
@"ggv$23" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$154", i64 0, i64 0), i64 23 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 105, i32 1, %..string zeroinitializer } }
@"ggv$24" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 60), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 32), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 32), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 32), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 32), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$155" = private unnamed_addr constant [16 x i8] c"Type_Info_Slice\00", align 1
@"ggv$25" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$155", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 106, i32 1, %..string zeroinitializer } }
@"csbs$156" = private unnamed_addr constant [16 x i8] c"Type_Info_Tuple\00", align 1
@"ggv$26" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$156", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 107, i32 1, %..string zeroinitializer } }
@"csbs$157" = private unnamed_addr constant [6 x i8] c"types\00", align 1
@"csbs$158" = private unnamed_addr constant [6 x i8] c"names\00", align 1
@"ggv$27" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 62), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 34), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 34), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 34), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 34), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$159" = private unnamed_addr constant [17 x i8] c"Type_Info_Struct\00", align 1
@"ggv$28" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$159", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 112, i32 1, %..string zeroinitializer } }
@"csbs$15a" = private unnamed_addr constant [8 x i8] c"offsets\00", align 1
@"csbs$15b" = private unnamed_addr constant [7 x i8] c"usings\00", align 1
@"csbs$15c" = private unnamed_addr constant [5 x i8] c"tags\00", align 1
@"csbs$15d" = private unnamed_addr constant [10 x i8] c"is_packed\00", align 1
@"csbs$15e" = private unnamed_addr constant [13 x i8] c"is_raw_union\00", align 1
@"csbs$15f" = private unnamed_addr constant [13 x i8] c"custom_align\00", align 1
@"csbs$160" = private unnamed_addr constant [6 x i8] c"equal\00", align 1
@"csbs$161" = private unnamed_addr constant [9 x i8] c"soa_kind\00", align 1
@"csbs$162" = private unnamed_addr constant [14 x i8] c"soa_base_type\00", align 1
@"csbs$163" = private unnamed_addr constant [8 x i8] c"soa_len\00", align 1
@"ggv$29" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 64), i64 12 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 36), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 36), i64 12 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 36), i64 12 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 36), i64 12 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$164" = private unnamed_addr constant [11 x i8] c"Equal_Proc\00", align 1
@"ggv$2a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$164", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 52, i32 1, %..string zeroinitializer } }
@"csbs$165" = private unnamed_addr constant [2 x i8] c"_\00", align 1
@"csbs$166" = private unnamed_addr constant [26 x i8] c"Type_Info_Struct_Soa_Kind\00", align 1
@"ggv$2b" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"csbs$166", i64 0, i64 0), i64 25 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 56, i32 1, %..string zeroinitializer } }
@"$enum_names-73" = private unnamed_addr global [4 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$102", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$167", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$168", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$169", i64 0, i64 0), i64 7 }]
@"$enum_values-73" = private unnamed_addr global [4 x i64] [i64 0, i64 1, i64 2, i64 3]
@"csbs$167" = private unnamed_addr constant [6 x i8] c"Fixed\00", align 1
@"csbs$168" = private unnamed_addr constant [6 x i8] c"Slice\00", align 1
@"csbs$169" = private unnamed_addr constant [8 x i8] c"Dynamic\00", align 1
@"csbs$16a" = private unnamed_addr constant [16 x i8] c"Type_Info_Union\00", align 1
@"ggv$2c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$16a", i64 0, i64 0), i64 15 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 129, i32 1, %..string zeroinitializer } }
@"csbs$16b" = private unnamed_addr constant [9 x i8] c"variants\00", align 1
@"csbs$16c" = private unnamed_addr constant [11 x i8] c"tag_offset\00", align 1
@"csbs$16d" = private unnamed_addr constant [9 x i8] c"tag_type\00", align 1
@"csbs$16e" = private unnamed_addr constant [7 x i8] c"no_nil\00", align 1
@"csbs$16f" = private unnamed_addr constant [11 x i8] c"shared_nil\00", align 1
@"ggv$2d" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 79), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 51), i64 7 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 48), i64 7 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 48), i64 7 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 48), i64 7 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$170" = private unnamed_addr constant [15 x i8] c"Type_Info_Enum\00", align 1
@"ggv$2e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$170", i64 0, i64 0), i64 14 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 140, i32 1, %..string zeroinitializer } }
@"csbs$171" = private unnamed_addr constant [7 x i8] c"values\00", align 1
@"ggv$2f" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 86), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 58), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 55), i64 3 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 55), i64 3 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 55), i64 3 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$172" = private unnamed_addr constant [14 x i8] c"Type_Info_Map\00", align 1
@"ggv$30" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$172", i64 0, i64 0), i64 13 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 145, i32 1, %..string zeroinitializer } }
@"csbs$173" = private unnamed_addr constant [4 x i8] c"key\00", align 1
@"csbs$174" = private unnamed_addr constant [6 x i8] c"value\00", align 1
@"csbs$175" = private unnamed_addr constant [17 x i8] c"generated_struct\00", align 1
@"csbs$176" = private unnamed_addr constant [10 x i8] c"key_equal\00", align 1
@"csbs$177" = private unnamed_addr constant [11 x i8] c"key_hasher\00", align 1
@"ggv$31" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 89), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 61), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 58), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 58), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 58), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$178" = private unnamed_addr constant [12 x i8] c"Hasher_Proc\00", align 1
@"ggv$32" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$178", i64 0, i64 0), i64 11 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 54, i32 1, %..string zeroinitializer } }
@"csbs$179" = private unnamed_addr constant [5 x i8] c"data\00", align 1
@"csbs$17a" = private unnamed_addr constant [5 x i8] c"seed\00", align 1
@"csbs$17b" = private unnamed_addr constant [18 x i8] c"Type_Info_Bit_Set\00", align 1
@"ggv$33" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$17b", i64 0, i64 0), i64 17 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 152, i32 1, %..string zeroinitializer } }
@"csbs$17c" = private unnamed_addr constant [11 x i8] c"underlying\00", align 1
@"csbs$17d" = private unnamed_addr constant [6 x i8] c"lower\00", align 1
@"csbs$17e" = private unnamed_addr constant [6 x i8] c"upper\00", align 1
@"ggv$34" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 97), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 69), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 63), i64 4 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 63), i64 4 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 63), i64 4 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$17f" = private unnamed_addr constant [22 x i8] c"Type_Info_Simd_Vector\00", align 1
@"ggv$35" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$17f", i64 0, i64 0), i64 21 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 158, i32 1, %..string zeroinitializer } }
@"csbs$180" = private unnamed_addr constant [27 x i8] c"Type_Info_Relative_Pointer\00", align 1
@"ggv$36" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"csbs$180", i64 0, i64 0), i64 26 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 163, i32 1, %..string zeroinitializer } }
@"csbs$181" = private unnamed_addr constant [8 x i8] c"pointer\00", align 1
@"csbs$182" = private unnamed_addr constant [13 x i8] c"base_integer\00", align 1
@"ggv$37" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 101), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 73), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 67), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 67), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 67), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$183" = private unnamed_addr constant [25 x i8] c"Type_Info_Relative_Slice\00", align 1
@"ggv$38" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$183", i64 0, i64 0), i64 24 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 167, i32 1, %..string zeroinitializer } }
@"csbs$184" = private unnamed_addr constant [6 x i8] c"slice\00", align 1
@"ggv$39" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 103), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 75), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 69), i64 2 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 69), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 69), i64 2 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$185" = private unnamed_addr constant [17 x i8] c"Type_Info_Matrix\00", align 1
@"ggv$3a" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$185", i64 0, i64 0), i64 16 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 171, i32 1, %..string zeroinitializer } }
@"csbs$186" = private unnamed_addr constant [12 x i8] c"elem_stride\00", align 1
@"csbs$187" = private unnamed_addr constant [10 x i8] c"row_count\00", align 1
@"csbs$188" = private unnamed_addr constant [13 x i8] c"column_count\00", align 1
@"ggv$3b" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 105), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 77), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 71), i64 5 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 71), i64 5 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 71), i64 5 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$189" = private unnamed_addr constant [22 x i8] c"Type_Info_Soa_Pointer\00", align 1
@"ggv$3c" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$189", i64 0, i64 0), i64 21 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([70 x i8], [70 x i8]* @"csbs$10e", i64 0, i64 0), i64 69 }, i32 179, i32 1, %..string zeroinitializer } }
@"csbs$18a" = private unnamed_addr constant [74 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/vendor/sdl2/sdl_video.odin\00", align 1
@"csbs$18b" = private unnamed_addr constant [10 x i8] c"GLprofile\00", align 1
@"ggv$3d" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$18b", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$18a", i64 0, i64 0), i64 73 }, i32 172, i32 1, %..string zeroinitializer } }
@"$enum_names-98" = private unnamed_addr global [3 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$18c", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$18d", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$18e", i64 0, i64 0), i64 2 }]
@"$enum_values-98" = private unnamed_addr global [3 x i64] [i64 1, i64 2, i64 4]
@"csbs$18c" = private unnamed_addr constant [5 x i8] c"CORE\00", align 1
@"csbs$18d" = private unnamed_addr constant [14 x i8] c"COMPATIBILITY\00", align 1
@"csbs$18e" = private unnamed_addr constant [3 x i8] c"ES\00", align 1
@"csbs$18f" = private unnamed_addr constant [78 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/core_builtin.odin\00", align 1
@"csbs$190" = private unnamed_addr constant [11 x i8] c"Maybe(int)\00", align 1
@"ggv$3e" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$190", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$10d", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([78 x i8], [78 x i8]* @"csbs$18f", i64 0, i64 0), i64 77 }, i32 6, i32 10, %..string zeroinitializer } }
@"csbs$191" = private unnamed_addr constant [5 x i8] c"time\00", align 1
@"csbs$192" = private unnamed_addr constant [67 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/time/time.odin\00", align 1
@"csbs$193" = private unnamed_addr constant [9 x i8] c"Duration\00", align 1
@"ggv$3f" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$193", i64 0, i64 0), i64 8 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$191", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([67 x i8], [67 x i8]* @"csbs$192", i64 0, i64 0), i64 66 }, i32 5, i32 1, %..string zeroinitializer } }
@"csbs$194" = private unnamed_addr constant [5 x i8] c"Time\00", align 1
@"ggv$40" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$194", i64 0, i64 0), i64 4 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$191", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([67 x i8], [67 x i8]* @"csbs$192", i64 0, i64 0), i64 66 }, i32 19, i32 1, %..string zeroinitializer } }
@"csbs$195" = private unnamed_addr constant [6 x i8] c"_nsec\00", align 1
@"ggv$41" = private unnamed_addr constant %runtime.Type_Info_Struct { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 112), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 83), i64 1 }, { i64*, i64 } { i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 76), i64 1 }, { i8*, i64 } { i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 76), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_tags_data", i64 0, i64 76), i64 1 }, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer, i8* null, i8 0, [7 x i8] zeroinitializer, %runtime.Type_Info* null, i64 0 }
@"csbs$196" = private unnamed_addr constant [8 x i8] c"enbench\00", align 1
@"csbs$197" = private unnamed_addr constant [83 x i8] c"C:/Users/krisd/Documents/Programming/Odin/odin-sftn/enumbench/enbench/enbench.odin\00", align 1
@"csbs$198" = private unnamed_addr constant [10 x i8] c"ENUM_NAME\00", align 1
@"ggv$42" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$198", i64 0, i64 0), i64 9 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$196", i64 0, i64 0), i64 7 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 17, i32 1, %..string zeroinitializer } }
@"csbs$199" = private unnamed_addr constant [6 x i8] c"Month\00", align 1
@"ggv$43" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$199", i64 0, i64 0), i64 5 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$191", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([67 x i8], [67 x i8]* @"csbs$192", i64 0, i64 0), i64 66 }, i32 23, i32 1, %..string zeroinitializer } }
@"$enum_names-152" = private unnamed_addr global [12 x %..string] [%..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$19a", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$19b", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$19c", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$19d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$19e", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$19f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1a0", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1a1", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1a2", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1a3", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1a4", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1a5", i64 0, i64 0), i64 8 }]
@"$enum_values-152" = private unnamed_addr global [12 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12]
@"csbs$19a" = private unnamed_addr constant [8 x i8] c"January\00", align 1
@"csbs$19b" = private unnamed_addr constant [9 x i8] c"February\00", align 1
@"csbs$19c" = private unnamed_addr constant [6 x i8] c"March\00", align 1
@"csbs$19d" = private unnamed_addr constant [6 x i8] c"April\00", align 1
@"csbs$19e" = private unnamed_addr constant [4 x i8] c"May\00", align 1
@"csbs$19f" = private unnamed_addr constant [5 x i8] c"June\00", align 1
@"csbs$1a0" = private unnamed_addr constant [5 x i8] c"July\00", align 1
@"csbs$1a1" = private unnamed_addr constant [7 x i8] c"August\00", align 1
@"csbs$1a2" = private unnamed_addr constant [10 x i8] c"September\00", align 1
@"csbs$1a3" = private unnamed_addr constant [8 x i8] c"October\00", align 1
@"csbs$1a4" = private unnamed_addr constant [9 x i8] c"November\00", align 1
@"csbs$1a5" = private unnamed_addr constant [9 x i8] c"December\00", align 1
@"csbs$1a6" = private unnamed_addr constant [4 x i8] c"Key\00", align 1
@"ggv$44" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1a6", i64 0, i64 0), i64 3 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156), %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$ff", i64 0, i64 0), i64 5 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([84 x i8], [84 x i8]* @"csbs$100", i64 0, i64 0), i64 83 }, i32 279, i32 1, %..string zeroinitializer } }
@"$enum_names-156" = private unnamed_addr global [140 x %..string] [%..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$102", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1a7", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1a8", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1a9", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1aa", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1ab", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1ac", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1ad", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1ae", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$1af", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1b0", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1b1", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1b2", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1b3", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1b4", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1b5", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1b6", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1b7", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1b8", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1b9", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1ba", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1bb", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1bc", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1bd", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$1be", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1bf", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c0", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c1", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c2", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c3", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c4", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c5", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c6", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c7", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$1c8", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$10", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$11", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$12", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$13", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$14", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$15", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$16", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$17", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$18", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$19", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1a", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1b", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1c", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1d", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1e", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1f", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$20", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$21", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$22", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$23", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25", i64 0, i64 0), i64 1 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$42", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$43", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$44", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$45", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$46", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$47", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$48", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$49", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$4a", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4b", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4c", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$4d", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1c9", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1ca", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1cb", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$1cc", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1cd", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1ce", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1cf", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1d0", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1d1", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1d2", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1d3", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$1d4", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$1d5", i64 0, i64 0), i64 10 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1d6", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1d7", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$1d8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1d9", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1da", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1db", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1dc", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1dd", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1de", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1df", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1e0", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1e1", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$1e2", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1e3", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1e4", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1e5", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$1e6", i64 0, i64 0), i64 14 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1e7", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1e8", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1e9", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$1ea", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$1eb", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1ec", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1ed", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1ee", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$1ef", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$1f0", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1f1", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1f2", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$1f3", i64 0, i64 0), i64 16 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f4", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f5", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f6", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f7", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f8", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$1f9", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1fa", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1fb", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1fc", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$1fd", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$1fe", i64 0, i64 0), i64 15 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$1ff", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$200", i64 0, i64 0), i64 17 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$201", i64 0, i64 0), i64 18 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$202", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$203", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$204", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$205", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$10c", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$206", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$207", i64 0, i64 0), i64 11 }, %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$208", i64 0, i64 0), i64 13 }, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$209", i64 0, i64 0), i64 12 }, %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$20a", i64 0, i64 0), i64 14 }]
@"$enum_values-156" = private unnamed_addr global [140 x i64] [i64 0, i64 512, i64 513, i64 514, i64 515, i64 516, i64 517, i64 518, i64 519, i64 520, i64 521, i64 522, i64 523, i64 524, i64 525, i64 526, i64 527, i64 528, i64 529, i64 530, i64 531, i64 532, i64 533, i64 534, i64 535, i64 536, i64 537, i64 538, i64 539, i64 540, i64 541, i64 542, i64 543, i64 544, i64 545, i64 546, i64 547, i64 548, i64 549, i64 550, i64 551, i64 552, i64 553, i64 554, i64 555, i64 556, i64 557, i64 558, i64 559, i64 560, i64 561, i64 562, i64 563, i64 564, i64 565, i64 566, i64 567, i64 568, i64 569, i64 570, i64 571, i64 572, i64 573, i64 574, i64 575, i64 576, i64 577, i64 578, i64 579, i64 580, i64 581, i64 582, i64 583, i64 584, i64 585, i64 586, i64 587, i64 588, i64 589, i64 590, i64 591, i64 592, i64 593, i64 594, i64 595, i64 596, i64 597, i64 598, i64 599, i64 600, i64 601, i64 602, i64 603, i64 604, i64 605, i64 606, i64 607, i64 608, i64 609, i64 610, i64 611, i64 612, i64 613, i64 614, i64 615, i64 616, i64 617, i64 618, i64 619, i64 620, i64 621, i64 622, i64 623, i64 624, i64 625, i64 626, i64 627, i64 628, i64 629, i64 630, i64 631, i64 632, i64 633, i64 634, i64 635, i64 636, i64 637, i64 638, i64 639, i64 640, i64 641, i64 642, i64 643, i64 644, i64 645, i64 512, i64 645, i64 133, i64 645, i64 0]
@"csbs$1a7" = private unnamed_addr constant [4 x i8] c"Tab\00", align 1
@"csbs$1a8" = private unnamed_addr constant [10 x i8] c"LeftArrow\00", align 1
@"csbs$1a9" = private unnamed_addr constant [11 x i8] c"RightArrow\00", align 1
@"csbs$1aa" = private unnamed_addr constant [8 x i8] c"UpArrow\00", align 1
@"csbs$1ab" = private unnamed_addr constant [10 x i8] c"DownArrow\00", align 1
@"csbs$1ac" = private unnamed_addr constant [7 x i8] c"PageUp\00", align 1
@"csbs$1ad" = private unnamed_addr constant [9 x i8] c"PageDown\00", align 1
@"csbs$1ae" = private unnamed_addr constant [5 x i8] c"Home\00", align 1
@"csbs$1af" = private unnamed_addr constant [4 x i8] c"End\00", align 1
@"csbs$1b0" = private unnamed_addr constant [7 x i8] c"Insert\00", align 1
@"csbs$1b1" = private unnamed_addr constant [7 x i8] c"Delete\00", align 1
@"csbs$1b2" = private unnamed_addr constant [10 x i8] c"Backspace\00", align 1
@"csbs$1b3" = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@"csbs$1b4" = private unnamed_addr constant [6 x i8] c"Enter\00", align 1
@"csbs$1b5" = private unnamed_addr constant [7 x i8] c"Escape\00", align 1
@"csbs$1b6" = private unnamed_addr constant [9 x i8] c"LeftCtrl\00", align 1
@"csbs$1b7" = private unnamed_addr constant [10 x i8] c"LeftShift\00", align 1
@"csbs$1b8" = private unnamed_addr constant [8 x i8] c"LeftAlt\00", align 1
@"csbs$1b9" = private unnamed_addr constant [10 x i8] c"LeftSuper\00", align 1
@"csbs$1ba" = private unnamed_addr constant [10 x i8] c"RightCtrl\00", align 1
@"csbs$1bb" = private unnamed_addr constant [11 x i8] c"RightShift\00", align 1
@"csbs$1bc" = private unnamed_addr constant [9 x i8] c"RightAlt\00", align 1
@"csbs$1bd" = private unnamed_addr constant [11 x i8] c"RightSuper\00", align 1
@"csbs$1be" = private unnamed_addr constant [5 x i8] c"Menu\00", align 1
@"csbs$1bf" = private unnamed_addr constant [3 x i8] c"K0\00", align 1
@"csbs$1c0" = private unnamed_addr constant [3 x i8] c"K1\00", align 1
@"csbs$1c1" = private unnamed_addr constant [3 x i8] c"K2\00", align 1
@"csbs$1c2" = private unnamed_addr constant [3 x i8] c"K3\00", align 1
@"csbs$1c3" = private unnamed_addr constant [3 x i8] c"K4\00", align 1
@"csbs$1c4" = private unnamed_addr constant [3 x i8] c"K5\00", align 1
@"csbs$1c5" = private unnamed_addr constant [3 x i8] c"K6\00", align 1
@"csbs$1c6" = private unnamed_addr constant [3 x i8] c"K7\00", align 1
@"csbs$1c7" = private unnamed_addr constant [3 x i8] c"K8\00", align 1
@"csbs$1c8" = private unnamed_addr constant [3 x i8] c"K9\00", align 1
@"csbs$1c9" = private unnamed_addr constant [11 x i8] c"Apostrophe\00", align 1
@"csbs$1ca" = private unnamed_addr constant [6 x i8] c"Comma\00", align 1
@"csbs$1cb" = private unnamed_addr constant [6 x i8] c"Minus\00", align 1
@"csbs$1cc" = private unnamed_addr constant [7 x i8] c"Period\00", align 1
@"csbs$1cd" = private unnamed_addr constant [6 x i8] c"Slash\00", align 1
@"csbs$1ce" = private unnamed_addr constant [10 x i8] c"Semicolon\00", align 1
@"csbs$1cf" = private unnamed_addr constant [6 x i8] c"Equal\00", align 1
@"csbs$1d0" = private unnamed_addr constant [12 x i8] c"LeftBracket\00", align 1
@"csbs$1d1" = private unnamed_addr constant [10 x i8] c"Backslash\00", align 1
@"csbs$1d2" = private unnamed_addr constant [13 x i8] c"RightBracket\00", align 1
@"csbs$1d3" = private unnamed_addr constant [12 x i8] c"GraveAccent\00", align 1
@"csbs$1d4" = private unnamed_addr constant [9 x i8] c"CapsLock\00", align 1
@"csbs$1d5" = private unnamed_addr constant [11 x i8] c"ScrollLock\00", align 1
@"csbs$1d6" = private unnamed_addr constant [8 x i8] c"NumLock\00", align 1
@"csbs$1d7" = private unnamed_addr constant [12 x i8] c"PrintScreen\00", align 1
@"csbs$1d8" = private unnamed_addr constant [6 x i8] c"Pause\00", align 1
@"csbs$1d9" = private unnamed_addr constant [8 x i8] c"Keypad0\00", align 1
@"csbs$1da" = private unnamed_addr constant [8 x i8] c"Keypad1\00", align 1
@"csbs$1db" = private unnamed_addr constant [8 x i8] c"Keypad2\00", align 1
@"csbs$1dc" = private unnamed_addr constant [8 x i8] c"Keypad3\00", align 1
@"csbs$1dd" = private unnamed_addr constant [8 x i8] c"Keypad4\00", align 1
@"csbs$1de" = private unnamed_addr constant [8 x i8] c"Keypad5\00", align 1
@"csbs$1df" = private unnamed_addr constant [8 x i8] c"Keypad6\00", align 1
@"csbs$1e0" = private unnamed_addr constant [8 x i8] c"Keypad7\00", align 1
@"csbs$1e1" = private unnamed_addr constant [8 x i8] c"Keypad8\00", align 1
@"csbs$1e2" = private unnamed_addr constant [8 x i8] c"Keypad9\00", align 1
@"csbs$1e3" = private unnamed_addr constant [14 x i8] c"KeypadDecimal\00", align 1
@"csbs$1e4" = private unnamed_addr constant [13 x i8] c"KeypadDivide\00", align 1
@"csbs$1e5" = private unnamed_addr constant [15 x i8] c"KeypadMultiply\00", align 1
@"csbs$1e6" = private unnamed_addr constant [15 x i8] c"KeypadSubtract\00", align 1
@"csbs$1e7" = private unnamed_addr constant [10 x i8] c"KeypadAdd\00", align 1
@"csbs$1e8" = private unnamed_addr constant [12 x i8] c"KeypadEnter\00", align 1
@"csbs$1e9" = private unnamed_addr constant [12 x i8] c"KeypadEqual\00", align 1
@"csbs$1ea" = private unnamed_addr constant [13 x i8] c"GamepadStart\00", align 1
@"csbs$1eb" = private unnamed_addr constant [12 x i8] c"GamepadBack\00", align 1
@"csbs$1ec" = private unnamed_addr constant [14 x i8] c"GamepadFaceUp\00", align 1
@"csbs$1ed" = private unnamed_addr constant [16 x i8] c"GamepadFaceDown\00", align 1
@"csbs$1ee" = private unnamed_addr constant [16 x i8] c"GamepadFaceLeft\00", align 1
@"csbs$1ef" = private unnamed_addr constant [17 x i8] c"GamepadFaceRight\00", align 1
@"csbs$1f0" = private unnamed_addr constant [14 x i8] c"GamepadDpadUp\00", align 1
@"csbs$1f1" = private unnamed_addr constant [16 x i8] c"GamepadDpadDown\00", align 1
@"csbs$1f2" = private unnamed_addr constant [16 x i8] c"GamepadDpadLeft\00", align 1
@"csbs$1f3" = private unnamed_addr constant [17 x i8] c"GamepadDpadRight\00", align 1
@"csbs$1f4" = private unnamed_addr constant [10 x i8] c"GamepadL1\00", align 1
@"csbs$1f5" = private unnamed_addr constant [10 x i8] c"GamepadR1\00", align 1
@"csbs$1f6" = private unnamed_addr constant [10 x i8] c"GamepadL2\00", align 1
@"csbs$1f7" = private unnamed_addr constant [10 x i8] c"GamepadR2\00", align 1
@"csbs$1f8" = private unnamed_addr constant [10 x i8] c"GamepadL3\00", align 1
@"csbs$1f9" = private unnamed_addr constant [10 x i8] c"GamepadR3\00", align 1
@"csbs$1fa" = private unnamed_addr constant [16 x i8] c"GamepadLstickUp\00", align 1
@"csbs$1fb" = private unnamed_addr constant [18 x i8] c"GamepadLstickDown\00", align 1
@"csbs$1fc" = private unnamed_addr constant [18 x i8] c"GamepadLstickLeft\00", align 1
@"csbs$1fd" = private unnamed_addr constant [19 x i8] c"GamepadLstickRight\00", align 1
@"csbs$1fe" = private unnamed_addr constant [16 x i8] c"GamepadRstickUp\00", align 1
@"csbs$1ff" = private unnamed_addr constant [18 x i8] c"GamepadRstickDown\00", align 1
@"csbs$200" = private unnamed_addr constant [18 x i8] c"GamepadRstickLeft\00", align 1
@"csbs$201" = private unnamed_addr constant [19 x i8] c"GamepadRstickRight\00", align 1
@"csbs$202" = private unnamed_addr constant [8 x i8] c"ModCtrl\00", align 1
@"csbs$203" = private unnamed_addr constant [9 x i8] c"ModShift\00", align 1
@"csbs$204" = private unnamed_addr constant [7 x i8] c"ModAlt\00", align 1
@"csbs$205" = private unnamed_addr constant [9 x i8] c"ModSuper\00", align 1
@"csbs$206" = private unnamed_addr constant [14 x i8] c"NamedKeyBegin\00", align 1
@"csbs$207" = private unnamed_addr constant [12 x i8] c"NamedKeyEnd\00", align 1
@"csbs$208" = private unnamed_addr constant [14 x i8] c"NamedKeyCount\00", align 1
@"csbs$209" = private unnamed_addr constant [13 x i8] c"KeysDataSize\00", align 1
@"csbs$20a" = private unnamed_addr constant [15 x i8] c"KeysDataOffset\00", align 1
@"csbs$20b" = private unnamed_addr constant [74 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/vendor/sdl2/sdl_mouse.odin\00", align 1
@"csbs$20c" = private unnamed_addr constant [13 x i8] c"SystemCursor\00", align 1
@"ggv$45" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$20c", i64 0, i64 0), i64 12 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$20b", i64 0, i64 0), i64 73 }, i32 25, i32 1, %..string zeroinitializer } }
@"$enum_names-160" = private unnamed_addr global [13 x %..string] [%..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$20d", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$20e", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$20f", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$210", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$211", i64 0, i64 0), i64 9 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$212", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$213", i64 0, i64 0), i64 8 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$214", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$215", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$216", i64 0, i64 0), i64 7 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$217", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$218", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$219", i64 0, i64 0), i64 18 }]
@"$enum_values-160" = private unnamed_addr global [13 x i64] [i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12]
@"csbs$20d" = private unnamed_addr constant [6 x i8] c"ARROW\00", align 1
@"csbs$20e" = private unnamed_addr constant [6 x i8] c"IBEAM\00", align 1
@"csbs$20f" = private unnamed_addr constant [5 x i8] c"WAIT\00", align 1
@"csbs$210" = private unnamed_addr constant [10 x i8] c"CROSSHAIR\00", align 1
@"csbs$211" = private unnamed_addr constant [10 x i8] c"WAITARROW\00", align 1
@"csbs$212" = private unnamed_addr constant [9 x i8] c"SIZENWSE\00", align 1
@"csbs$213" = private unnamed_addr constant [9 x i8] c"SIZENESW\00", align 1
@"csbs$214" = private unnamed_addr constant [7 x i8] c"SIZEWE\00", align 1
@"csbs$215" = private unnamed_addr constant [7 x i8] c"SIZENS\00", align 1
@"csbs$216" = private unnamed_addr constant [8 x i8] c"SIZEALL\00", align 1
@"csbs$217" = private unnamed_addr constant [3 x i8] c"NO\00", align 1
@"csbs$218" = private unnamed_addr constant [5 x i8] c"HAND\00", align 1
@"csbs$219" = private unnamed_addr constant [19 x i8] c"NUM_SYSTEM_CURSORS\00", align 1
@"csbs$21a" = private unnamed_addr constant [76 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/vendor/sdl2/sdl_keycode.odin\00", align 1
@"csbs$21b" = private unnamed_addr constant [11 x i8] c"KeymodFlag\00", align 1
@"ggv$46" = private unnamed_addr constant %runtime.Type_Info_Named { %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$21b", i64 0, i64 0), i64 10 }, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162), %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$8", i64 0, i64 0), i64 4 }, %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([76 x i8], [76 x i8]* @"csbs$21a", i64 0, i64 0), i64 75 }, i32 297, i32 1, %..string zeroinitializer } }
@"$enum_names-162" = private unnamed_addr global [12 x %..string] [%..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$d9", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$dd", i64 0, i64 0), i64 6 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$d8", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$dc", i64 0, i64 0), i64 5 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$da", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$de", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$db", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$df", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$21c", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$21d", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$e0", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$21e", i64 0, i64 0), i64 8 }]
@"$enum_values-162" = private unnamed_addr global [12 x i64] [i64 0, i64 1, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15]
@"csbs$21c" = private unnamed_addr constant [4 x i8] c"NUM\00", align 1
@"csbs$21d" = private unnamed_addr constant [5 x i8] c"CAPS\00", align 1
@"csbs$21e" = private unnamed_addr constant [9 x i8] c"RESERVED\00", align 1
@"ggv$47" = global %io.Stream_VTable { i8* null, i8* null, i8* null, i8* bitcast (i64 (%io.Stream*, i8*)* @"_proclit$anon-2" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-0" to i8*), i8* null, i8* bitcast (i32 (%io.Stream*, i8, i8*)* @"_proclit$anon-1" to i8*), i8* null, i8* null, i8* null, i8* null, i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-3" to i8*) }
@"ggv$48" = private unnamed_addr constant %io.Stream_VTable { i8* null, i8* null, i8* null, i8* bitcast (i64 (%io.Stream*, i8*)* @"_proclit$anon-2" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-0" to i8*), i8* null, i8* bitcast (i32 (%io.Stream*, i8, i8*)* @"_proclit$anon-1" to i8*), i8* null, i8* null, i8* null, i8* null, i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-3" to i8*) }
@"ggv$49" = global %io.Stream_VTable { i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-11" to i8*), i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-10" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, i64, i64, i8*)* @"_proclit$anon-8" to i8*), i8* bitcast (i64 (%io.Stream*, i8*)* @"_proclit$anon-9" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-4" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i64, i8*)* @"_proclit$anon-5" to i8*), i8* null, i8* null, i8* null, i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-6" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i64, i8*)* @"_proclit$anon-7" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null }
@"ggv$4a" = private unnamed_addr constant %io.Stream_VTable { i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-11" to i8*), i8* bitcast (i32 (%io.Stream*, i8*)* @"_proclit$anon-10" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, i64, i64, i8*)* @"_proclit$anon-8" to i8*), i8* bitcast (i64 (%io.Stream*, i8*)* @"_proclit$anon-9" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-4" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i64, i8*)* @"_proclit$anon-5" to i8*), i8* null, i8* null, i8* null, i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i8*)* @"_proclit$anon-6" to i8*), i8* bitcast (void ({ i64, i32 }*, %io.Stream*, { i8*, i64 }*, i64, i8*)* @"_proclit$anon-7" to i8*), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null }
@"csbs$21f" = private unnamed_addr constant [73 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/strings/builder.odin\00", align 1
@"csbs$220" = private unnamed_addr constant [16 x i8] c"_proclit$anon-3\00", align 1
@"csbs$221" = private unnamed_addr constant [2 x i8] c" \00", align 1
@"csbs$222" = private unnamed_addr constant [3 x i8] c": \00", align 1
@"csbs$223" = private unnamed_addr constant [6 x i8] c"panic\00", align 1
@"csbs$224" = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@"csbs$225" = private unnamed_addr constant [88 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/dynamic_array_internal.odin\00", align 1
@"csbs$226" = private unnamed_addr constant [24 x i8] c"__dynamic_array_reserve\00", align 1
@"csbs$227" = private unnamed_addr constant [31 x i8] c"__dynamic_array_append_nothing\00", align 1
@"csbs$228" = private unnamed_addr constant [86 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/dynamic_map_internal.odin\00", align 1
@"csbs$229" = private unnamed_addr constant [24 x i8] c" Invalid slice indices \00", align 1
@"csbs$22a" = private unnamed_addr constant [2 x i8] c":\00", align 1
@"csbs$22b" = private unnamed_addr constant [22 x i8] c" is out of range 0..<\00", align 1
@"csbs$22c" = private unnamed_addr constant [74 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/internal.odin\00", align 1
@"csbs$22d" = private unnamed_addr constant [18 x i8] c"align_forward_int\00", align 1
@"csbs$22e" = private unnamed_addr constant [22 x i8] c"align_forward_uintptr\00", align 1
@runtime.string_decode_rune-.accept_sizes-48436 = internal global [256 x i8] c
@runtime.string_decode_rune-.accept_ranges-48437 = internal global [5 x %runtime.string_decode_rune.Accept_Range-1] [%runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -96, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -97 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -112, i8 -65 }, %runtime.string_decode_rune.Accept_Range-1 { i8 -128, i8 -113 }]
@"csbs$22f" = private unnamed_addr constant [3 x i8] c"\\a\00", align 1
@"csbs$230" = private unnamed_addr constant [3 x i8] c"\\b\00", align 1
@"csbs$231" = private unnamed_addr constant [3 x i8] c"\\e\00", align 1
@"csbs$232" = private unnamed_addr constant [3 x i8] c"\\f\00", align 1
@"csbs$233" = private unnamed_addr constant [3 x i8] c"\\n\00", align 1
@"csbs$234" = private unnamed_addr constant [3 x i8] c"\\r\00", align 1
@"csbs$235" = private unnamed_addr constant [3 x i8] c"\\t\00", align 1
@"csbs$236" = private unnamed_addr constant [3 x i8] c"\\v\00", align 1
@"csbs$237" = private unnamed_addr constant [5 x i8] c"\\x00\00", align 1
@"csbs$238" = private unnamed_addr constant [3 x i8] c"\\x\00", align 1
@"csbs$239" = private unnamed_addr constant [71 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/runtime/print.odin\00", align 1
@"csbs$23a" = private unnamed_addr constant [4 x i8] c"nil\00", align 1
@"csbs$23b" = private unnamed_addr constant [4 x i8] c"int\00", align 1
@"csbs$23c" = private unnamed_addr constant [5 x i8] c"uint\00", align 1
@"csbs$23d" = private unnamed_addr constant [8 x i8] c"uintptr\00", align 1
@"csbs$23e" = private unnamed_addr constant [5 x i8] c"rune\00", align 1
@"csbs$23f" = private unnamed_addr constant [8 x i8] c"complex\00", align 1
@"csbs$240" = private unnamed_addr constant [11 x i8] c"quaternion\00", align 1
@"csbs$241" = private unnamed_addr constant [7 x i8] c"string\00", align 1
@"csbs$242" = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@"csbs$243" = private unnamed_addr constant [4 x i8] c"any\00", align 1
@"csbs$244" = private unnamed_addr constant [7 x i8] c"typeid\00", align 1
@"csbs$245" = private unnamed_addr constant [7 x i8] c"rawptr\00", align 1
@"csbs$246" = private unnamed_addr constant [2 x i8] c"^\00", align 1
@"csbs$247" = private unnamed_addr constant [4 x i8] c"[^]\00", align 1
@"csbs$248" = private unnamed_addr constant [7 x i8] c"#soa ^\00", align 1
@"csbs$249" = private unnamed_addr constant [5 x i8] c"proc\00", align 1
@"csbs$24a" = private unnamed_addr constant [3 x i8] c"()\00", align 1
@"csbs$24b" = private unnamed_addr constant [3 x i8] c", \00", align 1
@"csbs$24c" = private unnamed_addr constant [2 x i8] c")\00", align 1
@"csbs$24d" = private unnamed_addr constant [5 x i8] c" -> \00", align 1
@"csbs$24e" = private unnamed_addr constant [8 x i8] c"#sparse\00", align 1
@"csbs$24f" = private unnamed_addr constant [10 x i8] c"[dynamic]\00", align 1
@"csbs$250" = private unnamed_addr constant [3 x i8] c"[]\00", align 1
@"csbs$251" = private unnamed_addr constant [5 x i8] c"map[\00", align 1
@"csbs$252" = private unnamed_addr constant [6 x i8] c"#soa[\00", align 1
@"csbs$253" = private unnamed_addr constant [7 x i8] c"#soa[]\00", align 1
@"csbs$254" = private unnamed_addr constant [14 x i8] c"#soa[dynamic]\00", align 1
@"csbs$255" = private unnamed_addr constant [8 x i8] c"struct \00", align 1
@"csbs$256" = private unnamed_addr constant [9 x i8] c"#packed \00", align 1
@"csbs$257" = private unnamed_addr constant [12 x i8] c"#raw_union \00", align 1
@"csbs$258" = private unnamed_addr constant [8 x i8] c"#align \00", align 1
@"csbs$259" = private unnamed_addr constant [7 x i8] c"union \00", align 1
@"csbs$25a" = private unnamed_addr constant [9 x i8] c"#no_nil \00", align 1
@"csbs$25b" = private unnamed_addr constant [2 x i8] c"}\00", align 1
@"csbs$25c" = private unnamed_addr constant [6 x i8] c"enum \00", align 1
@"csbs$25d" = private unnamed_addr constant [3 x i8] c" {\00", align 1
@"csbs$25e" = private unnamed_addr constant [9 x i8] c"bit_set[\00", align 1
@"csbs$25f" = private unnamed_addr constant [3 x i8] c"..\00", align 1
@"csbs$260" = private unnamed_addr constant [3 x i8] c"; \00", align 1
@"csbs$261" = private unnamed_addr constant [7 x i8] c"#simd[\00", align 1
@"csbs$262" = private unnamed_addr constant [11 x i8] c"#relative(\00", align 1
@"csbs$263" = private unnamed_addr constant [3 x i8] c") \00", align 1
@"csbs$264" = private unnamed_addr constant [8 x i8] c"matrix[\00", align 1
@"csbs$265" = private unnamed_addr constant [2 x i8] c"]\00", align 1
@"csbs$266" = private unnamed_addr constant [28 x i8] c"../init/sftn-enums.hot.odin\00", align 1
@"csbs$267" = private unnamed_addr constant [77 x i8] c"C:/Users/krisd/Documents/Programming/Odin/odin-sftn/enumbench/enumbench.odin\00", align 1
@"csbs$268" = private unnamed_addr constant [5 x i8] c"main\00", align 1
@"csbs$269" = private unnamed_addr constant [24 x i8] c"Starting SDL Example...\00", align 1
@"csbs$26a" = private unnamed_addr constant [30 x i8] c"Error during SDL init: (%d)%s\00", align 1
@"csbs$26b" = private unnamed_addr constant [25 x i8] c"Setting up the window...\00", align 1
@"csbs$26c" = private unnamed_addr constant [30 x i8] c"odin-imgui SDL+OpenGL example\00", align 1
@"csbs$26d" = private unnamed_addr constant [33 x i8] c"Error during window creation: %s\00", align 1
@"csbs$26e" = private unnamed_addr constant [25 x i8] c"Setting up the OpenGL...\00", align 1
@"csbs$26f" = private unnamed_addr constant [20 x i8] c"Got SDL_QUIT event!\00", align 1
@"csbs$270" = private unnamed_addr constant [17 x i8] c"Shutting down...\00", align 1
@"csbs$271" = private unnamed_addr constant [35 x i8] c"Press Esc to close the application\00", align 1
@"csbs$272" = private unnamed_addr constant [30 x i8] c"Press Tab to show demo window\00", align 1
@"csbs$273" = private unnamed_addr constant [15 x i8] c"Enum Relations\00", align 1
@"csbs$274" = private unnamed_addr constant [5 x i8] c"Tabs\00", align 1
@"csbs$275" = private unnamed_addr constant [13 x i8] c"Enum to Enum\00", align 1
@"csbs$276" = private unnamed_addr constant [14 x i8] c"##rel_combo%v\00", align 1
@"csbs$277" = private unnamed_addr constant [17 x i8] c"View Description\00", align 1
@"csbs$278" = private unnamed_addr constant [20 x i8] c"##view_desc_input%v\00", align 1
@"csbs$279" = private unnamed_addr constant [16 x i8] c"Inv Description\00", align 1
@"csbs$27a" = private unnamed_addr constant [19 x i8] c"##inv_desc_input%v\00", align 1
@"csbs$27b" = private unnamed_addr constant [13 x i8] c"Current Enum\00", align 1
@"csbs$27c" = private unnamed_addr constant [10 x i8] c"##cases%v\00", align 1
@"csbs$27d" = private unnamed_addr constant [11 x i8] c"X##cases$v\00", align 1
@"csbs$27e" = private unnamed_addr constant [12 x i8] c"enum_window\00", align 1
@main.enum_window-.newtext_buff-48849 = internal global [64 x i8] zeroinitializer
@"csbs$27f" = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@"csbs$280" = private unnamed_addr constant [9 x i8] c"Add case\00", align 1
@"csbs$281" = private unnamed_addr constant [11 x i8] c"Main Enums\00", align 1
@main.input_text_window-.new_enum_buff-48988 = internal global [64 x i8] zeroinitializer
@"csbs$282" = private unnamed_addr constant [11 x i8] c"##new_enum\00", align 1
@"csbs$283" = private unnamed_addr constant [9 x i8] c"Add Enum\00", align 1
@"csbs$284" = private unnamed_addr constant [18 x i8] c"input_text_window\00", align 1
@main.input_text_window-.item_current_index-49062 = internal global i64 0
@"csbs$285" = private unnamed_addr constant [8 x i8] c"##enums\00", align 1
@"csbs$286" = private unnamed_addr constant [12 x i8] c"Delete Enum\00", align 1
@"csbs$287" = private unnamed_addr constant [15 x i8] c"Compile button\00", align 1
@"csbs$288" = private unnamed_addr constant [9 x i8] c"Compile!\00", align 1
@"csbs$289" = private unnamed_addr constant [5 x i8] c"init\00", align 1
@"csbs$28a" = private unnamed_addr constant [65 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/fmt/fmt.odin\00", align 1
@"ggv$4b" = private unnamed_addr constant %fmt.Info { i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, [1 x i8] zeroinitializer, i64 0, i64 0, i64 0, i8 0, i8 1, i8 0, i8 0, [4 x i8] zeroinitializer, %io.Writer zeroinitializer, %..any zeroinitializer, i64 0, i64 0, %"runtime.Maybe(int)-16164" zeroinitializer, i8 0, [7 x i8] zeroinitializer, i64 0 }
@"csbs$28b" = private unnamed_addr constant [14 x i8] c"%!(BAD WIDTH)\00", align 1
@"csbs$28c" = private unnamed_addr constant [18 x i8] c"%!(BAD PRECISION)\00", align 1
@"csbs$28d" = private unnamed_addr constant [12 x i8] c"%!(NO VERB)\00", align 1
@"csbs$28e" = private unnamed_addr constant [24 x i8] c"%!(BAD ARGUMENT NUMBER)\00", align 1
@"csbs$28f" = private unnamed_addr constant [21 x i8] c"%!(MISSING ARGUMENT)\00", align 1
@"csbs$290" = private unnamed_addr constant [24 x i8] c"%!(BAD ARGUMENT NUMBER \00", align 1
@"csbs$291" = private unnamed_addr constant [24 x i8] c"%!(MISSING CLOSE BRACE)\00", align 1
@"csbs$292" = private unnamed_addr constant [10 x i8] c"%!(EXTRA \00", align 1
@"csbs$293" = private unnamed_addr constant [6 x i8] c"<nil>\00", align 1
@"csbs$294" = private unnamed_addr constant [3 x i8] c"%!\00", align 1
@"csbs$295" = private unnamed_addr constant [5 x i8] c"true\00", align 1
@"csbs$296" = private unnamed_addr constant [6 x i8] c"false\00", align 1
@"csbs$297" = private unnamed_addr constant [54 x i8] c"_fmt_int: buffer overrun. Width and precision too big\00", align 1
@"csbs$298" = private unnamed_addr constant [9 x i8] c"_fmt_int\00", align 1
@"csbs$299" = private unnamed_addr constant [31 x i8] c"_fmt_int: unknown base, whoops\00", align 1
@"csbs$29a" = private unnamed_addr constant [13 x i8] c"_fmt_int_128\00", align 1
@"csbs$29b" = private unnamed_addr constant [3 x i8] c"U+\00", align 1
@"csbs$29c" = private unnamed_addr constant [21 x i8] c"Unhandled float size\00", align 1
@"csbs$29d" = private unnamed_addr constant [10 x i8] c"fmt_float\00", align 1
@"csbs$29e" = private unnamed_addr constant [3 x i8] c"0h\00", align 1
@"csbs$29f" = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@"csbs$2a0" = private unnamed_addr constant [13 x i8] c"#soa{data=0x\00", align 1
@"csbs$2a1" = private unnamed_addr constant [9 x i8] c", index=\00", align 1
@"csbs$2a2" = private unnamed_addr constant [19 x i8] c"%!(BAD ENUM VALUE=\00", align 1
@"csbs$2a3" = private unnamed_addr constant [22 x i8] c"unknown bit_size size\00", align 1
@"csbs$2a4" = private unnamed_addr constant [12 x i8] c"fmt_bit_set\00", align 1
@"csbs$2a5" = private unnamed_addr constant [3 x i8] c",\0A\00", align 1
@"csbs$2a6" = private unnamed_addr constant [4 x i8] c"fmt\00", align 1
@"csbs$2a7" = private unnamed_addr constant [2 x i8] c"-\00", align 1
@"csbs$2a8" = private unnamed_addr constant [2 x i8] c"0\00", align 1
@"csbs$2a9" = private unnamed_addr constant [12 x i8] c"(raw union)\00", align 1
@"csbs$2aa" = private unnamed_addr constant [3 x i8] c"{}\00", align 1
@"csbs$2ab" = private unnamed_addr constant [4 x i8] c" = \00", align 1
@"csbs$2ac" = private unnamed_addr constant [6 x i8] c"any{}\00", align 1
@"csbs$2ad" = private unnamed_addr constant [3 x i8] c"0s\00", align 1
@"csbs$2ae" = private unnamed_addr constant [3 x i8] c"\C2\B5\00", align 1
@"csbs$2af" = private unnamed_addr constant [11 x i8] c" +0000 UTC\00", align 1
@"csbs$2b0" = private unnamed_addr constant [23 x i8] c"Invalid union tag type\00", align 1
@"csbs$2b1" = private unnamed_addr constant [10 x i8] c"fmt_union\00", align 1
@"csbs$2b2" = private unnamed_addr constant [3 x i8] c"[\0A\00", align 1
@"csbs$2b3" = private unnamed_addr constant [2 x i8] c"=\00", align 1
@"csbs$2b4" = private unnamed_addr constant [4 x i8] c" @ \00", align 1
@"csbs$2b5" = private unnamed_addr constant [73 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/os/file_windows.odin\00", align 1
@"csbs$2b6" = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@"csbs$2b7" = private unnamed_addr constant [63 x i8] c"C:/Users/krisd/Documents/Programming/Odin/Odin/core/os/os.odin\00", align 1
@"csbs$2b8" = private unnamed_addr constant [29 x i8] c"read_entire_file_from_handle\00", align 1
@"csbs$2b9" = private unnamed_addr constant [17 x i8] c"backing_from_dtw\00", align 1
@"csbs$2ba" = private unnamed_addr constant [56 x i8] c"Error! Description for %v %v over 128 chars in length!\0A\00", align 1
@"csbs$2bb" = private unnamed_addr constant [20 x i8] c"init_case_relations\00", align 1
@"csbs$2bc" = private unnamed_addr constant [9 x i8] c"init_dtw\00", align 1
@"csbs$2bd" = private unnamed_addr constant [9 x i8] c"add_enum\00", align 1
@"csbs$2be" = private unnamed_addr constant [3 x i8] c"::\00", align 1
@"csbs$2bf" = private unnamed_addr constant [5 x i8] c"enum\00", align 1
@"csbs$2c0" = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@"csbs$2c1" = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@"csbs$2c2" = private unnamed_addr constant [2 x i8] c",\00", align 1
@"csbs$2c3" = private unnamed_addr constant [4 x i8] c",\0A\09\00", align 1
@"csbs$2c4" = private unnamed_addr constant [4 x i8] c"\0A}\0A\00", align 1
@"csbs$2c5" = private unnamed_addr constant [10 x i8] c"#partial \00", align 1
@"csbs$2c6" = private unnamed_addr constant [19 x i8] c"_enum_relation := \00", align 1
@"csbs$2c7" = private unnamed_addr constant [2 x i8] c"[\00", align 1
@"csbs$2c8" = private unnamed_addr constant [10 x i8] c"] typeid \00", align 1
@"csbs$2c9" = private unnamed_addr constant [29 x i8] c"ODINSOURCE_make_e2e_relation\00", align 1
@"csbs$2ca" = private unnamed_addr constant [11 x i8] c"\09.%v = %v,\00", align 1
@"csbs$2cb" = private unnamed_addr constant [33 x i8] c"Descriptions for %v not handled!\00", align 1
@"csbs$2cc" = private unnamed_addr constant [23 x i8] c"_view_descriptions := \00", align 1
@"csbs$2cd" = private unnamed_addr constant [10 x i8] c"] string \00", align 1
@"csbs$2ce" = private unnamed_addr constant [33 x i8] c"ODINSOURCE_make_view_description\00", align 1
@"csbs$2cf" = private unnamed_addr constant [10 x i8] c"Decl %v \0A\00", align 1
@"csbs$2d0" = private unnamed_addr constant [13 x i8] c"\09.%v = \22%v\22,\00", align 1
@"csbs$2d1" = private unnamed_addr constant [22 x i8] c"_inv_descriptions := \00", align 1
@"csbs$2d2" = private unnamed_addr constant [32 x i8] c"ODINSOURCE_make_inv_description\00", align 1
@"csbs$2d3" = private unnamed_addr constant [12 x i8] c"delete_enum\00", align 1
@"csbs$2d4" = private unnamed_addr constant [23 x i8] c"Could not read file. \0A\00", align 1
@"csbs$2d5" = private unnamed_addr constant [38 x i8] c"read_file_by_lines_in_whole_sweepscan\00", align 1
@"csbs$2d6" = private unnamed_addr constant [19 x i8] c"write_data_to_file\00", align 1
@"csbs$2d7" = private unnamed_addr constant [14 x i8] c"package %v;\0A\0A\00", align 1

define internal void @"__$startup_type_info"() {
decls:
  br label %entry

entry:                                            ; preds = %decls
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 2), align 4
  store i64 3746994889972252829, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$0" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 157, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 2), align 4
  store i64 1441151880758558878, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), { %..string*, i64 } { %..string* getelementptr inbounds ([244 x %..string], [244 x %..string]* @"$enum_names-158", i64 0, i64 0), i64 244 }, { i64*, i64 } { i64* getelementptr inbounds ([244 x i64], [244 x i64]* @"$enum_values-158", i64 0, i64 0), i64 244 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 158, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 2), align 4
  store i64 4683743612465315862, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 2), align 4
  store i64 3746994889972252825, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 153, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 2), align 4
  store i64 1441151880758558874, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), { %..string*, i64 } { %..string* getelementptr inbounds ([11 x %..string], [11 x %..string]* @"$enum_names-154", i64 0, i64 0), i64 11 }, { i64*, i64 } { i64* getelementptr inbounds ([11 x i64], [11 x i64]* @"$enum_values-154", i64 0, i64 0), i64 11 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 154, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 2), align 4
  store i64 3746994889972252821, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 149, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 2), align 4
  store i64 1441151880758558870, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106), { %..string*, i64 } { %..string* getelementptr inbounds ([5 x %..string], [5 x %..string]* @"$enum_names-150", i64 0, i64 0), i64 5 }, { i64*, i64 } { i64* getelementptr inbounds ([5 x i64], [5 x i64]* @"$enum_values-150", i64 0, i64 0), i64 5 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 150, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 2), align 4
  store i64 72057594037928042, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 106, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 2), align 4
  store i64 72057594037928040, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 2), align 4
  store i64 72057594037927939, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 2), align 4
  store i64 720575940379279420, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 60, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 2), align 4
  store i64 432345564227567617, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 4), align 8
  store i64 7, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 2), align 4
  store i64 720575940379279362, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 2, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 2), align 4
  store i64 4683743612465315844, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 2), align 4
  store i64 720575940379279418, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 58, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 2), align 4
  store i64 720575940379279368, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8, i32 5, i32 1), align 8
  store i64 160, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 2), align 4
  store i64 3602879701896396809, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 9, i32 5, i32 1), align 8
  store i64 160, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 2), align 4
  store i64 1297036692682702858, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 0), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$116", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 0), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 0), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 0), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 1), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$117", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 1), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 1), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 1), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 2), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$118", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 2), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 2), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 2), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 3), align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$119", i64 0, i64 0), i64 2 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 3), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 3), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 3), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 4), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$11a", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 4), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 4), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 4), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$4" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 10, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 2), align 4
  store i64 3891110078048108555, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$5" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 11, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 2), align 4
  store i64 1585267068834414604, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 4), align 8
  store %runtime.Type_Info_Bit_Set { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13), %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15), i64 0, i64 1 }, %runtime.Type_Info_Bit_Set* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 5) to %runtime.Type_Info_Bit_Set*), align 8
  store i64 23, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 12, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 2), align 4
  store i64 3746994889972252685, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$6" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 13, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 2), align 4
  store i64 1441151880758558734, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([2 x %..string], [2 x %..string]* @"$enum_names-14", i64 0, i64 0), i64 2 }, { i64*, i64 } { i64* getelementptr inbounds ([2 x i64], [2 x i64]* @"$enum_values-14", i64 0, i64 0), i64 2 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 14, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 2), align 4
  store i64 72057594037927951, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 15, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 2), align 4
  store i64 7, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 4), align 8
  store i64 10, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 7, i32 5, i32 1), align 8
  store i64 128, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 2), align 4
  store i64 1369094286720630800, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 5), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 6), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 7), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 8), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 9), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 10), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 11), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 12), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 13), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 14), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 15), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 16), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 17), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 18), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 19), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 20), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 21), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 22), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 23), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 24), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 25), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 26), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 27), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 28), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 29), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 30), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 31), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 32), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 5), i64 28 }, i64 120, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), i8 (i8*, i8*)* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 16, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 2), align 4
  store i64 72057594037927953, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17, i32 5, i32 1), align 8
  store i64 80, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 2), align 4
  store i64 3602879701896396818, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$7" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 18, i32 5, i32 1), align 8
  store i64 80, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 2), align 4
  store i64 1297036692682702867, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 33), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$120", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 5), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 5), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 5), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 34), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$121", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 6), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 6), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 6), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 35), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$122", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 7), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 7), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 7), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 36), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$123", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 8), align 8
  store i64 40, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 8), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 8), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$8" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 19, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 2), align 4
  store i64 3602879701896396820, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$9" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 20, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 2), align 4
  store i64 1297036692682702869, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 37), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$125", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 9), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 9), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 9), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 38), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$126", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 10), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 10), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 10), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 39), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$127", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 11), align 8
  store i64 20, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 11), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 11), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 40), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$128", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 12), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 12), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 12), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$a" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 21, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 2), align 4
  store i64 3602879701896396823, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 23, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 2), align 4
  store i64 1297036692682702872, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 41), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$12a", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 13), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 13), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 13), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 42), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$12b", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 14), align 8
  store i64 1, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 14), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 14), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$c" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 24, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 2), align 4
  store i64 504403158265495577, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 2), align 4
  store i64 3746994889972252698, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 2), align 4
  store i64 1441151880758558747, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([3 x %..string], [3 x %..string]* @"$enum_names-27", i64 0, i64 0), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([3 x i64], [3 x i64]* @"$enum_values-27", i64 0, i64 0), i64 3 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 27, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 2), align 4
  store i64 3602879701896396828, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 28, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 2), align 4
  store i64 1297036692682702877, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 5) to i8*), i8 0, i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 29, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 2), align 4
  store i64 3602879701896396830, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 30, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 2), align 4
  store i64 1297036692682702879, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 26), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 43), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$12b", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 15), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 15), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 15), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$10" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 31, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 2), align 4
  store i64 3602879701896396832, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$11" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 32, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 2), align 4
  store i64 3602879701896396833, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$12" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 33, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 2), align 4
  store i64 3602879701896396834, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$13" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 34, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 2), align 4
  store i64 1297036692682702883, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 44), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$135", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 16), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 16), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 16), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$14" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 35, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 2), align 4
  store i64 3602879701896396836, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$15" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 36, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 2), align 4
  store i64 3602879701896396837, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$16" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 37, i32 5, i32 1), align 8
  store i64 0, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 2), align 4
  store i64 3602879701896396838, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$17" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 38, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 2), align 4
  store i64 3602879701896396839, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$18" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 39, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 2), align 4
  store i64 1297036692682702888, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 45), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 17), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 17), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 17), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$19" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 40, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 2), align 4
  store i64 3602879701896396841, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 41, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 2), align 4
  store i64 3602879701896396842, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 42, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 2), align 4
  store i64 1297036692682702891, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 46), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$13d", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 18), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 18), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 18), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 47), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$13e", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 19), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 19), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 19), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 48), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$13f", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 20), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 20), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 20), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 49), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$140", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 21), align 8
  store i64 17, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 21), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 21), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$1c" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 43, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 2), align 4
  store i64 3746994889972252716, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 44, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 2), align 4
  store i64 1441151880758558765, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([10 x %..string], [10 x %..string]* @"$enum_names-45", i64 0, i64 0), i64 10 }, { i64*, i64 } { i64* getelementptr inbounds ([10 x i64], [10 x i64]* @"$enum_values-45", i64 0, i64 0), i64 10 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 45, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 2), align 4
  store i64 3602879701896396846, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$1e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 46, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 2), align 4
  store i64 1297036692682702895, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 50), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 22), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 22), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 22), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 51), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$14c", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 23), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 23), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 23), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 52), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$14d", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 24), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 24), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 24), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$1f" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 47, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 2), align 4
  store i64 3602879701896396848, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$20" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 48, i32 5, i32 1), align 8
  store i64 56, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 2), align 4
  store i64 1297036692682702897, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 53), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 25), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 25), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 25), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 54), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$14f", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 26), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 26), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 26), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 55), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$14c", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 27), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 27), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 27), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 56), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$14d", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 28), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 28), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 28), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 57), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$150", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 29), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 29), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 29), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 58), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$151", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 30), align 8
  store i64 40, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 30), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 30), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 59), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$152", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 31), align 8
  store i64 48, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 31), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 31), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$21" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 49, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 2), align 4
  store i64 6989586621679009842, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$22" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 2), align 4
  store i64 4683743612465315891, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 2), align 4
  store i64 3602879701896396852, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$23" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 52, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 2), align 4
  store i64 1297036692682702901, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 60), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 32), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 32), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 32), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 61), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$14c", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 33), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 33), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 33), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$24" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 53, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 2), align 4
  store i64 3602879701896396854, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$25" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 54, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 2), align 4
  store i64 3602879701896396855, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$26" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 55, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 2), align 4
  store i64 1297036692682702904, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 62), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$157", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 34), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 34), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 34), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 63), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$158", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 35), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 35), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 35), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$27" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 56, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 2), align 4
  store i64 1152921504606847033, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 2), align 4
  store i64 1152921504606847035, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 1), i64 16 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59, i32 5, i32 1), align 8
  store i64 120, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 2), align 4
  store i64 3602879701896396861, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$28" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 61, i32 5, i32 1), align 8
  store i64 120, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 2), align 4
  store i64 1297036692682702910, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 64), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$157", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 36), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 36), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 36), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 65), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$158", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 37), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 37), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 37), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 66), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$15a", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 38), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 38), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 38), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 67), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$15b", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 39), align 8
  store i64 48, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 39), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 39), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 68), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$15c", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 40), align 8
  store i64 64, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 40), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 40), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 69), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$15d", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 41), align 8
  store i64 80, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 41), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 41), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 70), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$15e", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 42), align 8
  store i64 81, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 42), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 42), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 71), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$15f", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 43), align 8
  store i64 82, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 43), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 43), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 72), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$160", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 44), align 8
  store i64 88, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 44), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 44), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 73), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$161", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 45), align 8
  store i64 96, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 45), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 45), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 74), align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$162", i64 0, i64 0), i64 13 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 46), align 8
  store i64 104, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 46), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 46), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 75), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$163", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 47), align 8
  store i64 112, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 47), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 47), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$29" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 62, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 2), align 4
  store i64 1152921504606847039, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 63, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 2), align 4
  store i64 72057594037928000, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 2), align 4
  store i64 720575940379279425, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 65, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 2), align 4
  store i64 1152921504606847042, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), i64 1 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 66, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 2), align 4
  store i64 720575940379279427, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 67, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 2), align 4
  store i64 3170534137668829252, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 2), align 4
  store i64 864691128455135301, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 4), align 8
  store %runtime.Type_Info_Procedure { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70), %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71), i8 0, i8 2, [6 x i8] zeroinitializer }, %runtime.Type_Info_Procedure* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 5) to %runtime.Type_Info_Procedure*), align 8
  store i64 13, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 69, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 2), align 4
  store i64 1224979098644774982, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 76), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$165", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 48), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 77), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$165", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 49), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 76), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 48), i64 2 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 70, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 2), align 4
  store i64 720575940379279366, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 4), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 2), align 4
  store i64 1224979098644774983, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 78), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 78), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 50), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 71, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 2), align 4
  store i64 3746994889972252744, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2b" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 72, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 2), align 4
  store i64 1441151880758558793, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 3), { %..string*, i64 } { %..string* getelementptr inbounds ([4 x %..string], [4 x %..string]* @"$enum_names-73", i64 0, i64 0), i64 4 }, { i64*, i64 } { i64* getelementptr inbounds ([4 x i64], [4 x i64]* @"$enum_values-73", i64 0, i64 0), i64 4 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 73, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 2), align 4
  store i64 3602879701896396874, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 74, i32 5, i32 1), align 8
  store i64 48, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 2), align 4
  store i64 1297036692682702923, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 57), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 79), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$16b", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 51), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 48), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 48), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 80), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$16c", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 52), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 49), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 49), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 81), align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$16d", i64 0, i64 0), i64 8 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 53), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 50), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 50), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 82), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$160", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 54), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 51), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 51), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 83), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$15f", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 55), align 8
  store i64 40, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 52), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 52), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 84), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$16e", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 56), align 8
  store i64 41, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 53), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 53), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 25), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 85), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$16f", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 57), align 8
  store i64 42, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 54), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 54), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$2d" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 75, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 2), align 4
  store i64 3602879701896396876, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$2e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 76, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 2), align 4
  store i64 1297036692682702925, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 86), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$121", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 58), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 55), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 55), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 59), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 87), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$158", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 59), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 56), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 56), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 88), align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$171", i64 0, i64 0), i64 6 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 60), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 57), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 57), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$2f" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 77, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 2), align 4
  store i64 1152921504606847054, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50), i64 8 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 78, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 2), align 4
  store i64 720575940379279439, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 50) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 79, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 2), align 4
  store i64 3602879701896396880, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$30" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 80, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 2), align 4
  store i64 1297036692682702929, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 89), align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$173", i64 0, i64 0), i64 3 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 61), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 58), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 58), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 90), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$174", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 62), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 59), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 59), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 91), align 8
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$175", i64 0, i64 0), i64 16 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 63), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 60), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 60), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 68), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 92), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$176", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 64), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 61), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 61), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 93), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$177", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 65), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 62), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 62), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$31" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 81, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 2), align 4
  store i64 3170534137668829266, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$32" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 82, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 2), align 4
  store i64 864691128455135315, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 4), align 8
  store %runtime.Type_Info_Procedure { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84), %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85), i8 0, i8 2, [6 x i8] zeroinitializer }, %runtime.Type_Info_Procedure* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 5) to %runtime.Type_Info_Procedure*), align 8
  store i64 13, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 83, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 2), align 4
  store i64 1224979098644774996, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 6), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 94), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$179", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 66), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 95), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$17a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 67), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 94), i64 2 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 66), i64 2 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 84, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 2), align 4
  store i64 1224979098644774997, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 64), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 96), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 96), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 68), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 85, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 2), align 4
  store i64 3602879701896396886, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$33" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 86, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 2), align 4
  store i64 1297036692682702935, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 97), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 69), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 63), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 63), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 98), align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$17c", i64 0, i64 0), i64 10 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 70), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 64), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 64), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 99), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$17d", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 71), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 65), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 65), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 100), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$17e", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 72), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 66), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 66), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$34" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 87, i32 5, i32 1), align 8
  store i64 24, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 2), align 4
  store i64 3602879701896396888, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$35" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 88, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 2), align 4
  store i64 3602879701896396889, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$36" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 89, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 2), align 4
  store i64 1297036692682702938, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 101), align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$181", i64 0, i64 0), i64 7 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 73), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 67), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 67), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 102), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$182", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 74), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 68), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 68), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$37" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 90, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 2), align 4
  store i64 3602879701896396891, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$38" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 91, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 2), align 4
  store i64 1297036692682702940, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 103), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$184", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 75), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 69), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 69), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 104), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$182", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 76), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 70), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 70), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$39" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 92, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 2), align 4
  store i64 3602879701896396893, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3a" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 93, i32 5, i32 1), align 8
  store i64 40, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 2), align 4
  store i64 1297036692682702942, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 8), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 105), align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$13a", i64 0, i64 0), i64 4 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 77), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 71), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 71), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 106), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$14c", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 78), align 8
  store i64 8, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 72), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 72), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 107), align 8
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$186", i64 0, i64 0), i64 11 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 79), align 8
  store i64 16, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 73), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 73), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 108), align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$187", i64 0, i64 0), i64 9 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 80), align 8
  store i64 24, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 74), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 74), align 1
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 109), align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$188", i64 0, i64 0), i64 12 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 81), align 8
  store i64 32, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 75), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 75), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$3b" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 94, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 2), align 4
  store i64 3602879701896396895, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3c" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 95, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 2), align 4
  store i64 5, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 4), align 8
  store i64 9, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 2), align 4
  store i64 5044031582654955616, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 7, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 96, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 2), align 4
  store i64 3746994889972252769, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3d" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 97, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 2), align 4
  store i64 1441151880758558818, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), { %..string*, i64 } { %..string* getelementptr inbounds ([3 x %..string], [3 x %..string]* @"$enum_names-98", i64 0, i64 0), i64 3 }, { i64*, i64 } { i64* getelementptr inbounds ([3 x i64], [3 x i64]* @"$enum_values-98", i64 0, i64 0), i64 3 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 98, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 2), align 4
  store i64 1152921504606847075, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 4), align 8
  store %runtime.Type_Info_Slice { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5), i64 16 }, %runtime.Type_Info_Slice* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 5) to %runtime.Type_Info_Slice*), align 8
  store i64 17, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 99, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 2), align 4
  store i64 720575940379279460, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 4), align 8
  store %runtime.Type_Info_Pointer { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 5) }, %runtime.Type_Info_Pointer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 5) to %runtime.Type_Info_Pointer*), align 8
  store i64 11, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 100, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 2), align 4
  store i64 3674937295934324879, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3e" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 143, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 2), align 4
  store i64 1369094286720630928, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 110), align 8
  store %runtime.Type_Info_Union { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 110), i64 1 }, i64 8, %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 17), i8 (i8*, i8*)* null, i8 0, i8 0, i8 0, [5 x i8] zeroinitializer }, %runtime.Type_Info_Union* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 5) to %runtime.Type_Info_Union*), align 8
  store i64 20, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 144, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 1), align 8
  store i32 0, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 2), align 4
  store i64 1224979098644775057, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 111), align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$1f", i64 0, i64 0), i64 1 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 82), align 8
  store %runtime.Type_Info_Tuple { { %runtime.Type_Info**, i64 } { %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 111), i64 1 }, { %..string*, i64 } { %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 82), i64 1 } }, %runtime.Type_Info_Tuple* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 5) to %runtime.Type_Info_Tuple*), align 8
  store i64 18, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 145, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 2), align 4
  store i64 72057594037928043, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 107, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 2), align 4
  store i64 72057594037928051, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 115, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 2), align 4
  store i64 72057594037928044, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 108, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 2), align 4
  store i64 72057594037928052, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 116, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 2), align 4
  store i64 4755801206503243899, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 4), align 8
  store i64 3, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 123, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 2), align 4
  store i64 6989586621679009938, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$3f" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 146, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 2), align 4
  store i64 3602879701896396947, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$40" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 147, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 2), align 4
  store i64 1297036692682702996, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 4), align 8
  store %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 51), %runtime.Type_Info** getelementptr inbounds ([113 x %runtime.Type_Info*], [113 x %runtime.Type_Info*]* @"__$type_info_types_data", i64 0, i64 112), align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$195", i64 0, i64 0), i64 5 }, %..string* getelementptr inbounds ([113 x %..string], [113 x %..string]* @"__$type_info_names_data", i64 0, i64 83), align 8
  store i64 0, i64* getelementptr inbounds ([113 x i64], [113 x i64]* @"__$type_info_offsets_data", i64 0, i64 76), align 8
  store i8 0, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @"__$type_info_usings_data", i64 0, i64 76), align 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Struct* @"ggv$41" to i8*), i64 120, i1 false)
  store i64 19, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 148, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 2), align 4
  store i64 4683743612465315941, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 101, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 2), align 4
  store i64 4683743612465315942, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 102, i32 5, i32 1), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 0), align 8
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 2), align 4
  store i64 504403158265495682, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 130, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 2), align 4
  store i64 504403158265495683, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 131, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 2), align 4
  store i64 504403158265495684, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 132, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 2), align 4
  store i64 504403158265495685, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 4), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 133, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 2), align 4
  store i64 216172782113783946, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 138, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 2), align 4
  store i64 216172782113783932, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 124, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 2), align 4
  store i64 216172782113783933, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 5) to i8*), i8 0, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 125, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 2), align 4
  store i64 216172782113783947, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 139, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 2), align 4
  store i64 216172782113783934, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 126, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 2), align 4
  store i64 216172782113783935, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 5) to i8*), i8 1, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 127, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 2), align 4
  store i64 216172782113783948, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 140, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 2), align 4
  store i64 216172782113783936, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 128, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 2), align 4
  store i64 216172782113783937, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 5) to i8*), i8 2, i64 1, i1 false)
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 129, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 2), align 4
  store i64 288230376151711885, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 141, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 2), align 4
  store i64 288230376151711878, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 134, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 2), align 4
  store i64 288230376151711879, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 4), align 8
  store i64 5, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 135, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 2), align 4
  store i64 142, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 142, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 2), align 4
  store i64 136, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 136, i32 5, i32 1), align 8
  store i64 32, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 2), align 4
  store i64 137, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 4), align 8
  store i64 6, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 137, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 2), align 4
  store i64 4683743612465315951, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 111, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 2), align 4
  store i64 4683743612465315952, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 112, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 2), align 4
  store i64 4683743612465315953, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 113, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 2), align 4
  store i64 72057594037928045, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 109, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 2), align 4
  store i64 4683743612465315959, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 119, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 2), align 4
  store i64 4683743612465315960, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 120, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 2), align 4
  store i64 4683743612465315961, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 121, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 2), align 4
  store i64 72057594037928053, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 117, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 2), align 4
  store i64 4683743612465315943, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 0 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 103, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 2), align 4
  store i64 72057594037928041, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 5) to i8*), i8 0, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 105, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 2), align 4
  store i64 4683743612465315954, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 4), align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 5) to i8*), i8 1, i64 2, i1 false)
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 114, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 2), align 4
  store i64 72057594037928046, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 1 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 110, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 2), align 4
  store i64 4683743612465315962, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 1, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 122, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 2), align 4
  store i64 72057594037928054, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 4), align 8
  store %runtime.Type_Info_Integer { i8 0, i8 2 }, %runtime.Type_Info_Integer* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 5) to %runtime.Type_Info_Integer*), align 1
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 118, i32 5, i32 1), align 8
  store i64 16, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 2), align 4
  store i64 2738188573441261731, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$42" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 163, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 2), align 4
  store i64 3746994889972252823, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$43" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 151, i32 5, i32 1), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 0), align 8
  store i64 8, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 2), align 4
  store i64 1441151880758558872, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 4), { %..string*, i64 } { %..string* getelementptr inbounds ([12 x %..string], [12 x %..string]* @"$enum_names-152", i64 0, i64 0), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([12 x i64], [12 x i64]* @"$enum_values-152", i64 0, i64 0), i64 12 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 152, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 2), align 4
  store i64 3746994889972252827, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$44" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 155, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 2), align 4
  store i64 1441151880758558876, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), { %..string*, i64 } { %..string* getelementptr inbounds ([140 x %..string], [140 x %..string]* @"$enum_names-156", i64 0, i64 0), i64 140 }, { i64*, i64 } { i64* getelementptr inbounds ([140 x i64], [140 x i64]* @"$enum_values-156", i64 0, i64 0), i64 140 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 156, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 2), align 4
  store i64 3746994889972252831, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$45" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 159, i32 5, i32 1), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 0), align 8
  store i64 4, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 2), align 4
  store i64 1441151880758558880, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 22), { %..string*, i64 } { %..string* getelementptr inbounds ([13 x %..string], [13 x %..string]* @"$enum_names-160", i64 0, i64 0), i64 13 }, { i64*, i64 } { i64* getelementptr inbounds ([13 x i64], [13 x i64]* @"$enum_values-160", i64 0, i64 0), i64 13 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 160, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 2), align 4
  store i64 3746994889972252833, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 4), align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 5) to i8*), i8* bitcast (%runtime.Type_Info_Named* @"ggv$46" to i8*), i64 80, i1 false)
  store i64 1, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 161, i32 5, i32 1), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 0), align 8
  store i64 2, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 1), align 8
  store i32 1, i32* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 2), align 4
  store i64 1441151880758558882, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 4), align 8
  store %runtime.Type_Info_Enum { %runtime.Type_Info* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 104), { %..string*, i64 } { %..string* getelementptr inbounds ([12 x %..string], [12 x %..string]* @"$enum_names-162", i64 0, i64 0), i64 12 }, { i64*, i64 } { i64* getelementptr inbounds ([12 x i64], [12 x i64]* @"$enum_values-162", i64 0, i64 0), i64 12 } }, %runtime.Type_Info_Enum* bitcast ({ [15 x i64], i64 }* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 5) to %runtime.Type_Info_Enum*), align 8
  store i64 21, i64* getelementptr inbounds ([164 x %runtime.Type_Info], [164 x %runtime.Type_Info]* @"__$type_info_data", i64 0, i64 162, i32 5, i32 1), align 8
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #0

define i8 @"__$equal1"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }*
  %3 = bitcast i8* %1 to { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }*
  %4 = icmp eq { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 0
  %7 = load %..string, %..string* %5, align 8
  %8 = load %..string, %..string* %6, align 8
  %9 = call i8 @runtime.string_eq(%..string* %5, %..string* %6)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %11 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 1
  %12 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 1
  %13 = load %runtime.Type_Info*, %runtime.Type_Info** %11, align 8
  %14 = load %runtime.Type_Info*, %runtime.Type_Info** %12, align 8
  %15 = icmp eq %runtime.Type_Info* %13, %14
  br i1 %15, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %16 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 2
  %17 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 2
  %18 = load %..string, %..string* %16, align 8
  %19 = load %..string, %..string* %17, align 8
  %20 = call i8 @runtime.string_eq(%..string* %16, %..string* %17)
  %21 = trunc i8 %20 to i1
  br i1 %21, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %22 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %2, i32 0, i32 3
  %23 = getelementptr inbounds { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }, { %..string, %runtime.Type_Info*, %..string, %runtime.Source_Code_Location }* %3, i32 0, i32 3
  %24 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %22, align 8
  %25 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %23, align 8
  %26 = bitcast %runtime.Source_Code_Location* %22 to i8*
  %27 = bitcast %runtime.Source_Code_Location* %23 to i8*
  %28 = call i8 @"__$equal2"(i8* %26, i8* %27)
  %29 = trunc i8 %28 to i1
  br i1 %29, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  ret i8 1

bfalse:                                           ; preds = %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

define internal i8 @runtime.string_eq(%..string* %0, %..string* %1) {
decls:
  %2 = alloca %runtime.Raw_String, align 8
  %3 = alloca %runtime.Raw_String, align 8
  br label %entry

entry:                                            ; preds = %decls
  %4 = load %..string, %..string* %0, align 8
  %5 = bitcast %..string* %0 to %runtime.Raw_String*
  %6 = load %runtime.Raw_String, %runtime.Raw_String* %5, align 8
  store %runtime.Raw_String %6, %runtime.Raw_String* %2, align 8
  %7 = load %..string, %..string* %1, align 8
  %8 = bitcast %..string* %1 to %runtime.Raw_String*
  %9 = load %runtime.Raw_String, %runtime.Raw_String* %8, align 8
  store %runtime.Raw_String %9, %runtime.Raw_String* %3, align 8
  %10 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %2, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %3, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ne i64 %11, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %17 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %2, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %3, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %2, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = call i8 @runtime.memory_equal(i8* %18, i8* %20, i64 %22) #3
  ret i8 %23
}

define i8 @"__$equal2"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to { %..string, i32, i32, %..string }*
  %3 = bitcast i8* %1 to { %..string, i32, i32, %..string }*
  %4 = icmp eq { %..string, i32, i32, %..string }* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 0
  %6 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 0
  %7 = load %..string, %..string* %5, align 8
  %8 = load %..string, %..string* %6, align 8
  %9 = call i8 @runtime.string_eq(%..string* %5, %..string* %6)
  %10 = trunc i8 %9 to i1
  br i1 %10, label %btrue, label %bfalse

btrue:                                            ; preds = %diff_ptr
  %11 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 1
  %12 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 1
  %13 = load i32, i32* %11, align 4
  %14 = load i32, i32* %12, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %btrue1, label %bfalse

btrue1:                                           ; preds = %btrue
  %16 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 2
  %17 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 2
  %18 = load i32, i32* %16, align 4
  %19 = load i32, i32* %17, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %btrue2, label %bfalse

btrue2:                                           ; preds = %btrue1
  %21 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %2, i32 0, i32 3
  %22 = getelementptr inbounds { %..string, i32, i32, %..string }, { %..string, i32, i32, %..string }* %3, i32 0, i32 3
  %23 = load %..string, %..string* %21, align 8
  %24 = load %..string, %..string* %22, align 8
  %25 = call i8 @runtime.string_eq(%..string* %21, %..string* %22)
  %26 = trunc i8 %25 to i1
  br i1 %26, label %btrue3, label %bfalse

btrue3:                                           ; preds = %btrue2
  ret i8 1

bfalse:                                           ; preds = %btrue2, %btrue1, %btrue, %diff_ptr
  ret i8 0
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #0

define void @"__$startup_runtime"(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @"__$startup_type_info"()
  %0 = call i64 @os.get_std_handle(i64 4294967285)
  store i64 %0, i64* @os.stdout, align 8
  %1 = call i64 @os.get_std_handle(i64 4294967284)
  store i64 %1, i64* @os.stderr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%io.Stream_VTable* @"ggv$47" to i8*), i8* bitcast (%io.Stream_VTable* @"ggv$48" to i8*), i64 136, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%io.Stream_VTable* @"ggv$49" to i8*), i8* bitcast (%io.Stream_VTable* @"ggv$4a" to i8*), i64 136, i1 false)
  ret void
}

define internal i64 @os.get_std_handle(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %3 = load i64, i64* %1, align 8
  %4 = trunc i64 %3 to i32
  %5 = call i8* @GetStdHandle(i32 %4)
  store i8* %5, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = ptrtoint i8* %6 to i64
  ret i64 %7
}

define internal void @"_proclit$anon-0"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %4 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %strings.Builder*
  store %strings.Builder* %8, %strings.Builder** %2, align 8
  %9 = load %strings.Builder*, %strings.Builder** %2, align 8
  %10 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %11 = bitcast %runtime.Context* %5 to i8*
  %12 = call i64 @strings.write_bytes(%strings.Builder* %9, { i8*, i64 }* %1, i8* %11)
  store i64 %12, i64* %3, align 8
  %13 = load i64, i64* %3, align 8
  %14 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %15 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp slt i64 %13, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i32 1, i32* %4, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %20 = load i64, i64* %3, align 8
  %21 = load i32, i32* %4, align 4
  store i64 %20, i64* %3, align 8
  store i32 %21, i32* %4, align 4
  %22 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %23 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %20, i64* %22, align 8
  store i32 %21, i32* %23, align 4
  ret void
}

define internal i32 @"_proclit$anon-1"(%io.Stream* %0, i8 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i8, align 1
  %3 = alloca i32, align 4
  %4 = alloca %strings.Builder*, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8 %1, i8* %2, align 1
  store i32 0, i32* %3, align 4
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %strings.Builder*
  store %strings.Builder* %9, %strings.Builder** %4, align 8
  %10 = load %strings.Builder*, %strings.Builder** %4, align 8
  %11 = load i8, i8* %2, align 1
  %12 = bitcast %runtime.Context* %6 to i8*
  %13 = call i64 @strings.write_byte(%strings.Builder* %10, i8 %11, i8* %12)
  store i64 %13, i64* %5, align 8
  %14 = load i64, i64* %5, align 8
  %15 = icmp eq i64 %14, 0
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i32 1, i32* %3, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %18 = load i32, i32* %3, align 4
  store i32 %18, i32* %3, align 4
  ret i32 %18
}

define internal i64 @"_proclit$anon-2"(%io.Stream* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %strings.Builder*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %strings.Builder*
  store %strings.Builder* %5, %strings.Builder** %1, align 8
  %6 = load %strings.Builder*, %strings.Builder** %1, align 8
  %7 = getelementptr inbounds %strings.Builder, %strings.Builder* %6, i32 0, i32 0
  %8 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %7, align 8
  %9 = getelementptr inbounds { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %7, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  ret i64 %10
}

define internal i32 @"_proclit$anon-3"(%io.Stream* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %strings.Builder*, align 8
  %2 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = bitcast i8* %5 to %strings.Builder*
  store %strings.Builder* %6, %strings.Builder** %1, align 8
  %7 = load %strings.Builder*, %strings.Builder** %1, align 8
  %8 = getelementptr inbounds %strings.Builder, %strings.Builder* %7, i32 0, i32 0
  %9 = load { i8*, i64, i64, %runtime.Allocator }, { i8*, i64, i64, %runtime.Allocator }* %8, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$21f", i64 0, i64 0), i64 72 }, i32 93, i32 3, %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$220", i64 0, i64 0), i64 15 } }, %runtime.Source_Code_Location* %2, align 8
  %10 = bitcast %runtime.Context* %3 to i8*
  %11 = call i8 @runtime.delete_dynamic_array-54576({ i8*, i64, i64, %runtime.Allocator }* %8, %runtime.Source_Code_Location* %2, i8* %10)
  ret i32 0
}

define internal void @"_proclit$anon-4"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %6 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  store i64 %10, i64* %2, align 8
  store i64 0, i64* %3, align 8
  %11 = load i64, i64* %2, align 8
  %12 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %13 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = bitcast %runtime.Context* %7 to i8*
  call void @os.read({ i64, i64 }* sret({ i64, i64 }*) %4, i64 %11, { i8*, i64 }* %1, i8* %14)
  %15 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  store i64 %17, i64* %5, align 8
  store i64 %19, i64* %3, align 8
  %20 = load i64, i64* %5, align 8
  %21 = load i32, i32* %6, align 4
  store i64 %20, i64* %5, align 8
  store i32 %21, i32* %6, align 4
  %22 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %23 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %20, i64* %22, align 8
  store i32 %21, i32* %23, align 4
  ret void
}

define internal void @"_proclit$anon-5"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %2, i64* %3, align 8
  %7 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  store i64 %12, i64* %4, align 8
  store i64 0, i64* %5, align 8
  %13 = load i64, i64* %4, align 8
  %14 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %15 = load i64, i64* %3, align 8
  %16 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 16, i1 false)
  %17 = bitcast %runtime.Context* %9 to i8*
  call void @os.read_at({ i64, i64 }* sret({ i64, i64 }*) %6, i64 %13, { i8*, i64 }* %1, i64 %15, i8* %17)
  %18 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store i64 %20, i64* %7, align 8
  store i64 %22, i64* %5, align 8
  %23 = load i64, i64* %7, align 8
  %24 = load i32, i32* %8, align 4
  store i64 %23, i64* %7, align 8
  store i32 %24, i32* %8, align 4
  %25 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %26 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %23, i64* %25, align 8
  store i32 %24, i32* %26, align 4
  ret void
}

define internal void @"_proclit$anon-6"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %6 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = ptrtoint i8* %9 to i64
  store i64 %10, i64* %2, align 8
  store i64 0, i64* %3, align 8
  %11 = load i64, i64* %2, align 8
  %12 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %13 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = bitcast %runtime.Context* %7 to i8*
  call void @os.write({ i64, i64 }* sret({ i64, i64 }*) %4, i64 %11, { i8*, i64 }* %1, i8* %14)
  %15 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  store i64 %17, i64* %5, align 8
  store i64 %19, i64* %3, align 8
  %20 = load i64, i64* %5, align 8
  %21 = load i32, i32* %6, align 4
  store i64 %20, i64* %5, align 8
  store i32 %21, i32* %6, align 4
  %22 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %23 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %20, i64* %22, align 8
  store i32 %21, i32* %23, align 4
  ret void
}

define internal void @"_proclit$anon-7"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %2, i64* %3, align 8
  %7 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %8 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  store i64 %12, i64* %4, align 8
  store i64 0, i64* %5, align 8
  %13 = load i64, i64* %4, align 8
  %14 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %15 = load i64, i64* %3, align 8
  %16 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 16, i1 false)
  %17 = bitcast %runtime.Context* %9 to i8*
  call void @os.write_at({ i64, i64 }* sret({ i64, i64 }*) %6, i64 %13, { i8*, i64 }* %1, i64 %15, i8* %17)
  %18 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store i64 %20, i64* %7, align 8
  store i64 %22, i64* %5, align 8
  %23 = load i64, i64* %5, align 8
  %24 = load i64, i64* %7, align 8
  %25 = load i32, i32* %8, align 4
  store i64 %24, i64* %7, align 8
  store i32 %25, i32* %8, align 4
  %26 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %27 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %24, i64* %26, align 8
  store i32 %25, i32* %27, align 4
  ret void
}

define internal void @"_proclit$anon-8"({ i64, i32 }* noalias sret({ i64, i32 }) %agg.result, %io.Stream* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %11 = load i8*, i8** %10, align 8
  %12 = ptrtoint i8* %11 to i64
  store i64 %12, i64* %5, align 8
  %13 = load i64, i64* %5, align 8
  %14 = load i64, i64* %3, align 8
  %15 = load i64, i64* %4, align 8
  %16 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 16, i1 false)
  %17 = bitcast %runtime.Context* %9 to i8*
  call void @os.seek({ i64, i64 }* sret({ i64, i64 }*) %8, i64 %13, i64 %14, i64 %15, i8* %17)
  %18 = load { i64, i64 }, { i64, i64 }* %8, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store i64 %20, i64* %6, align 8
  store i64 %22, i64* %7, align 8
  %23 = load i64, i64* %7, align 8
  %24 = load i64, i64* %6, align 8
  %25 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 0
  %26 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %agg.result, i32 0, i32 1
  store i64 %24, i64* %25, align 8
  store i32 0, i32* %26, align 4
  ret void
}

define internal i64 @"_proclit$anon-9"(%io.Stream* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %6 = load i8*, i8** %5, align 8
  %7 = ptrtoint i8* %6 to i64
  store i64 %7, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i1 false)
  %10 = bitcast %runtime.Context* %4 to i8*
  call void @os.file_size({ i64, i64 }* sret({ i64, i64 }*) %3, i64 %8, i8* %10)
  %11 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  store i64 %13, i64* %2, align 8
  %16 = load i64, i64* %2, align 8
  ret i64 %16
}

define internal i32 @"_proclit$anon-10"(%io.Stream* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = ptrtoint i8* %4 to i64
  store i64 %5, i64* %1, align 8
  %6 = load i64, i64* %1, align 8
  %7 = bitcast %runtime.Context* %2 to i8*
  %8 = call i64 @os.flush(i64 %6, i8* %7)
  ret i32 0
}

define internal i32 @"_proclit$anon-11"(%io.Stream* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = getelementptr inbounds %io.Stream, %io.Stream* %0, i32 0, i32 1
  %4 = load i8*, i8** %3, align 8
  %5 = ptrtoint i8* %4 to i64
  store i64 %5, i64* %1, align 8
  %6 = load i64, i64* %1, align 8
  %7 = bitcast %runtime.Context* %2 to i8*
  %8 = call i64 @os.close(i64 %6, i8* %7)
  ret i32 0
}

define dso_local void @"__$cleanup_runtime"(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  %1 = bitcast %runtime.Context* %0 to i8*
  call void @runtime.default_temp_allocator_destroy(%runtime.Default_Temp_Allocator* @runtime.global_default_temp_allocator_data, i8* %1)
  ret void
}

define internal %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca %runtime.Type_Info*, align 8
  %3 = alloca %runtime.Type_Info_Named, align 8
  %4 = alloca { [15 x i64], i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %5 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %6 = icmp eq %runtime.Type_Info* %5, null
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret %runtime.Type_Info* null

if.done:                                          ; preds = %entry
  %9 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  store %runtime.Type_Info* %9, %runtime.Type_Info** %2, align 8
  br label %for.body

for.body:                                         ; preds = %typeswitch.done, %if.done
  %10 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  %11 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %10, i32 0, i32 5
  %12 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %11, align 8
  %13 = bitcast { [15 x i64], i64 }* %11 to i8*
  %14 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %11, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  switch i64 %15, label %typeswitch.default.body [
    i64 1, label %typeswitch.body
  ]

typeswitch.body:                                  ; preds = %for.body
  %16 = bitcast i8* %13 to %runtime.Type_Info_Named*
  %17 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %16, align 8
  %18 = bitcast %runtime.Type_Info_Named* %3 to i8*
  %19 = bitcast %runtime.Type_Info_Named* %16 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %18, i8* align 1 %19, i64 80, i1 false)
  %20 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %21 = load %runtime.Type_Info*, %runtime.Type_Info** %20, align 8
  store %runtime.Type_Info* %21, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %for.body
  %22 = bitcast { [15 x i64], i64 }* %4 to i8*
  %23 = bitcast { [15 x i64], i64 }* %11 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %22, i8* align 1 %23, i64 128, i1 false)
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %unreachable, %typeswitch.body
  br label %for.body

for.done:                                         ; preds = %typeswitch.default.body
  %24 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  ret %runtime.Type_Info* %24
}

define internal %runtime.Type_Info* @runtime.type_info_core(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca %runtime.Type_Info*, align 8
  %3 = alloca %runtime.Type_Info_Named, align 8
  %4 = alloca %runtime.Type_Info_Enum, align 8
  %5 = alloca { [15 x i64], i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %6 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %7 = icmp eq %runtime.Type_Info* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret %runtime.Type_Info* null

if.done:                                          ; preds = %entry
  %10 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  store %runtime.Type_Info* %10, %runtime.Type_Info** %2, align 8
  br label %for.body

for.body:                                         ; preds = %typeswitch.done, %if.done
  %11 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  %12 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %11, i32 0, i32 5
  %13 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %12, align 8
  %14 = bitcast { [15 x i64], i64 }* %12 to i8*
  %15 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %12, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  switch i64 %16, label %typeswitch.default.body [
    i64 1, label %typeswitch.body
    i64 21, label %typeswitch.body1
  ]

typeswitch.body:                                  ; preds = %for.body
  %17 = bitcast i8* %14 to %runtime.Type_Info_Named*
  %18 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %17, align 8
  %19 = bitcast %runtime.Type_Info_Named* %3 to i8*
  %20 = bitcast %runtime.Type_Info_Named* %17 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %19, i8* align 1 %20, i64 80, i1 false)
  %21 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %22 = load %runtime.Type_Info*, %runtime.Type_Info** %21, align 8
  store %runtime.Type_Info* %22, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.body1:                                 ; preds = %for.body
  %23 = bitcast i8* %14 to %runtime.Type_Info_Enum*
  %24 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %23, align 8
  store %runtime.Type_Info_Enum %24, %runtime.Type_Info_Enum* %4, align 8
  %25 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i32 0, i32 0
  %26 = load %runtime.Type_Info*, %runtime.Type_Info** %25, align 8
  store %runtime.Type_Info* %26, %runtime.Type_Info** %2, align 8
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %for.body
  %27 = bitcast { [15 x i64], i64 }* %5 to i8*
  %28 = bitcast { [15 x i64], i64 }* %12 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %27, i8* align 1 %28, i64 128, i1 false)
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %unreachable, %typeswitch.body1, %typeswitch.body
  br label %for.body

for.done:                                         ; preds = %typeswitch.default.body
  %29 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  ret %runtime.Type_Info* %29
}

define internal %runtime.Type_Info* @runtime.__type_info_of(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %4 = load i64, i64* %1, align 8
  store i64 %4, i64* %2, align 8
  %5 = load i64, i64* %2, align 8
  %6 = and i64 %5, 72057594037927935
  store i64 %6, i64* %3, align 8
  %7 = load i64, i64* %3, align 8
  %8 = icmp slt i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %11 = load i64, i64* %3, align 8
  %12 = load { %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, align 8
  %13 = load i64, i64* getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 1), align 8
  %14 = icmp sge i64 %11, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  store i64 0, i64* %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.or
  %17 = load { %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, align 8
  %18 = load %runtime.Type_Info*, %runtime.Type_Info** getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 0), align 8
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* getelementptr inbounds ({ %runtime.Type_Info*, i64 }, { %runtime.Type_Info*, i64 }* @runtime.type_table, i64 0, i32 1), align 8
  %21 = getelementptr %runtime.Type_Info, %runtime.Type_Info* %18, i64 %19
  ret %runtime.Type_Info* %21
}

define internal void @runtime.default_logger_proc(i8* %0, i64 %1, %..string* %2, i16 %3, %runtime.Source_Code_Location* %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i16, align 2
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i16 %3, i16* %7, align 2
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  ret void
}

define internal void @runtime.default_context(%runtime.Context* noalias sret(%runtime.Context) %agg.result) {
decls:
  %0 = alloca %runtime.Context, align 8
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1, i8 0, i64 96, i1 false)
  call void @runtime.__init_context-433(%runtime.Context* %0)
  %2 = load %runtime.Context, %runtime.Context* %0, align 8
  %3 = bitcast %runtime.Context* %agg.result to i8*
  %4 = bitcast %runtime.Context* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 96, i1 false)
  ret void
}

define internal void @runtime.__init_context-433(%runtime.Context* %0) {
decls:
  %1 = alloca %runtime.Context*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Context* %0, %runtime.Context** %1, align 8
  %2 = load %runtime.Context*, %runtime.Context** %1, align 8
  %3 = icmp eq %runtime.Context* %2, null
  %4 = zext i1 %3 to i8
  %5 = trunc i8 %4 to i1
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %6 = load %runtime.Context*, %runtime.Context** %1, align 8
  %7 = getelementptr inbounds %runtime.Context, %runtime.Context* %6, i32 0, i32 0
  %8 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %7, i32 0, i32 0
  store i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @runtime.default_allocator_proc to i8*), i8** %8, align 8
  %9 = load %runtime.Context*, %runtime.Context** %1, align 8
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %9, i32 0, i32 0
  %11 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %10, i32 0, i32 1
  store i8* null, i8** %11, align 8
  %12 = load %runtime.Context*, %runtime.Context** %1, align 8
  %13 = getelementptr inbounds %runtime.Context, %runtime.Context* %12, i32 0, i32 1
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %13, i32 0, i32 0
  store i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @runtime.default_temp_allocator_proc to i8*), i8** %14, align 8
  %15 = load %runtime.Context*, %runtime.Context** %1, align 8
  %16 = getelementptr inbounds %runtime.Context, %runtime.Context* %15, i32 0, i32 1
  %17 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %16, i32 0, i32 1
  store i8* bitcast (%runtime.Default_Temp_Allocator* @runtime.global_default_temp_allocator_data to i8*), i8** %17, align 8
  %18 = load %runtime.Context*, %runtime.Context** %1, align 8
  %19 = getelementptr inbounds %runtime.Context, %runtime.Context* %18, i32 0, i32 2
  store i8* bitcast (void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)* @runtime.default_assertion_failure_proc to i8*), i8** %19, align 8
  %20 = load %runtime.Context*, %runtime.Context** %1, align 8
  %21 = getelementptr inbounds %runtime.Context, %runtime.Context* %20, i32 0, i32 3
  %22 = getelementptr inbounds %runtime.Logger, %runtime.Logger* %21, i32 0, i32 0
  store i8* bitcast (void (i8*, i64, %..string*, i16, %runtime.Source_Code_Location*, i8*)* @runtime.default_logger_proc to i8*), i8** %22, align 8
  %23 = load %runtime.Context*, %runtime.Context** %1, align 8
  %24 = getelementptr inbounds %runtime.Context, %runtime.Context* %23, i32 0, i32 3
  %25 = getelementptr inbounds %runtime.Logger, %runtime.Logger* %24, i32 0, i32 1
  store i8* null, i8** %25, align 8
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.default_assertion_failure_proc(%..string* %0, %..string* %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) #2 {
decls:
  %3 = alloca %..string, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i64, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %2)
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %3, align 8
  %12 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %4, %..string* %3)
  %13 = load { i64, i64 }, { i64, i64 }* %4, align 8
  %14 = load %..string, %..string* %0, align 8
  %15 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %5, %..string* %0)
  %16 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %17 = load %..string, %..string* %1, align 8
  %18 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = icmp sgt i64 %19, 0
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$222", i64 0, i64 0), i64 2 }, %..string* %6, align 8
  %23 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %7, %..string* %6)
  %24 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %25 = load %..string, %..string* %1, align 8
  %26 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %8, %..string* %1)
  %27 = load { i64, i64 }, { i64, i64 }* %8, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %28 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %9, i8 10)
  %29 = load { i64, i64 }, { i64, i64 }* %9, align 8
  call void @llvm.trap()
  unreachable
}

define internal void @runtime.assert(i1 zeroext %0, %..string* %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  %4 = zext i1 %0 to i8
  store i8 %4, i8* %3, align 1
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load i8, i8* %3, align 1
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %8 = load %..string, %..string* %1, align 8
  %9 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %10 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.assert.internal-0(%..string* %1, %runtime.Source_Code_Location* %2, i8* %10)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.panic(%..string* %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) #2 {
decls:
  %2 = alloca void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)*, align 8
  %3 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 2
  %6 = load void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)*, i8** %5, align 8
  %7 = bitcast void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)** %2 to i8**
  %8 = bitcast void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)* %6 to i8*
  store i8* %8, i8** %7, align 8
  %9 = load void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)*, void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)** %2, align 8
  %10 = icmp eq void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)* %9, null
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %13 = bitcast void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)** %2 to i8**
  store i8* bitcast (void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)* @runtime.default_assertion_failure_proc to i8*), i8** %13, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %14 = load void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)*, void (%..string*, %..string*, %runtime.Source_Code_Location*, i8*)** %2, align 8
  %15 = load %..string, %..string* %0, align 8
  %16 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %1, align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$223", i64 0, i64 0), i64 5 }, %..string* %3, align 8
  %17 = bitcast %runtime.Context* %4 to i8*
  call void %14(%..string* %3, %..string* %0, %runtime.Source_Code_Location* %1, i8* %17)
  unreachable
}

define internal void @runtime.nil_allocator_proc({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i8* %0, i8 %1, i64 %2, i64 %3, i8* %4, i64 %5, %runtime.Source_Code_Location* %6, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %7 = alloca i8*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %7, align 8
  store i8 %1, i8* %8, align 1
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i8* %4, i8** %11, align 8
  store i64 %5, i64* %12, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8, i8* %8, align 1
  switch i8 %14, label %switch.done [
    i8 0, label %switch.case.body
    i8 1, label %switch.case.body1
    i8 2, label %switch.case.body2
    i8 3, label %switch.case.body3
    i8 4, label %switch.case.body4
    i8 5, label %switch.case.body5
  ]

switch.case.body:                                 ; preds = %entry
  %15 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %16 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 1, i8* %16, align 1
  ret void

switch.case.body1:                                ; preds = %entry
  %17 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %18 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %17, align 8
  store i8 0, i8* %18, align 1
  ret void

switch.case.body2:                                ; preds = %entry
  %19 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %19, align 8
  store i8 4, i8* %20, align 1
  ret void

switch.case.body3:                                ; preds = %entry
  %21 = load i64, i64* %9, align 8
  %22 = icmp eq i64 %21, 0
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body3
  %25 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %26 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %25, align 8
  store i8 0, i8* %26, align 1
  ret void

if.done:                                          ; preds = %switch.case.body3
  %27 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %27, align 8
  store i8 1, i8* %28, align 1
  ret void

switch.case.body4:                                ; preds = %entry
  %29 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %30 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %29, align 8
  store i8 4, i8* %30, align 1
  ret void

switch.case.body5:                                ; preds = %entry
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %32 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %31, align 8
  store i8 4, i8* %32, align 1
  ret void

switch.done:                                      ; preds = %entry
  %33 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %34 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %33, align 8
  store i8 0, i8* %34, align 1
  ret void
}

define internal void @runtime.nil_allocator(%runtime.Allocator* noalias sret(%runtime.Allocator) %agg.result, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %runtime.Allocator { i8* bitcast (void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* @runtime.nil_allocator_proc to i8*), i8* null }, %runtime.Allocator* %agg.result, align 8
  ret void
}

define internal i8 @runtime.__dynamic_array_reserve(i8* %0, i64 %1, i64 %2, i64 %3, %runtime.Source_Code_Location* %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %runtime.Allocator, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca i8, align 1
  %17 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  store i64 %3, i64* %8, align 8
  %18 = bitcast i8* %__.context_ptr to %runtime.Context*
  %19 = load i8*, i8** %5, align 8
  %20 = bitcast i8* %19 to %runtime.Raw_Dynamic_Array*
  store %runtime.Raw_Dynamic_Array* %20, %runtime.Raw_Dynamic_Array** %9, align 8
  %21 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %22 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %21, i32 0, i32 3
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %22, i32 0, i32 0
  %24 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %23, align 8
  %25 = icmp eq void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %24, null
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %29 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %28, i32 0, i32 3
  %30 = getelementptr inbounds %runtime.Context, %runtime.Context* %18, i32 0, i32 0
  %31 = load %runtime.Allocator, %runtime.Allocator* %30, align 8
  store %runtime.Allocator %31, %runtime.Allocator* %29, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %32 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %33 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %32, i32 0, i32 3
  %34 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %33, i32 0, i32 0
  %35 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %34, align 8
  %36 = icmp ne void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %35, null
  %37 = zext i1 %36 to i8
  %38 = icmp ne i8 %37, 0
  store %..string zeroinitializer, %..string* %10, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([88 x i8], [88 x i8]* @"csbs$225", i64 0, i64 0), i64 87 }, i32 22, i32 2, %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$226", i64 0, i64 0), i64 23 } }, %runtime.Source_Code_Location* %11, align 8
  %39 = bitcast %runtime.Context* %18 to i8*
  call void @runtime.assert(i1 %38, %..string* %10, %runtime.Source_Code_Location* %11, i8* %39)
  %40 = load i64, i64* %8, align 8
  %41 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %42 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %41, i32 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = icmp sle i64 %40, %43
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  ret i8 1

if.done2:                                         ; preds = %if.done
  %47 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %48 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %47, i32 0, i32 2
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* %6, align 8
  %51 = mul i64 %49, %50
  store i64 %51, i64* %12, align 8
  %52 = load i64, i64* %8, align 8
  %53 = load i64, i64* %6, align 8
  %54 = mul i64 %52, %53
  store i64 %54, i64* %13, align 8
  %55 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %56 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %55, i32 0, i32 3
  %57 = load %runtime.Allocator, %runtime.Allocator* %56, align 8
  store %runtime.Allocator %57, %runtime.Allocator* %14, align 8
  %58 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %59 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %58, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = load i64, i64* %12, align 8
  %62 = load i64, i64* %13, align 8
  %63 = load i64, i64* %7, align 8
  %64 = load %runtime.Allocator, %runtime.Allocator* %14, align 8
  %65 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %4, align 8
  %66 = bitcast { { i8*, i64 }, i8 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 24, i1 false)
  %67 = bitcast %runtime.Context* %18 to i8*
  call void @runtime.mem_resize({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %17, i8* %60, i64 %61, i64 %62, i64 %63, %runtime.Allocator* %14, %runtime.Source_Code_Location* %4, i8* %67)
  %68 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, align 8
  %69 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 0
  %70 = load { i8*, i64 }, { i8*, i64 }* %69, align 8
  %71 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 1
  %72 = load i8, i8* %71, align 1
  store { i8*, i64 } %70, { i8*, i64 }* %15, align 8
  store i8 %72, i8* %16, align 1
  %73 = load i8, i8* %16, align 1
  %74 = icmp ne i8 %73, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  ret i8 0

if.done4:                                         ; preds = %if.done2
  %77 = load i64, i64* %6, align 8
  %78 = icmp eq i64 %77, 0
  %79 = zext i1 %78 to i8
  %80 = trunc i8 %79 to i1
  br i1 %80, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.done4
  %81 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %82 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %81, i32 0, i32 0
  %83 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %84 = call i8* @runtime.raw_slice_data-47893({ i8*, i64 }* %15)
  store i8* %84, i8** %82, align 8
  %85 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %86 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %85, i32 0, i32 2
  %87 = load i64, i64* %8, align 8
  store i64 %87, i64* %86, align 8
  ret i8 1

if.else:                                          ; preds = %if.done4
  %88 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %89 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = icmp ne i8* %90, null
  %92 = zext i1 %91 to i8
  %93 = trunc i8 %92 to i1
  br i1 %93, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.else
  %94 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %95 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %94, i32 0, i32 0
  %96 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %97 = call i8* @runtime.raw_slice_data-47893({ i8*, i64 }* %15)
  store i8* %97, i8** %95, align 8
  %98 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %9, align 8
  %99 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %98, i32 0, i32 2
  %100 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = load i64, i64* %6, align 8
  %104 = sdiv i64 %102, %103
  %105 = load i64, i64* %8, align 8
  %106 = icmp slt i64 %105, %104
  %107 = select i1 %106, i64 %105, i64 %104
  store i64 %107, i64* %99, align 8
  ret i8 1

if.done7:                                         ; preds = %if.else
  br label %if.done8

if.done8:                                         ; preds = %if.done7
  ret i8 0
}

define internal i64 @runtime.__dynamic_array_append_nothing(i8* %0, i64 %1, i64 %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i8*, i8** %4, align 8
  %15 = bitcast i8* %14 to %runtime.Raw_Dynamic_Array*
  store %runtime.Raw_Dynamic_Array* %15, %runtime.Raw_Dynamic_Array** %7, align 8
  store i8 1, i8* %8, align 1
  %16 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %17 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %16, i32 0, i32 2
  %18 = load i64, i64* %17, align 8
  %19 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %20 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add i64 %21, 1
  %23 = icmp slt i64 %18, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %26 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %27 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %26, i32 0, i32 2
  %28 = load i64, i64* %27, align 8
  %29 = mul i64 2, %28
  %30 = add i64 %29, 8
  store i64 %30, i64* %9, align 8
  %31 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %32 = load i64, i64* %5, align 8
  %33 = load i64, i64* %6, align 8
  %34 = load i64, i64* %9, align 8
  %35 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %36 = bitcast %runtime.Raw_Dynamic_Array* %31 to i8*
  %37 = bitcast %runtime.Context* %13 to i8*
  %38 = call i8 @runtime.__dynamic_array_reserve(i8* %36, i64 %32, i64 %33, i64 %34, %runtime.Source_Code_Location* %3, i8* %37)
  store i8 %38, i8* %8, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %39 = load i8, i8* %8, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.done2, label %if.then1

if.then1:                                         ; preds = %if.done
  %41 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %42 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %41, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  ret i64 %43

if.done2:                                         ; preds = %if.done
  %44 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %45 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %44, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ne i8* %46, null
  %48 = zext i1 %47 to i8
  %49 = icmp ne i8 %48, 0
  store %..string zeroinitializer, %..string* %10, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([88 x i8], [88 x i8]* @"csbs$225", i64 0, i64 0), i64 87 }, i32 131, i32 2, %..string { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"csbs$227", i64 0, i64 0), i64 30 } }, %runtime.Source_Code_Location* %11, align 8
  %50 = bitcast %runtime.Context* %13 to i8*
  call void @runtime.assert(i1 %49, %..string* %10, %runtime.Source_Code_Location* %11, i8* %50)
  %51 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %52 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %51, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = ptrtoint i8* %53 to i64
  %55 = load i64, i64* %5, align 8
  %56 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %57 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %56, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  %59 = mul i64 %55, %58
  %60 = add i64 %54, %59
  store i64 %60, i64* %12, align 8
  %61 = load i64, i64* %12, align 8
  %62 = inttoptr i64 %61 to i8*
  %63 = load i64, i64* %5, align 8
  %64 = call i8* @runtime.mem_zero(i8* %62, i64 %63)
  %65 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %66 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %66, align 8
  %69 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %7, align 8
  %70 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %69, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  ret i64 %71
}

define internal void @runtime.__get_map_hash_from_entry(%runtime.Map_Hash* noalias sret(%runtime.Map_Hash) %agg.result, %runtime.Map_Header* %0, %runtime.Map_Entry_Header* %1) {
decls:
  %2 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Map_Entry_Header* %1, %runtime.Map_Entry_Header** %2, align 8
  %3 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %agg.result, i32 0, i32 0
  %4 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %2, align 8
  %5 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %4, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %3, align 8
  %7 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %agg.result, i32 0, i32 1
  %8 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %2, align 8
  %9 = ptrtoint %runtime.Map_Entry_Header* %8 to i64
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %11 = load i64, i64* %10, align 8
  %12 = add i64 %9, %11
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %7, align 8
  %14 = load %runtime.Map_Hash, %runtime.Map_Hash* %agg.result, align 8
  store %runtime.Map_Hash %14, %runtime.Map_Hash* %agg.result, align 8
  %15 = bitcast %runtime.Map_Hash* %agg.result to i8*
  %16 = bitcast %runtime.Map_Hash* %agg.result to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i1 false)
  ret void
}

define internal i64 @runtime.default_hasher8(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = load i64, i64* %3, align 8
  %6 = call i64 @runtime._default_hasher_const-48055(i8* %4, i64 %5) #3
  ret i64 %6
}

define internal void @runtime.__dynamic_map_reset_entries(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %..string, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %runtime.Map_Entry_Header*, align 8
  %10 = alloca %runtime.Map_Hash, align 8
  %11 = alloca %runtime.Map_Hash, align 8
  %12 = alloca %runtime.Map_Find_Result, align 8
  %13 = alloca %runtime.Map_Find_Result, align 8
  %14 = alloca %..string, align 8
  %15 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %17 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %18 = load %runtime.Raw_Map*, %runtime.Raw_Map** %17, align 8
  %19 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %18, i32 0, i32 0
  %20 = load { i64*, i64 }, { i64*, i64 }* %19, align 8
  %21 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %19, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = load i64, i64* %2, align 8
  %24 = icmp slt i64 %23, %22
  br i1 %24, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %25 = load i64, i64* %2, align 8
  %26 = load i64, i64* %3, align 8
  store i64 %25, i64* %4, align 8
  %27 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %28 = load %runtime.Raw_Map*, %runtime.Raw_Map** %27, align 8
  %29 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %28, i32 0, i32 0
  %30 = load { i64*, i64 }, { i64*, i64 }* %29, align 8
  %31 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %29, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = load i64, i64* %4, align 8
  %34 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %29, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  store %..string { i8* getelementptr inbounds ([86 x i8], [86 x i8]* @"csbs$228", i64 0, i64 0), i64 85 }, %..string* %5, align 8
  call void @runtime.bounds_check_error(%..string* %5, i32 210, i32 12, i64 %33, i64 %35)
  %36 = getelementptr i64, i64* %32, i64 %33
  store i64 -1, i64* %36, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %37 = load i64, i64* %2, align 8
  %38 = add i64 %37, 1
  store i64 %38, i64* %2, align 8
  %39 = load i64, i64* %3, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %3, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  store i64 0, i64* %6, align 8
  store i64 0, i64* %7, align 8
  br label %for.interval.loop1

for.interval.loop1:                               ; preds = %for.interval.post3, %for.interval.done
  %41 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %42 = load %runtime.Raw_Map*, %runtime.Raw_Map** %41, align 8
  %43 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %42, i32 0, i32 1
  %44 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = load i64, i64* %6, align 8
  %47 = icmp slt i64 %46, %45
  br i1 %47, label %for.interval.body2, label %for.interval.done4

for.interval.body2:                               ; preds = %for.interval.loop1
  %48 = load i64, i64* %6, align 8
  %49 = load i64, i64* %7, align 8
  store i64 %48, i64* %8, align 8
  %50 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %51 = load i64, i64* %8, align 8
  %52 = bitcast %runtime.Context* %16 to i8*
  %53 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %51, i8* %52)
  store %runtime.Map_Entry_Header* %53, %runtime.Map_Entry_Header** %9, align 8
  %54 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %55 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %56 = bitcast %runtime.Map_Hash* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %56, i8 0, i64 16, i1 false)
  call void @runtime.__get_map_hash_from_entry(%runtime.Map_Hash* sret(%runtime.Map_Hash*) %11, %runtime.Map_Header* %0, %runtime.Map_Entry_Header* %55)
  %57 = load %runtime.Map_Hash, %runtime.Map_Hash* %11, align 8
  store %runtime.Map_Hash %57, %runtime.Map_Hash* %10, align 8
  %58 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %59 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %58, i32 0, i32 1
  store i64 -1, i64* %59, align 8
  %60 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %61 = load %runtime.Map_Hash, %runtime.Map_Hash* %10, align 8
  %62 = bitcast %runtime.Map_Find_Result* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %62, i8 0, i64 24, i1 false)
  %63 = bitcast %runtime.Context* %16 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret(%runtime.Map_Find_Result*) %13, %runtime.Map_Header* %0, %runtime.Map_Hash* %10, i8* %63)
  %64 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %13, align 8
  store %runtime.Map_Find_Result %64, %runtime.Map_Find_Result* %12, align 8
  %65 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %12, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = icmp slt i64 %66, 0
  %68 = zext i1 %67 to i8
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then, label %if.else

if.then:                                          ; preds = %for.interval.body2
  %70 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %71 = load %runtime.Raw_Map*, %runtime.Raw_Map** %70, align 8
  %72 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %71, i32 0, i32 0
  %73 = load { i64*, i64 }, { i64*, i64 }* %72, align 8
  %74 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %72, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %12, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %72, i32 0, i32 1
  %79 = load i64, i64* %78, align 8
  store %..string { i8* getelementptr inbounds ([86 x i8], [86 x i8]* @"csbs$228", i64 0, i64 0), i64 85 }, %..string* %14, align 8
  call void @runtime.bounds_check_error(%..string* %14, i32 220, i32 16, i64 %77, i64 %79)
  %80 = getelementptr i64, i64* %75, i64 %77
  %81 = load i64, i64* %8, align 8
  store i64 %81, i64* %80, align 8
  br label %if.done

if.else:                                          ; preds = %for.interval.body2
  %82 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %83 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %12, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %runtime.Context* %16 to i8*
  %86 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %84, i8* %85)
  store %runtime.Map_Entry_Header* %86, %runtime.Map_Entry_Header** %15, align 8
  %87 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %15, align 8
  %88 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %87, i32 0, i32 1
  %89 = load i64, i64* %8, align 8
  store i64 %89, i64* %88, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %for.interval.post3

for.interval.post3:                               ; preds = %if.done
  %90 = load i64, i64* %6, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %6, align 8
  %92 = load i64, i64* %7, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %7, align 8
  br label %for.interval.loop1

for.interval.done4:                               ; preds = %for.interval.loop1
  ret void
}

define internal void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %runtime.Context, align 8
  %5 = alloca %runtime.Context, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %runtime.Context, %runtime.Context* %6, align 8
  %8 = bitcast %runtime.Context* %4 to i8*
  %9 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 1 %9, i64 96, i1 false)
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %11 = load %runtime.Raw_Map*, %runtime.Raw_Map** %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %11, i32 0, i32 1
  %13 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %12, i32 0, i32 3
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %13, i32 0, i32 0
  %15 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %14, align 8
  %16 = icmp ne void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %15, null
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %19 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  %20 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %21 = load %runtime.Raw_Map*, %runtime.Raw_Map** %20, align 8
  %22 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %21, i32 0, i32 1
  %23 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %22, i32 0, i32 3
  %24 = load %runtime.Allocator, %runtime.Allocator* %23, align 8
  store %runtime.Allocator %24, %runtime.Allocator* %19, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %25 = load %runtime.Context, %runtime.Context* %4, align 8
  %26 = load %runtime.Context, %runtime.Context* %6, align 8
  %27 = bitcast %runtime.Context* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 96, i1 false)
  %28 = bitcast %runtime.Context* %5 to i8*
  %29 = bitcast %runtime.Context* %6 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %28, i8* align 1 %29, i64 96, i1 false)
  %30 = bitcast %runtime.Context* %5 to i8*
  %31 = bitcast %runtime.Context* %4 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 96, i1 false)
  %32 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %33 = load %runtime.Raw_Map*, %runtime.Raw_Map** %32, align 8
  %34 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %33, i32 0, i32 1
  %35 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 3
  %38 = load i64, i64* %37, align 8
  %39 = load i64, i64* %3, align 8
  %40 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %41 = bitcast %runtime.Raw_Dynamic_Array* %34 to i8*
  %42 = bitcast %runtime.Context* %5 to i8*
  %43 = call i8 @runtime.__dynamic_array_reserve(i8* %41, i64 %36, i64 %38, i64 %39, %runtime.Source_Code_Location* %2, i8* %42)
  %44 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %45 = load %runtime.Raw_Map*, %runtime.Raw_Map** %44, align 8
  %46 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %45, i32 0, i32 1
  %47 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %46, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = mul i64 %48, 2
  %50 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %51 = load %runtime.Raw_Map*, %runtime.Raw_Map** %50, align 8
  %52 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %51, i32 0, i32 0
  %53 = load { i64*, i64 }, { i64*, i64 }* %52, align 8
  %54 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %52, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = icmp slt i64 %49, %55
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  ret void

if.done2:                                         ; preds = %if.done
  %59 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %60 = load %runtime.Raw_Map*, %runtime.Raw_Map** %59, align 8
  %61 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %60, i32 0, i32 0
  %62 = load i64, i64* %3, align 8
  %63 = mul i64 %62, 2
  %64 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %65 = load %runtime.Raw_Map*, %runtime.Raw_Map** %64, align 8
  %66 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %65, i32 0, i32 1
  %67 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %66, i32 0, i32 3
  %68 = load %runtime.Allocator, %runtime.Allocator* %67, align 8
  %69 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %70 = bitcast %runtime.Context* %5 to i8*
  %71 = call i8 @runtime.__slice_resize-48175({ i64*, i64 }* %61, i64 %63, %runtime.Allocator* %67, %runtime.Source_Code_Location* %2, i8* %70)
  %72 = trunc i8 %71 to i1
  br i1 %72, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %73 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %74 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %75 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.__dynamic_map_reset_entries(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %2, i8* %75)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  ret void
}

define internal void @runtime.__dynamic_map_rehash(%runtime.Map_Header* %0, i64 %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %6 = load i64, i64* %3, align 8
  %7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %8 = bitcast %runtime.Context* %4 to i8*
  call void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 %6, %runtime.Source_Code_Location* %2, i8* %8) #3
  ret void
}

define internal i8* @runtime.__dynamic_map_get(%runtime.Map_Header* %0, %runtime.Map_Hash* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca %runtime.Map_Find_Result, align 8
  %4 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %7 = load %runtime.Map_Hash, %runtime.Map_Hash* %1, align 8
  %8 = bitcast %runtime.Map_Find_Result* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 24, i1 false)
  %9 = bitcast %runtime.Context* %5 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret(%runtime.Map_Find_Result*) %3, %runtime.Map_Header* %0, %runtime.Map_Hash* %1, i8* %9)
  %10 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, align 8
  %11 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %3, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %2, align 8
  %13 = load i64, i64* %2, align 8
  %14 = icmp sge i64 %13, 0
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %17 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %18 = load i64, i64* %2, align 8
  %19 = bitcast %runtime.Context* %5 to i8*
  %20 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %18, i8* %19)
  %21 = ptrtoint %runtime.Map_Entry_Header* %20 to i64
  store i64 %21, i64* %4, align 8
  %22 = load i64, i64* %4, align 8
  %23 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 6
  %24 = load i64, i64* %23, align 8
  %25 = add i64 %22, %24
  %26 = inttoptr i64 %25 to i8*
  ret i8* %26

if.done:                                          ; preds = %entry
  ret i8* null
}

define internal %runtime.Map_Entry_Header* @runtime.__dynamic_map_set(%runtime.Map_Header* %0, %runtime.Map_Hash* %1, i8* %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Map_Find_Result, align 8
  %7 = alloca %runtime.Map_Find_Result, align 8
  %8 = alloca %runtime.Map_Entry_Header*, align 8
  %9 = alloca %runtime.Map_Entry_Header*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %2, i8** %4, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %5, align 8
  %13 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %14 = load %runtime.Raw_Map*, %runtime.Raw_Map** %13, align 8
  %15 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %14, i32 0, i32 0
  %16 = load { i64*, i64 }, { i64*, i64 }* %15, align 8
  %17 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %15, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = icmp eq i64 %18, 0
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %22 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %23 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %24 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_reserve(%runtime.Map_Header* %0, i64 16, %runtime.Source_Code_Location* %3, i8* %24)
  %25 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %26 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %27 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %3, i8* %27)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %28 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %29 = load %runtime.Map_Hash, %runtime.Map_Hash* %1, align 8
  %30 = bitcast %runtime.Map_Find_Result* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 24, i1 false)
  %31 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* sret(%runtime.Map_Find_Result*) %7, %runtime.Map_Header* %0, %runtime.Map_Hash* %1, i8* %31)
  %32 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %7, align 8
  store %runtime.Map_Find_Result %32, %runtime.Map_Find_Result* %6, align 8
  %33 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 2
  %34 = load i64, i64* %33, align 8
  %35 = icmp sge i64 %34, 0
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %38 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 2
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %5, align 8
  br label %if.done8

if.else:                                          ; preds = %if.done
  %40 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %41 = load %runtime.Map_Hash, %runtime.Map_Hash* %1, align 8
  %42 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %43 = bitcast %runtime.Context* %12 to i8*
  %44 = call i64 @runtime.__dynamic_map_add_entry(%runtime.Map_Header* %0, %runtime.Map_Hash* %1, %runtime.Source_Code_Location* %3, i8* %43)
  store i64 %44, i64* %5, align 8
  %45 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = icmp sge i64 %46, 0
  %48 = zext i1 %47 to i8
  %49 = trunc i8 %48 to i1
  br i1 %49, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %50 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %51 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = bitcast %runtime.Context* %12 to i8*
  %54 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %52, i8* %53)
  store %runtime.Map_Entry_Header* %54, %runtime.Map_Entry_Header** %8, align 8
  %55 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %8, align 8
  %56 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %55, i32 0, i32 1
  %57 = load i64, i64* %5, align 8
  store i64 %57, i64* %56, align 8
  br label %if.done7

if.else3:                                         ; preds = %if.else
  %58 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = icmp sge i64 %59, 0
  %61 = zext i1 %60 to i8
  %62 = trunc i8 %61 to i1
  br i1 %62, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else3
  %63 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %64 = load %runtime.Raw_Map*, %runtime.Raw_Map** %63, align 8
  %65 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %64, i32 0, i32 0
  %66 = load { i64*, i64 }, { i64*, i64 }* %65, align 8
  %67 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %65, i32 0, i32 0
  %68 = load i64*, i64** %67, align 8
  %69 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %6, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %65, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr i64, i64* %68, i64 %70
  %74 = load i64, i64* %5, align 8
  store i64 %74, i64* %73, align 8
  br label %if.done6

if.else5:                                         ; preds = %if.else3
  ret %runtime.Map_Entry_Header* null

if.done6:                                         ; preds = %if.then4
  br label %if.done7

if.done7:                                         ; preds = %if.done6, %if.then2
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.then1
  %75 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %76 = load i64, i64* %5, align 8
  %77 = bitcast %runtime.Context* %12 to i8*
  %78 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %76, i8* %77)
  store %runtime.Map_Entry_Header* %78, %runtime.Map_Entry_Header** %9, align 8
  %79 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %80 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %79, i32 0, i32 0
  %81 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 0
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %80, align 8
  %83 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %84 = ptrtoint %runtime.Map_Entry_Header* %83 to i64
  %85 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %86 = load i64, i64* %85, align 8
  %87 = add i64 %84, %86
  %88 = inttoptr i64 %87 to i8*
  store i8* %88, i8** %10, align 8
  %89 = load i8*, i8** %10, align 8
  %90 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 1
  %91 = load i8*, i8** %90, align 8
  %92 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 5
  %93 = load i64, i64* %92, align 8
  %94 = call i8* @runtime.mem_copy(i8* %89, i8* %91, i64 %93)
  %95 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %9, align 8
  %96 = ptrtoint %runtime.Map_Entry_Header* %95 to i64
  %97 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 6
  %98 = load i64, i64* %97, align 8
  %99 = add i64 %96, %98
  %100 = inttoptr i64 %99 to i8*
  store i8* %100, i8** %11, align 8
  %101 = load i8*, i8** %11, align 8
  %102 = load i8*, i8** %4, align 8
  %103 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 7
  %104 = load i64, i64* %103, align 8
  %105 = call i8* @runtime.mem_copy(i8* %101, i8* %102, i64 %104)
  %106 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %107 = call i8 @runtime.__dynamic_map_full(%runtime.Map_Header* %0)
  %108 = trunc i8 %107 to i1
  br i1 %108, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.done8
  %109 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %110 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %111 = bitcast %runtime.Context* %12 to i8*
  call void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %3, i8* %111)
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.done8
  %112 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %113 = load i64, i64* %5, align 8
  %114 = bitcast %runtime.Context* %12 to i8*
  %115 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %113, i8* %114)
  ret %runtime.Map_Entry_Header* %115
}

define internal void @runtime.__dynamic_map_grow(%runtime.Map_Header* %0, %runtime.Source_Code_Location* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %5 = load %runtime.Raw_Map*, %runtime.Raw_Map** %4, align 8
  %6 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %5, i32 0, i32 1
  %7 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %6, i32 0, i32 2
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 4, %8
  %10 = add i64 %9, 7
  %11 = icmp sgt i64 %10, 16
  %12 = select i1 %11, i64 %10, i64 16
  store i64 %12, i64* %2, align 8
  %13 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %14 = load i64, i64* %2, align 8
  %15 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %1, align 8
  %16 = bitcast %runtime.Context* %3 to i8*
  call void @runtime.__dynamic_map_rehash(%runtime.Map_Header* %0, i64 %14, %runtime.Source_Code_Location* %1, i8* %16)
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @runtime.__dynamic_map_full(%runtime.Map_Header* %0) #3 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %1 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %2 = load %runtime.Raw_Map*, %runtime.Raw_Map** %1, align 8
  %3 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %2, i32 0, i32 0
  %4 = load { i64*, i64 }, { i64*, i64 }* %3, align 8
  %5 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %3, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = sitofp i64 %6 to double
  %8 = fmul double 7.500000e-01, %7
  %9 = fptosi double %8 to i64
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %11 = load %runtime.Raw_Map*, %runtime.Raw_Map** %10, align 8
  %12 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %11, i32 0, i32 1
  %13 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp sle i64 %9, %14
  %16 = zext i1 %15 to i8
  ret i8 %16
}

define internal i8 @runtime.__dynamic_map_hash_equal(%runtime.Map_Header* %0, %runtime.Map_Hash* %1, %runtime.Map_Hash* %2) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %3 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %2, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = icmp eq i64 %4, %6
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %logical.cmp.rhs, label %logical.cmp.done

logical.cmp.rhs:                                  ; preds = %entry
  %10 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 1
  %11 = load i8 (i8*, i8*)*, i8 (i8*, i8*)** %10, align 8
  %12 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 1
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %2, i32 0, i32 1
  %15 = load i8*, i8** %14, align 8
  %16 = call i8 %11(i8* %13, i8* %15)
  br label %logical.cmp.done

logical.cmp.done:                                 ; preds = %logical.cmp.rhs, %entry
  %17 = phi i8 [ 0, %entry ], [ %16, %logical.cmp.rhs ]
  ret i8 %17
}

define internal void @runtime.__dynamic_map_find(%runtime.Map_Find_Result* noalias sret(%runtime.Map_Find_Result) %agg.result, %runtime.Map_Header* %0, %runtime.Map_Hash* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %runtime.Map_Find_Result, align 8
  %3 = alloca i64, align 8
  %4 = alloca %runtime.Map_Entry_Header*, align 8
  %5 = alloca %runtime.Map_Hash, align 8
  %6 = alloca %runtime.Map_Hash, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %runtime.Map_Find_Result { i64 -1, i64 -1, i64 -1 }, %runtime.Map_Find_Result* %2, align 8
  br label %if.init

if.init:                                          ; preds = %entry
  %8 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %9 = load %runtime.Raw_Map*, %runtime.Raw_Map** %8, align 8
  %10 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %9, i32 0, i32 0
  %11 = load { i64*, i64 }, { i64*, i64 }* %10, align 8
  %12 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %10, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %3, align 8
  %14 = load i64, i64* %3, align 8
  %15 = icmp ugt i64 %14, 0
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done2

if.then:                                          ; preds = %if.init
  %18 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 0
  %19 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %3, align 8
  %22 = urem i64 %20, %21
  store i64 %22, i64* %18, align 8
  %23 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 2
  %24 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %25 = load %runtime.Raw_Map*, %runtime.Raw_Map** %24, align 8
  %26 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %25, i32 0, i32 0
  %27 = load { i64*, i64 }, { i64*, i64 }* %26, align 8
  %28 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %26, i32 0, i32 0
  %29 = load i64*, i64** %28, align 8
  %30 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %26, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr i64, i64* %29, i64 %31
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %23, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done, %if.then
  %36 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 2
  %37 = load i64, i64* %36, align 8
  %38 = icmp sge i64 %37, 0
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %41 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %42 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 2
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %runtime.Context* %7 to i8*
  %45 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %43, i8* %44)
  store %runtime.Map_Entry_Header* %45, %runtime.Map_Entry_Header** %4, align 8
  %46 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %47 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %4, align 8
  %48 = bitcast %runtime.Map_Hash* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %48, i8 0, i64 16, i1 false)
  call void @runtime.__get_map_hash_from_entry(%runtime.Map_Hash* sret(%runtime.Map_Hash*) %6, %runtime.Map_Header* %0, %runtime.Map_Entry_Header* %47)
  %49 = load %runtime.Map_Hash, %runtime.Map_Hash* %6, align 8
  store %runtime.Map_Hash %49, %runtime.Map_Hash* %5, align 8
  %50 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %51 = load %runtime.Map_Hash, %runtime.Map_Hash* %5, align 8
  %52 = load %runtime.Map_Hash, %runtime.Map_Hash* %1, align 8
  %53 = call i8 @runtime.__dynamic_map_hash_equal(%runtime.Map_Header* %0, %runtime.Map_Hash* %5, %runtime.Map_Hash* %1)
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.body
  %55 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, align 8
  %56 = bitcast %runtime.Map_Find_Result* %agg.result to i8*
  %57 = bitcast %runtime.Map_Find_Result* %2 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %56, i8* %57, i64 24, i1 false)
  ret void

if.done:                                          ; preds = %for.body
  %58 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 1
  %59 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 2
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %58, align 8
  %61 = getelementptr inbounds %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, i32 0, i32 2
  %62 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %4, align 8
  %63 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %62, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %61, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  br label %if.done2

if.done2:                                         ; preds = %for.done, %if.init
  %65 = load %runtime.Map_Find_Result, %runtime.Map_Find_Result* %2, align 8
  %66 = bitcast %runtime.Map_Find_Result* %agg.result to i8*
  %67 = bitcast %runtime.Map_Find_Result* %2 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %66, i8* %67, i64 24, i1 false)
  ret void
}

define internal i64 @runtime.__dynamic_map_add_entry(%runtime.Map_Header* %0, %runtime.Map_Hash* %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %runtime.Map_Entry_Header*, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %8 = load %runtime.Raw_Map*, %runtime.Raw_Map** %7, align 8
  %9 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %8, i32 0, i32 1
  %10 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %9, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %3, align 8
  %12 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %13 = load %runtime.Raw_Map*, %runtime.Raw_Map** %12, align 8
  %14 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %13, i32 0, i32 1
  %15 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 3
  %18 = load i64, i64* %17, align 8
  %19 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %20 = bitcast %runtime.Raw_Dynamic_Array* %14 to i8*
  %21 = bitcast %runtime.Context* %6 to i8*
  %22 = call i64 @runtime.__dynamic_array_append_nothing(i8* %20, i64 %16, i64 %18, %runtime.Source_Code_Location* %2, i8* %21)
  store i64 %22, i64* %4, align 8
  %23 = load i64, i64* %4, align 8
  %24 = load i64, i64* %3, align 8
  %25 = icmp ne i64 %23, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = load %runtime.Map_Header, %runtime.Map_Header* %0, align 8
  %29 = load i64, i64* %4, align 8
  %30 = sub i64 %29, 1
  %31 = bitcast %runtime.Context* %6 to i8*
  %32 = call %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %30, i8* %31)
  store %runtime.Map_Entry_Header* %32, %runtime.Map_Entry_Header** %5, align 8
  %33 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %34 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %33, i32 0, i32 0
  %35 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %34, align 8
  %37 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %38 = ptrtoint %runtime.Map_Entry_Header* %37 to i64
  %39 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 4
  %40 = load i64, i64* %39, align 8
  %41 = add i64 %38, %40
  %42 = inttoptr i64 %41 to i8*
  %43 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %1, i32 0, i32 1
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 5
  %46 = load i64, i64* %45, align 8
  %47 = call i8* @runtime.mem_copy(i8* %42, i8* %44, i64 %46)
  %48 = load %runtime.Map_Entry_Header*, %runtime.Map_Entry_Header** %5, align 8
  %49 = getelementptr inbounds %runtime.Map_Entry_Header, %runtime.Map_Entry_Header* %48, i32 0, i32 1
  store i64 -1, i64* %49, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %50 = load i64, i64* %3, align 8
  ret i64 %50
}

define internal %runtime.Map_Entry_Header* @runtime.__dynamic_map_get_entry(%runtime.Map_Header* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 0
  %5 = load %runtime.Raw_Map*, %runtime.Raw_Map** %4, align 8
  %6 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %5, i32 0, i32 1
  %7 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = ptrtoint i8* %8 to i64
  %10 = load i64, i64* %2, align 8
  %11 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %0, i32 0, i32 2
  %12 = load i64, i64* %11, align 8
  %13 = mul i64 %10, %12
  %14 = add i64 %9, %13
  %15 = inttoptr i64 %14 to %runtime.Map_Entry_Header*
  ret %runtime.Map_Entry_Header* %15
}

; Function Attrs: noreturn
define internal void @runtime.bounds_trap() #2 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @runtime.windows_trap_array_bounds-763()
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.type_assertion_trap() #2 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @runtime.windows_trap_type_assertion-764()
  unreachable
}

define internal void @runtime.bounds_check_error(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i64 %3, i64* %7, align 8
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %7, align 8
  %10 = icmp sle i64 0, %9
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp slt i64 %13, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %18 = load %..string, %..string* %0, align 8
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %6, align 4
  %21 = load i64, i64* %7, align 8
  %22 = load i64, i64* %8, align 8
  call void @runtime.bounds_check_error.handle_error-0(%..string* %0, i32 %19, i32 %20, i64 %21, i64 %22)
  ret void
}

; Function Attrs: noreturn
define internal void @runtime.slice_handle_error(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5) #2 {
decls:
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca %..string, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca %..string, align 8
  %15 = alloca { i64, i64 }, align 8
  %16 = alloca %..string, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  store i64 %5, i64* %10, align 8
  %19 = bitcast %runtime.Source_Code_Location* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 40, i1 false)
  %20 = bitcast %runtime.Source_Code_Location* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 40, i1 false)
  %21 = load %..string, %..string* %0, align 8
  %22 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %11, i32 0, i32 0
  store %..string %21, %..string* %22, align 8
  %23 = load i32, i32* %6, align 4
  %24 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %11, i32 0, i32 1
  store i32 %23, i32* %24, align 4
  %25 = load i32, i32* %7, align 4
  %26 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %11, i32 0, i32 2
  store i32 %25, i32* %26, align 4
  %27 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %11, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %11)
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$229", i64 0, i64 0), i64 23 }, %..string* %12, align 8
  %28 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %13, %..string* %12)
  %29 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %30 = load i64, i64* %8, align 8
  call void @runtime.print_i64(i64 %30)
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$22a", i64 0, i64 0), i64 1 }, %..string* %14, align 8
  %31 = bitcast { i64, i64 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %15, %..string* %14)
  %32 = load { i64, i64 }, { i64, i64 }* %15, align 8
  %33 = load i64, i64* %9, align 8
  call void @runtime.print_i64(i64 %33)
  store %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$22b", i64 0, i64 0), i64 21 }, %..string* %16, align 8
  %34 = bitcast { i64, i64 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %17, %..string* %16)
  %35 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %36 = load i64, i64* %10, align 8
  call void @runtime.print_i64(i64 %36)
  %37 = bitcast { i64, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %18, i8 10)
  %38 = load { i64, i64 }, { i64, i64 }* %18, align 8
  call void @runtime.bounds_trap()
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.multi_pointer_slice_handle_error(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4) #2 {
decls:
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %runtime.Source_Code_Location, align 8
  %10 = alloca %..string, align 8
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca %..string, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i64 %3, i64* %7, align 8
  store i64 %4, i64* %8, align 8
  %15 = bitcast %runtime.Source_Code_Location* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 40, i1 false)
  %16 = bitcast %runtime.Source_Code_Location* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %16, i8 0, i64 40, i1 false)
  %17 = load %..string, %..string* %0, align 8
  %18 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %9, i32 0, i32 0
  store %..string %17, %..string* %18, align 8
  %19 = load i32, i32* %5, align 4
  %20 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %9, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %6, align 4
  %22 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %9, i32 0, i32 2
  store i32 %21, i32* %22, align 4
  %23 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %9, align 8
  call void @runtime.print_caller_location(%runtime.Source_Code_Location* %9)
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$229", i64 0, i64 0), i64 23 }, %..string* %10, align 8
  %24 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %24, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %11, %..string* %10)
  %25 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %26 = load i64, i64* %7, align 8
  call void @runtime.print_i64(i64 %26)
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$22a", i64 0, i64 0), i64 1 }, %..string* %12, align 8
  %27 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %27, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %13, %..string* %12)
  %28 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %29 = load i64, i64* %8, align 8
  call void @runtime.print_i64(i64 %29)
  %30 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %14, i8 10)
  %31 = load { i64, i64 }, { i64, i64 }* %14, align 8
  call void @runtime.bounds_trap()
  unreachable
}

define internal void @runtime.multi_pointer_slice_expr_error(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i64 %3, i64* %7, align 8
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %7, align 8
  %10 = load i64, i64* %8, align 8
  %11 = icmp sle i64 %9, %10
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %14 = load %..string, %..string* %0, align 8
  %15 = load i32, i32* %5, align 4
  %16 = load i32, i32* %6, align 4
  %17 = load i64, i64* %7, align 8
  %18 = load i64, i64* %8, align 8
  call void @runtime.multi_pointer_slice_handle_error(%..string* %0, i32 %15, i32 %16, i64 %17, i64 %18)
  unreachable
}

define internal void @runtime.slice_expr_error_hi(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4) {
decls:
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i64 %3, i64* %7, align 8
  store i64 %4, i64* %8, align 8
  %9 = load i64, i64* %7, align 8
  %10 = icmp sle i64 0, %9
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %13 = load i64, i64* %7, align 8
  %14 = load i64, i64* %8, align 8
  %15 = icmp sle i64 %13, %14
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %18 = load %..string, %..string* %0, align 8
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %6, align 4
  %21 = load i64, i64* %7, align 8
  %22 = load i64, i64* %8, align 8
  call void @runtime.slice_handle_error(%..string* %0, i32 %19, i32 %20, i64 0, i64 %21, i64 %22)
  unreachable
}

define internal void @runtime.slice_expr_error_lo_hi(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5) {
decls:
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i64 %3, i64* %8, align 8
  store i64 %4, i64* %9, align 8
  store i64 %5, i64* %10, align 8
  %11 = load i64, i64* %8, align 8
  %12 = icmp sle i64 0, %11
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %15 = load i64, i64* %8, align 8
  %16 = load i64, i64* %10, align 8
  %17 = icmp sle i64 %15, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %20 = load i64, i64* %8, align 8
  %21 = load i64, i64* %9, align 8
  %22 = icmp sle i64 %20, %21
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %cmp.and2, label %if.done

cmp.and2:                                         ; preds = %cmp.and1
  %25 = load i64, i64* %9, align 8
  %26 = load i64, i64* %10, align 8
  %27 = icmp sle i64 %25, %26
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and2
  ret void

if.done:                                          ; preds = %cmp.and2, %cmp.and1, %cmp.and, %entry
  %30 = load %..string, %..string* %0, align 8
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %7, align 4
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %9, align 8
  %35 = load i64, i64* %10, align 8
  call void @runtime.slice_handle_error(%..string* %0, i32 %31, i32 %32, i64 %33, i64 %34, i64 %35)
  unreachable
}

define internal void @runtime.matrix_bounds_check_error(%..string* %0, i32 %1, i32 %2, i64 %3, i64 %4, i64 %5, i64 %6) {
decls:
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i64 %5, i64* %11, align 8
  store i64 %6, i64* %12, align 8
  %13 = load i64, i64* %9, align 8
  %14 = icmp sle i64 0, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %17 = load i64, i64* %9, align 8
  %18 = load i64, i64* %11, align 8
  %19 = icmp slt i64 %17, %18
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %22 = load i64, i64* %10, align 8
  %23 = icmp sle i64 0, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %cmp.and2, label %if.done

cmp.and2:                                         ; preds = %cmp.and1
  %26 = load i64, i64* %10, align 8
  %27 = load i64, i64* %12, align 8
  %28 = icmp slt i64 %26, %27
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and2
  ret void

if.done:                                          ; preds = %cmp.and2, %cmp.and1, %cmp.and, %entry
  %31 = load %..string, %..string* %0, align 8
  %32 = load i32, i32* %7, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load i64, i64* %9, align 8
  %35 = load i64, i64* %10, align 8
  %36 = load i64, i64* %11, align 8
  %37 = load i64, i64* %12, align 8
  call void @runtime.matrix_bounds_check_error.handle_error-0(%..string* %0, i32 %32, i32 %33, i64 %34, i64 %35, i64 %36, i64 %37)
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.make_slice_error_loc(%runtime.Source_Code_Location* %0, i64 %1) #3 {
decls:
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %3 = load i64, i64* %2, align 8
  %4 = icmp sle i64 0, %3
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %7 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, align 8
  %8 = load i64, i64* %2, align 8
  call void @runtime.make_slice_error_loc.handle_error-0(%runtime.Source_Code_Location* %0, i64 %8) #3
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.make_dynamic_array_error_loc(%runtime.Source_Code_Location* %0, i64 %1, i64 %2) #3 {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp sle i64 0, %5
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %9 = load i64, i64* %3, align 8
  %10 = load i64, i64* %4, align 8
  %11 = icmp sle i64 %9, %10
  %12 = zext i1 %11 to i8
  %13 = trunc i8 %12 to i1
  br i1 %13, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %14 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, align 8
  %15 = load i64, i64* %3, align 8
  %16 = load i64, i64* %4, align 8
  call void @runtime.make_dynamic_array_error_loc.handle_error-0(%runtime.Source_Code_Location* %0, i64 %15, i64 %16) #3
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.bounds_check_error_loc(%runtime.Source_Code_Location* %0, i64 %1, i64 %2) #3 {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %5 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 0
  %6 = load %..string, %..string* %5, align 8
  %7 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = load i64, i64* %3, align 8
  %12 = load i64, i64* %4, align 8
  call void @runtime.bounds_check_error(%..string* %5, i32 %8, i32 %10, i64 %11, i64 %12) #3
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.byte_slice-639({ i8*, i64 }* noalias sret({ i8*, i64 }) %agg.result, i8* %0, i64 %1) #3 {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %5 = load i64, i64* %3, align 8
  %6 = icmp sgt i64 %5, 0
  %7 = select i1 %6, i64 %5, i64 0
  %8 = load i8*, i8** %2, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr i8, i8* %9, i64 0
  %11 = sub i64 %7, 0
  %12 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  store i8* %10, i8** %12, align 8
  store i64 %11, i64* %13, align 8
  %14 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  %15 = bitcast { i8*, i64 }* %agg.result to i8*
  %16 = bitcast { i8*, i64 }* %4 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i1 false)
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @runtime.is_power_of_two_int(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = icmp sle i64 %3, 0
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = sub i64 %8, 1
  %10 = and i64 %7, %9
  %11 = icmp eq i64 %10, 0
  %12 = zext i1 %11 to i8
  ret i8 %12
}

; Function Attrs: alwaysinline
define internal i64 @runtime.align_forward_int(i64 %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  store i64 %1, i64* %3, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i64, i64* %3, align 8
  %10 = bitcast %runtime.Context* %8 to i8*
  %11 = call i8 @runtime.is_power_of_two_int(i64 %9, i8* %10) #3
  %12 = icmp ne i8 %11, 0
  store %..string zeroinitializer, %..string* %4, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, i32 74, i32 2, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$22d", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %5, align 8
  %13 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert(i1 %12, %..string* %4, %runtime.Source_Code_Location* %5, i8* %13) #3
  %14 = load i64, i64* %2, align 8
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load i64, i64* %3, align 8
  %17 = sub i64 %16, 1
  %18 = and i64 %15, %17
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %23 = load i64, i64* %3, align 8
  %24 = load i64, i64* %7, align 8
  %25 = sub i64 %23, %24
  %26 = load i64, i64* %6, align 8
  %27 = add i64 %26, %25
  store i64 %27, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %28 = load i64, i64* %6, align 8
  ret i64 %28
}

; Function Attrs: alwaysinline
define internal i8 @runtime.is_power_of_two_uintptr(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = icmp ule i64 %3, 0
  %5 = zext i1 %4 to i8
  %6 = trunc i8 %5 to i1
  br i1 %6, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8 0

if.done:                                          ; preds = %entry
  %7 = load i64, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = sub i64 %8, 1
  %10 = and i64 %7, %9
  %11 = icmp eq i64 %10, 0
  %12 = zext i1 %11 to i8
  ret i8 %12
}

; Function Attrs: alwaysinline
define internal i64 @runtime.align_forward_uintptr(i64 %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  store i64 %1, i64* %3, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i64, i64* %3, align 8
  %10 = bitcast %runtime.Context* %8 to i8*
  %11 = call i8 @runtime.is_power_of_two_uintptr(i64 %9, i8* %10) #3
  %12 = icmp ne i8 %11, 0
  store %..string zeroinitializer, %..string* %4, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, i32 92, i32 2, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$22e", i64 0, i64 0), i64 21 } }, %runtime.Source_Code_Location* %5, align 8
  %13 = bitcast %runtime.Context* %8 to i8*
  call void @runtime.assert(i1 %12, %..string* %4, %runtime.Source_Code_Location* %5, i8* %13) #3
  %14 = load i64, i64* %2, align 8
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load i64, i64* %3, align 8
  %17 = sub i64 %16, 1
  %18 = and i64 %15, %17
  store i64 %18, i64* %7, align 8
  %19 = load i64, i64* %7, align 8
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i8
  %22 = trunc i8 %21 to i1
  br i1 %22, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %23 = load i64, i64* %3, align 8
  %24 = load i64, i64* %7, align 8
  %25 = sub i64 %23, %24
  %26 = load i64, i64* %6, align 8
  %27 = add i64 %26, %25
  store i64 %27, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %28 = load i64, i64* %6, align 8
  ret i64 %28
}

define internal i8* @runtime.mem_zero(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = icmp eq i8* %4, null
  %6 = zext i1 %5 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret i8* null

if.done:                                          ; preds = %entry
  %8 = load i64, i64* %3, align 8
  %9 = icmp sle i64 %8, 0
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %12 = load i8*, i8** %2, align 8
  ret i8* %12

if.done2:                                         ; preds = %if.done
  %13 = load i8*, i8** %2, align 8
  %14 = load i64, i64* %3, align 8
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %14, i1 false)
  %15 = load i8*, i8** %2, align 8
  ret i8* %15
}

define internal i8* @runtime.mem_copy(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %6 = load i8*, i8** %4, align 8
  %7 = icmp ne i8* %6, null
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %10 = load i8*, i8** %3, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = icmp ne i8* %10, %11
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %cmp.and1, label %if.done

cmp.and1:                                         ; preds = %cmp.and
  %15 = load i64, i64* %5, align 8
  %16 = icmp sgt i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and1
  %19 = load i8*, i8** %3, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = load i64, i64* %5, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %19, i8* %20, i64 %21, i1 false)
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and1, %cmp.and, %entry
  %22 = load i8*, i8** %3, align 8
  ret i8* %22
}

; Function Attrs: alwaysinline
define internal void @runtime.mem_alloc_bytes({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i64 %0, i64 %1, %runtime.Allocator* %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %4, align 8
  store i64 %1, i64* %5, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load i64, i64* %4, align 8
  %9 = icmp eq i64 %8, 0
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %12 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %13 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %12, align 8
  store i8 0, i8* %13, align 1
  ret void

if.done:                                          ; preds = %entry
  %14 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 0
  %15 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %14, align 8
  %16 = icmp eq void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %15, null
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %19 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %19, align 8
  store i8 0, i8* %20, align 1
  ret void

if.done2:                                         ; preds = %if.done
  %21 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 0
  %22 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %21, align 8
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 1
  %24 = load i8*, i8** %23, align 8
  %25 = load i64, i64* %4, align 8
  %26 = load i64, i64* %5, align 8
  %27 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %28 = bitcast { { i8*, i64 }, i8 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %28, i8 0, i64 24, i1 false)
  %29 = bitcast %runtime.Context* %7 to i8*
  call void %22({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %6, i8* %24, i8 0, i64 %25, i64 %26, i8* null, i64 0, %runtime.Source_Code_Location* %3, i8* %29) #3
  %30 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, align 8
  %31 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 0
  %32 = load { i8*, i64 }, { i8*, i64 }* %31, align 8
  %33 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 1
  %34 = load i8, i8* %33, align 1
  %35 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %36 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %32, { i8*, i64 }* %35, align 8
  store i8 %34, i8* %36, align 1
  ret void
}

; Function Attrs: alwaysinline
define internal i8 @runtime.mem_free(i8* %0, %runtime.Allocator* %1, %runtime.Source_Code_Location* %2, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  %5 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load i8*, i8** %3, align 8
  %8 = icmp eq i8* %7, null
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %11 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %1, i32 0, i32 0
  %12 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %11, align 8
  %13 = icmp eq void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %12, null
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %16 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %1, i32 0, i32 0
  %17 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %16, align 8
  %18 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %1, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = load i8*, i8** %3, align 8
  %21 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %2, align 8
  %22 = bitcast { { i8*, i64 }, i8 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 24, i1 false)
  %23 = bitcast %runtime.Context* %6 to i8*
  call void %17({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %5, i8* %19, i8 1, i64 0, i64 0, i8* %20, i64 0, %runtime.Source_Code_Location* %2, i8* %23) #3
  %24 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, align 8
  %25 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 0
  %26 = load { i8*, i64 }, { i8*, i64 }* %25, align 8
  %27 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 1
  %28 = load i8, i8* %27, align 1
  store i8 %28, i8* %4, align 1
  %29 = load i8, i8* %4, align 1
  ret i8 %29
}

; Function Attrs: alwaysinline
define internal i8 @runtime.mem_free_with_size(i8* %0, i64 %1, %runtime.Allocator* %2, %runtime.Source_Code_Location* %3, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i8*, i8** %4, align 8
  %10 = icmp eq i8* %9, null
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %13 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 0
  %14 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %13, align 8
  %15 = icmp eq void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %14, null
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  ret i8 0

if.done:                                          ; preds = %cmp.or
  %18 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 0
  %19 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %18, align 8
  %20 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %2, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = load i8*, i8** %4, align 8
  %23 = load i64, i64* %5, align 8
  %24 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %3, align 8
  %25 = bitcast { { i8*, i64 }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 24, i1 false)
  %26 = bitcast %runtime.Context* %8 to i8*
  call void %19({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %7, i8* %21, i8 1, i64 0, i64 0, i8* %22, i64 %23, %runtime.Source_Code_Location* %3, i8* %26) #3
  %27 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, align 8
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 0
  %29 = load { i8*, i64 }, { i8*, i64 }* %28, align 8
  %30 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %7, i32 0, i32 1
  %31 = load i8, i8* %30, align 1
  store i8 %31, i8* %6, align 1
  %32 = load i8, i8* %6, align 1
  ret i8 %32
}

define internal void @runtime.mem_resize({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i8* %0, i64 %1, i64 %2, i64 %3, %runtime.Allocator* %4, %runtime.Source_Code_Location* %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  %11 = alloca { { i8*, i64 }, i8 }, align 8
  %12 = alloca { { i8*, i64 }, i8 }, align 8
  %13 = alloca { i8*, i64 }, align 8
  %14 = alloca %..string, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca i8, align 1
  %17 = alloca { { i8*, i64 }, i8 }, align 8
  %18 = alloca { { i8*, i64 }, i8 }, align 8
  %19 = alloca { i8*, i64 }, align 8
  %20 = alloca %..string, align 8
  %21 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  %22 = bitcast i8* %__.context_ptr to %runtime.Context*
  %23 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %24 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %23, align 8
  %25 = icmp eq void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)* %24, null
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %29 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %28, align 8
  store i8 0, i8* %29, align 1
  ret void

if.done:                                          ; preds = %entry
  %30 = load i64, i64* %8, align 8
  %31 = icmp eq i64 %30, 0
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %34 = load i8*, i8** %6, align 8
  %35 = icmp ne i8* %34, null
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  %38 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %39 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %38, align 8
  %40 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %41 = load i8*, i8** %40, align 8
  %42 = load i8*, i8** %6, align 8
  %43 = load i64, i64* %7, align 8
  %44 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %45 = bitcast { { i8*, i64 }, i8 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %45, i8 0, i64 24, i1 false)
  %46 = bitcast %runtime.Context* %22 to i8*
  call void %39({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %11, i8* %41, i8 1, i64 0, i64 0, i8* %42, i64 %43, %runtime.Source_Code_Location* %5, i8* %46)
  %47 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %11, align 8
  %48 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %11, i32 0, i32 0
  %49 = load { i8*, i64 }, { i8*, i64 }* %48, align 8
  %50 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %11, i32 0, i32 1
  %51 = load i8, i8* %50, align 1
  store i8 %51, i8* %10, align 1
  %52 = load i8, i8* %10, align 1
  %53 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %54 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %53, align 8
  store i8 %52, i8* %54, align 1
  ret void

if.done3:                                         ; preds = %if.then1
  %55 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %56 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %55, align 8
  store i8 0, i8* %56, align 1
  ret void

if.else:                                          ; preds = %if.done
  %57 = load i8*, i8** %6, align 8
  %58 = icmp eq i8* %57, null
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.else
  %61 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %62 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %61, align 8
  %63 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = load i64, i64* %8, align 8
  %66 = load i64, i64* %9, align 8
  %67 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %68 = bitcast { { i8*, i64 }, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %68, i8 0, i64 24, i1 false)
  %69 = bitcast %runtime.Context* %22 to i8*
  call void %62({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %12, i8* %64, i8 0, i64 %65, i64 %66, i8* null, i64 0, %runtime.Source_Code_Location* %5, i8* %69)
  %70 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, align 8
  %71 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, i32 0, i32 0
  %72 = load { i8*, i64 }, { i8*, i64 }* %71, align 8
  %73 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %12, i32 0, i32 1
  %74 = load i8, i8* %73, align 1
  %75 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %76 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %72, { i8*, i64 }* %75, align 8
  store i8 %74, i8* %76, align 1
  ret void

if.else5:                                         ; preds = %if.else
  %77 = load i64, i64* %7, align 8
  %78 = load i64, i64* %8, align 8
  %79 = icmp eq i64 %77, %78
  %80 = zext i1 %79 to i8
  %81 = trunc i8 %80 to i1
  br i1 %81, label %cmp.and, label %if.done7

cmp.and:                                          ; preds = %if.else5
  %82 = load i8*, i8** %6, align 8
  %83 = ptrtoint i8* %82 to i64
  %84 = load i64, i64* %9, align 8
  %85 = urem i64 %83, %84
  %86 = icmp eq i64 %85, 0
  %87 = zext i1 %86 to i8
  %88 = trunc i8 %87 to i1
  br i1 %88, label %if.then6, label %if.done7

if.then6:                                         ; preds = %cmp.and
  %89 = load i64, i64* %7, align 8
  %90 = load i8*, i8** %6, align 8
  %91 = load i8*, i8** %6, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %14, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %14, i32 193, i32 24, i64 0, i64 %89)
  %92 = getelementptr i8, i8* %91, i64 0
  %93 = sub i64 %89, 0
  %94 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %95 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  store i8* %92, i8** %94, align 8
  store i64 %93, i64* %95, align 8
  %96 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  %97 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %98 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %96, { i8*, i64 }* %97, align 8
  store i8 0, i8* %98, align 1
  ret void

if.done7:                                         ; preds = %cmp.and, %if.else5
  br label %if.done8

if.done8:                                         ; preds = %if.done7
  br label %if.done9

if.done9:                                         ; preds = %if.done8
  %99 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %100 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %99, align 8
  %101 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %102 = load i8*, i8** %101, align 8
  %103 = load i64, i64* %8, align 8
  %104 = load i64, i64* %9, align 8
  %105 = load i8*, i8** %6, align 8
  %106 = load i64, i64* %7, align 8
  %107 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %108 = bitcast { { i8*, i64 }, i8 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %108, i8 0, i64 24, i1 false)
  %109 = bitcast %runtime.Context* %22 to i8*
  call void %100({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %17, i8* %102, i8 3, i64 %103, i64 %104, i8* %105, i64 %106, %runtime.Source_Code_Location* %5, i8* %109)
  %110 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, align 8
  %111 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 0
  %112 = load { i8*, i64 }, { i8*, i64 }* %111, align 8
  %113 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %17, i32 0, i32 1
  %114 = load i8, i8* %113, align 1
  store { i8*, i64 } %112, { i8*, i64 }* %15, align 8
  store i8 %114, i8* %16, align 1
  %115 = load i8, i8* %16, align 1
  %116 = icmp eq i8 %115, 4
  %117 = zext i1 %116 to i8
  %118 = trunc i8 %117 to i1
  br i1 %118, label %if.then10, label %if.done13

if.then10:                                        ; preds = %if.done9
  %119 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %120 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %119, align 8
  %121 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %122 = load i8*, i8** %121, align 8
  %123 = load i64, i64* %8, align 8
  %124 = load i64, i64* %9, align 8
  %125 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %126 = bitcast { { i8*, i64 }, i8 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %126, i8 0, i64 24, i1 false)
  %127 = bitcast %runtime.Context* %22 to i8*
  call void %120({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %18, i8* %122, i8 0, i64 %123, i64 %124, i8* null, i64 0, %runtime.Source_Code_Location* %5, i8* %127)
  %128 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, align 8
  %129 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, i32 0, i32 0
  %130 = load { i8*, i64 }, { i8*, i64 }* %129, align 8
  %131 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %18, i32 0, i32 1
  %132 = load i8, i8* %131, align 1
  store { i8*, i64 } %130, { i8*, i64 }* %15, align 8
  store i8 %132, i8* %16, align 1
  %133 = load i8, i8* %16, align 1
  %134 = icmp ne i8 %133, 0
  %135 = zext i1 %134 to i8
  %136 = trunc i8 %135 to i1
  br i1 %136, label %if.then11, label %if.done12

if.then11:                                        ; preds = %if.then10
  %137 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %138 = load i8, i8* %16, align 1
  %139 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %140 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %137, { i8*, i64 }* %139, align 8
  store i8 %138, i8* %140, align 1
  ret void

if.done12:                                        ; preds = %if.then10
  %141 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %142 = load i64, i64* %7, align 8
  %143 = load i8*, i8** %6, align 8
  %144 = load i8*, i8** %6, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %20, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %20, i32 202, i32 28, i64 0, i64 %142)
  %145 = getelementptr i8, i8* %144, i64 0
  %146 = sub i64 %142, 0
  %147 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  %148 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  store i8* %145, i8** %147, align 8
  store i64 %146, i64* %148, align 8
  %149 = load { i8*, i64 }, { i8*, i64 }* %19, align 8
  %150 = call i64 @runtime.copy_slice-48381({ i8*, i64 }* %15, { i8*, i64 }* %19)
  %151 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 0
  %152 = load void ({ { i8*, i64 }, i8 }*, i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8*)*, i8** %151, align 8
  %153 = getelementptr inbounds %runtime.Allocator, %runtime.Allocator* %4, i32 0, i32 1
  %154 = load i8*, i8** %153, align 8
  %155 = load i8*, i8** %6, align 8
  %156 = load i64, i64* %7, align 8
  %157 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %5, align 8
  %158 = bitcast { { i8*, i64 }, i8 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %158, i8 0, i64 24, i1 false)
  %159 = bitcast %runtime.Context* %22 to i8*
  call void %152({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %21, i8* %154, i8 1, i64 0, i64 0, i8* %155, i64 %156, %runtime.Source_Code_Location* %5, i8* %159)
  %160 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %21, align 8
  %161 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %21, i32 0, i32 0
  %162 = load { i8*, i64 }, { i8*, i64 }* %161, align 8
  %163 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %21, i32 0, i32 1
  %164 = load i8, i8* %163, align 1
  store i8 %164, i8* %16, align 1
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.done9
  %165 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %166 = load i8, i8* %16, align 1
  %167 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %168 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %165, { i8*, i64 }* %167, align 8
  store i8 %166, i8* %168, align 1
  ret void
}

define internal i8 @runtime.memory_equal(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i16, align 2
  %22 = alloca i16, align 2
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %25 = load i64, i64* %5, align 8
  %26 = icmp eq i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = icmp eq i8 1, %27
  br i1 %28, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %entry
  %29 = load i8*, i8** %3, align 8
  %30 = load i8*, i8** %4, align 8
  %31 = icmp eq i8* %29, %30
  %32 = zext i1 %31 to i8
  %33 = icmp eq i8 1, %32
  br i1 %33, label %switch.case.body2, label %switch.case.next1

switch.case.body:                                 ; preds = %entry
  ret i8 1

switch.case.next1:                                ; preds = %switch.case.next
  br label %switch.done

switch.case.body2:                                ; preds = %switch.case.next
  ret i8 1

switch.done:                                      ; preds = %switch.case.next1
  %34 = load i8*, i8** %3, align 8
  %35 = load i8*, i8** %4, align 8
  store i8* %34, i8** %6, align 8
  store i8* %35, i8** %7, align 8
  %36 = load i64, i64* %5, align 8
  store i64 %36, i64* %8, align 8
  br label %if.init

if.init:                                          ; preds = %switch.done
  %37 = load i64, i64* %8, align 8
  %38 = lshr i64 %37, 3
  %39 = select i1 true, i64 %38, i64 0
  store i64 %39, i64* %9, align 8
  %40 = load i64, i64* %9, align 8
  %41 = icmp ne i64 %40, 0
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %if.then, label %if.done4

if.then:                                          ; preds = %if.init
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.then
  %44 = load i64, i64* %9, align 8
  %45 = load i64, i64* %10, align 8
  %46 = icmp ult i64 %45, %44
  br i1 %46, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %47 = load i64, i64* %10, align 8
  %48 = load i64, i64* %11, align 8
  store i64 %47, i64* %12, align 8
  %49 = load i8*, i8** %6, align 8
  %50 = bitcast i8* %49 to i64*
  %51 = bitcast i64* %13 to i8*
  %52 = bitcast i64* %50 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %51, i8* %52, i64 8, i1 false)
  %53 = load i64, i64* %13, align 8
  %54 = load i8*, i8** %7, align 8
  %55 = bitcast i8* %54 to i64*
  %56 = bitcast i64* %14 to i8*
  %57 = bitcast i64* %55 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %56, i8* %57, i64 8, i1 false)
  %58 = load i64, i64* %14, align 8
  %59 = icmp ne i64 %53, %58
  %60 = zext i1 %59 to i8
  %61 = trunc i8 %60 to i1
  br i1 %61, label %if.then3, label %if.done

if.then3:                                         ; preds = %for.interval.body
  ret i8 0

if.done:                                          ; preds = %for.interval.body
  %62 = load i8*, i8** %6, align 8
  %63 = getelementptr i8, i8* %62, i64 8
  store i8* %63, i8** %15, align 8
  %64 = load i8*, i8** %15, align 8
  store i8* %64, i8** %6, align 8
  %65 = load i8*, i8** %7, align 8
  %66 = getelementptr i8, i8* %65, i64 8
  store i8* %66, i8** %16, align 8
  %67 = load i8*, i8** %16, align 8
  store i8* %67, i8** %7, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %68 = load i64, i64* %10, align 8
  %69 = add i64 %68, 1
  store i64 %69, i64* %10, align 8
  %70 = load i64, i64* %11, align 8
  %71 = add i64 %70, 1
  store i64 %71, i64* %11, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %if.done4

if.done4:                                         ; preds = %for.interval.done, %if.init
  %72 = load i64, i64* %8, align 8
  %73 = and i64 %72, 4
  %74 = icmp ne i64 %73, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then5, label %if.done8

if.then5:                                         ; preds = %if.done4
  %77 = load i8*, i8** %6, align 8
  %78 = bitcast i8* %77 to i32*
  %79 = bitcast i32* %17 to i8*
  %80 = bitcast i32* %78 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %79, i8* %80, i64 4, i1 false)
  %81 = load i32, i32* %17, align 4
  %82 = load i8*, i8** %7, align 8
  %83 = bitcast i8* %82 to i32*
  %84 = bitcast i32* %18 to i8*
  %85 = bitcast i32* %83 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %84, i8* %85, i64 4, i1 false)
  %86 = load i32, i32* %18, align 4
  %87 = icmp ne i32 %81, %86
  %88 = zext i1 %87 to i8
  %89 = trunc i8 %88 to i1
  br i1 %89, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.then5
  ret i8 0

if.done7:                                         ; preds = %if.then5
  %90 = load i8*, i8** %6, align 8
  %91 = getelementptr i8, i8* %90, i64 4
  store i8* %91, i8** %19, align 8
  %92 = load i8*, i8** %19, align 8
  store i8* %92, i8** %6, align 8
  %93 = load i8*, i8** %7, align 8
  %94 = getelementptr i8, i8* %93, i64 4
  store i8* %94, i8** %20, align 8
  %95 = load i8*, i8** %20, align 8
  store i8* %95, i8** %7, align 8
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.done4
  %96 = load i64, i64* %8, align 8
  %97 = and i64 %96, 2
  %98 = icmp ne i64 %97, 0
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then9, label %if.done12

if.then9:                                         ; preds = %if.done8
  %101 = load i8*, i8** %6, align 8
  %102 = bitcast i8* %101 to i16*
  %103 = bitcast i16* %21 to i8*
  %104 = bitcast i16* %102 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %103, i8* %104, i64 2, i1 false)
  %105 = load i16, i16* %21, align 2
  %106 = load i8*, i8** %7, align 8
  %107 = bitcast i8* %106 to i16*
  %108 = bitcast i16* %22 to i8*
  %109 = bitcast i16* %107 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %108, i8* %109, i64 2, i1 false)
  %110 = load i16, i16* %22, align 2
  %111 = icmp ne i16 %105, %110
  %112 = zext i1 %111 to i8
  %113 = trunc i8 %112 to i1
  br i1 %113, label %if.then10, label %if.done11

if.then10:                                        ; preds = %if.then9
  ret i8 0

if.done11:                                        ; preds = %if.then9
  %114 = load i8*, i8** %6, align 8
  %115 = getelementptr i8, i8* %114, i64 2
  store i8* %115, i8** %23, align 8
  %116 = load i8*, i8** %23, align 8
  store i8* %116, i8** %6, align 8
  %117 = load i8*, i8** %7, align 8
  %118 = getelementptr i8, i8* %117, i64 2
  store i8* %118, i8** %24, align 8
  %119 = load i8*, i8** %24, align 8
  store i8* %119, i8** %7, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.done8
  %120 = load i64, i64* %8, align 8
  %121 = and i64 %120, 1
  %122 = icmp ne i64 %121, 0
  %123 = zext i1 %122 to i8
  %124 = trunc i8 %123 to i1
  br i1 %124, label %cmp.and, label %if.done15

cmp.and:                                          ; preds = %if.done12
  %125 = load i8*, i8** %6, align 8
  %foo = getelementptr i8, i8* %125, i64 0
  %126 = load i8, i8* %foo, align 1
  %127 = load i8*, i8** %7, align 8
  %foo13 = getelementptr i8, i8* %127, i64 0
  %128 = load i8, i8* %foo13, align 1
  %129 = icmp ne i8 %126, %128
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then14, label %if.done15

if.then14:                                        ; preds = %cmp.and
  ret i8 0

if.done15:                                        ; preds = %cmp.and, %if.done12
  ret i8 1
}

define internal i64 @runtime.memory_compare(i8* %0, i8* %1, i64 %2) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  %18 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i64 %2, i64* %5, align 8
  %19 = load i8*, i8** %3, align 8
  %20 = load i8*, i8** %4, align 8
  %21 = icmp eq i8* %19, %20
  %22 = zext i1 %21 to i8
  %23 = icmp eq i8 1, %22
  br i1 %23, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %entry
  %24 = load i8*, i8** %3, align 8
  %25 = icmp eq i8* %24, null
  %26 = zext i1 %25 to i8
  %27 = icmp eq i8 1, %26
  br i1 %27, label %switch.case.body2, label %switch.case.next1

switch.case.body:                                 ; preds = %entry
  ret i64 0

switch.case.next1:                                ; preds = %switch.case.next
  %28 = load i8*, i8** %4, align 8
  %29 = icmp eq i8* %28, null
  %30 = zext i1 %29 to i8
  %31 = icmp eq i8 1, %30
  br i1 %31, label %switch.case.body4, label %switch.case.next3

switch.case.body2:                                ; preds = %switch.case.next
  ret i64 -1

switch.case.next3:                                ; preds = %switch.case.next1
  br label %switch.done

switch.case.body4:                                ; preds = %switch.case.next1
  ret i64 1

switch.done:                                      ; preds = %switch.case.next3
  %32 = load i8*, i8** %3, align 8
  %33 = ptrtoint i8* %32 to i64
  store i64 %33, i64* %6, align 8
  %34 = load i8*, i8** %4, align 8
  %35 = ptrtoint i8* %34 to i64
  store i64 %35, i64* %7, align 8
  %36 = load i64, i64* %5, align 8
  store i64 %36, i64* %8, align 8
  %37 = load i64, i64* %8, align 8
  %38 = udiv i64 %37, 8
  %39 = add i64 %38, 1
  store i64 %39, i64* %9, align 8
  %40 = load i64, i64* %9, align 8
  %41 = sub i64 %40, 1
  %42 = mul i64 %41, 8
  store i64 %42, i64* %10, align 8
  store i64 0, i64* %11, align 8
  %43 = load i64, i64* %8, align 8
  %44 = icmp ult i64 %43, 8
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %switch.done
  store i64 0, i64* %9, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.done
  br label %for.loop

for.loop:                                         ; preds = %for.post13, %if.done
  %47 = load i64, i64* %11, align 8
  %48 = load i64, i64* %9, align 8
  %49 = icmp ult i64 %47, %48
  %50 = zext i1 %49 to i8
  %51 = trunc i8 %50 to i1
  br i1 %51, label %for.body, label %for.done14

for.body:                                         ; preds = %for.loop
  %52 = load i64, i64* %6, align 8
  %53 = load i64, i64* %11, align 8
  %54 = mul i64 %53, 8
  %55 = add i64 %52, %54
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %12, align 8
  %58 = load i64, i64* %7, align 8
  %59 = load i64, i64* %11, align 8
  %60 = mul i64 %59, 8
  %61 = add i64 %58, %60
  %62 = inttoptr i64 %61 to i64*
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %13, align 8
  %64 = load i64, i64* %12, align 8
  %65 = load i64, i64* %13, align 8
  %66 = xor i64 %64, %65
  %67 = icmp ne i64 %66, 0
  %68 = zext i1 %67 to i8
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.then5, label %if.done12

if.then5:                                         ; preds = %for.body
  br label %for.init

for.init:                                         ; preds = %if.then5
  %70 = load i64, i64* %11, align 8
  %71 = mul i64 %70, 8
  store i64 %71, i64* %14, align 8
  br label %for.loop6

for.loop6:                                        ; preds = %for.post, %for.init
  %72 = load i64, i64* %14, align 8
  %73 = load i64, i64* %8, align 8
  %74 = icmp ult i64 %72, %73
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %for.body7, label %for.done

for.body7:                                        ; preds = %for.loop6
  %77 = load i64, i64* %6, align 8
  %78 = load i64, i64* %14, align 8
  %79 = add i64 %77, %78
  %80 = inttoptr i64 %79 to i8*
  %81 = load i8, i8* %80, align 1
  store i8 %81, i8* %15, align 1
  %82 = load i64, i64* %7, align 8
  %83 = load i64, i64* %14, align 8
  %84 = add i64 %82, %83
  %85 = inttoptr i64 %84 to i8*
  %86 = load i8, i8* %85, align 1
  store i8 %86, i8* %16, align 1
  %87 = load i8, i8* %15, align 1
  %88 = load i8, i8* %16, align 1
  %89 = xor i8 %87, %88
  %90 = icmp ne i8 %89, 0
  %91 = zext i1 %90 to i8
  %92 = trunc i8 %91 to i1
  br i1 %92, label %if.then8, label %if.done11

if.then8:                                         ; preds = %for.body7
  %93 = load i8, i8* %15, align 1
  %94 = zext i8 %93 to i64
  %95 = load i8, i8* %16, align 1
  %96 = zext i8 %95 to i64
  %97 = sub i64 %94, %96
  %98 = icmp slt i64 %97, 0
  %99 = zext i1 %98 to i8
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.then8
  br label %if.done10

if.else:                                          ; preds = %if.then8
  br label %if.done10

if.done10:                                        ; preds = %if.else, %if.then9
  %101 = phi i64 [ -1, %if.then9 ], [ 1, %if.else ]
  ret i64 %101

if.done11:                                        ; preds = %for.body7
  br label %for.post

for.post:                                         ; preds = %if.done11
  %102 = load i64, i64* %14, align 8
  %103 = add i64 %102, 1
  store i64 %103, i64* %14, align 8
  br label %for.loop6

for.done:                                         ; preds = %for.loop6
  br label %if.done12

if.done12:                                        ; preds = %for.done, %for.body
  br label %for.post13

for.post13:                                       ; preds = %if.done12
  %104 = load i64, i64* %11, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %11, align 8
  br label %for.loop

for.done14:                                       ; preds = %for.loop
  br label %for.loop15

for.loop15:                                       ; preds = %for.post22, %for.done14
  %106 = load i64, i64* %10, align 8
  %107 = load i64, i64* %8, align 8
  %108 = icmp ult i64 %106, %107
  %109 = zext i1 %108 to i8
  %110 = trunc i8 %109 to i1
  br i1 %110, label %for.body16, label %for.done23

for.body16:                                       ; preds = %for.loop15
  %111 = load i64, i64* %6, align 8
  %112 = load i64, i64* %10, align 8
  %113 = add i64 %111, %112
  %114 = inttoptr i64 %113 to i8*
  %115 = load i8, i8* %114, align 1
  store i8 %115, i8* %17, align 1
  %116 = load i64, i64* %7, align 8
  %117 = load i64, i64* %10, align 8
  %118 = add i64 %116, %117
  %119 = inttoptr i64 %118 to i8*
  %120 = load i8, i8* %119, align 1
  store i8 %120, i8* %18, align 1
  %121 = load i8, i8* %17, align 1
  %122 = load i8, i8* %18, align 1
  %123 = xor i8 %121, %122
  %124 = icmp ne i8 %123, 0
  %125 = zext i1 %124 to i8
  %126 = trunc i8 %125 to i1
  br i1 %126, label %if.then17, label %if.done21

if.then17:                                        ; preds = %for.body16
  %127 = load i8, i8* %17, align 1
  %128 = zext i8 %127 to i64
  %129 = load i8, i8* %18, align 1
  %130 = zext i8 %129 to i64
  %131 = sub i64 %128, %130
  %132 = icmp slt i64 %131, 0
  %133 = zext i1 %132 to i8
  %134 = trunc i8 %133 to i1
  br i1 %134, label %if.then18, label %if.else19

if.then18:                                        ; preds = %if.then17
  br label %if.done20

if.else19:                                        ; preds = %if.then17
  br label %if.done20

if.done20:                                        ; preds = %if.else19, %if.then18
  %135 = phi i64 [ -1, %if.then18 ], [ 1, %if.else19 ]
  ret i64 %135

if.done21:                                        ; preds = %for.body16
  br label %for.post22

for.post22:                                       ; preds = %if.done21
  %136 = load i64, i64* %10, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %10, align 8
  br label %for.loop15

for.done23:                                       ; preds = %for.loop15
  ret i64 0
}

define internal i64 @runtime.memory_compare_zero(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %13 = load i8*, i8** %2, align 8
  %14 = ptrtoint i8* %13 to i64
  store i64 %14, i64* %4, align 8
  %15 = load i64, i64* %3, align 8
  store i64 %15, i64* %5, align 8
  %16 = load i64, i64* %5, align 8
  %17 = udiv i64 %16, 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %6, align 8
  %19 = load i64, i64* %6, align 8
  %20 = sub i64 %19, 1
  %21 = mul i64 %20, 8
  store i64 %21, i64* %7, align 8
  store i64 0, i64* %8, align 8
  %22 = load i64, i64* %5, align 8
  %23 = icmp ult i64 %22, 8
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %6, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  br label %for.loop

for.loop:                                         ; preds = %for.post9, %if.done
  %26 = load i64, i64* %8, align 8
  %27 = load i64, i64* %6, align 8
  %28 = icmp ult i64 %26, %27
  %29 = zext i1 %28 to i8
  %30 = trunc i8 %29 to i1
  br i1 %30, label %for.body, label %for.done10

for.body:                                         ; preds = %for.loop
  %31 = load i64, i64* %4, align 8
  %32 = load i64, i64* %8, align 8
  %33 = mul i64 %32, 8
  %34 = add i64 %31, %33
  %35 = inttoptr i64 %34 to i64*
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %9, align 8
  %37 = load i64, i64* %9, align 8
  %38 = xor i64 %37, 0
  %39 = icmp ne i64 %38, 0
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then1, label %if.done8

if.then1:                                         ; preds = %for.body
  br label %for.init

for.init:                                         ; preds = %if.then1
  %42 = load i64, i64* %8, align 8
  %43 = mul i64 %42, 8
  store i64 %43, i64* %10, align 8
  br label %for.loop2

for.loop2:                                        ; preds = %for.post, %for.init
  %44 = load i64, i64* %10, align 8
  %45 = load i64, i64* %5, align 8
  %46 = icmp ult i64 %44, %45
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %for.body3, label %for.done

for.body3:                                        ; preds = %for.loop2
  %49 = load i64, i64* %4, align 8
  %50 = load i64, i64* %10, align 8
  %51 = add i64 %49, %50
  %52 = inttoptr i64 %51 to i8*
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %11, align 1
  %54 = load i8, i8* %11, align 1
  %55 = xor i8 %54, 0
  %56 = icmp ne i8 %55, 0
  %57 = zext i1 %56 to i8
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then4, label %if.done7

if.then4:                                         ; preds = %for.body3
  %59 = load i8, i8* %11, align 1
  %60 = zext i8 %59 to i64
  %61 = icmp slt i64 %60, 0
  %62 = zext i1 %61 to i8
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then4
  br label %if.done6

if.else:                                          ; preds = %if.then4
  br label %if.done6

if.done6:                                         ; preds = %if.else, %if.then5
  %64 = phi i64 [ -1, %if.then5 ], [ 1, %if.else ]
  ret i64 %64

if.done7:                                         ; preds = %for.body3
  br label %for.post

for.post:                                         ; preds = %if.done7
  %65 = load i64, i64* %10, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %10, align 8
  br label %for.loop2

for.done:                                         ; preds = %for.loop2
  br label %if.done8

if.done8:                                         ; preds = %for.done, %for.body
  br label %for.post9

for.post9:                                        ; preds = %if.done8
  %67 = load i64, i64* %8, align 8
  %68 = add i64 %67, 1
  store i64 %68, i64* %8, align 8
  br label %for.loop

for.done10:                                       ; preds = %for.loop
  br label %for.loop11

for.loop11:                                       ; preds = %for.post18, %for.done10
  %69 = load i64, i64* %7, align 8
  %70 = load i64, i64* %5, align 8
  %71 = icmp ult i64 %69, %70
  %72 = zext i1 %71 to i8
  %73 = trunc i8 %72 to i1
  br i1 %73, label %for.body12, label %for.done19

for.body12:                                       ; preds = %for.loop11
  %74 = load i64, i64* %4, align 8
  %75 = load i64, i64* %7, align 8
  %76 = add i64 %74, %75
  %77 = inttoptr i64 %76 to i8*
  %78 = load i8, i8* %77, align 1
  store i8 %78, i8* %12, align 1
  %79 = load i8, i8* %12, align 1
  %80 = xor i8 %79, 0
  %81 = icmp ne i8 %80, 0
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then13, label %if.done17

if.then13:                                        ; preds = %for.body12
  %84 = load i8, i8* %12, align 1
  %85 = zext i8 %84 to i64
  %86 = icmp slt i64 %85, 0
  %87 = zext i1 %86 to i8
  %88 = trunc i8 %87 to i1
  br i1 %88, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.then13
  br label %if.done16

if.else15:                                        ; preds = %if.then13
  br label %if.done16

if.done16:                                        ; preds = %if.else15, %if.then14
  %89 = phi i64 [ -1, %if.then14 ], [ 1, %if.else15 ]
  ret i64 %89

if.done17:                                        ; preds = %for.body12
  br label %for.post18

for.post18:                                       ; preds = %if.done17
  %90 = load i64, i64* %7, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %7, align 8
  br label %for.loop11

for.done19:                                       ; preds = %for.loop11
  ret i64 0
}

; Function Attrs: alwaysinline
define internal i8 @runtime.string_ne(%..string* %0, %..string* %1) #3 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = load %..string, %..string* %0, align 8
  %3 = load %..string, %..string* %1, align 8
  %4 = call i8 @runtime.string_eq(%..string* %0, %..string* %1) #3
  %5 = icmp eq i8 %4, 0
  %6 = zext i1 %5 to i8
  ret i8 %6
}

define internal i64 @runtime.cstring_len(i8* %0) {
decls:
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %4 = load i8*, i8** %1, align 8
  %5 = ptrtoint i8* %4 to i64
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  store i64 %6, i64* %3, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %7 = load i64, i64* %3, align 8
  %8 = icmp ne i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %for.loop
  %11 = load i64, i64* %3, align 8
  %12 = inttoptr i64 %11 to i8*
  %13 = load i8, i8* %12, align 1
  %14 = icmp ne i8 %13, 0
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %for.body, label %for.done

for.body:                                         ; preds = %cmp.and
  %17 = load i64, i64* %3, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %cmp.and, %for.loop
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %2, align 8
  %21 = sub i64 %19, %20
  ret i64 %21
}

define internal void @runtime.cstring_to_string(%..string* noalias sret(%..string) %agg.result, i8* %0) {
decls:
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %runtime.Raw_String, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %5 = load i8*, i8** %1, align 8
  %6 = icmp eq i8* %5, null
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store %..string zeroinitializer, %..string* %agg.result, align 8
  ret void

if.done:                                          ; preds = %entry
  %9 = load i8*, i8** %1, align 8
  store i8* %9, i8** %2, align 8
  %10 = load i8*, i8** %1, align 8
  %11 = call i64 @runtime.cstring_len(i8* %10)
  store i64 %11, i64* %3, align 8
  %12 = bitcast %runtime.Raw_String* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i1 false)
  store %runtime.Raw_String zeroinitializer, %runtime.Raw_String* %4, align 8
  %13 = load i8*, i8** %2, align 8
  %14 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %4, i32 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = load i64, i64* %3, align 8
  %16 = getelementptr inbounds %runtime.Raw_String, %runtime.Raw_String* %4, i32 0, i32 1
  store i64 %15, i64* %16, align 8
  %17 = load %runtime.Raw_String, %runtime.Raw_String* %4, align 8
  %18 = bitcast %runtime.Raw_String* %4 to %..string*
  %19 = load %..string, %..string* %18, align 8
  %20 = bitcast %..string* %agg.result to i8*
  %21 = bitcast %..string* %18 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i1 false)
  ret void
}

; Function Attrs: alwaysinline
define internal void @runtime.string_decode_rune({ i32, i64 }* noalias sret({ i32, i64 }) %agg.result, %..string* %0) #3 {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i8, align 1
  %3 = alloca %..string, align 8
  %4 = alloca i8, align 1
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca %..string, align 8
  %8 = alloca i8, align 1
  %9 = alloca %runtime.string_decode_rune.Accept_Range-1, align 1
  %10 = alloca %..string, align 8
  %11 = alloca i8, align 1
  %12 = alloca %..string, align 8
  %13 = alloca i8, align 1
  %14 = alloca %..string, align 8
  %15 = alloca i8, align 1
  %16 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %17 = load %..string, %..string* %0, align 8
  %18 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* %1, align 8
  %20 = load i64, i64* %1, align 8
  %21 = icmp slt i64 %20, 1
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %24 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %25 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 65533, i32* %24, align 4
  store i64 0, i64* %25, align 8
  ret void

if.done:                                          ; preds = %entry
  %26 = load %..string, %..string* %0, align 8
  %27 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %3, align 8
  call void @runtime.bounds_check_error(%..string* %3, i32 463, i32 10, i64 0, i64 %30) #3
  %31 = getelementptr i8, i8* %28, i64 0
  %32 = load i8, i8* %31, align 1
  store i8 %32, i8* %2, align 1
  %33 = load i8, i8* %2, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr [256 x i8], [256 x i8]* @runtime.string_decode_rune-.accept_sizes-48436, i64 0, i64 %34
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %5, align 8
  call void @runtime.bounds_check_error(%..string* %5, i32 464, i32 20, i64 %34, i64 256) #3
  %36 = load i8, i8* %35, align 1
  store i8 %36, i8* %4, align 1
  %37 = load i8, i8* %4, align 1
  %38 = icmp uge i8 %37, -16
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %41 = load i8, i8* %4, align 1
  %42 = zext i8 %41 to i32
  %43 = shl i32 %42, 31
  %44 = select i1 true, i32 %43, i32 0
  %45 = ashr i32 %44, 31
  %46 = select i1 true, i32 %45, i32 0
  store i32 %46, i32* %6, align 4
  %47 = load %..string, %..string* %0, align 8
  %48 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 467, i32 17, i64 0, i64 %51) #3
  %52 = getelementptr i8, i8* %49, i64 0
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = load i32, i32* %6, align 4
  %56 = xor i32 %55, -1
  %57 = and i32 %54, %56
  %58 = load i32, i32* %6, align 4
  %59 = and i32 65533, %58
  %60 = or i32 %57, %59
  %61 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %62 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 %60, i32* %61, align 4
  store i64 1, i64* %62, align 8
  ret void

if.done2:                                         ; preds = %if.done
  %63 = load i8, i8* %4, align 1
  %64 = and i8 %63, 7
  store i8 %64, i8* %8, align 1
  %65 = load i8, i8* %4, align 1
  %66 = lshr i8 %65, 4
  %67 = select i1 true, i8 %66, i8 0
  %68 = zext i8 %67 to i64
  %69 = getelementptr [5 x %runtime.string_decode_rune.Accept_Range-1], [5 x %runtime.string_decode_rune.Accept_Range-1]* @runtime.string_decode_rune-.accept_ranges-48437, i64 0, i64 %68
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 470, i32 26, i64 %68, i64 5) #3
  %70 = load %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %69, align 1
  store %runtime.string_decode_rune.Accept_Range-1 %70, %runtime.string_decode_rune.Accept_Range-1* %9, align 1
  %71 = load i64, i64* %1, align 8
  %72 = load i8, i8* %8, align 1
  %73 = zext i8 %72 to i64
  %74 = icmp slt i64 %71, %73
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %77 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %78 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 65533, i32* %77, align 4
  store i64 1, i64* %78, align 8
  ret void

if.done4:                                         ; preds = %if.done2
  %79 = load %..string, %..string* %0, align 8
  %80 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %12, align 8
  call void @runtime.bounds_check_error(%..string* %12, i32 474, i32 10, i64 1, i64 %83) #3
  %84 = getelementptr i8, i8* %81, i64 1
  %85 = load i8, i8* %84, align 1
  store i8 %85, i8* %11, align 1
  %86 = load i8, i8* %11, align 1
  %87 = getelementptr inbounds %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %9, i32 0, i32 0
  %88 = load i8, i8* %87, align 1
  %89 = icmp ult i8 %86, %88
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %if.then5, label %cmp.or

cmp.or:                                           ; preds = %if.done4
  %92 = getelementptr inbounds %runtime.string_decode_rune.Accept_Range-1, %runtime.string_decode_rune.Accept_Range-1* %9, i32 0, i32 1
  %93 = load i8, i8* %92, align 1
  %94 = load i8, i8* %11, align 1
  %95 = icmp ult i8 %93, %94
  %96 = zext i1 %95 to i8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then5, label %if.done6

if.then5:                                         ; preds = %cmp.or, %if.done4
  %98 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %99 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 65533, i32* %98, align 4
  store i64 1, i64* %99, align 8
  ret void

if.done6:                                         ; preds = %cmp.or
  %100 = load i8, i8* %8, align 1
  %101 = icmp eq i8 %100, 2
  %102 = zext i1 %101 to i8
  %103 = trunc i8 %102 to i1
  br i1 %103, label %if.then7, label %if.done8

if.then7:                                         ; preds = %if.done6
  %104 = load i8, i8* %2, align 1
  %105 = and i8 %104, 31
  %106 = zext i8 %105 to i32
  %107 = shl i32 %106, 6
  %108 = select i1 true, i32 %107, i32 0
  %109 = load i8, i8* %11, align 1
  %110 = and i8 %109, 63
  %111 = zext i8 %110 to i32
  %112 = or i32 %108, %111
  %113 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %114 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 %112, i32* %113, align 4
  store i64 2, i64* %114, align 8
  ret void

if.done8:                                         ; preds = %if.done6
  %115 = load %..string, %..string* %0, align 8
  %116 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %119 = load i64, i64* %118, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %14, align 8
  call void @runtime.bounds_check_error(%..string* %14, i32 481, i32 10, i64 2, i64 %119) #3
  %120 = getelementptr i8, i8* %117, i64 2
  %121 = load i8, i8* %120, align 1
  store i8 %121, i8* %13, align 1
  %122 = load i8, i8* %13, align 1
  %123 = icmp ult i8 %122, -128
  %124 = zext i1 %123 to i8
  %125 = trunc i8 %124 to i1
  br i1 %125, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %if.done8
  %126 = load i8, i8* %13, align 1
  %127 = icmp ult i8 -65, %126
  %128 = zext i1 %127 to i8
  %129 = trunc i8 %128 to i1
  br i1 %129, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.or9, %if.done8
  %130 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %131 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 65533, i32* %130, align 4
  store i64 1, i64* %131, align 8
  ret void

if.done11:                                        ; preds = %cmp.or9
  %132 = load i8, i8* %8, align 1
  %133 = icmp eq i8 %132, 3
  %134 = zext i1 %133 to i8
  %135 = trunc i8 %134 to i1
  br i1 %135, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.done11
  %136 = load i8, i8* %2, align 1
  %137 = and i8 %136, 15
  %138 = zext i8 %137 to i32
  %139 = shl i32 %138, 12
  %140 = select i1 true, i32 %139, i32 0
  %141 = load i8, i8* %11, align 1
  %142 = and i8 %141, 63
  %143 = zext i8 %142 to i32
  %144 = shl i32 %143, 6
  %145 = select i1 true, i32 %144, i32 0
  %146 = or i32 %140, %145
  %147 = load i8, i8* %13, align 1
  %148 = and i8 %147, 63
  %149 = zext i8 %148 to i32
  %150 = or i32 %146, %149
  %151 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %152 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 %150, i32* %151, align 4
  store i64 3, i64* %152, align 8
  ret void

if.done13:                                        ; preds = %if.done11
  %153 = load %..string, %..string* %0, align 8
  %154 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %155 = load i8*, i8** %154, align 8
  %156 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %157 = load i64, i64* %156, align 8
  store %..string { i8* getelementptr inbounds ([74 x i8], [74 x i8]* @"csbs$22c", i64 0, i64 0), i64 73 }, %..string* %16, align 8
  call void @runtime.bounds_check_error(%..string* %16, i32 488, i32 10, i64 3, i64 %157) #3
  %158 = getelementptr i8, i8* %155, i64 3
  %159 = load i8, i8* %158, align 1
  store i8 %159, i8* %15, align 1
  %160 = load i8, i8* %15, align 1
  %161 = icmp ult i8 %160, -128
  %162 = zext i1 %161 to i8
  %163 = trunc i8 %162 to i1
  br i1 %163, label %if.then15, label %cmp.or14

cmp.or14:                                         ; preds = %if.done13
  %164 = load i8, i8* %15, align 1
  %165 = icmp ult i8 -65, %164
  %166 = zext i1 %165 to i8
  %167 = trunc i8 %166 to i1
  br i1 %167, label %if.then15, label %if.done16

if.then15:                                        ; preds = %cmp.or14, %if.done13
  %168 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %169 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 65533, i32* %168, align 4
  store i64 1, i64* %169, align 8
  ret void

if.done16:                                        ; preds = %cmp.or14
  %170 = load i8, i8* %2, align 1
  %171 = and i8 %170, 7
  %172 = zext i8 %171 to i32
  %173 = shl i32 %172, 18
  %174 = select i1 true, i32 %173, i32 0
  %175 = load i8, i8* %11, align 1
  %176 = and i8 %175, 63
  %177 = zext i8 %176 to i32
  %178 = shl i32 %177, 12
  %179 = select i1 true, i32 %178, i32 0
  %180 = or i32 %174, %179
  %181 = load i8, i8* %13, align 1
  %182 = and i8 %181, 63
  %183 = zext i8 %182 to i32
  %184 = shl i32 %183, 6
  %185 = select i1 true, i32 %184, i32 0
  %186 = or i32 %180, %185
  %187 = load i8, i8* %15, align 1
  %188 = and i8 %187, 63
  %189 = zext i8 %188 to i32
  %190 = or i32 %186, %189
  %191 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 0
  %192 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %agg.result, i32 0, i32 1
  store i32 %190, i32* %191, align 4
  store i64 4, i64* %192, align 8
  ret void
}

define dso_local i16 @__truncsfhf2(float %0) {
decls:
  %1 = alloca float, align 4
  %2 = alloca { i32 }, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %1, align 4
  %10 = bitcast { i32 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 4, i1 false)
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  %11 = bitcast { i32 }* %2 to float*
  %12 = load float, float* %1, align 4
  store float %12, float* %11, align 4
  %13 = bitcast { i32 }* %2 to i32*
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %3, align 4
  %15 = load i32, i32* %3, align 4
  %16 = ashr i32 %15, 16
  %17 = select i1 true, i32 %16, i32 0
  %18 = and i32 %17, 32768
  store i32 %18, i32* %4, align 4
  %19 = load i32, i32* %3, align 4
  %20 = ashr i32 %19, 23
  %21 = select i1 true, i32 %20, i32 0
  %22 = and i32 %21, 255
  %23 = sub i32 %22, 112
  store i32 %23, i32* %5, align 4
  %24 = load i32, i32* %3, align 4
  %25 = and i32 %24, 8388607
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %5, align 4
  %27 = icmp sle i32 %26, 0
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %30 = load i32, i32* %5, align 4
  %31 = icmp slt i32 %30, -10
  %32 = zext i1 %31 to i8
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  %34 = load i32, i32* %4, align 4
  %35 = trunc i32 %34 to i16
  ret i16 %35

if.done:                                          ; preds = %if.then
  %36 = load i32, i32* %6, align 4
  %37 = or i32 %36, 8388608
  %38 = load i32, i32* %5, align 4
  %39 = sub i32 1, %38
  %40 = icmp ult i32 %39, 32
  %41 = ashr i32 %37, %39
  %42 = select i1 %40, i32 %41, i32 0
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = and i32 %43, 4096
  %45 = icmp ne i32 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.done
  %48 = load i32, i32* %6, align 4
  %49 = add i32 %48, 8192
  store i32 %49, i32* %6, align 4
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %if.done
  %50 = load i32, i32* %4, align 4
  %51 = load i32, i32* %6, align 4
  %52 = ashr i32 %51, 13
  %53 = select i1 true, i32 %52, i32 0
  %54 = or i32 %50, %53
  %55 = trunc i32 %54 to i16
  ret i16 %55

if.else:                                          ; preds = %entry
  %56 = load i32, i32* %5, align 4
  %57 = icmp eq i32 %56, 143
  %58 = zext i1 %57 to i8
  %59 = trunc i8 %58 to i1
  br i1 %59, label %if.then4, label %if.else8

if.then4:                                         ; preds = %if.else
  %60 = load i32, i32* %6, align 4
  %61 = icmp eq i32 %60, 0
  %62 = zext i1 %61 to i8
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.then4
  %64 = load i32, i32* %4, align 4
  %65 = or i32 %64, 31744
  %66 = trunc i32 %65 to i16
  ret i16 %66

if.else6:                                         ; preds = %if.then4
  %67 = load i32, i32* %6, align 4
  %68 = ashr i32 %67, 13
  %69 = select i1 true, i32 %68, i32 0
  store i32 %69, i32* %6, align 4
  %70 = load i32, i32* %4, align 4
  %71 = or i32 %70, 31744
  %72 = load i32, i32* %6, align 4
  %73 = or i32 %71, %72
  %74 = load i32, i32* %6, align 4
  %75 = icmp eq i32 %74, 0
  %76 = icmp ne i1 %75, false
  %77 = zext i1 %76 to i32
  %78 = or i32 %73, %77
  %79 = trunc i32 %78 to i16
  ret i16 %79

if.done7:                                         ; No predecessors!
  br label %if.done15

if.else8:                                         ; preds = %if.else
  %80 = load i32, i32* %6, align 4
  %81 = and i32 %80, 4096
  %82 = icmp ne i32 %81, 0
  %83 = zext i1 %82 to i8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then9, label %if.done12

if.then9:                                         ; preds = %if.else8
  %85 = load i32, i32* %6, align 4
  %86 = add i32 %85, 8192
  store i32 %86, i32* %6, align 4
  %87 = load i32, i32* %6, align 4
  %88 = and i32 %87, 8388608
  %89 = icmp ne i32 %88, 0
  %90 = zext i1 %89 to i8
  %91 = trunc i8 %90 to i1
  br i1 %91, label %if.then10, label %if.done11

if.then10:                                        ; preds = %if.then9
  store i32 0, i32* %6, align 4
  %92 = load i32, i32* %5, align 4
  %93 = add i32 %92, 1
  store i32 %93, i32* %5, align 4
  br label %if.done11

if.done11:                                        ; preds = %if.then10, %if.then9
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %if.else8
  %94 = load i32, i32* %5, align 4
  %95 = icmp sgt i32 %94, 30
  %96 = zext i1 %95 to i8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.done12
  store i64 1000000000000, i64* %7, align 8
  br label %for.init

for.init:                                         ; preds = %if.then13
  store i64 0, i64* %8, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %98 = load i64, i64* %8, align 8
  %99 = icmp slt i64 %98, 10
  %100 = zext i1 %99 to i8
  %101 = trunc i8 %100 to i1
  br i1 %101, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %102 = load volatile i64, i64* %7, align 8
  store i64 %102, i64* %9, align 8
  %103 = load i64, i64* %9, align 8
  %104 = load i64, i64* %9, align 8
  %105 = mul i64 %104, %103
  store i64 %105, i64* %9, align 8
  %106 = load i64, i64* %9, align 8
  store volatile i64 %106, i64* %7, align 8
  br label %for.post

for.post:                                         ; preds = %for.body
  %107 = load i64, i64* %8, align 8
  %108 = add i64 %107, 1
  store i64 %108, i64* %8, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %109 = load i32, i32* %4, align 4
  %110 = or i32 %109, 31744
  %111 = trunc i32 %110 to i16
  ret i16 %111

if.done14:                                        ; preds = %if.done12
  %112 = load i32, i32* %4, align 4
  %113 = load i32, i32* %5, align 4
  %114 = shl i32 %113, 10
  %115 = select i1 true, i32 %114, i32 0
  %116 = or i32 %112, %115
  %117 = load i32, i32* %6, align 4
  %118 = ashr i32 %117, 13
  %119 = select i1 true, i32 %118, i32 0
  %120 = or i32 %116, %119
  %121 = trunc i32 %120 to i16
  ret i16 %121

if.done15:                                        ; preds = %if.done7
  br label %if.done16

if.done16:                                        ; preds = %if.done15
  unreachable
}

define dso_local i16 @__truncdfhf2(double %0) {
decls:
  %1 = alloca double, align 8
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %2 = load double, double* %1, align 8
  %3 = fptrunc double %2 to float
  %4 = call i16 @__truncsfhf2(float %3)
  ret i16 %4
}

define dso_local float @__gnu_h2f_ieee(i16 %0) {
decls:
  %1 = alloca i16, align 2
  %2 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  %3 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  %4 = alloca %__gnu_h2f_ieee.fp32-2, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i16 %0, i16* %1, align 2
  %5 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 4, i1 false)
  %6 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 4, i1 false)
  %7 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 4, i1 false)
  %8 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to i32*
  store i32 2004877312, i32* %8, align 4
  %9 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to i32*
  store i32 1199570944, i32* %9, align 4
  %10 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %11 = load i16, i16* %1, align 2
  %12 = and i16 %11, 32767
  %13 = zext i16 %12 to i32
  %14 = shl i32 %13, 13
  %15 = select i1 true, i32 %14, i32 0
  store i32 %15, i32* %10, align 4
  %16 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %17 = bitcast %__gnu_h2f_ieee.fp32-2* %3 to float*
  %18 = load float, float* %17, align 4
  %19 = load float, float* %16, align 4
  %20 = fmul float %19, %18
  store float %20, float* %16, align 4
  %21 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %22 = load float, float* %21, align 4
  %23 = bitcast %__gnu_h2f_ieee.fp32-2* %4 to float*
  %24 = load float, float* %23, align 4
  %25 = fcmp oge float %22, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %28 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = or i32 %29, 2139095040
  store i32 %30, i32* %28, align 4
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %31 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to i32*
  %32 = load i16, i16* %1, align 2
  %33 = and i16 %32, -32768
  %34 = zext i16 %33 to i32
  %35 = shl i32 %34, 16
  %36 = select i1 true, i32 %35, i32 0
  %37 = load i32, i32* %31, align 4
  %38 = or i32 %37, %36
  store i32 %38, i32* %31, align 4
  %39 = bitcast %__gnu_h2f_ieee.fp32-2* %2 to float*
  %40 = load float, float* %39, align 4
  ret float %40
}

define dso_local i16 @__gnu_f2h_ieee(float %0) {
decls:
  %1 = alloca float, align 4
  br label %entry

entry:                                            ; preds = %decls
  store float %0, float* %1, align 4
  %2 = load float, float* %1, align 4
  %3 = call i16 @__truncsfhf2(float %2)
  ret i16 %3
}

define dso_local float @__extendhfsf2(i16 %0) {
decls:
  %1 = alloca i16, align 2
  br label %entry

entry:                                            ; preds = %decls
  store i16 %0, i16* %1, align 2
  %2 = load i16, i16* %1, align 2
  %3 = call float @__gnu_h2f_ieee(i16 %2)
  ret float %3
}

define dso_local double @__floattidf(i128* %0) {
decls:
  %1 = alloca i128, align 8
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x i32], align 4
  br label %entry

entry:                                            ; preds = %decls
  %6 = load i128, i128* %0, align 8
  %7 = icmp eq i128 %6, 0
  %8 = zext i1 %7 to i8
  %9 = trunc i8 %8 to i1
  br i1 %9, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret double 0.000000e+00

if.done:                                          ; preds = %entry
  %10 = load i128, i128* %0, align 8
  store i128 %10, i128* %1, align 8
  %11 = load i128, i128* %1, align 8
  %12 = ashr i128 %11, 127
  %13 = select i1 true, i128 %12, i128 0
  store i128 %13, i128* %2, align 8
  %14 = load i128, i128* %1, align 8
  %15 = load i128, i128* %2, align 8
  %16 = xor i128 %14, %15
  %17 = load i128, i128* %2, align 8
  %18 = sub i128 %16, %17
  store i128 %18, i128* %1, align 8
  %19 = load i128, i128* %1, align 8
  %20 = call i128 @llvm.ctlz.i128(i128 %19, i1 false)
  %21 = sub i128 128, %20
  store i128 %21, i128* %3, align 8
  %22 = load i128, i128* %3, align 8
  %23 = sub i128 %22, 1
  %24 = trunc i128 %23 to i32
  store i32 %24, i32* %4, align 4
  %25 = load i128, i128* %3, align 8
  %26 = icmp sgt i128 %25, 53
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %29 = load i128, i128* %3, align 8
  switch i128 %29, label %switch.default.body [
    i128 54, label %switch.case.body
    i128 55, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %if.then1
  %30 = load i128, i128* %1, align 8
  %31 = shl i128 %30, 1
  %32 = select i1 true, i128 %31, i128 0
  store i128 %32, i128* %1, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %if.then1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %33 = load i128, i128* %1, align 8
  %34 = load i128, i128* %3, align 8
  %35 = sub i128 %34, 55
  %36 = icmp ult i128 %35, 128
  %37 = lshr i128 %33, %35
  %38 = select i1 %36, i128 %37, i128 0
  %39 = load i128, i128* %1, align 8
  %40 = load i128, i128* %3, align 8
  %41 = sub i128 183, %40
  %42 = icmp ult i128 %41, 128
  %43 = lshr i128 -1, %41
  %44 = select i1 %42, i128 %43, i128 0
  %45 = and i128 %39, %44
  %46 = icmp ne i128 %45, 0
  %47 = icmp ne i1 %46, false
  %48 = zext i1 %47 to i128
  %49 = or i128 %38, %48
  store i128 %49, i128* %1, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body2, %switch.case.body
  %50 = load i128, i128* %1, align 8
  %51 = and i128 %50, 4
  %52 = icmp ne i128 %51, 0
  %53 = icmp ne i1 %52, false
  %54 = zext i1 %53 to i128
  %55 = load i128, i128* %1, align 8
  %56 = or i128 %55, %54
  store i128 %56, i128* %1, align 8
  %57 = load i128, i128* %1, align 8
  %58 = add i128 %57, 1
  store i128 %58, i128* %1, align 8
  %59 = load i128, i128* %1, align 8
  %60 = ashr i128 %59, 2
  %61 = select i1 true, i128 %60, i128 0
  store i128 %61, i128* %1, align 8
  %62 = load i128, i128* %1, align 8
  %63 = and i128 %62, 9007199254740992
  %64 = icmp ne i128 %63, 0
  %65 = zext i1 %64 to i8
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then3, label %if.done4

if.then3:                                         ; preds = %switch.done
  %67 = load i128, i128* %1, align 8
  %68 = ashr i128 %67, 1
  %69 = select i1 true, i128 %68, i128 0
  store i128 %69, i128* %1, align 8
  %70 = load i32, i32* %4, align 4
  %71 = add i32 %70, 1
  store i32 %71, i32* %4, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %switch.done
  br label %if.done5

if.else:                                          ; preds = %if.done
  %72 = load i128, i128* %3, align 8
  %73 = sub i128 53, %72
  %74 = and i128 %73, 127
  %75 = load i128, i128* %1, align 8
  %76 = icmp ult i128 %74, 128
  %77 = shl i128 %75, %74
  %78 = select i1 %76, i128 %77, i128 0
  store i128 %78, i128* %1, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.done4
  %79 = bitcast [2 x i32]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 8, i1 false)
  %80 = getelementptr [2 x i32], [2 x i32]* %5, i64 0, i64 1
  %81 = load i128, i128* %2, align 8
  %82 = trunc i128 %81 to i32
  %83 = and i32 %82, -2147483648
  %84 = load i32, i32* %4, align 4
  %85 = add i32 %84, 1023
  %86 = shl i32 %85, 20
  %87 = select i1 true, i32 %86, i32 0
  %88 = or i32 %83, %87
  %89 = load i128, i128* %1, align 8
  %90 = trunc i128 %89 to i64
  %91 = lshr i64 %90, 32
  %92 = select i1 true, i64 %91, i64 0
  %93 = and i64 %92, 1048575
  %94 = trunc i64 %93 to i32
  %95 = or i32 %88, %94
  store i32 %95, i32* %80, align 4
  %96 = getelementptr [2 x i32], [2 x i32]* %5, i64 0, i64 0
  %97 = load i128, i128* %1, align 8
  %98 = trunc i128 %97 to i32
  store i32 %98, i32* %96, align 4
  %99 = load [2 x i32], [2 x i32]* %5, align 4
  %100 = bitcast [2 x i32]* %5 to double*
  %101 = load double, double* %100, align 8
  ret double %101
}

define dso_local double @__floattidf_unsigned(i128* %0) {
decls:
  %1 = alloca i128, align 8
  %2 = alloca i128, align 8
  %3 = alloca i32, align 4
  %4 = alloca [2 x i32], align 4
  br label %entry

entry:                                            ; preds = %decls
  %5 = load i128, i128* %0, align 8
  %6 = icmp eq i128 %5, 0
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret double 0.000000e+00

if.done:                                          ; preds = %entry
  %9 = load i128, i128* %0, align 8
  store i128 %9, i128* %1, align 8
  %10 = load i128, i128* %1, align 8
  %11 = call i128 @llvm.ctlz.i128(i128 %10, i1 false)
  %12 = sub i128 128, %11
  store i128 %12, i128* %2, align 8
  %13 = load i128, i128* %2, align 8
  %14 = sub i128 %13, 1
  %15 = trunc i128 %14 to i32
  store i32 %15, i32* %3, align 4
  %16 = load i128, i128* %2, align 8
  %17 = icmp ugt i128 %16, 53
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %20 = load i128, i128* %2, align 8
  switch i128 %20, label %switch.default.body [
    i128 54, label %switch.case.body
    i128 55, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %if.then1
  %21 = load i128, i128* %1, align 8
  %22 = shl i128 %21, 1
  %23 = select i1 true, i128 %22, i128 0
  store i128 %23, i128* %1, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %if.then1
  br label %switch.done

switch.default.body:                              ; preds = %if.then1
  %24 = load i128, i128* %1, align 8
  %25 = load i128, i128* %2, align 8
  %26 = sub i128 %25, 55
  %27 = icmp ult i128 %26, 128
  %28 = lshr i128 %24, %26
  %29 = select i1 %27, i128 %28, i128 0
  %30 = load i128, i128* %1, align 8
  %31 = load i128, i128* %2, align 8
  %32 = sub i128 183, %31
  %33 = icmp ult i128 %32, 128
  %34 = lshr i128 -1, %32
  %35 = select i1 %33, i128 %34, i128 0
  %36 = and i128 %30, %35
  %37 = icmp ne i128 %36, 0
  %38 = icmp ne i1 %37, false
  %39 = zext i1 %38 to i128
  %40 = or i128 %29, %39
  store i128 %40, i128* %1, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body2, %switch.case.body
  %41 = load i128, i128* %1, align 8
  %42 = and i128 %41, 4
  %43 = icmp ne i128 %42, 0
  %44 = icmp ne i1 %43, false
  %45 = zext i1 %44 to i128
  %46 = load i128, i128* %1, align 8
  %47 = or i128 %46, %45
  store i128 %47, i128* %1, align 8
  %48 = load i128, i128* %1, align 8
  %49 = add i128 %48, 1
  store i128 %49, i128* %1, align 8
  %50 = load i128, i128* %1, align 8
  %51 = lshr i128 %50, 2
  %52 = select i1 true, i128 %51, i128 0
  store i128 %52, i128* %1, align 8
  %53 = load i128, i128* %1, align 8
  %54 = and i128 %53, 9007199254740992
  %55 = icmp ne i128 %54, 0
  %56 = zext i1 %55 to i8
  %57 = trunc i8 %56 to i1
  br i1 %57, label %if.then3, label %if.done4

if.then3:                                         ; preds = %switch.done
  %58 = load i128, i128* %1, align 8
  %59 = lshr i128 %58, 1
  %60 = select i1 true, i128 %59, i128 0
  store i128 %60, i128* %1, align 8
  %61 = load i32, i32* %3, align 4
  %62 = add i32 %61, 1
  store i32 %62, i32* %3, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %switch.done
  br label %if.done5

if.else:                                          ; preds = %if.done
  %63 = load i128, i128* %2, align 8
  %64 = sub i128 53, %63
  %65 = load i128, i128* %1, align 8
  %66 = icmp ult i128 %64, 128
  %67 = shl i128 %65, %64
  %68 = select i1 %66, i128 %67, i128 0
  store i128 %68, i128* %1, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.done4
  %69 = bitcast [2 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %69, i8 0, i64 8, i1 false)
  %70 = getelementptr [2 x i32], [2 x i32]* %4, i64 0, i64 1
  %71 = load i32, i32* %3, align 4
  %72 = add i32 %71, 1023
  %73 = shl i32 %72, 20
  %74 = select i1 true, i32 %73, i32 0
  %75 = or i32 0, %74
  %76 = load i128, i128* %1, align 8
  %77 = trunc i128 %76 to i64
  %78 = lshr i64 %77, 32
  %79 = select i1 true, i64 %78, i64 0
  %80 = and i64 %79, 1048575
  %81 = trunc i64 %80 to i32
  %82 = or i32 %75, %81
  store i32 %82, i32* %70, align 4
  %83 = getelementptr [2 x i32], [2 x i32]* %4, i64 0, i64 0
  %84 = load i128, i128* %1, align 8
  %85 = trunc i128 %84 to i32
  store i32 %85, i32* %83, align 4
  %86 = load [2 x i32], [2 x i32]* %4, align 4
  %87 = bitcast [2 x i32]* %4 to double*
  %88 = load double, double* %87, align 8
  ret double %88
}

; Function Attrs: noinline
define dso_local <2 x i64> @__fixunsdfti(double %0) #4 {
decls:
  %1 = alloca double, align 8
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %4 = load double, double* %1, align 8
  %5 = fptoui double %4 to i64
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = zext i64 %6 to i128
  %8 = bitcast <2 x i64>* %3 to i128*
  store i128 %7, i128* %8, align 8
  %9 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %9
}

; Function Attrs: noinline
define dso_local <2 x i64> @__fixunsdfdi(double %0) #4 {
decls:
  %1 = alloca double, align 8
  %2 = alloca i64, align 8
  %3 = alloca <2 x i64>, align 16
  br label %entry

entry:                                            ; preds = %decls
  store double %0, double* %1, align 8
  %4 = load double, double* %1, align 8
  %5 = fptosi double %4 to i64
  store i64 %5, i64* %2, align 8
  %6 = load i64, i64* %2, align 8
  %7 = sext i64 %6 to i128
  %8 = bitcast <2 x i64>* %3 to i128*
  store i128 %7, i128* %8, align 8
  %9 = load <2 x i64>, <2 x i64>* %3, align 16
  ret <2 x i64> %9
}

define dso_local <2 x i64> @__umodti3(i128* %0, i128* %1) {
decls:
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  store i128 undef, i128* %2, align 8
  %6 = load i128, i128* %0, align 8
  %7 = load i128, i128* %1, align 8
  store i128 %6, i128* %3, align 8
  store i128 %7, i128* %4, align 8
  %8 = call <2 x i64> @runtime.udivmod128(i128* %3, i128* %4, i128* %2)
  %9 = bitcast i128* %5 to <2 x i64>*
  store <2 x i64> %8, <2 x i64>* %9, align 16
  %10 = load i128, i128* %5, align 8
  %11 = load i128, i128* %2, align 8
  %12 = bitcast i128* %2 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %13
}

define dso_local <2 x i64> @__udivmodti4(i128* %0, i128* %1, i128* %2) {
decls:
  %3 = alloca i128*, align 8
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  store i128* %2, i128** %3, align 8
  %7 = load i128, i128* %0, align 8
  %8 = load i128, i128* %1, align 8
  %9 = load i128*, i128** %3, align 8
  store i128 %7, i128* %4, align 8
  store i128 %8, i128* %5, align 8
  %10 = call <2 x i64> @runtime.udivmod128(i128* %4, i128* %5, i128* %9)
  %11 = bitcast i128* %6 to <2 x i64>*
  store <2 x i64> %10, <2 x i64>* %11, align 16
  %12 = load i128, i128* %6, align 8
  %13 = bitcast i128* %6 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %14
}

define dso_local <2 x i64> @__udivti3(i128* %0, i128* %1) {
decls:
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  %5 = load i128, i128* %0, align 8
  %6 = load i128, i128* %1, align 8
  store i128 %5, i128* %2, align 8
  store i128 %6, i128* %3, align 8
  %7 = call <2 x i64> @__udivmodti4(i128* %2, i128* %3, i128* null)
  %8 = bitcast i128* %4 to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %8, align 16
  %9 = load i128, i128* %4, align 8
  %10 = bitcast i128* %4 to <2 x i64>*
  %11 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %11
}

define dso_local <2 x i64> @__modti3(i128* %0, i128* %1) {
decls:
  %2 = alloca i128, align 8
  %3 = alloca i128, align 8
  %4 = alloca i128, align 8
  %5 = alloca i128, align 8
  %6 = alloca i128, align 8
  %7 = alloca i128, align 16
  %8 = alloca i128, align 16
  %9 = alloca i128, align 16
  %10 = alloca <2 x i64>, align 16
  br label %entry

entry:                                            ; preds = %decls
  %11 = load i128, i128* %0, align 8
  %12 = ashr i128 %11, 127
  %13 = select i1 true, i128 %12, i128 0
  store i128 %13, i128* %2, align 8
  %14 = load i128, i128* %1, align 8
  %15 = ashr i128 %14, 127
  %16 = select i1 true, i128 %15, i128 0
  store i128 %16, i128* %3, align 8
  %17 = load i128, i128* %0, align 8
  %18 = load i128, i128* %2, align 8
  %19 = xor i128 %17, %18
  %20 = load i128, i128* %2, align 8
  %21 = sub i128 %19, %20
  store i128 %21, i128* %4, align 8
  %22 = load i128, i128* %1, align 8
  %23 = load i128, i128* %3, align 8
  %24 = xor i128 %22, %23
  %25 = load i128, i128* %3, align 8
  %26 = sub i128 %24, %25
  store i128 %26, i128* %5, align 8
  store i128 undef, i128* %6, align 8
  %27 = load i128, i128* %4, align 8
  %28 = load i128, i128* %5, align 8
  store i128 %27, i128* %7, align 8
  store i128 %28, i128* %8, align 8
  %29 = call <2 x i64> @runtime.udivmod128(i128* %7, i128* %8, i128* %6)
  %30 = bitcast i128* %9 to <2 x i64>*
  store <2 x i64> %29, <2 x i64>* %30, align 16
  %31 = load i128, i128* %9, align 8
  %32 = load i128, i128* %6, align 8
  %33 = load i128, i128* %2, align 8
  %34 = xor i128 %32, %33
  %35 = load i128, i128* %2, align 8
  %36 = sub i128 %34, %35
  %37 = bitcast <2 x i64>* %10 to i128*
  store i128 %36, i128* %37, align 8
  %38 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %38
}

define dso_local <2 x i64> @__divmodti4(i128* %0, i128* %1, i128* %2) {
decls:
  %3 = alloca i128*, align 8
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  %6 = alloca i128, align 16
  %7 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  store i128* %2, i128** %3, align 8
  %8 = load i128, i128* %0, align 8
  %9 = load i128, i128* %1, align 8
  %10 = load i128*, i128** %3, align 8
  store i128 %8, i128* %5, align 8
  store i128 %9, i128* %6, align 8
  %11 = call <2 x i64> @runtime.udivmod128(i128* %5, i128* %6, i128* %10)
  %12 = bitcast i128* %7 to <2 x i64>*
  store <2 x i64> %11, <2 x i64>* %12, align 16
  %13 = load i128, i128* %7, align 8
  store i128 %13, i128* %4, align 8
  %14 = load i128, i128* %4, align 8
  %15 = bitcast i128* %4 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 16
  ret <2 x i64> %16
}

define dso_local <2 x i64> @__divti3(i128* %0, i128* %1) {
decls:
  %2 = alloca i128, align 16
  %3 = alloca i128, align 16
  %4 = alloca i128, align 16
  %5 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  %6 = load i128, i128* %0, align 8
  %7 = load i128, i128* %1, align 8
  store i128 %6, i128* %3, align 8
  store i128 %7, i128* %4, align 8
  %8 = call <2 x i64> @__udivmodti4(i128* %3, i128* %4, i128* null)
  %9 = bitcast i128* %5 to <2 x i64>*
  store <2 x i64> %8, <2 x i64>* %9, align 16
  %10 = load i128, i128* %5, align 8
  store i128 %10, i128* %2, align 8
  %11 = load i128, i128* %2, align 8
  %12 = bitcast i128* %2 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %13
}

define dso_local <2 x i64> @__fixdfti(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i128, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca <2 x i64>, align 16
  %8 = alloca <2 x i64>, align 16
  %9 = alloca <2 x i64>, align 16
  %10 = alloca <2 x i64>, align 16
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load i64, i64* %1, align 8
  store i64 %12, i64* %2, align 8
  %13 = load i64, i64* %2, align 8
  %14 = and i64 %13, 9223372036854775807
  store i64 %14, i64* %3, align 8
  %15 = load i64, i64* %2, align 8
  %16 = and i64 %15, -9223372036854775808
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %if.done

if.else:                                          ; preds = %entry
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %20 = phi i128 [ -1, %if.then ], [ 1, %if.else ]
  store i128 %20, i128* %4, align 8
  %21 = load i64, i64* %3, align 8
  %22 = lshr i64 %21, 52
  %23 = select i1 true, i64 %22, i64 0
  %24 = sub i64 %23, 1023
  store i64 %24, i64* %5, align 8
  %25 = load i64, i64* %3, align 8
  %26 = and i64 %25, 4503599627370495
  %27 = or i64 %26, 4503599627370496
  store i64 %27, i64* %6, align 8
  %28 = load i64, i64* %5, align 8
  %29 = icmp ult i64 %28, 0
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %32 = bitcast <2 x i64>* %7 to i128*
  store i128 0, i128* %32, align 8
  %33 = load <2 x i64>, <2 x i64>* %7, align 16
  ret <2 x i64> %33

if.done2:                                         ; preds = %if.done
  %34 = load i64, i64* %5, align 8
  %35 = icmp uge i64 %34, 128
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done7

if.then3:                                         ; preds = %if.done2
  %38 = load i128, i128* %4, align 8
  %39 = icmp eq i128 %38, 1
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then4, label %if.else5

if.then4:                                         ; preds = %if.then3
  br label %if.done6

if.else5:                                         ; preds = %if.then3
  br label %if.done6

if.done6:                                         ; preds = %if.else5, %if.then4
  %42 = phi i128 [ 170141183460469231731687303715884105727, %if.then4 ], [ -170141183460469231731687303715884105728, %if.else5 ]
  %43 = bitcast <2 x i64>* %8 to i128*
  store i128 %42, i128* %43, align 8
  %44 = load <2 x i64>, <2 x i64>* %8, align 16
  ret <2 x i64> %44

if.done7:                                         ; preds = %if.done2
  %45 = load i64, i64* %5, align 8
  %46 = icmp ult i64 %45, 52
  %47 = zext i1 %46 to i8
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.done7
  %49 = load i128, i128* %4, align 8
  %50 = load i64, i64* %6, align 8
  %51 = load i64, i64* %5, align 8
  %52 = sub i64 52, %51
  %53 = icmp ult i64 %52, 64
  %54 = lshr i64 %50, %52
  %55 = select i1 %53, i64 %54, i64 0
  %56 = zext i64 %55 to i128
  %57 = mul i128 %49, %56
  %58 = bitcast <2 x i64>* %9 to i128*
  store i128 %57, i128* %58, align 8
  %59 = load <2 x i64>, <2 x i64>* %9, align 16
  ret <2 x i64> %59

if.else9:                                         ; preds = %if.done7
  %60 = load i128, i128* %4, align 8
  %61 = load i64, i64* %6, align 8
  %62 = zext i64 %61 to i128
  %63 = load i64, i64* %5, align 8
  %64 = sub i64 %63, 52
  %65 = zext i64 %64 to i128
  %66 = icmp ult i128 %65, 128
  %67 = shl i128 %62, %65
  %68 = select i1 %66, i128 %67, i128 0
  %69 = mul i128 %60, %68
  %70 = bitcast <2 x i64>* %10 to i128*
  store i128 %69, i128* %70, align 8
  %71 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %71

if.done10:                                        ; No predecessors!
  unreachable
}

define internal void @runtime.os_write({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, { i8*, i64 }* %0) {
decls:
  %1 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = load { i8*, i64 }, { i8*, i64 }* %0, align 8
  %3 = bitcast { i64, i64 }* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %3, i8 0, i64 16, i1 false)
  call void @runtime._os_write-738({ i64, i64 }* sret({ i64, i64 }*) %1, { i8*, i64 }* %0)
  %4 = load { i64, i64 }, { i64, i64 }* %1, align 8
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %6, i64* %9, align 8
  store i64 %8, i64* %10, align 8
  ret void
}

declare x86_stdcallcc i8* @GetStdHandle(i32)

declare x86_stdcallcc i32 @SetHandleInformation(i8*, i32, i32)

declare x86_stdcallcc i32 @WriteFile(i8*, i8*, i32, i32*, i8*)

declare x86_stdcallcc i32 @GetLastError()

declare x86_stdcallcc i8* @GetProcessHeap()

declare x86_stdcallcc i8* @HeapAlloc(i8*, i32, i64)

declare x86_stdcallcc i8* @HeapReAlloc(i8*, i32, i8*, i64)

declare x86_stdcallcc i32 @HeapFree(i8*, i32, i8*)

define internal void @runtime._os_write-738({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, { i8*, i64 }* %0) {
decls:
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %10 = load { i8*, i64 }, { i8*, i64 }* %0, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = icmp eq i64 %12, 0
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %16, align 8
  store i64 0, i64* %17, align 8
  ret void

if.done:                                          ; preds = %entry
  %18 = call i8* @GetStdHandle(i32 -12)
  store i8* %18, i8** %1, align 8
  %19 = load i8*, i8** %1, align 8
  %20 = call i32 @SetHandleInformation(i8* %19, i32 1, i32 0)
  store i32 0, i32* %2, align 4
  store i64 0, i64* %3, align 8
  %21 = load { i8*, i64 }, { i8*, i64 }* %0, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %4, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %24 = load i64, i64* %3, align 8
  %25 = load i64, i64* %4, align 8
  %26 = icmp slt i64 %24, %25
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %29 = load i64, i64* %4, align 8
  %30 = load i64, i64* %3, align 8
  %31 = sub i64 %29, %30
  store i64 %31, i64* %5, align 8
  %32 = load i64, i64* %5, align 8
  %33 = trunc i64 %32 to i32
  %34 = icmp slt i32 %33, 1073741824
  %35 = select i1 %34, i32 %33, i32 1073741824
  store i32 %35, i32* %6, align 4
  %36 = load i8*, i8** %1, align 8
  %37 = load { i8*, i64 }, { i8*, i64 }* %0, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load i64, i64* %3, align 8
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr i8, i8* %39, i64 %40
  %44 = load i32, i32* %6, align 4
  %45 = call i32 @WriteFile(i8* %36, i8* %43, i32 %44, i32* %2, i8* null)
  store i32 %45, i32* %7, align 4
  %46 = load i32, i32* %2, align 4
  %47 = icmp ule i32 %46, 0
  %48 = zext i1 %47 to i32
  %49 = trunc i32 %48 to i1
  br i1 %49, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.body
  %50 = load i32, i32* %7, align 4
  %51 = trunc i32 %50 to i1
  br i1 %51, label %if.done2, label %if.then1

if.then1:                                         ; preds = %cmp.or, %for.body
  %52 = call i32 @GetLastError()
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %9, align 8
  %54 = load i64, i64* %3, align 8
  store i64 %54, i64* %8, align 8
  %55 = load i64, i64* %8, align 8
  %56 = load i64, i64* %9, align 8
  store i64 %55, i64* %8, align 8
  store i64 %56, i64* %9, align 8
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %58 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %55, i64* %57, align 8
  store i64 %56, i64* %58, align 8
  ret void

if.done2:                                         ; preds = %cmp.or
  %59 = load i32, i32* %2, align 4
  %60 = zext i32 %59 to i64
  %61 = load i64, i64* %3, align 8
  %62 = add i64 %61, %60
  store i64 %62, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %63 = load i64, i64* %3, align 8
  store i64 %63, i64* %8, align 8
  %64 = load i64, i64* %8, align 8
  %65 = load i64, i64* %9, align 8
  store i64 %64, i64* %8, align 8
  store i64 %65, i64* %9, align 8
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %67 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %64, i64* %66, align 8
  store i64 %65, i64* %67, align 8
  ret void
}

define internal i8* @runtime.heap_alloc-739(i64 %0) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = call i8* @GetProcessHeap()
  %3 = load i64, i64* %1, align 8
  %4 = call i8* @HeapAlloc(i8* %2, i32 8, i64 %3)
  ret i8* %4
}

define internal i8* @runtime.heap_resize-740(i8* %0, i64 %1) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  store i64 %1, i64* %3, align 8
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  %6 = zext i1 %5 to i8
  %7 = trunc i8 %6 to i1
  br i1 %7, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %8 = load i8*, i8** %2, align 8
  call void @runtime.heap_free-741(i8* %8)
  ret i8* null

if.done:                                          ; preds = %entry
  %9 = load i8*, i8** %2, align 8
  %10 = icmp eq i8* %9, null
  %11 = zext i1 %10 to i8
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %13 = load i64, i64* %3, align 8
  %14 = call i8* @runtime.heap_alloc-739(i64 %13)
  ret i8* %14

if.done2:                                         ; preds = %if.done
  %15 = call i8* @GetProcessHeap()
  %16 = load i8*, i8** %2, align 8
  %17 = load i64, i64* %3, align 8
  %18 = call i8* @HeapReAlloc(i8* %15, i32 8, i8* %16, i64 %17)
  ret i8* %18
}

define internal void @runtime.heap_free-741(i8* %0) {
decls:
  %1 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %2 = load i8*, i8** %1, align 8
  %3 = icmp eq i8* %2, null
  %4 = zext i1 %3 to i8
  %5 = trunc i8 %4 to i1
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  %6 = call i8* @GetProcessHeap()
  %7 = load i8*, i8** %1, align 8
  %8 = call i32 @HeapFree(i8* %6, i32 0, i8* %7)
  ret void
}

define internal void @runtime._windows_default_alloc_or_resize-742({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i64 %0, i64 %1, i8* %2) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  store i8* %2, i8** %5, align 8
  %15 = load i64, i64* %3, align 8
  %16 = icmp eq i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %19 = load i8*, i8** %5, align 8
  call void @runtime._windows_default_free-744(i8* %19)
  %20 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %21 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %20, align 8
  store i8 0, i8* %21, align 1
  ret void

if.done:                                          ; preds = %entry
  %22 = load i64, i64* %4, align 8
  %23 = icmp sgt i64 %22, 8
  %24 = select i1 %23, i64 %22, i64 8
  store i64 %24, i64* %6, align 8
  %25 = load i64, i64* %3, align 8
  %26 = load i64, i64* %6, align 8
  %27 = add i64 %25, %26
  %28 = sub i64 %27, 1
  store i64 %28, i64* %7, align 8
  store i8* null, i8** %8, align 8
  %29 = load i8*, i8** %5, align 8
  %30 = icmp ne i8* %29, null
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %33 = load i8*, i8** %5, align 8
  %34 = bitcast i8* %33 to i8**
  %35 = getelementptr i8*, i8** %34, i64 -1
  %36 = load i8*, i8** %35, align 8
  store i8* %36, i8** %9, align 8
  %37 = load i8*, i8** %9, align 8
  %38 = load i64, i64* %7, align 8
  %39 = add i64 %38, 8
  %40 = call i8* @runtime.heap_resize-740(i8* %37, i64 %39)
  store i8* %40, i8** %8, align 8
  br label %if.done2

if.else:                                          ; preds = %if.done
  %41 = load i64, i64* %7, align 8
  %42 = add i64 %41, 8
  %43 = call i8* @runtime.heap_alloc-739(i64 %42)
  store i8* %43, i8** %8, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  %44 = load i8*, i8** %8, align 8
  %45 = getelementptr i8, i8* %44, i64 8
  store i8* %45, i8** %10, align 8
  %46 = load i8*, i8** %10, align 8
  %47 = ptrtoint i8* %46 to i64
  store i64 %47, i64* %11, align 8
  %48 = load i64, i64* %11, align 8
  %49 = sub i64 %48, 1
  %50 = load i64, i64* %6, align 8
  %51 = add i64 %49, %50
  %52 = load i64, i64* %6, align 8
  %53 = sub i64 0, %52
  %54 = and i64 %51, %53
  store i64 %54, i64* %12, align 8
  %55 = load i64, i64* %12, align 8
  %56 = load i64, i64* %11, align 8
  %57 = sub i64 %55, %56
  store i64 %57, i64* %13, align 8
  %58 = load i64, i64* %3, align 8
  %59 = load i64, i64* %13, align 8
  %60 = add i64 %58, %59
  %61 = load i64, i64* %7, align 8
  %62 = icmp sgt i64 %60, %61
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  %65 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %66 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %65, align 8
  store i8 1, i8* %66, align 1
  ret void

if.done4:                                         ; preds = %if.done2
  %67 = load i64, i64* %12, align 8
  %68 = inttoptr i64 %67 to i8*
  store i8* %68, i8** %10, align 8
  %69 = load i8*, i8** %10, align 8
  %70 = bitcast i8* %69 to i8**
  %71 = getelementptr i8*, i8** %70, i64 -1
  %72 = load i8*, i8** %8, align 8
  store i8* %72, i8** %71, align 8
  %73 = load i8*, i8** %10, align 8
  %74 = load i64, i64* %3, align 8
  %75 = bitcast { i8*, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %75, i8 0, i64 16, i1 false)
  call void @runtime.byte_slice-639({ i8*, i64 }* sret({ i8*, i64 }*) %14, i8* %73, i64 %74)
  %76 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %77 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %78 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %76, { i8*, i64 }* %77, align 8
  store i8 0, i8* %78, align 1
  ret void
}

define internal void @runtime._windows_default_alloc-743({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i64 %0, i64 %1) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  store i64 %1, i64* %3, align 8
  %5 = load i64, i64* %2, align 8
  %6 = load i64, i64* %3, align 8
  %7 = bitcast { { i8*, i64 }, i8 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 24, i1 false)
  call void @runtime._windows_default_alloc_or_resize-742({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %4, i64 %5, i64 %6, i8* null)
  %8 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %4, align 8
  %9 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %4, i32 0, i32 0
  %10 = load { i8*, i64 }, { i8*, i64 }* %9, align 8
  %11 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %4, i32 0, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %14 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %10, { i8*, i64 }* %13, align 8
  store i8 %12, i8* %14, align 1
  ret void
}

define internal void @runtime._windows_default_free-744(i8* %0) {
decls:
  %1 = alloca i8*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %1, align 8
  %2 = load i8*, i8** %1, align 8
  %3 = icmp ne i8* %2, null
  %4 = zext i1 %3 to i8
  %5 = trunc i8 %4 to i1
  br i1 %5, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %6 = load i8*, i8** %1, align 8
  %7 = bitcast i8* %6 to i8**
  %8 = getelementptr i8*, i8** %7, i64 -1
  %9 = load i8*, i8** %8, align 8
  call void @runtime.heap_free-741(i8* %9)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  ret void
}

define internal void @runtime._windows_default_resize-745({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i8* %0, i64 %1, i64 %2, i64 %3) {
decls:
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  store i64 %3, i64* %7, align 8
  %9 = load i64, i64* %6, align 8
  %10 = load i64, i64* %7, align 8
  %11 = load i8*, i8** %4, align 8
  %12 = bitcast { { i8*, i64 }, i8 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 24, i1 false)
  call void @runtime._windows_default_alloc_or_resize-742({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %8, i64 %9, i64 %10, i8* %11)
  %13 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, align 8
  %14 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, i32 0, i32 0
  %15 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %16 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, i32 0, i32 1
  %17 = load i8, i8* %16, align 1
  %18 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %19 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %15, { i8*, i64 }* %18, align 8
  store i8 %17, i8* %19, align 1
  ret void
}

define internal void @runtime.encode_rune({ [4 x i8], i64 }* noalias sret({ [4 x i8], i64 }) %agg.result, i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca [4 x i8], align 1
  %4 = alloca i32, align 4
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %5 = load i32, i32* %1, align 4
  store i32 %5, i32* %2, align 4
  %6 = bitcast [4 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 4, i1 false)
  %7 = load i32, i32* %2, align 4
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp ule i32 %8, 127
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %12 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %13 = load i32, i32* %2, align 4
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %12, align 1
  %15 = load [4 x i8], [4 x i8]* %3, align 1
  %16 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 0
  %17 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 1
  store [4 x i8] %15, [4 x i8]* %16, align 1
  store i64 1, i64* %17, align 8
  ret void

if.done:                                          ; preds = %entry
  %18 = load i32, i32* %4, align 4
  %19 = icmp ule i32 %18, 2047
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %22 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %23 = load i32, i32* %2, align 4
  %24 = ashr i32 %23, 6
  %25 = select i1 true, i32 %24, i32 0
  %26 = trunc i32 %25 to i8
  %27 = or i8 -64, %26
  store i8 %27, i8* %22, align 1
  %28 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %29 = load i32, i32* %2, align 4
  %30 = trunc i32 %29 to i8
  %31 = and i8 %30, 63
  %32 = or i8 -128, %31
  store i8 %32, i8* %28, align 1
  %33 = load [4 x i8], [4 x i8]* %3, align 1
  %34 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 0
  %35 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 1
  store [4 x i8] %33, [4 x i8]* %34, align 1
  store i64 2, i64* %35, align 8
  ret void

if.done2:                                         ; preds = %if.done
  %36 = load i32, i32* %4, align 4
  %37 = icmp ugt i32 %36, 1114111
  %38 = zext i1 %37 to i8
  %39 = trunc i8 %38 to i1
  br i1 %39, label %if.then3, label %cmp.or

cmp.or:                                           ; preds = %if.done2
  %40 = load i32, i32* %4, align 4
  %41 = icmp ule i32 55296, %40
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %cmp.and, label %if.done4

cmp.and:                                          ; preds = %cmp.or
  %44 = load i32, i32* %4, align 4
  %45 = icmp ule i32 %44, 57343
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then3, label %if.done4

if.then3:                                         ; preds = %cmp.and, %if.done2
  store i32 65533, i32* %2, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %cmp.and, %cmp.or
  %48 = load i32, i32* %4, align 4
  %49 = icmp ule i32 %48, 65535
  %50 = zext i1 %49 to i8
  %51 = trunc i8 %50 to i1
  br i1 %51, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %52 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %53 = load i32, i32* %2, align 4
  %54 = ashr i32 %53, 12
  %55 = select i1 true, i32 %54, i32 0
  %56 = trunc i32 %55 to i8
  %57 = or i8 -32, %56
  store i8 %57, i8* %52, align 1
  %58 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %59 = load i32, i32* %2, align 4
  %60 = ashr i32 %59, 6
  %61 = select i1 true, i32 %60, i32 0
  %62 = trunc i32 %61 to i8
  %63 = and i8 %62, 63
  %64 = or i8 -128, %63
  store i8 %64, i8* %58, align 1
  %65 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %66 = load i32, i32* %2, align 4
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 63
  %69 = or i8 -128, %68
  store i8 %69, i8* %65, align 1
  %70 = load [4 x i8], [4 x i8]* %3, align 1
  %71 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 0
  %72 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 1
  store [4 x i8] %70, [4 x i8]* %71, align 1
  store i64 3, i64* %72, align 8
  ret void

if.done6:                                         ; preds = %if.done4
  %73 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %74 = load i32, i32* %2, align 4
  %75 = ashr i32 %74, 18
  %76 = select i1 true, i32 %75, i32 0
  %77 = trunc i32 %76 to i8
  %78 = or i8 -16, %77
  store i8 %78, i8* %73, align 1
  %79 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %80 = load i32, i32* %2, align 4
  %81 = ashr i32 %80, 12
  %82 = select i1 true, i32 %81, i32 0
  %83 = trunc i32 %82 to i8
  %84 = and i8 %83, 63
  %85 = or i8 -128, %84
  store i8 %85, i8* %79, align 1
  %86 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %87 = load i32, i32* %2, align 4
  %88 = ashr i32 %87, 6
  %89 = select i1 true, i32 %88, i32 0
  %90 = trunc i32 %89 to i8
  %91 = and i8 %90, 63
  %92 = or i8 -128, %91
  store i8 %92, i8* %86, align 1
  %93 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %94 = load i32, i32* %2, align 4
  %95 = trunc i32 %94 to i8
  %96 = and i8 %95, 63
  %97 = or i8 -128, %96
  store i8 %97, i8* %93, align 1
  %98 = load [4 x i8], [4 x i8]* %3, align 1
  %99 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 0
  %100 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %agg.result, i32 0, i32 1
  store [4 x i8] %98, [4 x i8]* %99, align 1
  store i64 4, i64* %100, align 8
  ret void
}

define internal void @runtime.print_string({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, %..string* %0) {
decls:
  %1 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %2 = load %..string, %..string* %0, align 8
  %3 = bitcast %..string* %0 to { i8*, i64 }*
  %4 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %5 = bitcast { i64, i64 }* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 16, i1 false)
  call void @runtime.os_write({ i64, i64 }* sret({ i64, i64 }*) %1, { i8*, i64 }* %3)
  %6 = load { i64, i64 }, { i64, i64 }* %1, align 8
  %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 0
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %8, i64* %11, align 8
  store i64 %10, i64* %12, align 8
  ret void
}

define internal void @runtime.print_byte({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i8 %0) {
decls:
  %1 = alloca i8, align 1
  %2 = alloca { i8*, i64 }, align 8
  %3 = alloca [1 x i8], align 16
  %4 = alloca { i8*, i64 }, align 8
  %5 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8 %0, i8* %1, align 1
  %6 = bitcast { i8*, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 16, i1 false)
  store [1 x i8] zeroinitializer, [1 x i8]* %3, align 1
  %7 = getelementptr inbounds [1 x i8], [1 x i8]* %3, i64 0, i64 0
  %8 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 1
  store i64 1, i64* %9, align 8
  %10 = load { i8*, i64 }, { i8*, i64 }* %4, align 8
  %11 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %4, i32 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = load i8, i8* %1, align 1
  %14 = getelementptr i8, i8* %12, i64 0
  store i8 %13, i8* %14, align 1
  %15 = extractvalue { i8*, i64 } %10, 1
  %16 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 0
  store i8* %12, i8** %16, align 8
  %17 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %2, i32 0, i32 1
  store i64 %15, i64* %17, align 8
  %18 = load { i8*, i64 }, { i8*, i64 }* %2, align 8
  %19 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 16, i1 false)
  call void @runtime.os_write({ i64, i64 }* sret({ i64, i64 }*) %5, { i8*, i64 }* %2)
  %20 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %22, i64* %25, align 8
  store i64 %24, i64* %26, align 8
  ret void
}

define internal void @runtime.print_encoded_rune(i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca %..string, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca %..string, align 8
  %14 = alloca { i64, i64 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i64, i64 }, align 8
  %21 = alloca %..string, align 8
  %22 = alloca i8, align 1
  %23 = alloca i8, align 1
  %24 = alloca %..string, align 8
  %25 = alloca { i64, i64 }, align 8
  %26 = alloca %..string, align 8
  %27 = alloca { i64, i64 }, align 8
  %28 = alloca %..string, align 8
  %29 = alloca { i64, i64 }, align 8
  %30 = alloca { i64, i64 }, align 8
  %31 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %32 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %2, i8 39)
  %33 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %34 = load i32, i32* %1, align 4
  switch i32 %34, label %switch.default.body [
    i32 7, label %switch.case.body
    i32 8, label %switch.case.body1
    i32 27, label %switch.case.body2
    i32 12, label %switch.case.body3
    i32 10, label %switch.case.body4
    i32 13, label %switch.case.body5
    i32 9, label %switch.case.body6
    i32 11, label %switch.case.body7
  ]

switch.case.body:                                 ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$22f", i64 0, i64 0), i64 2 }, %..string* %3, align 8
  %35 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %4, %..string* %3)
  %36 = load { i64, i64 }, { i64, i64 }* %4, align 8
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$230", i64 0, i64 0), i64 2 }, %..string* %5, align 8
  %37 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %6, %..string* %5)
  %38 = load { i64, i64 }, { i64, i64 }* %6, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$231", i64 0, i64 0), i64 2 }, %..string* %7, align 8
  %39 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %8, %..string* %7)
  %40 = load { i64, i64 }, { i64, i64 }* %8, align 8
  br label %switch.done

switch.case.body3:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$232", i64 0, i64 0), i64 2 }, %..string* %9, align 8
  %41 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %41, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %10, %..string* %9)
  %42 = load { i64, i64 }, { i64, i64 }* %10, align 8
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$233", i64 0, i64 0), i64 2 }, %..string* %11, align 8
  %43 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %43, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %12, %..string* %11)
  %44 = load { i64, i64 }, { i64, i64 }* %12, align 8
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$234", i64 0, i64 0), i64 2 }, %..string* %13, align 8
  %45 = bitcast { i64, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %45, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %14, %..string* %13)
  %46 = load { i64, i64 }, { i64, i64 }* %14, align 8
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$235", i64 0, i64 0), i64 2 }, %..string* %15, align 8
  %47 = bitcast { i64, i64 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %47, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %16, %..string* %15)
  %48 = load { i64, i64 }, { i64, i64 }* %16, align 8
  br label %switch.done

switch.case.body7:                                ; preds = %entry
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$236", i64 0, i64 0), i64 2 }, %..string* %17, align 8
  %49 = bitcast { i64, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %18, %..string* %17)
  %50 = load { i64, i64 }, { i64, i64 }* %18, align 8
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %51 = load i32, i32* %1, align 4
  %52 = icmp sle i32 %51, 0
  %53 = zext i1 %52 to i8
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.then, label %if.else

if.then:                                          ; preds = %switch.default.body
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$237", i64 0, i64 0), i64 4 }, %..string* %19, align 8
  %55 = bitcast { i64, i64 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %20, %..string* %19)
  %56 = load { i64, i64 }, { i64, i64 }* %20, align 8
  br label %if.done10

if.else:                                          ; preds = %switch.default.body
  %57 = load i32, i32* %1, align 4
  %58 = icmp slt i32 %57, 32
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %if.then8, label %if.else9

if.then8:                                         ; preds = %if.else
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$7", i64 0, i64 0), i64 36 }, %..string* %21, align 8
  %61 = load i32, i32* %1, align 4
  %62 = trunc i32 %61 to i8
  %63 = lshr i8 %62, 4
  %64 = select i1 true, i8 %63, i8 0
  %65 = load i32, i32* %1, align 4
  %66 = trunc i32 %65 to i8
  %67 = and i8 %66, 15
  store i8 %64, i8* %22, align 1
  store i8 %67, i8* %23, align 1
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$238", i64 0, i64 0), i64 2 }, %..string* %24, align 8
  %68 = bitcast { i64, i64 }* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %68, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %25, %..string* %24)
  %69 = load { i64, i64 }, { i64, i64 }* %25, align 8
  %70 = load %..string, %..string* %21, align 8
  %71 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load i8, i8* %22, align 1
  %76 = zext i8 %75 to i64
  store %..string { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @"csbs$239", i64 0, i64 0), i64 70 }, %..string* %26, align 8
  call void @runtime.bounds_check_error(%..string* %26, i32 80, i32 22, i64 %76, i64 %74)
  %77 = getelementptr i8, i8* %72, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = bitcast { i64, i64 }* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %27, i8 %78)
  %80 = load { i64, i64 }, { i64, i64 }* %27, align 8
  %81 = load %..string, %..string* %21, align 8
  %82 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %..string, %..string* %21, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = load i8, i8* %23, align 1
  %87 = zext i8 %86 to i64
  store %..string { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @"csbs$239", i64 0, i64 0), i64 70 }, %..string* %28, align 8
  call void @runtime.bounds_check_error(%..string* %28, i32 81, i32 22, i64 %87, i64 %85)
  %88 = getelementptr i8, i8* %83, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = bitcast { i64, i64 }* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %90, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %29, i8 %89)
  %91 = load { i64, i64 }, { i64, i64 }* %29, align 8
  br label %if.done

if.else9:                                         ; preds = %if.else
  %92 = load i32, i32* %1, align 4
  %93 = bitcast { i64, i64 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %93, i8 0, i64 16, i1 false)
  call void @runtime.print_rune({ i64, i64 }* sret({ i64, i64 }*) %30, i32 %92)
  %94 = load { i64, i64 }, { i64, i64 }* %30, align 8
  br label %if.done

if.done:                                          ; preds = %if.else9, %if.then8
  br label %if.done10

if.done10:                                        ; preds = %if.done, %if.then
  br label %switch.done

switch.done:                                      ; preds = %if.done10, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  %95 = bitcast { i64, i64 }* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %95, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %31, i8 39)
  %96 = load { i64, i64 }, { i64, i64 }* %31, align 8
  ret void
}

define internal void @runtime.print_rune({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i32 %0) {
decls:
  %1 = alloca i32, align 4
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca [4 x i8], align 1
  %4 = alloca i64, align 8
  %5 = alloca { [4 x i8], i64 }, align 8
  %6 = alloca { i8*, i64 }, align 8
  %7 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i32 %0, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = icmp slt i32 %8, 128
  %10 = zext i1 %9 to i8
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %12 = load i32, i32* %1, align 4
  %13 = trunc i32 %12 to i8
  %14 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %2, i8 %13)
  %15 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %2, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %17, i64* %20, align 8
  store i64 %19, i64* %21, align 8
  ret void

if.done:                                          ; preds = %entry
  %22 = load i32, i32* %1, align 4
  %23 = bitcast { [4 x i8], i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 16, i1 false)
  call void @runtime.encode_rune({ [4 x i8], i64 }* sret({ [4 x i8], i64 }*) %5, i32 %22)
  %24 = load { [4 x i8], i64 }, { [4 x i8], i64 }* %5, align 8
  %25 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 0
  %26 = load [4 x i8], [4 x i8]* %25, align 1
  %27 = getelementptr inbounds { [4 x i8], i64 }, { [4 x i8], i64 }* %5, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  store [4 x i8] %26, [4 x i8]* %3, align 1
  store i64 %28, i64* %4, align 8
  %29 = load i64, i64* %4, align 8
  %30 = load [4 x i8], [4 x i8]* %3, align 1
  %31 = getelementptr [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %32 = getelementptr i8, i8* %31, i64 0
  %33 = sub i64 %29, 0
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 0
  store i8* %32, i8** %34, align 8
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %6, i32 0, i32 1
  store i64 %33, i64* %35, align 8
  %36 = load { i8*, i64 }, { i8*, i64 }* %6, align 8
  %37 = bitcast { i64, i64 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 16, i1 false)
  call void @runtime.os_write({ i64, i64 }* sret({ i64, i64 }*) %7, { i8*, i64 }* %6)
  %38 = load { i64, i64 }, { i64, i64 }* %7, align 8
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %44 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %40, i64* %43, align 8
  store i64 %42, i64* %44, align 8
  ret void
}

define internal void @runtime.print_u64(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %..string, align 8
  %3 = alloca [129 x i8], align 1
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$7", i64 0, i64 0), i64 36 }, %..string* %2, align 8
  %9 = bitcast [129 x i8]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 129, i1 false)
  store i64 129, i64* %4, align 8
  store i64 10, i64* %5, align 8
  %10 = load i64, i64* %1, align 8
  store i64 %10, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %11 = load i64, i64* %6, align 8
  %12 = load i64, i64* %5, align 8
  %13 = icmp uge i64 %11, %12
  %14 = zext i1 %13 to i8
  %15 = trunc i8 %14 to i1
  br i1 %15, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %16 = load i64, i64* %4, align 8
  %17 = sub i64 %16, 1
  store i64 %17, i64* %4, align 8
  %18 = load i64, i64* %4, align 8
  %19 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 %18
  %20 = load %..string, %..string* %2, align 8
  %21 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = load i64, i64* %6, align 8
  %26 = load i64, i64* %5, align 8
  %27 = urem i64 %25, %26
  %28 = getelementptr i8, i8* %22, i64 %27
  %29 = load i8, i8* %28, align 1
  store i8 %29, i8* %19, align 1
  %30 = load i64, i64* %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = udiv i64 %31, %30
  store i64 %32, i64* %6, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %33 = load i64, i64* %4, align 8
  %34 = sub i64 %33, 1
  store i64 %34, i64* %4, align 8
  %35 = load i64, i64* %4, align 8
  %36 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 %35
  %37 = load %..string, %..string* %2, align 8
  %38 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* %6, align 8
  %43 = load i64, i64* %5, align 8
  %44 = urem i64 %42, %43
  %45 = getelementptr i8, i8* %39, i64 %44
  %46 = load i8, i8* %45, align 1
  store i8 %46, i8* %36, align 1
  %47 = load i64, i64* %4, align 8
  %48 = load [129 x i8], [129 x i8]* %3, align 1
  %49 = getelementptr [129 x i8], [129 x i8]* %3, i64 0, i64 0
  %50 = getelementptr i8, i8* %49, i64 %47
  %51 = sub i64 129, %47
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %50, i8** %52, align 8
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 %51, i64* %53, align 8
  %54 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %55 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 16, i1 false)
  call void @runtime.os_write({ i64, i64 }* sret({ i64, i64 }*) %8, { i8*, i64 }* %7)
  %56 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret void
}

define internal void @runtime.print_i64(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %..string, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca [129 x i8], align 1
  %6 = alloca i64, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  store %..string { i8* getelementptr inbounds ([37 x i8], [37 x i8]* @"csbs$7", i64 0, i64 0), i64 36 }, %..string* %2, align 8
  %9 = load i64, i64* %1, align 8
  store i64 %9, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = icmp slt i64 %10, 0
  %12 = zext i1 %11 to i8
  store i8 %12, i8* %4, align 1
  %13 = load i64, i64* %3, align 8
  %14 = icmp slt i64 %13, 0
  %15 = sub i64 0, %13
  %16 = select i1 %14, i64 %15, i64 %13
  store i64 %16, i64* %3, align 8
  %17 = bitcast [129 x i8]* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 129, i1 false)
  store i64 129, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.body, %entry
  %18 = load i64, i64* %3, align 8
  %19 = icmp sge i64 %18, 10
  %20 = zext i1 %19 to i8
  %21 = trunc i8 %20 to i1
  br i1 %21, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %22 = load i64, i64* %6, align 8
  %23 = sub i64 %22, 1
  store i64 %23, i64* %6, align 8
  %24 = load i64, i64* %6, align 8
  %25 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %24
  %26 = load %..string, %..string* %2, align 8
  %27 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %3, align 8
  %32 = srem i64 %31, 10
  %33 = getelementptr i8, i8* %28, i64 %32
  %34 = load i8, i8* %33, align 1
  store i8 %34, i8* %25, align 1
  %35 = load i64, i64* %3, align 8
  %36 = sdiv i64 %35, 10
  store i64 %36, i64* %3, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %37 = load i64, i64* %6, align 8
  %38 = sub i64 %37, 1
  store i64 %38, i64* %6, align 8
  %39 = load i64, i64* %6, align 8
  %40 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %39
  %41 = load %..string, %..string* %2, align 8
  %42 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = load i64, i64* %3, align 8
  %47 = srem i64 %46, 10
  %48 = getelementptr i8, i8* %43, i64 %47
  %49 = load i8, i8* %48, align 1
  store i8 %49, i8* %40, align 1
  %50 = load i8, i8* %4, align 1
  %51 = trunc i8 %50 to i1
  br i1 %51, label %if.then, label %if.done

if.then:                                          ; preds = %for.done
  %52 = load i64, i64* %6, align 8
  %53 = sub i64 %52, 1
  store i64 %53, i64* %6, align 8
  %54 = load i64, i64* %6, align 8
  %55 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 %54
  store i8 45, i8* %55, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %for.done
  %56 = load i64, i64* %6, align 8
  %57 = load [129 x i8], [129 x i8]* %5, align 1
  %58 = getelementptr [129 x i8], [129 x i8]* %5, i64 0, i64 0
  %59 = getelementptr i8, i8* %58, i64 %56
  %60 = sub i64 129, %56
  %61 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %59, i8** %61, align 8
  %62 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 %60, i64* %62, align 8
  %63 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %64 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %64, i8 0, i64 16, i1 false)
  call void @runtime.os_write({ i64, i64 }* sret({ i64, i64 }*) %8, { i8*, i64 }* %7)
  %65 = load { i64, i64 }, { i64, i64 }* %8, align 8
  ret void
}

define internal void @runtime.print_caller_location(%runtime.Source_Code_Location* %0) {
decls:
  %1 = alloca { i64, i64 }, align 8
  %2 = alloca { i64, i64 }, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 0
  %6 = load %..string, %..string* %5, align 8
  %7 = bitcast { i64, i64 }* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %1, %..string* %5)
  %8 = load { i64, i64 }, { i64, i64 }* %1, align 8
  %9 = bitcast { i64, i64 }* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %2, i8 40)
  %10 = load { i64, i64 }, { i64, i64 }* %2, align 8
  %11 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = sext i32 %12 to i64
  call void @runtime.print_u64(i64 %13)
  %14 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %14, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %3, i8 58)
  %15 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %16 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  call void @runtime.print_u64(i64 %18)
  %19 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %19, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %4, i8 41)
  %20 = load { i64, i64 }, { i64, i64 }* %4, align 8
  ret void
}

define internal void @runtime.print_typeid(i64 %0) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %..string, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %runtime.Type_Info*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %5 = load i64, i64* %1, align 8
  %6 = icmp eq i64 %5, 0
  %7 = zext i1 %6 to i8
  %8 = trunc i8 %7 to i1
  br i1 %8, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %2, align 8
  %9 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %3, %..string* %2)
  %10 = load { i64, i64 }, { i64, i64 }* %3, align 8
  br label %if.done

if.else:                                          ; preds = %entry
  %11 = load i64, i64* %1, align 8
  %12 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %11)
  store %runtime.Type_Info* %12, %runtime.Type_Info** %4, align 8
  %13 = load %runtime.Type_Info*, %runtime.Type_Info** %4, align 8
  call void @runtime.print_type(%runtime.Type_Info* %13)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  ret void
}

define internal void @runtime.print_type(%runtime.Type_Info* %0) {
decls:
  %1 = alloca %runtime.Type_Info*, align 8
  %2 = alloca %..string, align 8
  %3 = alloca { i64, i64 }, align 8
  %4 = alloca %runtime.Type_Info_Named, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca %runtime.Type_Info_Integer, align 1
  %7 = alloca %..string, align 8
  %8 = alloca { i64, i64 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i64, i64 }, align 8
  %13 = alloca { i64, i64 }, align 8
  %14 = alloca %runtime.Type_Info_Rune, align 1
  %15 = alloca %..string, align 8
  %16 = alloca { i64, i64 }, align 8
  %17 = alloca %runtime.Type_Info_Float, align 1
  %18 = alloca { i64, i64 }, align 8
  %19 = alloca %runtime.Type_Info_Complex, align 1
  %20 = alloca %..string, align 8
  %21 = alloca { i64, i64 }, align 8
  %22 = alloca %runtime.Type_Info_Quaternion, align 1
  %23 = alloca %..string, align 8
  %24 = alloca { i64, i64 }, align 8
  %25 = alloca %runtime.Type_Info_String, align 1
  %26 = alloca %..string, align 8
  %27 = alloca { i64, i64 }, align 8
  %28 = alloca %runtime.Type_Info_Boolean, align 1
  %29 = alloca %..string, align 8
  %30 = alloca { i64, i64 }, align 8
  %31 = alloca { i64, i64 }, align 8
  %32 = alloca %runtime.Type_Info_Any, align 1
  %33 = alloca %..string, align 8
  %34 = alloca { i64, i64 }, align 8
  %35 = alloca %runtime.Type_Info_Type_Id, align 1
  %36 = alloca %..string, align 8
  %37 = alloca { i64, i64 }, align 8
  %38 = alloca %runtime.Type_Info_Pointer, align 8
  %39 = alloca %..string, align 8
  %40 = alloca { i64, i64 }, align 8
  %41 = alloca %..string, align 8
  %42 = alloca { i64, i64 }, align 8
  %43 = alloca %runtime.Type_Info_Multi_Pointer, align 8
  %44 = alloca %..string, align 8
  %45 = alloca { i64, i64 }, align 8
  %46 = alloca %runtime.Type_Info_Soa_Pointer, align 8
  %47 = alloca %..string, align 8
  %48 = alloca { i64, i64 }, align 8
  %49 = alloca %runtime.Type_Info_Procedure, align 8
  %50 = alloca %..string, align 8
  %51 = alloca { i64, i64 }, align 8
  %52 = alloca %..string, align 8
  %53 = alloca { i64, i64 }, align 8
  %54 = alloca %runtime.Type_Info_Tuple, align 8
  %55 = alloca { %runtime.Type_Info_Tuple, i8 }, align 8
  %56 = alloca %..string, align 8
  %57 = alloca { i64, i64 }, align 8
  %58 = alloca %runtime.Type_Info*, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i64, align 8
  %62 = alloca %runtime.Type_Info*, align 8
  %63 = alloca i64, align 8
  %64 = alloca %..string, align 8
  %65 = alloca { i64, i64 }, align 8
  %66 = alloca %..string, align 8
  %67 = alloca { i64, i64 }, align 8
  %68 = alloca %..string, align 8
  %69 = alloca { i64, i64 }, align 8
  %70 = alloca %runtime.Type_Info_Tuple, align 8
  %71 = alloca i64, align 8
  %72 = alloca { i64, i64 }, align 8
  %73 = alloca %..string, align 8
  %74 = alloca i64, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca %..string, align 8
  %78 = alloca i64, align 8
  %79 = alloca %..string, align 8
  %80 = alloca { i64, i64 }, align 8
  %81 = alloca %runtime.Type_Info*, align 8
  %82 = alloca %..string, align 8
  %83 = alloca { i64, i64 }, align 8
  %84 = alloca %..string, align 8
  %85 = alloca { i64, i64 }, align 8
  %86 = alloca %..string, align 8
  %87 = alloca { i64, i64 }, align 8
  %88 = alloca %runtime.Type_Info_Array, align 8
  %89 = alloca { i64, i64 }, align 8
  %90 = alloca { i64, i64 }, align 8
  %91 = alloca %runtime.Type_Info_Enumerated_Array, align 8
  %92 = alloca %..string, align 8
  %93 = alloca { i64, i64 }, align 8
  %94 = alloca { i64, i64 }, align 8
  %95 = alloca { i64, i64 }, align 8
  %96 = alloca %runtime.Type_Info_Dynamic_Array, align 8
  %97 = alloca %..string, align 8
  %98 = alloca { i64, i64 }, align 8
  %99 = alloca %runtime.Type_Info_Slice, align 8
  %100 = alloca %..string, align 8
  %101 = alloca { i64, i64 }, align 8
  %102 = alloca %runtime.Type_Info_Map, align 8
  %103 = alloca %..string, align 8
  %104 = alloca { i64, i64 }, align 8
  %105 = alloca { i64, i64 }, align 8
  %106 = alloca %runtime.Type_Info_Struct, align 8
  %107 = alloca %..string, align 8
  %108 = alloca { i64, i64 }, align 8
  %109 = alloca { i64, i64 }, align 8
  %110 = alloca %..string, align 8
  %111 = alloca { i64, i64 }, align 8
  %112 = alloca %..string, align 8
  %113 = alloca { i64, i64 }, align 8
  %114 = alloca %..string, align 8
  %115 = alloca { i64, i64 }, align 8
  %116 = alloca %..string, align 8
  %117 = alloca { i64, i64 }, align 8
  %118 = alloca %..string, align 8
  %119 = alloca { i64, i64 }, align 8
  %120 = alloca %..string, align 8
  %121 = alloca { i64, i64 }, align 8
  %122 = alloca { i64, i64 }, align 8
  %123 = alloca { i64, i64 }, align 8
  %124 = alloca %..string, align 8
  %125 = alloca i64, align 8
  %126 = alloca i64, align 8
  %127 = alloca i64, align 8
  %128 = alloca %..string, align 8
  %129 = alloca i64, align 8
  %130 = alloca %..string, align 8
  %131 = alloca { i64, i64 }, align 8
  %132 = alloca { i64, i64 }, align 8
  %133 = alloca %..string, align 8
  %134 = alloca { i64, i64 }, align 8
  %135 = alloca %..string, align 8
  %136 = alloca { i64, i64 }, align 8
  %137 = alloca %runtime.Type_Info_Union, align 8
  %138 = alloca %..string, align 8
  %139 = alloca { i64, i64 }, align 8
  %140 = alloca %..string, align 8
  %141 = alloca { i64, i64 }, align 8
  %142 = alloca %..string, align 8
  %143 = alloca { i64, i64 }, align 8
  %144 = alloca { i64, i64 }, align 8
  %145 = alloca %runtime.Type_Info*, align 8
  %146 = alloca i64, align 8
  %147 = alloca i64, align 8
  %148 = alloca i64, align 8
  %149 = alloca %runtime.Type_Info*, align 8
  %150 = alloca i64, align 8
  %151 = alloca %..string, align 8
  %152 = alloca { i64, i64 }, align 8
  %153 = alloca %..string, align 8
  %154 = alloca { i64, i64 }, align 8
  %155 = alloca %runtime.Type_Info_Enum, align 8
  %156 = alloca %..string, align 8
  %157 = alloca { i64, i64 }, align 8
  %158 = alloca %..string, align 8
  %159 = alloca { i64, i64 }, align 8
  %160 = alloca %..string, align 8
  %161 = alloca i64, align 8
  %162 = alloca i64, align 8
  %163 = alloca i64, align 8
  %164 = alloca %..string, align 8
  %165 = alloca i64, align 8
  %166 = alloca %..string, align 8
  %167 = alloca { i64, i64 }, align 8
  %168 = alloca { i64, i64 }, align 8
  %169 = alloca %..string, align 8
  %170 = alloca { i64, i64 }, align 8
  %171 = alloca %runtime.Type_Info_Bit_Set, align 8
  %172 = alloca %..string, align 8
  %173 = alloca { i64, i64 }, align 8
  %174 = alloca %runtime.Type_Info*, align 8
  %175 = alloca %runtime.Type_Info_Enum, align 8
  %176 = alloca %runtime.Type_Info_Rune, align 1
  %177 = alloca %..string, align 8
  %178 = alloca { i64, i64 }, align 8
  %179 = alloca { [15 x i64], i64 }, align 8
  %180 = alloca %..string, align 8
  %181 = alloca { i64, i64 }, align 8
  %182 = alloca %..string, align 8
  %183 = alloca { i64, i64 }, align 8
  %184 = alloca { i64, i64 }, align 8
  %185 = alloca %runtime.Type_Info_Simd_Vector, align 8
  %186 = alloca %..string, align 8
  %187 = alloca { i64, i64 }, align 8
  %188 = alloca { i64, i64 }, align 8
  %189 = alloca %runtime.Type_Info_Relative_Pointer, align 8
  %190 = alloca %..string, align 8
  %191 = alloca { i64, i64 }, align 8
  %192 = alloca %..string, align 8
  %193 = alloca { i64, i64 }, align 8
  %194 = alloca %runtime.Type_Info_Relative_Slice, align 8
  %195 = alloca %..string, align 8
  %196 = alloca { i64, i64 }, align 8
  %197 = alloca %..string, align 8
  %198 = alloca { i64, i64 }, align 8
  %199 = alloca %runtime.Type_Info_Matrix, align 8
  %200 = alloca %..string, align 8
  %201 = alloca { i64, i64 }, align 8
  %202 = alloca %..string, align 8
  %203 = alloca { i64, i64 }, align 8
  %204 = alloca %..string, align 8
  %205 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %1, align 8
  %206 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %207 = icmp eq %runtime.Type_Info* %206, null
  %208 = zext i1 %207 to i8
  %209 = trunc i8 %208 to i1
  br i1 %209, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %2, align 8
  %210 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %210, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %3, %..string* %2)
  %211 = load { i64, i64 }, { i64, i64 }* %3, align 8
  ret void

if.done:                                          ; preds = %entry
  %212 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %213 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %212, i32 0, i32 5
  %214 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %213, align 8
  %215 = bitcast { [15 x i64], i64 }* %213 to i8*
  %216 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %213, i32 0, i32 1
  %217 = load i64, i64* %216, align 8
  switch i64 %217, label %typeswitch.done92 [
    i64 1, label %typeswitch.body
    i64 2, label %typeswitch.body1
    i64 3, label %typeswitch.body6
    i64 4, label %typeswitch.body7
    i64 5, label %typeswitch.body8
    i64 6, label %typeswitch.body9
    i64 7, label %typeswitch.body10
    i64 8, label %typeswitch.body11
    i64 9, label %typeswitch.body15
    i64 10, label %typeswitch.body16
    i64 11, label %typeswitch.body17
    i64 12, label %typeswitch.body21
    i64 28, label %typeswitch.body22
    i64 13, label %typeswitch.body23
    i64 18, label %typeswitch.body31
    i64 14, label %typeswitch.body43
    i64 15, label %typeswitch.body44
    i64 16, label %typeswitch.body47
    i64 17, label %typeswitch.body48
    i64 22, label %typeswitch.body49
    i64 19, label %typeswitch.body50
    i64 20, label %typeswitch.body67
    i64 21, label %typeswitch.body77
    i64 23, label %typeswitch.body83
    i64 24, label %typeswitch.body88
    i64 25, label %typeswitch.body89
    i64 26, label %typeswitch.body90
    i64 27, label %typeswitch.body91
  ]

typeswitch.body:                                  ; preds = %if.done
  %218 = bitcast i8* %215 to %runtime.Type_Info_Named*
  %219 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %218, align 8
  %220 = bitcast %runtime.Type_Info_Named* %4 to i8*
  %221 = bitcast %runtime.Type_Info_Named* %218 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %220, i8* align 1 %221, i64 80, i1 false)
  %222 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %4, i32 0, i32 0
  %223 = load %..string, %..string* %222, align 8
  %224 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %224, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %5, %..string* %222)
  %225 = load { i64, i64 }, { i64, i64 }* %5, align 8
  br label %typeswitch.done92

typeswitch.body1:                                 ; preds = %if.done
  %226 = bitcast i8* %215 to %runtime.Type_Info_Integer*
  %227 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %226, align 1
  store %runtime.Type_Info_Integer %227, %runtime.Type_Info_Integer* %6, align 1
  %228 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %229 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %228, i32 0, i32 4
  %230 = load i64, i64* %229, align 8
  switch i64 %230, label %switch.default.body [
    i64 4683743612465315844, label %switch.case.body
    i64 72057594037928042, label %switch.case.body2
    i64 72057594037928000, label %switch.case.body3
  ]

switch.case.body:                                 ; preds = %typeswitch.body1
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23b", i64 0, i64 0), i64 3 }, %..string* %7, align 8
  %231 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %231, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %8, %..string* %7)
  %232 = load { i64, i64 }, { i64, i64 }* %8, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %typeswitch.body1
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$23c", i64 0, i64 0), i64 4 }, %..string* %9, align 8
  %233 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %233, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %10, %..string* %9)
  %234 = load { i64, i64 }, { i64, i64 }* %10, align 8
  br label %switch.done

switch.case.body3:                                ; preds = %typeswitch.body1
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$23d", i64 0, i64 0), i64 7 }, %..string* %11, align 8
  %235 = bitcast { i64, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %235, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %12, %..string* %11)
  %236 = load { i64, i64 }, { i64, i64 }* %12, align 8
  br label %switch.done

switch.default.body:                              ; preds = %typeswitch.body1
  %237 = getelementptr inbounds %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %6, i32 0, i32 0
  %238 = load i8, i8* %237, align 1
  %239 = trunc i8 %238 to i1
  br i1 %239, label %if.then4, label %if.else

if.then4:                                         ; preds = %switch.default.body
  br label %if.done5

if.else:                                          ; preds = %switch.default.body
  br label %if.done5

if.done5:                                         ; preds = %if.else, %if.then4
  %240 = phi i8 [ 105, %if.then4 ], [ 117, %if.else ]
  %241 = bitcast { i64, i64 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %241, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %13, i8 %240)
  %242 = load { i64, i64 }, { i64, i64 }* %13, align 8
  %243 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %244 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %243, i32 0, i32 0
  %245 = load i64, i64* %244, align 8
  %246 = mul i64 8, %245
  call void @runtime.print_u64(i64 %246)
  br label %switch.done

switch.done:                                      ; preds = %if.done5, %switch.case.body3, %switch.case.body2, %switch.case.body
  br label %typeswitch.done92

typeswitch.body6:                                 ; preds = %if.done
  %247 = bitcast i8* %215 to %runtime.Type_Info_Rune*
  %248 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %247, align 1
  store %runtime.Type_Info_Rune %248, %runtime.Type_Info_Rune* %14, align 1
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$23e", i64 0, i64 0), i64 4 }, %..string* %15, align 8
  %249 = bitcast { i64, i64 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %249, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %16, %..string* %15)
  %250 = load { i64, i64 }, { i64, i64 }* %16, align 8
  br label %typeswitch.done92

typeswitch.body7:                                 ; preds = %if.done
  %251 = bitcast i8* %215 to %runtime.Type_Info_Float*
  %252 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %251, align 1
  store %runtime.Type_Info_Float %252, %runtime.Type_Info_Float* %17, align 1
  %253 = bitcast { i64, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %253, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %18, i8 102)
  %254 = load { i64, i64 }, { i64, i64 }* %18, align 8
  %255 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %256 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %255, i32 0, i32 0
  %257 = load i64, i64* %256, align 8
  %258 = mul i64 8, %257
  call void @runtime.print_u64(i64 %258)
  br label %typeswitch.done92

typeswitch.body8:                                 ; preds = %if.done
  %259 = bitcast i8* %215 to %runtime.Type_Info_Complex*
  %260 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %259, align 1
  store %runtime.Type_Info_Complex %260, %runtime.Type_Info_Complex* %19, align 1
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$23f", i64 0, i64 0), i64 7 }, %..string* %20, align 8
  %261 = bitcast { i64, i64 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %261, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %21, %..string* %20)
  %262 = load { i64, i64 }, { i64, i64 }* %21, align 8
  %263 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %264 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %263, i32 0, i32 0
  %265 = load i64, i64* %264, align 8
  %266 = mul i64 8, %265
  call void @runtime.print_u64(i64 %266)
  br label %typeswitch.done92

typeswitch.body9:                                 ; preds = %if.done
  %267 = bitcast i8* %215 to %runtime.Type_Info_Quaternion*
  %268 = load %runtime.Type_Info_Quaternion, %runtime.Type_Info_Quaternion* %267, align 1
  store %runtime.Type_Info_Quaternion %268, %runtime.Type_Info_Quaternion* %22, align 1
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$240", i64 0, i64 0), i64 10 }, %..string* %23, align 8
  %269 = bitcast { i64, i64 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %269, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %24, %..string* %23)
  %270 = load { i64, i64 }, { i64, i64 }* %24, align 8
  %271 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %272 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %271, i32 0, i32 0
  %273 = load i64, i64* %272, align 8
  %274 = mul i64 8, %273
  call void @runtime.print_u64(i64 %274)
  br label %typeswitch.done92

typeswitch.body10:                                ; preds = %if.done
  %275 = bitcast i8* %215 to %runtime.Type_Info_String*
  %276 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %275, align 1
  store %runtime.Type_Info_String %276, %runtime.Type_Info_String* %25, align 1
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$241", i64 0, i64 0), i64 6 }, %..string* %26, align 8
  %277 = bitcast { i64, i64 }* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %277, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %27, %..string* %26)
  %278 = load { i64, i64 }, { i64, i64 }* %27, align 8
  br label %typeswitch.done92

typeswitch.body11:                                ; preds = %if.done
  %279 = bitcast i8* %215 to %runtime.Type_Info_Boolean*
  %280 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %279, align 1
  store %runtime.Type_Info_Boolean %280, %runtime.Type_Info_Boolean* %28, align 1
  %281 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %282 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %281, i32 0, i32 4
  %283 = load i64, i64* %282, align 8
  switch i64 %283, label %switch.default.body13 [
    i64 504403158265495577, label %switch.case.body12
  ]

switch.case.body12:                               ; preds = %typeswitch.body11
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$242", i64 0, i64 0), i64 4 }, %..string* %29, align 8
  %284 = bitcast { i64, i64 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %284, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %30, %..string* %29)
  %285 = load { i64, i64 }, { i64, i64 }* %30, align 8
  br label %switch.done14

switch.default.body13:                            ; preds = %typeswitch.body11
  %286 = bitcast { i64, i64 }* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %286, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %31, i8 98)
  %287 = load { i64, i64 }, { i64, i64 }* %31, align 8
  %288 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %289 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %288, i32 0, i32 0
  %290 = load i64, i64* %289, align 8
  %291 = mul i64 8, %290
  call void @runtime.print_u64(i64 %291)
  br label %switch.done14

switch.done14:                                    ; preds = %switch.default.body13, %switch.case.body12
  br label %typeswitch.done92

typeswitch.body15:                                ; preds = %if.done
  %292 = bitcast i8* %215 to %runtime.Type_Info_Any*
  %293 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %292, align 1
  store %runtime.Type_Info_Any %293, %runtime.Type_Info_Any* %32, align 1
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$243", i64 0, i64 0), i64 3 }, %..string* %33, align 8
  %294 = bitcast { i64, i64 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %294, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %34, %..string* %33)
  %295 = load { i64, i64 }, { i64, i64 }* %34, align 8
  br label %typeswitch.done92

typeswitch.body16:                                ; preds = %if.done
  %296 = bitcast i8* %215 to %runtime.Type_Info_Type_Id*
  %297 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %296, align 1
  store %runtime.Type_Info_Type_Id %297, %runtime.Type_Info_Type_Id* %35, align 1
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$244", i64 0, i64 0), i64 6 }, %..string* %36, align 8
  %298 = bitcast { i64, i64 }* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* %298, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %37, %..string* %36)
  %299 = load { i64, i64 }, { i64, i64 }* %37, align 8
  br label %typeswitch.done92

typeswitch.body17:                                ; preds = %if.done
  %300 = bitcast i8* %215 to %runtime.Type_Info_Pointer*
  %301 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %300, align 8
  store %runtime.Type_Info_Pointer %301, %runtime.Type_Info_Pointer* %38, align 8
  %302 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %38, i32 0, i32 0
  %303 = load %runtime.Type_Info*, %runtime.Type_Info** %302, align 8
  %304 = icmp eq %runtime.Type_Info* %303, null
  %305 = zext i1 %304 to i8
  %306 = trunc i8 %305 to i1
  br i1 %306, label %if.then18, label %if.else19

if.then18:                                        ; preds = %typeswitch.body17
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$245", i64 0, i64 0), i64 6 }, %..string* %39, align 8
  %307 = bitcast { i64, i64 }* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %307, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %40, %..string* %39)
  %308 = load { i64, i64 }, { i64, i64 }* %40, align 8
  br label %if.done20

if.else19:                                        ; preds = %typeswitch.body17
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$246", i64 0, i64 0), i64 1 }, %..string* %41, align 8
  %309 = bitcast { i64, i64 }* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %309, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %42, %..string* %41)
  %310 = load { i64, i64 }, { i64, i64 }* %42, align 8
  %311 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %38, i32 0, i32 0
  %312 = load %runtime.Type_Info*, %runtime.Type_Info** %311, align 8
  call void @runtime.print_type(%runtime.Type_Info* %312)
  br label %if.done20

if.done20:                                        ; preds = %if.else19, %if.then18
  br label %typeswitch.done92

typeswitch.body21:                                ; preds = %if.done
  %313 = bitcast i8* %215 to %runtime.Type_Info_Multi_Pointer*
  %314 = load %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %313, align 8
  store %runtime.Type_Info_Multi_Pointer %314, %runtime.Type_Info_Multi_Pointer* %43, align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$247", i64 0, i64 0), i64 3 }, %..string* %44, align 8
  %315 = bitcast { i64, i64 }* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* %315, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %45, %..string* %44)
  %316 = load { i64, i64 }, { i64, i64 }* %45, align 8
  %317 = getelementptr inbounds %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %43, i32 0, i32 0
  %318 = load %runtime.Type_Info*, %runtime.Type_Info** %317, align 8
  call void @runtime.print_type(%runtime.Type_Info* %318)
  br label %typeswitch.done92

typeswitch.body22:                                ; preds = %if.done
  %319 = bitcast i8* %215 to %runtime.Type_Info_Soa_Pointer*
  %320 = load %runtime.Type_Info_Soa_Pointer, %runtime.Type_Info_Soa_Pointer* %319, align 8
  store %runtime.Type_Info_Soa_Pointer %320, %runtime.Type_Info_Soa_Pointer* %46, align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$248", i64 0, i64 0), i64 6 }, %..string* %47, align 8
  %321 = bitcast { i64, i64 }* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* %321, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %48, %..string* %47)
  %322 = load { i64, i64 }, { i64, i64 }* %48, align 8
  %323 = getelementptr inbounds %runtime.Type_Info_Soa_Pointer, %runtime.Type_Info_Soa_Pointer* %46, i32 0, i32 0
  %324 = load %runtime.Type_Info*, %runtime.Type_Info** %323, align 8
  call void @runtime.print_type(%runtime.Type_Info* %324)
  br label %typeswitch.done92

typeswitch.body23:                                ; preds = %if.done
  %325 = bitcast i8* %215 to %runtime.Type_Info_Procedure*
  %326 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %325, align 8
  %327 = bitcast %runtime.Type_Info_Procedure* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* %327, i8 0, i64 24, i1 false)
  store %runtime.Type_Info_Procedure %326, %runtime.Type_Info_Procedure* %49, align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$249", i64 0, i64 0), i64 4 }, %..string* %50, align 8
  %328 = bitcast { i64, i64 }* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* %328, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %51, %..string* %50)
  %329 = load { i64, i64 }, { i64, i64 }* %51, align 8
  %330 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %49, i32 0, i32 0
  %331 = load %runtime.Type_Info*, %runtime.Type_Info** %330, align 8
  %332 = icmp eq %runtime.Type_Info* %331, null
  %333 = zext i1 %332 to i8
  %334 = trunc i8 %333 to i1
  br i1 %334, label %if.then24, label %if.else25

if.then24:                                        ; preds = %typeswitch.body23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24a", i64 0, i64 0), i64 2 }, %..string* %52, align 8
  %335 = bitcast { i64, i64 }* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* %335, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %53, %..string* %52)
  %336 = load { i64, i64 }, { i64, i64 }* %53, align 8
  br label %if.done28

if.else25:                                        ; preds = %typeswitch.body23
  %337 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %49, i32 0, i32 0
  %338 = load %runtime.Type_Info*, %runtime.Type_Info** %337, align 8
  %339 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %338, i32 0, i32 5
  %340 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %339, align 8
  %341 = bitcast { %runtime.Type_Info_Tuple, i8 }* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* %341, i8 0, i64 40, i1 false)
  %342 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %55, i32 0, i32 0
  %343 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %55, i32 0, i32 1
  %344 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %339, i32 0, i32 1
  %345 = load i64, i64* %344, align 8
  %346 = icmp eq i64 %345, 18
  br i1 %346, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.else25
  %347 = bitcast { [15 x i64], i64 }* %339 to %runtime.Type_Info_Tuple*
  %348 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %347, align 8
  store %runtime.Type_Info_Tuple %348, %runtime.Type_Info_Tuple* %342, align 8
  store i8 1, i8* %343, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.else25
  %349 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %55, i32 0, i32 1
  %350 = load i8, i8* %349, align 1
  %351 = bitcast { [15 x i64], i64 }* %339 to i8*
  %352 = icmp ne i8 %350, 0
  store %..string { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @"csbs$239", i64 0, i64 0), i64 70 }, %..string* %56, align 8
  call void @runtime.type_assertion_check2(i1 %352, %..string* %56, i32 239, i32 21, i64 1369094286720630800, i64 3602879701896396855, i8* %351)
  %353 = getelementptr inbounds { %runtime.Type_Info_Tuple, i8 }, { %runtime.Type_Info_Tuple, i8 }* %55, i32 0, i32 0
  %354 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %353, align 8
  store %runtime.Type_Info_Tuple %354, %runtime.Type_Info_Tuple* %54, align 8
  %355 = bitcast { i64, i64 }* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %355, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %57, i8 40)
  %356 = load { i64, i64 }, { i64, i64 }* %57, align 8
  store %runtime.Type_Info* null, %runtime.Type_Info** %58, align 8
  store i64 0, i64* %59, align 8
  %357 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %54, i32 0, i32 0
  %358 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %357, align 8
  %359 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %357, i32 0, i32 1
  %360 = load i64, i64* %359, align 8
  store i64 %360, i64* %60, align 8
  store i64 -1, i64* %61, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done27, %union_cast.end
  %361 = load i64, i64* %61, align 8
  %362 = add i64 %361, 1
  store i64 %362, i64* %61, align 8
  %363 = load i64, i64* %60, align 8
  %364 = icmp slt i64 %362, %363
  br i1 %364, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %365 = load i64, i64* %61, align 8
  %366 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %357, i32 0, i32 0
  %367 = load %runtime.Type_Info**, %runtime.Type_Info*** %366, align 8
  %368 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %367, i64 %365
  %369 = load %runtime.Type_Info*, %runtime.Type_Info** %368, align 8
  store %runtime.Type_Info* %369, %runtime.Type_Info** %62, align 8
  store i64 %365, i64* %63, align 8
  %370 = load i64, i64* %63, align 8
  %371 = icmp sgt i64 %370, 0
  %372 = zext i1 %371 to i8
  %373 = trunc i8 %372 to i1
  br i1 %373, label %if.then26, label %if.done27

if.then26:                                        ; preds = %for.index.body
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %64, align 8
  %374 = bitcast { i64, i64 }* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* %374, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %65, %..string* %64)
  %375 = load { i64, i64 }, { i64, i64 }* %65, align 8
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %for.index.body
  %376 = load %runtime.Type_Info*, %runtime.Type_Info** %62, align 8
  call void @runtime.print_type(%runtime.Type_Info* %376)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24c", i64 0, i64 0), i64 1 }, %..string* %66, align 8
  %377 = bitcast { i64, i64 }* %67 to i8*
  call void @llvm.memset.p0i8.i64(i8* %377, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %67, %..string* %66)
  %378 = load { i64, i64 }, { i64, i64 }* %67, align 8
  br label %if.done28

if.done28:                                        ; preds = %for.index.done, %if.then24
  %379 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %49, i32 0, i32 1
  %380 = load %runtime.Type_Info*, %runtime.Type_Info** %379, align 8
  %381 = icmp ne %runtime.Type_Info* %380, null
  %382 = zext i1 %381 to i8
  %383 = trunc i8 %382 to i1
  br i1 %383, label %if.then29, label %if.done30

if.then29:                                        ; preds = %if.done28
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$24d", i64 0, i64 0), i64 4 }, %..string* %68, align 8
  %384 = bitcast { i64, i64 }* %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* %384, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %69, %..string* %68)
  %385 = load { i64, i64 }, { i64, i64 }* %69, align 8
  %386 = getelementptr inbounds %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %49, i32 0, i32 1
  %387 = load %runtime.Type_Info*, %runtime.Type_Info** %386, align 8
  call void @runtime.print_type(%runtime.Type_Info* %387)
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %if.done28
  br label %typeswitch.done92

typeswitch.body31:                                ; preds = %if.done
  %388 = bitcast i8* %215 to %runtime.Type_Info_Tuple*
  %389 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %388, align 8
  store %runtime.Type_Info_Tuple %389, %runtime.Type_Info_Tuple* %70, align 8
  %390 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %70, i32 0, i32 1
  %391 = load { %..string*, i64 }, { %..string*, i64 }* %390, align 8
  %392 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %390, i32 0, i32 1
  %393 = load i64, i64* %392, align 8
  store i64 %393, i64* %71, align 8
  %394 = load i64, i64* %71, align 8
  %395 = icmp ne i64 %394, 1
  %396 = zext i1 %395 to i8
  %397 = trunc i8 %396 to i1
  br i1 %397, label %if.then32, label %if.done33

if.then32:                                        ; preds = %typeswitch.body31
  %398 = bitcast { i64, i64 }* %72 to i8*
  call void @llvm.memset.p0i8.i64(i8* %398, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %72, i8 40)
  %399 = load { i64, i64 }, { i64, i64 }* %72, align 8
  br label %if.done33

if.done33:                                        ; preds = %if.then32, %typeswitch.body31
  %400 = bitcast %..string* %73 to i8*
  call void @llvm.memset.p0i8.i64(i8* %400, i8 0, i64 16, i1 false)
  store i64 0, i64* %74, align 8
  %401 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %70, i32 0, i32 1
  %402 = load { %..string*, i64 }, { %..string*, i64 }* %401, align 8
  %403 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %401, i32 0, i32 1
  %404 = load i64, i64* %403, align 8
  store i64 %404, i64* %75, align 8
  store i64 -1, i64* %76, align 8
  br label %for.index.loop34

for.index.loop34:                                 ; preds = %if.done39, %if.done33
  %405 = load i64, i64* %76, align 8
  %406 = add i64 %405, 1
  store i64 %406, i64* %76, align 8
  %407 = load i64, i64* %75, align 8
  %408 = icmp slt i64 %406, %407
  br i1 %408, label %for.index.body35, label %for.index.done40

for.index.body35:                                 ; preds = %for.index.loop34
  %409 = load i64, i64* %76, align 8
  %410 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %401, i32 0, i32 0
  %411 = load %..string*, %..string** %410, align 8
  %412 = getelementptr %..string, %..string* %411, i64 %409
  %413 = load %..string, %..string* %412, align 8
  store %..string %413, %..string* %77, align 8
  store i64 %409, i64* %78, align 8
  %414 = load i64, i64* %78, align 8
  %415 = icmp sgt i64 %414, 0
  %416 = zext i1 %415 to i8
  %417 = trunc i8 %416 to i1
  br i1 %417, label %if.then36, label %if.done37

if.then36:                                        ; preds = %for.index.body35
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %79, align 8
  %418 = bitcast { i64, i64 }* %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* %418, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %80, %..string* %79)
  %419 = load { i64, i64 }, { i64, i64 }* %80, align 8
  br label %if.done37

if.done37:                                        ; preds = %if.then36, %for.index.body35
  %420 = getelementptr inbounds %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %70, i32 0, i32 0
  %421 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %420, align 8
  %422 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %420, i32 0, i32 0
  %423 = load %runtime.Type_Info**, %runtime.Type_Info*** %422, align 8
  %424 = load i64, i64* %78, align 8
  %425 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %420, i32 0, i32 1
  %426 = load i64, i64* %425, align 8
  store %..string { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @"csbs$239", i64 0, i64 0), i64 70 }, %..string* %82, align 8
  call void @runtime.bounds_check_error(%..string* %82, i32 257, i32 20, i64 %424, i64 %426)
  %427 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %423, i64 %424
  %428 = load %runtime.Type_Info*, %runtime.Type_Info** %427, align 8
  store %runtime.Type_Info* %428, %runtime.Type_Info** %81, align 8
  %429 = load %..string, %..string* %77, align 8
  %430 = getelementptr inbounds %..string, %..string* %77, i32 0, i32 1
  %431 = load i64, i64* %430, align 8
  %432 = icmp sgt i64 %431, 0
  %433 = zext i1 %432 to i8
  %434 = trunc i8 %433 to i1
  br i1 %434, label %if.then38, label %if.done39

if.then38:                                        ; preds = %if.done37
  %435 = load %..string, %..string* %77, align 8
  %436 = bitcast { i64, i64 }* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* %436, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %83, %..string* %77)
  %437 = load { i64, i64 }, { i64, i64 }* %83, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$222", i64 0, i64 0), i64 2 }, %..string* %84, align 8
  %438 = bitcast { i64, i64 }* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* %438, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %85, %..string* %84)
  %439 = load { i64, i64 }, { i64, i64 }* %85, align 8
  br label %if.done39

if.done39:                                        ; preds = %if.then38, %if.done37
  %440 = load %runtime.Type_Info*, %runtime.Type_Info** %81, align 8
  call void @runtime.print_type(%runtime.Type_Info* %440)
  br label %for.index.loop34

for.index.done40:                                 ; preds = %for.index.loop34
  %441 = load i64, i64* %71, align 8
  %442 = icmp ne i64 %441, 1
  %443 = zext i1 %442 to i8
  %444 = trunc i8 %443 to i1
  br i1 %444, label %if.then41, label %if.done42

if.then41:                                        ; preds = %for.index.done40
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24c", i64 0, i64 0), i64 1 }, %..string* %86, align 8
  %445 = bitcast { i64, i64 }* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* %445, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %87, %..string* %86)
  %446 = load { i64, i64 }, { i64, i64 }* %87, align 8
  br label %if.done42

if.done42:                                        ; preds = %if.then41, %for.index.done40
  br label %typeswitch.done92

typeswitch.body43:                                ; preds = %if.done
  %447 = bitcast i8* %215 to %runtime.Type_Info_Array*
  %448 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %447, align 8
  store %runtime.Type_Info_Array %448, %runtime.Type_Info_Array* %88, align 8
  %449 = bitcast { i64, i64 }* %89 to i8*
  call void @llvm.memset.p0i8.i64(i8* %449, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %89, i8 91)
  %450 = load { i64, i64 }, { i64, i64 }* %89, align 8
  %451 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %88, i32 0, i32 2
  %452 = load i64, i64* %451, align 8
  call void @runtime.print_u64(i64 %452)
  %453 = bitcast { i64, i64 }* %90 to i8*
  call void @llvm.memset.p0i8.i64(i8* %453, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %90, i8 93)
  %454 = load { i64, i64 }, { i64, i64 }* %90, align 8
  %455 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %88, i32 0, i32 0
  %456 = load %runtime.Type_Info*, %runtime.Type_Info** %455, align 8
  call void @runtime.print_type(%runtime.Type_Info* %456)
  br label %typeswitch.done92

typeswitch.body44:                                ; preds = %if.done
  %457 = bitcast i8* %215 to %runtime.Type_Info_Enumerated_Array*
  %458 = load %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %457, align 8
  %459 = bitcast %runtime.Type_Info_Enumerated_Array* %91 to i8*
  call void @llvm.memset.p0i8.i64(i8* %459, i8 0, i64 56, i1 false)
  store %runtime.Type_Info_Enumerated_Array %458, %runtime.Type_Info_Enumerated_Array* %91, align 8
  %460 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %91, i32 0, i32 6
  %461 = load i8, i8* %460, align 1
  %462 = trunc i8 %461 to i1
  br i1 %462, label %if.then45, label %if.done46

if.then45:                                        ; preds = %typeswitch.body44
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$24e", i64 0, i64 0), i64 7 }, %..string* %92, align 8
  %463 = bitcast { i64, i64 }* %93 to i8*
  call void @llvm.memset.p0i8.i64(i8* %463, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %93, %..string* %92)
  %464 = load { i64, i64 }, { i64, i64 }* %93, align 8
  br label %if.done46

if.done46:                                        ; preds = %if.then45, %typeswitch.body44
  %465 = bitcast { i64, i64 }* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* %465, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %94, i8 91)
  %466 = load { i64, i64 }, { i64, i64 }* %94, align 8
  %467 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %91, i32 0, i32 1
  %468 = load %runtime.Type_Info*, %runtime.Type_Info** %467, align 8
  call void @runtime.print_type(%runtime.Type_Info* %468)
  %469 = bitcast { i64, i64 }* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* %469, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %95, i8 93)
  %470 = load { i64, i64 }, { i64, i64 }* %95, align 8
  %471 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %91, i32 0, i32 0
  %472 = load %runtime.Type_Info*, %runtime.Type_Info** %471, align 8
  call void @runtime.print_type(%runtime.Type_Info* %472)
  br label %typeswitch.done92

typeswitch.body47:                                ; preds = %if.done
  %473 = bitcast i8* %215 to %runtime.Type_Info_Dynamic_Array*
  %474 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %473, align 8
  store %runtime.Type_Info_Dynamic_Array %474, %runtime.Type_Info_Dynamic_Array* %96, align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$24f", i64 0, i64 0), i64 9 }, %..string* %97, align 8
  %475 = bitcast { i64, i64 }* %98 to i8*
  call void @llvm.memset.p0i8.i64(i8* %475, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %98, %..string* %97)
  %476 = load { i64, i64 }, { i64, i64 }* %98, align 8
  %477 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %96, i32 0, i32 0
  %478 = load %runtime.Type_Info*, %runtime.Type_Info** %477, align 8
  call void @runtime.print_type(%runtime.Type_Info* %478)
  br label %typeswitch.done92

typeswitch.body48:                                ; preds = %if.done
  %479 = bitcast i8* %215 to %runtime.Type_Info_Slice*
  %480 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %479, align 8
  store %runtime.Type_Info_Slice %480, %runtime.Type_Info_Slice* %99, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$250", i64 0, i64 0), i64 2 }, %..string* %100, align 8
  %481 = bitcast { i64, i64 }* %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* %481, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %101, %..string* %100)
  %482 = load { i64, i64 }, { i64, i64 }* %101, align 8
  %483 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %99, i32 0, i32 0
  %484 = load %runtime.Type_Info*, %runtime.Type_Info** %483, align 8
  call void @runtime.print_type(%runtime.Type_Info* %484)
  br label %typeswitch.done92

typeswitch.body49:                                ; preds = %if.done
  %485 = bitcast i8* %215 to %runtime.Type_Info_Map*
  %486 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %485, align 8
  store %runtime.Type_Info_Map %486, %runtime.Type_Info_Map* %102, align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$251", i64 0, i64 0), i64 4 }, %..string* %103, align 8
  %487 = bitcast { i64, i64 }* %104 to i8*
  call void @llvm.memset.p0i8.i64(i8* %487, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %104, %..string* %103)
  %488 = load { i64, i64 }, { i64, i64 }* %104, align 8
  %489 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %102, i32 0, i32 0
  %490 = load %runtime.Type_Info*, %runtime.Type_Info** %489, align 8
  call void @runtime.print_type(%runtime.Type_Info* %490)
  %491 = bitcast { i64, i64 }* %105 to i8*
  call void @llvm.memset.p0i8.i64(i8* %491, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %105, i8 93)
  %492 = load { i64, i64 }, { i64, i64 }* %105, align 8
  %493 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %102, i32 0, i32 1
  %494 = load %runtime.Type_Info*, %runtime.Type_Info** %493, align 8
  call void @runtime.print_type(%runtime.Type_Info* %494)
  br label %typeswitch.done92

typeswitch.body50:                                ; preds = %if.done
  %495 = bitcast i8* %215 to %runtime.Type_Info_Struct*
  %496 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %495, align 8
  %497 = bitcast %runtime.Type_Info_Struct* %106 to i8*
  call void @llvm.memset.p0i8.i64(i8* %497, i8 0, i64 120, i1 false)
  %498 = bitcast %runtime.Type_Info_Struct* %106 to i8*
  %499 = bitcast %runtime.Type_Info_Struct* %495 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %498, i8* align 1 %499, i64 120, i1 false)
  %500 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 10
  %501 = load i8, i8* %500, align 1
  switch i8 %501, label %switch.done55 [
    i8 0, label %switch.case.body51
    i8 1, label %switch.case.body52
    i8 2, label %switch.case.body53
    i8 3, label %switch.case.body54
  ]

switch.case.body51:                               ; preds = %typeswitch.body50
  br label %switch.done55

switch.case.body52:                               ; preds = %typeswitch.body50
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$252", i64 0, i64 0), i64 5 }, %..string* %107, align 8
  %502 = bitcast { i64, i64 }* %108 to i8*
  call void @llvm.memset.p0i8.i64(i8* %502, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %108, %..string* %107)
  %503 = load { i64, i64 }, { i64, i64 }* %108, align 8
  %504 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 13
  %505 = load i64, i64* %504, align 8
  call void @runtime.print_u64(i64 %505)
  %506 = bitcast { i64, i64 }* %109 to i8*
  call void @llvm.memset.p0i8.i64(i8* %506, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %109, i8 93)
  %507 = load { i64, i64 }, { i64, i64 }* %109, align 8
  %508 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 12
  %509 = load %runtime.Type_Info*, %runtime.Type_Info** %508, align 8
  call void @runtime.print_type(%runtime.Type_Info* %509)
  ret void

switch.case.body53:                               ; preds = %typeswitch.body50
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$253", i64 0, i64 0), i64 6 }, %..string* %110, align 8
  %510 = bitcast { i64, i64 }* %111 to i8*
  call void @llvm.memset.p0i8.i64(i8* %510, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %111, %..string* %110)
  %511 = load { i64, i64 }, { i64, i64 }* %111, align 8
  %512 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 12
  %513 = load %runtime.Type_Info*, %runtime.Type_Info** %512, align 8
  call void @runtime.print_type(%runtime.Type_Info* %513)
  ret void

switch.case.body54:                               ; preds = %typeswitch.body50
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$254", i64 0, i64 0), i64 13 }, %..string* %112, align 8
  %514 = bitcast { i64, i64 }* %113 to i8*
  call void @llvm.memset.p0i8.i64(i8* %514, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %113, %..string* %112)
  %515 = load { i64, i64 }, { i64, i64 }* %113, align 8
  %516 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 12
  %517 = load %runtime.Type_Info*, %runtime.Type_Info** %516, align 8
  call void @runtime.print_type(%runtime.Type_Info* %517)
  ret void

switch.done55:                                    ; preds = %switch.case.body51, %typeswitch.body50
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$255", i64 0, i64 0), i64 7 }, %..string* %114, align 8
  %518 = bitcast { i64, i64 }* %115 to i8*
  call void @llvm.memset.p0i8.i64(i8* %518, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %115, %..string* %114)
  %519 = load { i64, i64 }, { i64, i64 }* %115, align 8
  %520 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 5
  %521 = load i8, i8* %520, align 1
  %522 = trunc i8 %521 to i1
  br i1 %522, label %if.then56, label %if.done57

if.then56:                                        ; preds = %switch.done55
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$256", i64 0, i64 0), i64 8 }, %..string* %116, align 8
  %523 = bitcast { i64, i64 }* %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* %523, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %117, %..string* %116)
  %524 = load { i64, i64 }, { i64, i64 }* %117, align 8
  br label %if.done57

if.done57:                                        ; preds = %if.then56, %switch.done55
  %525 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 6
  %526 = load i8, i8* %525, align 1
  %527 = trunc i8 %526 to i1
  br i1 %527, label %if.then58, label %if.done59

if.then58:                                        ; preds = %if.done57
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$257", i64 0, i64 0), i64 11 }, %..string* %118, align 8
  %528 = bitcast { i64, i64 }* %119 to i8*
  call void @llvm.memset.p0i8.i64(i8* %528, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %119, %..string* %118)
  %529 = load { i64, i64 }, { i64, i64 }* %119, align 8
  br label %if.done59

if.done59:                                        ; preds = %if.then58, %if.done57
  %530 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 7
  %531 = load i8, i8* %530, align 1
  %532 = trunc i8 %531 to i1
  br i1 %532, label %if.then60, label %if.done61

if.then60:                                        ; preds = %if.done59
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$258", i64 0, i64 0), i64 7 }, %..string* %120, align 8
  %533 = bitcast { i64, i64 }* %121 to i8*
  call void @llvm.memset.p0i8.i64(i8* %533, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %121, %..string* %120)
  %534 = load { i64, i64 }, { i64, i64 }* %121, align 8
  %535 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %536 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %535, i32 0, i32 1
  %537 = load i64, i64* %536, align 8
  call void @runtime.print_u64(i64 %537)
  %538 = bitcast { i64, i64 }* %122 to i8*
  call void @llvm.memset.p0i8.i64(i8* %538, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %122, i8 32)
  %539 = load { i64, i64 }, { i64, i64 }* %122, align 8
  br label %if.done61

if.done61:                                        ; preds = %if.then60, %if.done59
  %540 = bitcast { i64, i64 }* %123 to i8*
  call void @llvm.memset.p0i8.i64(i8* %540, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %123, i8 123)
  %541 = load { i64, i64 }, { i64, i64 }* %123, align 8
  %542 = bitcast %..string* %124 to i8*
  call void @llvm.memset.p0i8.i64(i8* %542, i8 0, i64 16, i1 false)
  store i64 0, i64* %125, align 8
  %543 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 1
  %544 = load { %..string*, i64 }, { %..string*, i64 }* %543, align 8
  %545 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %543, i32 0, i32 1
  %546 = load i64, i64* %545, align 8
  store i64 %546, i64* %126, align 8
  store i64 -1, i64* %127, align 8
  br label %for.index.loop62

for.index.loop62:                                 ; preds = %if.done65, %if.done61
  %547 = load i64, i64* %127, align 8
  %548 = add i64 %547, 1
  store i64 %548, i64* %127, align 8
  %549 = load i64, i64* %126, align 8
  %550 = icmp slt i64 %548, %549
  br i1 %550, label %for.index.body63, label %for.index.done66

for.index.body63:                                 ; preds = %for.index.loop62
  %551 = load i64, i64* %127, align 8
  %552 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %543, i32 0, i32 0
  %553 = load %..string*, %..string** %552, align 8
  %554 = getelementptr %..string, %..string* %553, i64 %551
  %555 = load %..string, %..string* %554, align 8
  store %..string %555, %..string* %128, align 8
  store i64 %551, i64* %129, align 8
  %556 = load i64, i64* %129, align 8
  %557 = icmp sgt i64 %556, 0
  %558 = zext i1 %557 to i8
  %559 = trunc i8 %558 to i1
  br i1 %559, label %if.then64, label %if.done65

if.then64:                                        ; preds = %for.index.body63
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %130, align 8
  %560 = bitcast { i64, i64 }* %131 to i8*
  call void @llvm.memset.p0i8.i64(i8* %560, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %131, %..string* %130)
  %561 = load { i64, i64 }, { i64, i64 }* %131, align 8
  br label %if.done65

if.done65:                                        ; preds = %if.then64, %for.index.body63
  %562 = load %..string, %..string* %128, align 8
  %563 = bitcast { i64, i64 }* %132 to i8*
  call void @llvm.memset.p0i8.i64(i8* %563, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %132, %..string* %128)
  %564 = load { i64, i64 }, { i64, i64 }* %132, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$222", i64 0, i64 0), i64 2 }, %..string* %133, align 8
  %565 = bitcast { i64, i64 }* %134 to i8*
  call void @llvm.memset.p0i8.i64(i8* %565, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %134, %..string* %133)
  %566 = load { i64, i64 }, { i64, i64 }* %134, align 8
  %567 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %106, i32 0, i32 0
  %568 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %567, align 8
  %569 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %567, i32 0, i32 0
  %570 = load %runtime.Type_Info**, %runtime.Type_Info*** %569, align 8
  %571 = load i64, i64* %129, align 8
  %572 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %567, i32 0, i32 1
  %573 = load i64, i64* %572, align 8
  store %..string { i8* getelementptr inbounds ([71 x i8], [71 x i8]* @"csbs$239", i64 0, i64 0), i64 70 }, %..string* %135, align 8
  call void @runtime.bounds_check_error(%..string* %135, i32 328, i32 26, i64 %571, i64 %573)
  %574 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %570, i64 %571
  %575 = load %runtime.Type_Info*, %runtime.Type_Info** %574, align 8
  call void @runtime.print_type(%runtime.Type_Info* %575)
  br label %for.index.loop62

for.index.done66:                                 ; preds = %for.index.loop62
  %576 = bitcast { i64, i64 }* %136 to i8*
  call void @llvm.memset.p0i8.i64(i8* %576, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %136, i8 125)
  %577 = load { i64, i64 }, { i64, i64 }* %136, align 8
  br label %typeswitch.done92

typeswitch.body67:                                ; preds = %if.done
  %578 = bitcast i8* %215 to %runtime.Type_Info_Union*
  %579 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %578, align 8
  %580 = bitcast %runtime.Type_Info_Union* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* %580, i8 0, i64 48, i1 false)
  store %runtime.Type_Info_Union %579, %runtime.Type_Info_Union* %137, align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$259", i64 0, i64 0), i64 6 }, %..string* %138, align 8
  %581 = bitcast { i64, i64 }* %139 to i8*
  call void @llvm.memset.p0i8.i64(i8* %581, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %139, %..string* %138)
  %582 = load { i64, i64 }, { i64, i64 }* %139, align 8
  %583 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %137, i32 0, i32 4
  %584 = load i8, i8* %583, align 1
  %585 = trunc i8 %584 to i1
  br i1 %585, label %if.then68, label %if.done69

if.then68:                                        ; preds = %typeswitch.body67
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$258", i64 0, i64 0), i64 7 }, %..string* %140, align 8
  %586 = bitcast { i64, i64 }* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* %586, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %141, %..string* %140)
  %587 = load { i64, i64 }, { i64, i64 }* %141, align 8
  %588 = load %runtime.Type_Info*, %runtime.Type_Info** %1, align 8
  %589 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %588, i32 0, i32 1
  %590 = load i64, i64* %589, align 8
  call void @runtime.print_u64(i64 %590)
  br label %if.done69

if.done69:                                        ; preds = %if.then68, %typeswitch.body67
  %591 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %137, i32 0, i32 5
  %592 = load i8, i8* %591, align 1
  %593 = trunc i8 %592 to i1
  br i1 %593, label %if.then70, label %if.done71

if.then70:                                        ; preds = %if.done69
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$25a", i64 0, i64 0), i64 8 }, %..string* %142, align 8
  %594 = bitcast { i64, i64 }* %143 to i8*
  call void @llvm.memset.p0i8.i64(i8* %594, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %143, %..string* %142)
  %595 = load { i64, i64 }, { i64, i64 }* %143, align 8
  br label %if.done71

if.done71:                                        ; preds = %if.then70, %if.done69
  %596 = bitcast { i64, i64 }* %144 to i8*
  call void @llvm.memset.p0i8.i64(i8* %596, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %144, i8 123)
  %597 = load { i64, i64 }, { i64, i64 }* %144, align 8
  store %runtime.Type_Info* null, %runtime.Type_Info** %145, align 8
  store i64 0, i64* %146, align 8
  %598 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %137, i32 0, i32 0
  %599 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %598, align 8
  %600 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %598, i32 0, i32 1
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %147, align 8
  store i64 -1, i64* %148, align 8
  br label %for.index.loop72

for.index.loop72:                                 ; preds = %if.done75, %if.done71
  %602 = load i64, i64* %148, align 8
  %603 = add i64 %602, 1
  store i64 %603, i64* %148, align 8
  %604 = load i64, i64* %147, align 8
  %605 = icmp slt i64 %603, %604
  br i1 %605, label %for.index.body73, label %for.index.done76

for.index.body73:                                 ; preds = %for.index.loop72
  %606 = load i64, i64* %148, align 8
  %607 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %598, i32 0, i32 0
  %608 = load %runtime.Type_Info**, %runtime.Type_Info*** %607, align 8
  %609 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %608, i64 %606
  %610 = load %runtime.Type_Info*, %runtime.Type_Info** %609, align 8
  store %runtime.Type_Info* %610, %runtime.Type_Info** %149, align 8
  store i64 %606, i64* %150, align 8
  %611 = load i64, i64* %150, align 8
  %612 = icmp sgt i64 %611, 0
  %613 = zext i1 %612 to i8
  %614 = trunc i8 %613 to i1
  br i1 %614, label %if.then74, label %if.done75

if.then74:                                        ; preds = %for.index.body73
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %151, align 8
  %615 = bitcast { i64, i64 }* %152 to i8*
  call void @llvm.memset.p0i8.i64(i8* %615, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %152, %..string* %151)
  %616 = load { i64, i64 }, { i64, i64 }* %152, align 8
  br label %if.done75

if.done75:                                        ; preds = %if.then74, %for.index.body73
  %617 = load %runtime.Type_Info*, %runtime.Type_Info** %149, align 8
  call void @runtime.print_type(%runtime.Type_Info* %617)
  br label %for.index.loop72

for.index.done76:                                 ; preds = %for.index.loop72
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25b", i64 0, i64 0), i64 1 }, %..string* %153, align 8
  %618 = bitcast { i64, i64 }* %154 to i8*
  call void @llvm.memset.p0i8.i64(i8* %618, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %154, %..string* %153)
  %619 = load { i64, i64 }, { i64, i64 }* %154, align 8
  br label %typeswitch.done92

typeswitch.body77:                                ; preds = %if.done
  %620 = bitcast i8* %215 to %runtime.Type_Info_Enum*
  %621 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %620, align 8
  store %runtime.Type_Info_Enum %621, %runtime.Type_Info_Enum* %155, align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$25c", i64 0, i64 0), i64 5 }, %..string* %156, align 8
  %622 = bitcast { i64, i64 }* %157 to i8*
  call void @llvm.memset.p0i8.i64(i8* %622, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %157, %..string* %156)
  %623 = load { i64, i64 }, { i64, i64 }* %157, align 8
  %624 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %155, i32 0, i32 0
  %625 = load %runtime.Type_Info*, %runtime.Type_Info** %624, align 8
  call void @runtime.print_type(%runtime.Type_Info* %625)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25d", i64 0, i64 0), i64 2 }, %..string* %158, align 8
  %626 = bitcast { i64, i64 }* %159 to i8*
  call void @llvm.memset.p0i8.i64(i8* %626, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %159, %..string* %158)
  %627 = load { i64, i64 }, { i64, i64 }* %159, align 8
  %628 = bitcast %..string* %160 to i8*
  call void @llvm.memset.p0i8.i64(i8* %628, i8 0, i64 16, i1 false)
  store i64 0, i64* %161, align 8
  %629 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %155, i32 0, i32 1
  %630 = load { %..string*, i64 }, { %..string*, i64 }* %629, align 8
  %631 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %629, i32 0, i32 1
  %632 = load i64, i64* %631, align 8
  store i64 %632, i64* %162, align 8
  store i64 -1, i64* %163, align 8
  br label %for.index.loop78

for.index.loop78:                                 ; preds = %if.done81, %typeswitch.body77
  %633 = load i64, i64* %163, align 8
  %634 = add i64 %633, 1
  store i64 %634, i64* %163, align 8
  %635 = load i64, i64* %162, align 8
  %636 = icmp slt i64 %634, %635
  br i1 %636, label %for.index.body79, label %for.index.done82

for.index.body79:                                 ; preds = %for.index.loop78
  %637 = load i64, i64* %163, align 8
  %638 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %629, i32 0, i32 0
  %639 = load %..string*, %..string** %638, align 8
  %640 = getelementptr %..string, %..string* %639, i64 %637
  %641 = load %..string, %..string* %640, align 8
  store %..string %641, %..string* %164, align 8
  store i64 %637, i64* %165, align 8
  %642 = load i64, i64* %165, align 8
  %643 = icmp sgt i64 %642, 0
  %644 = zext i1 %643 to i8
  %645 = trunc i8 %644 to i1
  br i1 %645, label %if.then80, label %if.done81

if.then80:                                        ; preds = %for.index.body79
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %166, align 8
  %646 = bitcast { i64, i64 }* %167 to i8*
  call void @llvm.memset.p0i8.i64(i8* %646, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %167, %..string* %166)
  %647 = load { i64, i64 }, { i64, i64 }* %167, align 8
  br label %if.done81

if.done81:                                        ; preds = %if.then80, %for.index.body79
  %648 = load %..string, %..string* %164, align 8
  %649 = bitcast { i64, i64 }* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* %649, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %168, %..string* %164)
  %650 = load { i64, i64 }, { i64, i64 }* %168, align 8
  br label %for.index.loop78

for.index.done82:                                 ; preds = %for.index.loop78
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25b", i64 0, i64 0), i64 1 }, %..string* %169, align 8
  %651 = bitcast { i64, i64 }* %170 to i8*
  call void @llvm.memset.p0i8.i64(i8* %651, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %170, %..string* %169)
  %652 = load { i64, i64 }, { i64, i64 }* %170, align 8
  br label %typeswitch.done92

typeswitch.body83:                                ; preds = %if.done
  %653 = bitcast i8* %215 to %runtime.Type_Info_Bit_Set*
  %654 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %653, align 8
  store %runtime.Type_Info_Bit_Set %654, %runtime.Type_Info_Bit_Set* %171, align 8
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$25e", i64 0, i64 0), i64 8 }, %..string* %172, align 8
  %655 = bitcast { i64, i64 }* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* %655, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %173, %..string* %172)
  %656 = load { i64, i64 }, { i64, i64 }* %173, align 8
  %657 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 0
  %658 = load %runtime.Type_Info*, %runtime.Type_Info** %657, align 8
  %659 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %658)
  store %runtime.Type_Info* %659, %runtime.Type_Info** %174, align 8
  %660 = load %runtime.Type_Info*, %runtime.Type_Info** %174, align 8
  %661 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %660, i32 0, i32 5
  %662 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %661, align 8
  %663 = bitcast { [15 x i64], i64 }* %661 to i8*
  %664 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %661, i32 0, i32 1
  %665 = load i64, i64* %664, align 8
  switch i64 %665, label %typeswitch.default.body [
    i64 21, label %typeswitch.body84
    i64 3, label %typeswitch.body85
  ]

typeswitch.body84:                                ; preds = %typeswitch.body83
  %666 = bitcast i8* %663 to %runtime.Type_Info_Enum*
  %667 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %666, align 8
  store %runtime.Type_Info_Enum %667, %runtime.Type_Info_Enum* %175, align 8
  %668 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 0
  %669 = load %runtime.Type_Info*, %runtime.Type_Info** %668, align 8
  call void @runtime.print_type(%runtime.Type_Info* %669)
  br label %typeswitch.done

typeswitch.body85:                                ; preds = %typeswitch.body83
  %670 = bitcast i8* %663 to %runtime.Type_Info_Rune*
  %671 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %670, align 1
  store %runtime.Type_Info_Rune %671, %runtime.Type_Info_Rune* %176, align 1
  %672 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 2
  %673 = load i64, i64* %672, align 8
  %674 = trunc i64 %673 to i32
  call void @runtime.print_encoded_rune(i32 %674)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25f", i64 0, i64 0), i64 2 }, %..string* %177, align 8
  %675 = bitcast { i64, i64 }* %178 to i8*
  call void @llvm.memset.p0i8.i64(i8* %675, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %178, %..string* %177)
  %676 = load { i64, i64 }, { i64, i64 }* %178, align 8
  %677 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 3
  %678 = load i64, i64* %677, align 8
  %679 = trunc i64 %678 to i32
  call void @runtime.print_encoded_rune(i32 %679)
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %typeswitch.body83
  %680 = bitcast { [15 x i64], i64 }* %179 to i8*
  %681 = bitcast { [15 x i64], i64 }* %661 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %680, i8* align 1 %681, i64 128, i1 false)
  %682 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 2
  %683 = load i64, i64* %682, align 8
  call void @runtime.print_i64(i64 %683)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$25f", i64 0, i64 0), i64 2 }, %..string* %180, align 8
  %684 = bitcast { i64, i64 }* %181 to i8*
  call void @llvm.memset.p0i8.i64(i8* %684, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %181, %..string* %180)
  %685 = load { i64, i64 }, { i64, i64 }* %181, align 8
  %686 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 3
  %687 = load i64, i64* %686, align 8
  call void @runtime.print_i64(i64 %687)
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %typeswitch.default.body, %typeswitch.body85, %typeswitch.body84
  %688 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 1
  %689 = load %runtime.Type_Info*, %runtime.Type_Info** %688, align 8
  %690 = icmp ne %runtime.Type_Info* %689, null
  %691 = zext i1 %690 to i8
  %692 = trunc i8 %691 to i1
  br i1 %692, label %if.then86, label %if.done87

if.then86:                                        ; preds = %typeswitch.done
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$260", i64 0, i64 0), i64 2 }, %..string* %182, align 8
  %693 = bitcast { i64, i64 }* %183 to i8*
  call void @llvm.memset.p0i8.i64(i8* %693, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %183, %..string* %182)
  %694 = load { i64, i64 }, { i64, i64 }* %183, align 8
  %695 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %171, i32 0, i32 1
  %696 = load %runtime.Type_Info*, %runtime.Type_Info** %695, align 8
  call void @runtime.print_type(%runtime.Type_Info* %696)
  br label %if.done87

if.done87:                                        ; preds = %if.then86, %typeswitch.done
  %697 = bitcast { i64, i64 }* %184 to i8*
  call void @llvm.memset.p0i8.i64(i8* %697, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %184, i8 93)
  %698 = load { i64, i64 }, { i64, i64 }* %184, align 8
  br label %typeswitch.done92

typeswitch.body88:                                ; preds = %if.done
  %699 = bitcast i8* %215 to %runtime.Type_Info_Simd_Vector*
  %700 = load %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %699, align 8
  store %runtime.Type_Info_Simd_Vector %700, %runtime.Type_Info_Simd_Vector* %185, align 8
  store %..string { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"csbs$261", i64 0, i64 0), i64 6 }, %..string* %186, align 8
  %701 = bitcast { i64, i64 }* %187 to i8*
  call void @llvm.memset.p0i8.i64(i8* %701, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %187, %..string* %186)
  %702 = load { i64, i64 }, { i64, i64 }* %187, align 8
  %703 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %185, i32 0, i32 2
  %704 = load i64, i64* %703, align 8
  call void @runtime.print_u64(i64 %704)
  %705 = bitcast { i64, i64 }* %188 to i8*
  call void @llvm.memset.p0i8.i64(i8* %705, i8 0, i64 16, i1 false)
  call void @runtime.print_byte({ i64, i64 }* sret({ i64, i64 }*) %188, i8 93)
  %706 = load { i64, i64 }, { i64, i64 }* %188, align 8
  %707 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %185, i32 0, i32 0
  %708 = load %runtime.Type_Info*, %runtime.Type_Info** %707, align 8
  call void @runtime.print_type(%runtime.Type_Info* %708)
  br label %typeswitch.done92

typeswitch.body89:                                ; preds = %if.done
  %709 = bitcast i8* %215 to %runtime.Type_Info_Relative_Pointer*
  %710 = load %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %709, align 8
  store %runtime.Type_Info_Relative_Pointer %710, %runtime.Type_Info_Relative_Pointer* %189, align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$262", i64 0, i64 0), i64 10 }, %..string* %190, align 8
  %711 = bitcast { i64, i64 }* %191 to i8*
  call void @llvm.memset.p0i8.i64(i8* %711, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %191, %..string* %190)
  %712 = load { i64, i64 }, { i64, i64 }* %191, align 8
  %713 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %189, i32 0, i32 1
  %714 = load %runtime.Type_Info*, %runtime.Type_Info** %713, align 8
  call void @runtime.print_type(%runtime.Type_Info* %714)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$263", i64 0, i64 0), i64 2 }, %..string* %192, align 8
  %715 = bitcast { i64, i64 }* %193 to i8*
  call void @llvm.memset.p0i8.i64(i8* %715, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %193, %..string* %192)
  %716 = load { i64, i64 }, { i64, i64 }* %193, align 8
  %717 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %189, i32 0, i32 0
  %718 = load %runtime.Type_Info*, %runtime.Type_Info** %717, align 8
  call void @runtime.print_type(%runtime.Type_Info* %718)
  br label %typeswitch.done92

typeswitch.body90:                                ; preds = %if.done
  %719 = bitcast i8* %215 to %runtime.Type_Info_Relative_Slice*
  %720 = load %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %719, align 8
  store %runtime.Type_Info_Relative_Slice %720, %runtime.Type_Info_Relative_Slice* %194, align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$262", i64 0, i64 0), i64 10 }, %..string* %195, align 8
  %721 = bitcast { i64, i64 }* %196 to i8*
  call void @llvm.memset.p0i8.i64(i8* %721, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %196, %..string* %195)
  %722 = load { i64, i64 }, { i64, i64 }* %196, align 8
  %723 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %194, i32 0, i32 1
  %724 = load %runtime.Type_Info*, %runtime.Type_Info** %723, align 8
  call void @runtime.print_type(%runtime.Type_Info* %724)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$263", i64 0, i64 0), i64 2 }, %..string* %197, align 8
  %725 = bitcast { i64, i64 }* %198 to i8*
  call void @llvm.memset.p0i8.i64(i8* %725, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %198, %..string* %197)
  %726 = load { i64, i64 }, { i64, i64 }* %198, align 8
  %727 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %194, i32 0, i32 0
  %728 = load %runtime.Type_Info*, %runtime.Type_Info** %727, align 8
  call void @runtime.print_type(%runtime.Type_Info* %728)
  br label %typeswitch.done92

typeswitch.body91:                                ; preds = %if.done
  %729 = bitcast i8* %215 to %runtime.Type_Info_Matrix*
  %730 = load %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %729, align 8
  store %runtime.Type_Info_Matrix %730, %runtime.Type_Info_Matrix* %199, align 8
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$264", i64 0, i64 0), i64 7 }, %..string* %200, align 8
  %731 = bitcast { i64, i64 }* %201 to i8*
  call void @llvm.memset.p0i8.i64(i8* %731, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %201, %..string* %200)
  %732 = load { i64, i64 }, { i64, i64 }* %201, align 8
  %733 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %199, i32 0, i32 3
  %734 = load i64, i64* %733, align 8
  call void @runtime.print_u64(i64 %734)
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %202, align 8
  %735 = bitcast { i64, i64 }* %203 to i8*
  call void @llvm.memset.p0i8.i64(i8* %735, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %203, %..string* %202)
  %736 = load { i64, i64 }, { i64, i64 }* %203, align 8
  %737 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %199, i32 0, i32 4
  %738 = load i64, i64* %737, align 8
  call void @runtime.print_u64(i64 %738)
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$265", i64 0, i64 0), i64 1 }, %..string* %204, align 8
  %739 = bitcast { i64, i64 }* %205 to i8*
  call void @llvm.memset.p0i8.i64(i8* %739, i8 0, i64 16, i1 false)
  call void @runtime.print_string({ i64, i64 }* sret({ i64, i64 }*) %205, %..string* %204)
  %740 = load { i64, i64 }, { i64, i64 }* %205, align 8
  %741 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %199, i32 0, i32 0
  %742 = load %runtime.Type_Info*, %runtime.Type_Info** %741, align 8
  call void @runtime.print_type(%runtime.Type_Info* %742)
  br label %typeswitch.done92

typeswitch.done92:                                ; preds = %typeswitch.body91, %typeswitch.body90, %typeswitch.body89, %typeswitch.body88, %if.done87, %for.index.done82, %for.index.done76, %for.index.done66, %typeswitch.body49, %typeswitch.body48, %typeswitch.body47, %if.done46, %typeswitch.body43, %if.done42, %if.done30, %typeswitch.body22, %typeswitch.body21, %if.done20, %typeswitch.body16, %typeswitch.body15, %switch.done14, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %switch.done, %typeswitch.body, %if.done
  ret void
}

; Function Attrs: noreturn
declare x86_stdcallcc void @RaiseException(i32, i32, i32, i64*) #2

; Function Attrs: noreturn
define internal void @runtime.windows_trap_array_bounds-763() #2 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @RaiseException(i32 -1073741684, i32 0, i32 0, i64* null)
  unreachable
}

; Function Attrs: noreturn
define internal void @runtime.windows_trap_type_assertion-764() #2 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  call void @runtime.windows_trap_array_bounds-763()
  unreachable
}

define internal <2 x i64> @runtime.udivmod128(i128* %0, i128* %1, i128* %2) {
decls:
  %3 = alloca i128*, align 8
  %4 = alloca [2 x i64], align 8
  %5 = alloca [2 x i64], align 8
  %6 = alloca [2 x i64], align 8
  %7 = alloca [2 x i64], align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca <2 x i64>, align 16
  %11 = alloca <2 x i64>, align 16
  %12 = alloca <2 x i64>, align 16
  %13 = alloca <2 x i64>, align 16
  %14 = alloca <2 x i64>, align 16
  %15 = alloca <2 x i64>, align 16
  %16 = alloca <2 x i64>, align 16
  %17 = alloca <2 x i64>, align 16
  %18 = alloca <2 x i64>, align 16
  %19 = alloca i32, align 4
  %20 = alloca i128, align 8
  %21 = alloca i128, align 8
  %22 = alloca i128, align 16
  br label %entry

entry:                                            ; preds = %decls
  store i128* %2, i128** %3, align 8
  %23 = load i128, i128* %0, align 8
  %24 = bitcast i128* %0 to [2 x i64]*
  %25 = load [2 x i64], [2 x i64]* %24, align 8
  store [2 x i64] %25, [2 x i64]* %4, align 8
  %26 = load i128, i128* %1, align 8
  %27 = bitcast i128* %1 to [2 x i64]*
  %28 = load [2 x i64], [2 x i64]* %27, align 8
  store [2 x i64] %28, [2 x i64]* %5, align 8
  %29 = bitcast [2 x i64]* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 16, i1 false)
  %30 = bitcast [2 x i64]* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 16, i1 false)
  store i32 0, i32* %8, align 4
  %31 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %32 = load i64, i64* %31, align 8
  %33 = icmp eq i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done6

if.then:                                          ; preds = %entry
  %36 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 0
  %39 = zext i1 %38 to i8
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.then1, label %if.done3

if.then1:                                         ; preds = %if.then
  %41 = load i128*, i128** %3, align 8
  %42 = icmp ne i128* %41, null
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then2, label %if.done

if.then2:                                         ; preds = %if.then1
  %45 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %48 = load i64, i64* %47, align 8
  %49 = urem i64 %46, %48
  store i64 %49, i64* %9, align 8
  %50 = load i128*, i128** %3, align 8
  %51 = load i64, i64* %9, align 8
  %52 = zext i64 %51 to i128
  store i128 %52, i128* %50, align 8
  br label %if.done

if.done:                                          ; preds = %if.then2, %if.then1
  %53 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %56 = load i64, i64* %55, align 8
  %57 = udiv i64 %54, %56
  %58 = zext i64 %57 to i128
  %59 = bitcast <2 x i64>* %10 to i128*
  store i128 %58, i128* %59, align 8
  %60 = load <2 x i64>, <2 x i64>* %10, align 16
  ret <2 x i64> %60

if.done3:                                         ; preds = %if.then
  %61 = load i128*, i128** %3, align 8
  %62 = icmp ne i128* %61, null
  %63 = zext i1 %62 to i8
  %64 = trunc i8 %63 to i1
  br i1 %64, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.done3
  %65 = load i128*, i128** %3, align 8
  %66 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %67 = load i64, i64* %66, align 8
  %68 = zext i64 %67 to i128
  store i128 %68, i128* %65, align 8
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %if.done3
  %69 = bitcast <2 x i64>* %11 to i128*
  store i128 0, i128* %69, align 8
  %70 = load <2 x i64>, <2 x i64>* %11, align 16
  ret <2 x i64> %70

if.done6:                                         ; preds = %entry
  %71 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %72 = load i64, i64* %71, align 8
  %73 = icmp eq i64 %72, 0
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.done6
  %76 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %77 = load i64, i64* %76, align 8
  %78 = icmp eq i64 %77, 0
  %79 = zext i1 %78 to i8
  %80 = trunc i8 %79 to i1
  br i1 %80, label %if.then8, label %if.done11

if.then8:                                         ; preds = %if.then7
  %81 = load i128*, i128** %3, align 8
  %82 = icmp ne i128* %81, null
  %83 = zext i1 %82 to i8
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then9, label %if.done10

if.then9:                                         ; preds = %if.then8
  %85 = load i128*, i128** %3, align 8
  %86 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %89 = load i64, i64* %88, align 8
  %90 = urem i64 %87, %89
  %91 = zext i64 %90 to i128
  store i128 %91, i128* %85, align 8
  br label %if.done10

if.done10:                                        ; preds = %if.then9, %if.then8
  %92 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %95 = load i64, i64* %94, align 8
  %96 = udiv i64 %93, %95
  %97 = zext i64 %96 to i128
  %98 = bitcast <2 x i64>* %12 to i128*
  store i128 %97, i128* %98, align 8
  %99 = load <2 x i64>, <2 x i64>* %12, align 16
  ret <2 x i64> %99

if.done11:                                        ; preds = %if.then7
  %100 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %101 = load i64, i64* %100, align 8
  %102 = icmp eq i64 %101, 0
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then12, label %if.done15

if.then12:                                        ; preds = %if.done11
  %105 = load i128*, i128** %3, align 8
  %106 = icmp ne i128* %105, null
  %107 = zext i1 %106 to i8
  %108 = trunc i8 %107 to i1
  br i1 %108, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.then12
  %109 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %110 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %111 = load i64, i64* %110, align 8
  %112 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %113 = load i64, i64* %112, align 8
  %114 = urem i64 %111, %113
  store i64 %114, i64* %109, align 8
  %115 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  store i64 0, i64* %115, align 8
  %116 = load i128*, i128** %3, align 8
  %117 = load [2 x i64], [2 x i64]* %7, align 8
  %118 = bitcast [2 x i64]* %7 to i128*
  %119 = load i128, i128* %118, align 8
  store i128 %119, i128* %116, align 8
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.then12
  %120 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %123 = load i64, i64* %122, align 8
  %124 = udiv i64 %121, %123
  %125 = zext i64 %124 to i128
  %126 = bitcast <2 x i64>* %13 to i128*
  store i128 %125, i128* %126, align 8
  %127 = load <2 x i64>, <2 x i64>* %13, align 16
  ret <2 x i64> %127

if.done15:                                        ; preds = %if.done11
  %128 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %131 = load i64, i64* %130, align 8
  %132 = sub i64 %131, 1
  %133 = and i64 %129, %132
  %134 = icmp eq i64 %133, 0
  %135 = zext i1 %134 to i8
  %136 = trunc i8 %135 to i1
  br i1 %136, label %if.then16, label %if.done19

if.then16:                                        ; preds = %if.done15
  %137 = load i128*, i128** %3, align 8
  %138 = icmp ne i128* %137, null
  %139 = zext i1 %138 to i8
  %140 = trunc i8 %139 to i1
  br i1 %140, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.then16
  %141 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %142 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %143 = load i64, i64* %142, align 8
  store i64 %143, i64* %141, align 8
  %144 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %145 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %148 = load i64, i64* %147, align 8
  %149 = sub i64 %148, 1
  %150 = and i64 %146, %149
  store i64 %150, i64* %144, align 8
  %151 = load i128*, i128** %3, align 8
  %152 = load [2 x i64], [2 x i64]* %7, align 8
  %153 = bitcast [2 x i64]* %7 to i128*
  %154 = load i128, i128* %153, align 8
  store i128 %154, i128* %151, align 8
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.then16
  %155 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %158 = load i64, i64* %157, align 8
  %159 = call i64 @llvm.cttz.i64(i64 %158, i1 false)
  %160 = icmp ult i64 %159, 64
  %161 = lshr i64 %156, %159
  %162 = select i1 %160, i64 %161, i64 0
  %163 = zext i64 %162 to i128
  %164 = bitcast <2 x i64>* %14 to i128*
  store i128 %163, i128* %164, align 8
  %165 = load <2 x i64>, <2 x i64>* %14, align 16
  ret <2 x i64> %165

if.done19:                                        ; preds = %if.done15
  %166 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %167 = load i64, i64* %166, align 8
  %168 = call i64 @llvm.ctlz.i64(i64 %167, i1 false)
  %169 = trunc i64 %168 to i32
  %170 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %171 = load i64, i64* %170, align 8
  %172 = call i64 @llvm.ctlz.i64(i64 %171, i1 false)
  %173 = trunc i64 %172 to i32
  %174 = sub i32 %169, %173
  store i32 %174, i32* %8, align 4
  %175 = load i32, i32* %8, align 4
  %176 = icmp ugt i32 %175, 62
  %177 = zext i1 %176 to i8
  %178 = trunc i8 %177 to i1
  br i1 %178, label %if.then20, label %if.done23

if.then20:                                        ; preds = %if.done19
  %179 = load i128*, i128** %3, align 8
  %180 = icmp ne i128* %179, null
  %181 = zext i1 %180 to i8
  %182 = trunc i8 %181 to i1
  br i1 %182, label %if.then21, label %if.done22

if.then21:                                        ; preds = %if.then20
  %183 = load i128*, i128** %3, align 8
  %184 = load i128, i128* %0, align 8
  store i128 %184, i128* %183, align 8
  br label %if.done22

if.done22:                                        ; preds = %if.then21, %if.then20
  %185 = bitcast <2 x i64>* %15 to i128*
  store i128 0, i128* %185, align 8
  %186 = load <2 x i64>, <2 x i64>* %15, align 16
  ret <2 x i64> %186

if.done23:                                        ; preds = %if.done19
  %187 = load i32, i32* %8, align 4
  %188 = add i32 %187, 1
  store i32 %188, i32* %8, align 4
  %189 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 0, i64* %189, align 8
  %190 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %191 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %192 = load i64, i64* %191, align 8
  %193 = load i32, i32* %8, align 4
  %194 = sub i32 64, %193
  %195 = zext i32 %194 to i64
  %196 = icmp ult i64 %195, 64
  %197 = shl i64 %192, %195
  %198 = select i1 %196, i64 %197, i64 0
  store i64 %198, i64* %190, align 8
  %199 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %200 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %201 = load i64, i64* %200, align 8
  %202 = load i32, i32* %8, align 4
  %203 = zext i32 %202 to i64
  %204 = icmp ult i64 %203, 64
  %205 = lshr i64 %201, %203
  %206 = select i1 %204, i64 %205, i64 0
  store i64 %206, i64* %199, align 8
  %207 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %208 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %209 = load i64, i64* %208, align 8
  %210 = load i32, i32* %8, align 4
  %211 = sub i32 64, %210
  %212 = zext i32 %211 to i64
  %213 = icmp ult i64 %212, 64
  %214 = shl i64 %209, %212
  %215 = select i1 %213, i64 %214, i64 0
  %216 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %217 = load i64, i64* %216, align 8
  %218 = load i32, i32* %8, align 4
  %219 = zext i32 %218 to i64
  %220 = icmp ult i64 %219, 64
  %221 = lshr i64 %217, %219
  %222 = select i1 %220, i64 %221, i64 0
  %223 = or i64 %215, %222
  store i64 %223, i64* %207, align 8
  br label %if.done42

if.else:                                          ; preds = %if.done6
  %224 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %225 = load i64, i64* %224, align 8
  %226 = icmp eq i64 %225, 0
  %227 = zext i1 %226 to i8
  %228 = trunc i8 %227 to i1
  br i1 %228, label %if.then24, label %if.else33

if.then24:                                        ; preds = %if.else
  %229 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %232, 1
  %234 = and i64 %230, %233
  %235 = icmp eq i64 %234, 0
  %236 = zext i1 %235 to i8
  %237 = trunc i8 %236 to i1
  br i1 %237, label %if.then25, label %if.done30

if.then25:                                        ; preds = %if.then24
  %238 = load i128*, i128** %3, align 8
  %239 = icmp ne i128* %238, null
  %240 = zext i1 %239 to i8
  %241 = trunc i8 %240 to i1
  br i1 %241, label %if.then26, label %if.done27

if.then26:                                        ; preds = %if.then25
  %242 = load i128*, i128** %3, align 8
  %243 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %244 = load i64, i64* %243, align 8
  %245 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %246 = load i64, i64* %245, align 8
  %247 = sub i64 %246, 1
  %248 = and i64 %244, %247
  %249 = zext i64 %248 to i128
  store i128 %249, i128* %242, align 8
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %if.then25
  %250 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %251 = load i64, i64* %250, align 8
  %252 = icmp eq i64 %251, 1
  %253 = zext i1 %252 to i8
  %254 = trunc i8 %253 to i1
  br i1 %254, label %if.then28, label %if.done29

if.then28:                                        ; preds = %if.done27
  %255 = load i128, i128* %0, align 8
  %256 = bitcast <2 x i64>* %16 to i128*
  store i128 %255, i128* %256, align 8
  %257 = load <2 x i64>, <2 x i64>* %16, align 16
  ret <2 x i64> %257

if.done29:                                        ; preds = %if.done27
  %258 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %259 = load i64, i64* %258, align 8
  %260 = call i64 @llvm.cttz.i64(i64 %259, i1 false)
  %261 = trunc i64 %260 to i32
  store i32 %261, i32* %8, align 4
  %262 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %263 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %264 = load i64, i64* %263, align 8
  %265 = load i32, i32* %8, align 4
  %266 = zext i32 %265 to i64
  %267 = icmp ult i64 %266, 64
  %268 = lshr i64 %264, %266
  %269 = select i1 %267, i64 %268, i64 0
  store i64 %269, i64* %262, align 8
  %270 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %271 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %272 = load i64, i64* %271, align 8
  %273 = load i32, i32* %8, align 4
  %274 = sub i32 64, %273
  %275 = zext i32 %274 to i64
  %276 = icmp ult i64 %275, 64
  %277 = shl i64 %272, %275
  %278 = select i1 %276, i64 %277, i64 0
  %279 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %280 = load i64, i64* %279, align 8
  %281 = load i32, i32* %8, align 4
  %282 = zext i32 %281 to i64
  %283 = icmp ult i64 %282, 64
  %284 = lshr i64 %280, %282
  %285 = select i1 %283, i64 %284, i64 0
  %286 = or i64 %278, %285
  store i64 %286, i64* %270, align 8
  %287 = load [2 x i64], [2 x i64]* %6, align 8
  %288 = bitcast [2 x i64]* %6 to i128*
  %289 = load i128, i128* %288, align 8
  %290 = bitcast <2 x i64>* %17 to i128*
  store i128 %289, i128* %290, align 8
  %291 = load <2 x i64>, <2 x i64>* %17, align 16
  ret <2 x i64> %291

if.done30:                                        ; preds = %if.then24
  %292 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 0
  %293 = load i64, i64* %292, align 8
  %294 = call i64 @llvm.ctlz.i64(i64 %293, i1 false)
  %295 = trunc i64 %294 to i32
  %296 = add i32 65, %295
  %297 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %298 = load i64, i64* %297, align 8
  %299 = call i64 @llvm.ctlz.i64(i64 %298, i1 false)
  %300 = trunc i64 %299 to i32
  %301 = sub i32 %296, %300
  store i32 %301, i32* %8, align 4
  %302 = load i32, i32* %8, align 4
  %303 = icmp eq i32 %302, 64
  %304 = zext i1 %303 to i8
  %305 = icmp eq i8 1, %304
  br i1 %305, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %if.done30
  %306 = load i32, i32* %8, align 4
  %307 = icmp ult i32 %306, 64
  %308 = zext i1 %307 to i8
  %309 = icmp eq i8 1, %308
  br i1 %309, label %switch.case.body32, label %switch.case.next31

switch.case.body:                                 ; preds = %if.done30
  %310 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 0, i64* %310, align 8
  %311 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %312 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %313 = load i64, i64* %312, align 8
  store i64 %313, i64* %311, align 8
  %314 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  store i64 0, i64* %314, align 8
  %315 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %316 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %317 = load i64, i64* %316, align 8
  store i64 %317, i64* %315, align 8
  br label %switch.done

switch.case.next31:                               ; preds = %switch.case.next
  br label %switch.default.body

switch.case.body32:                               ; preds = %switch.case.next
  %318 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 0, i64* %318, align 8
  %319 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %320 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %321 = load i64, i64* %320, align 8
  %322 = load i32, i32* %8, align 4
  %323 = sub i32 64, %322
  %324 = zext i32 %323 to i64
  %325 = icmp ult i64 %324, 64
  %326 = shl i64 %321, %324
  %327 = select i1 %325, i64 %326, i64 0
  store i64 %327, i64* %319, align 8
  %328 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %329 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %330 = load i64, i64* %329, align 8
  %331 = load i32, i32* %8, align 4
  %332 = zext i32 %331 to i64
  %333 = icmp ult i64 %332, 64
  %334 = lshr i64 %330, %332
  %335 = select i1 %333, i64 %334, i64 0
  store i64 %335, i64* %328, align 8
  %336 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %337 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %338 = load i64, i64* %337, align 8
  %339 = load i32, i32* %8, align 4
  %340 = sub i32 64, %339
  %341 = zext i32 %340 to i64
  %342 = icmp ult i64 %341, 64
  %343 = shl i64 %338, %341
  %344 = select i1 %342, i64 %343, i64 0
  %345 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %346 = load i64, i64* %345, align 8
  %347 = load i32, i32* %8, align 4
  %348 = zext i32 %347 to i64
  %349 = icmp ult i64 %348, 64
  %350 = lshr i64 %346, %348
  %351 = select i1 %349, i64 %350, i64 0
  %352 = or i64 %344, %351
  store i64 %352, i64* %336, align 8
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.next31
  %353 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %354 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %355 = load i64, i64* %354, align 8
  %356 = load i32, i32* %8, align 4
  %357 = sub i32 128, %356
  %358 = zext i32 %357 to i64
  %359 = icmp ult i64 %358, 64
  %360 = shl i64 %355, %358
  %361 = select i1 %359, i64 %360, i64 0
  store i64 %361, i64* %353, align 8
  %362 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %363 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %364 = load i64, i64* %363, align 8
  %365 = load i32, i32* %8, align 4
  %366 = sub i32 128, %365
  %367 = zext i32 %366 to i64
  %368 = icmp ult i64 %367, 64
  %369 = shl i64 %364, %367
  %370 = select i1 %368, i64 %369, i64 0
  %371 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %372 = load i64, i64* %371, align 8
  %373 = load i32, i32* %8, align 4
  %374 = sub i32 %373, 64
  %375 = zext i32 %374 to i64
  %376 = icmp ult i64 %375, 64
  %377 = lshr i64 %372, %375
  %378 = select i1 %376, i64 %377, i64 0
  %379 = or i64 %370, %378
  store i64 %379, i64* %362, align 8
  %380 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  store i64 0, i64* %380, align 8
  %381 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %382 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %383 = load i64, i64* %382, align 8
  %384 = load i32, i32* %8, align 4
  %385 = sub i32 %384, 64
  %386 = zext i32 %385 to i64
  %387 = icmp ult i64 %386, 64
  %388 = lshr i64 %383, %386
  %389 = select i1 %387, i64 %388, i64 0
  store i64 %389, i64* %381, align 8
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body32, %switch.case.body
  br label %if.done41

if.else33:                                        ; preds = %if.else
  %390 = getelementptr [2 x i64], [2 x i64]* %5, i64 0, i64 1
  %391 = load i64, i64* %390, align 8
  %392 = call i64 @llvm.ctlz.i64(i64 %391, i1 false)
  %393 = trunc i64 %392 to i32
  %394 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %395 = load i64, i64* %394, align 8
  %396 = call i64 @llvm.ctlz.i64(i64 %395, i1 false)
  %397 = trunc i64 %396 to i32
  %398 = sub i32 %393, %397
  store i32 %398, i32* %8, align 4
  %399 = load i32, i32* %8, align 4
  %400 = icmp ugt i32 %399, 63
  %401 = zext i1 %400 to i8
  %402 = trunc i8 %401 to i1
  br i1 %402, label %if.then34, label %if.done37

if.then34:                                        ; preds = %if.else33
  %403 = load i128*, i128** %3, align 8
  %404 = icmp ne i128* %403, null
  %405 = zext i1 %404 to i8
  %406 = trunc i8 %405 to i1
  br i1 %406, label %if.then35, label %if.done36

if.then35:                                        ; preds = %if.then34
  %407 = load i128*, i128** %3, align 8
  %408 = load i128, i128* %0, align 8
  store i128 %408, i128* %407, align 8
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %if.then34
  %409 = bitcast <2 x i64>* %18 to i128*
  store i128 0, i128* %409, align 8
  %410 = load <2 x i64>, <2 x i64>* %18, align 16
  ret <2 x i64> %410

if.done37:                                        ; preds = %if.else33
  %411 = load i32, i32* %8, align 4
  %412 = add i32 %411, 1
  store i32 %412, i32* %8, align 4
  %413 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 0, i64* %413, align 8
  %414 = load i32, i32* %8, align 4
  %415 = icmp eq i32 %414, 64
  %416 = zext i1 %415 to i8
  %417 = trunc i8 %416 to i1
  br i1 %417, label %if.then38, label %if.else39

if.then38:                                        ; preds = %if.done37
  %418 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %419 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %420 = load i64, i64* %419, align 8
  store i64 %420, i64* %418, align 8
  %421 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  store i64 0, i64* %421, align 8
  %422 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %423 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %424 = load i64, i64* %423, align 8
  store i64 %424, i64* %422, align 8
  br label %if.done40

if.else39:                                        ; preds = %if.done37
  %425 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %426 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %427 = load i64, i64* %426, align 8
  %428 = load i32, i32* %8, align 4
  %429 = zext i32 %428 to i64
  %430 = icmp ult i64 %429, 64
  %431 = lshr i64 %427, %429
  %432 = select i1 %430, i64 %431, i64 0
  store i64 %432, i64* %425, align 8
  %433 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %434 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %435 = load i64, i64* %434, align 8
  %436 = load i32, i32* %8, align 4
  %437 = sub i32 64, %436
  %438 = zext i32 %437 to i64
  %439 = icmp ult i64 %438, 64
  %440 = shl i64 %435, %438
  %441 = select i1 %439, i64 %440, i64 0
  %442 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %443 = load i64, i64* %442, align 8
  %444 = load i32, i32* %8, align 4
  %445 = zext i32 %444 to i64
  %446 = icmp ult i64 %445, 64
  %447 = lshr i64 %443, %445
  %448 = select i1 %446, i64 %447, i64 0
  %449 = or i64 %441, %448
  store i64 %449, i64* %433, align 8
  %450 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %451 = getelementptr [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %452 = load i64, i64* %451, align 8
  %453 = load i32, i32* %8, align 4
  %454 = sub i32 64, %453
  %455 = zext i32 %454 to i64
  %456 = icmp ult i64 %455, 64
  %457 = shl i64 %452, %455
  %458 = select i1 %456, i64 %457, i64 0
  store i64 %458, i64* %450, align 8
  br label %if.done40

if.done40:                                        ; preds = %if.else39, %if.then38
  br label %if.done41

if.done41:                                        ; preds = %if.done40, %switch.done
  br label %if.done42

if.done42:                                        ; preds = %if.done41, %if.done23
  store i32 0, i32* %19, align 4
  store i128 0, i128* %20, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %if.done42
  %459 = load i32, i32* %8, align 4
  %460 = icmp ugt i32 %459, 0
  %461 = zext i1 %460 to i8
  %462 = trunc i8 %461 to i1
  br i1 %462, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %463 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %464 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 1
  %465 = load i64, i64* %464, align 8
  %466 = shl i64 %465, 1
  %467 = select i1 true, i64 %466, i64 0
  %468 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %469 = load i64, i64* %468, align 8
  %470 = lshr i64 %469, 63
  %471 = select i1 true, i64 %470, i64 0
  %472 = or i64 %467, %471
  store i64 %472, i64* %463, align 8
  %473 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %474 = getelementptr [2 x i64], [2 x i64]* %7, i64 0, i64 0
  %475 = load i64, i64* %474, align 8
  %476 = shl i64 %475, 1
  %477 = select i1 true, i64 %476, i64 0
  %478 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %479 = load i64, i64* %478, align 8
  %480 = lshr i64 %479, 63
  %481 = select i1 true, i64 %480, i64 0
  %482 = or i64 %477, %481
  store i64 %482, i64* %473, align 8
  %483 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %484 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 1
  %485 = load i64, i64* %484, align 8
  %486 = shl i64 %485, 1
  %487 = select i1 true, i64 %486, i64 0
  %488 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %489 = load i64, i64* %488, align 8
  %490 = lshr i64 %489, 63
  %491 = select i1 true, i64 %490, i64 0
  %492 = or i64 %487, %491
  store i64 %492, i64* %483, align 8
  %493 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %494 = getelementptr [2 x i64], [2 x i64]* %6, i64 0, i64 0
  %495 = load i64, i64* %494, align 8
  %496 = shl i64 %495, 1
  %497 = select i1 true, i64 %496, i64 0
  %498 = load i32, i32* %19, align 4
  %499 = zext i32 %498 to i64
  %500 = or i64 %497, %499
  store i64 %500, i64* %493, align 8
  %501 = load [2 x i64], [2 x i64]* %7, align 8
  %502 = bitcast [2 x i64]* %7 to i128*
  %503 = load i128, i128* %502, align 8
  store i128 %503, i128* %20, align 8
  %504 = load i128, i128* %1, align 8
  %505 = load i128, i128* %20, align 8
  %506 = sub i128 %504, %505
  %507 = sub i128 %506, 1
  %508 = ashr i128 %507, 127
  %509 = select i1 true, i128 %508, i128 0
  store i128 %509, i128* %21, align 8
  %510 = load i128, i128* %21, align 8
  %511 = and i128 %510, 1
  %512 = trunc i128 %511 to i32
  store i32 %512, i32* %19, align 4
  %513 = load i128, i128* %1, align 8
  %514 = load i128, i128* %21, align 8
  %515 = and i128 %513, %514
  %516 = load i128, i128* %20, align 8
  %517 = sub i128 %516, %515
  store i128 %517, i128* %20, align 8
  %518 = load i128, i128* %20, align 8
  %519 = bitcast i128* %20 to [2 x i64]*
  %520 = load [2 x i64], [2 x i64]* %519, align 8
  store [2 x i64] %520, [2 x i64]* %7, align 8
  br label %for.post

for.post:                                         ; preds = %for.body
  %521 = load i32, i32* %8, align 4
  %522 = sub i32 %521, 1
  store i32 %522, i32* %8, align 4
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %523 = load [2 x i64], [2 x i64]* %6, align 8
  %524 = bitcast [2 x i64]* %6 to i128*
  %525 = load i128, i128* %524, align 8
  %526 = shl i128 %525, 1
  %527 = select i1 true, i128 %526, i128 0
  %528 = load i32, i32* %19, align 4
  %529 = zext i32 %528 to i128
  %530 = or i128 %527, %529
  store i128 %530, i128* %22, align 8
  %531 = load i128*, i128** %3, align 8
  %532 = icmp ne i128* %531, null
  %533 = zext i1 %532 to i8
  %534 = trunc i8 %533 to i1
  br i1 %534, label %if.then43, label %if.done44

if.then43:                                        ; preds = %for.done
  %535 = load i128*, i128** %3, align 8
  %536 = load i128, i128* %20, align 8
  store i128 %536, i128* %535, align 8
  br label %if.done44

if.done44:                                        ; preds = %if.then43, %for.done
  %537 = load i128, i128* %22, align 8
  %538 = bitcast i128* %22 to <2 x i64>*
  %539 = load <2 x i64>, <2 x i64>* %538, align 16
  ret <2 x i64> %539
}

define internal void @main.main(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca %enbench.DataToWrite, align 8
  %1 = alloca %..string, align 8
  %2 = alloca %enbench.Backings, align 8
  %3 = alloca %enbench.Backings, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  %5 = alloca { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %8 = alloca i16, align 2
  %9 = alloca %..string, align 8
  %10 = alloca %runtime.Logger, align 8
  %11 = alloca %runtime.Context, align 8
  %12 = alloca %..string, align 8
  %13 = alloca %..any, align 8
  %14 = alloca { %..any*, i64 }, align 8
  %15 = alloca [1 x %..any], align 8
  %16 = alloca %..string, align 8
  %17 = alloca %runtime.Source_Code_Location, align 8
  %18 = alloca i32, align 4
  %19 = alloca %..any, align 8
  %20 = alloca %..any, align 8
  %21 = alloca i8*, align 8
  %22 = alloca { %..any*, i64 }, align 8
  %23 = alloca [2 x %..any], align 8
  %24 = alloca %..string, align 8
  %25 = alloca %runtime.Source_Code_Location, align 8
  %26 = alloca %..string, align 8
  %27 = alloca %..any, align 8
  %28 = alloca { %..any*, i64 }, align 8
  %29 = alloca [1 x %..any], align 8
  %30 = alloca %..string, align 8
  %31 = alloca %runtime.Source_Code_Location, align 8
  %32 = alloca %sdl2.Window*, align 8
  %33 = alloca %..any, align 8
  %34 = alloca i8*, align 8
  %35 = alloca { %..any*, i64 }, align 8
  %36 = alloca [1 x %..any], align 8
  %37 = alloca %..string, align 8
  %38 = alloca %runtime.Source_Code_Location, align 8
  %39 = alloca %..string, align 8
  %40 = alloca %..any, align 8
  %41 = alloca { %..any*, i64 }, align 8
  %42 = alloca [1 x %..any], align 8
  %43 = alloca %..string, align 8
  %44 = alloca %runtime.Source_Code_Location, align 8
  %45 = alloca i8*, align 8
  %46 = alloca %..any, align 8
  %47 = alloca i8*, align 8
  %48 = alloca { %..any*, i64 }, align 8
  %49 = alloca [1 x %..any], align 8
  %50 = alloca %..string, align 8
  %51 = alloca %runtime.Source_Code_Location, align 8
  %52 = alloca %..any, align 8
  %53 = alloca i8*, align 8
  %54 = alloca { %..any*, i64 }, align 8
  %55 = alloca [1 x %..any], align 8
  %56 = alloca %..string, align 8
  %57 = alloca %runtime.Source_Code_Location, align 8
  %58 = alloca %main.Imgui_State, align 8
  %59 = alloca %main.Imgui_State, align 8
  %60 = alloca i8, align 1
  %61 = alloca i8, align 1
  %62 = alloca %sdl2.Event, align 8
  %63 = alloca %..string, align 8
  %64 = alloca %..any, align 8
  %65 = alloca { %..any*, i64 }, align 8
  %66 = alloca [1 x %..any], align 8
  %67 = alloca %..string, align 8
  %68 = alloca %runtime.Source_Code_Location, align 8
  %69 = alloca %sdl2.Event, align 8
  %70 = alloca %sdl2.Event, align 8
  %71 = alloca %imgui.IO*, align 8
  %72 = alloca i64, align 8
  %73 = alloca %imgui.IO*, align 8
  %74 = alloca %..string, align 8
  %75 = alloca %..any, align 8
  %76 = alloca { %..any*, i64 }, align 8
  %77 = alloca [1 x %..any], align 8
  %78 = alloca %..string, align 8
  %79 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  %80 = bitcast i8* %__.context_ptr to %runtime.Context*
  %81 = bitcast %enbench.DataToWrite* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* %81, i8 0, i64 200, i1 false)
  %82 = bitcast %runtime.Context* %80 to i8*
  call void @enbench.init_dtw(%enbench.DataToWrite* %0, i8* %82)
  store %..string { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"csbs$266", i64 0, i64 0), i64 27 }, %..string* %1, align 8
  %83 = bitcast %runtime.Context* %80 to i8*
  call void @enbench.read_file_by_lines_in_whole_sweepscan(%..string* %1, %enbench.DataToWrite* %0, i8* %83)
  %84 = bitcast %enbench.Backings* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %84, i8 0, i64 120, i1 false)
  %85 = bitcast %enbench.Backings* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %85, i8 0, i64 120, i1 false)
  %86 = getelementptr inbounds %runtime.Context, %runtime.Context* %80, i32 0, i32 0
  %87 = load %runtime.Allocator, %runtime.Allocator* %86, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 33, i32 24, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %4, align 8
  %88 = bitcast { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %88, i8 0, i64 48, i1 false)
  %89 = bitcast %runtime.Context* %80 to i8*
  call void @runtime.make_dynamic_array-48751({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* sret({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }*) %5, %runtime.Allocator* %86, %runtime.Source_Code_Location* %4, i8* %89)
  %90 = load { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5, align 8
  %91 = getelementptr inbounds { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5, i32 0, i32 0
  %92 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %91, align 8
  %93 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %3, i32 0, i32 0
  store { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } %92, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %93, align 8
  %94 = getelementptr inbounds %runtime.Context, %runtime.Context* %80, i32 0, i32 0
  %95 = load %runtime.Allocator, %runtime.Allocator* %94, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 34, i32 36, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %6, align 8
  %96 = bitcast { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 48, i1 false)
  %97 = bitcast %runtime.Context* %80 to i8*
  call void @runtime.make_dynamic_array-48779({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* sret({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }*) %7, %runtime.Allocator* %94, %runtime.Source_Code_Location* %6, i8* %97)
  %98 = load { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %7, align 8
  %99 = getelementptr inbounds { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %7, i32 0, i32 0
  %100 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %99, align 8
  %101 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %3, i32 0, i32 1
  store { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } %100, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %101, align 8
  %102 = load %enbench.Backings, %enbench.Backings* %3, align 8
  %103 = bitcast %enbench.Backings* %2 to i8*
  %104 = bitcast %enbench.Backings* %3 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %103, i8* align 8 %104, i64 120, i1 false)
  %105 = bitcast %runtime.Context* %80 to i8*
  call void @enbench.backing_from_dtw(%enbench.Backings* %2, %enbench.DataToWrite* %0, i8* %105)
  store i16 97, i16* %8, align 2
  %106 = load i16, i16* %8, align 2
  store %..string zeroinitializer, %..string* %9, align 8
  %107 = bitcast %runtime.Logger* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %107, i8 0, i64 32, i1 false)
  %108 = bitcast %runtime.Context* %80 to i8*
  call void @log.create_console_logger(%runtime.Logger* sret(%runtime.Logger*) %10, i64 0, i16 %106, %..string* %9, i8* %108)
  %109 = load %runtime.Logger, %runtime.Logger* %10, align 8
  %110 = load %runtime.Context, %runtime.Context* %80, align 8
  %111 = bitcast %runtime.Context* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %111, i8 0, i64 96, i1 false)
  %112 = bitcast %runtime.Context* %11 to i8*
  %113 = bitcast %runtime.Context* %80 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %112, i8* align 1 %113, i64 96, i1 false)
  %114 = getelementptr inbounds %runtime.Context, %runtime.Context* %11, i32 0, i32 3
  store %runtime.Logger %109, %runtime.Logger* %114, align 8
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$269", i64 0, i64 0), i64 23 }, %..string* %12, align 8
  %115 = bitcast %..string* %12 to i8*
  %116 = getelementptr inbounds %..any, %..any* %13, i32 0, i32 0
  %117 = getelementptr inbounds %..any, %..any* %13, i32 0, i32 1
  store i8* %115, i8** %116, align 8
  store i64 432345564227567617, i64* %117, align 8
  %118 = load %..any, %..any* %13, align 8
  %119 = bitcast { %..any*, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %119, i8 0, i64 16, i1 false)
  %120 = bitcast [1 x %..any]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %120, i8 0, i64 16, i1 false)
  %121 = getelementptr [1 x %..any], [1 x %..any]* %15, i64 0, i64 0
  store %..any %118, %..any* %121, align 8
  %122 = getelementptr [1 x %..any], [1 x %..any]* %15, i64 0, i64 0
  %123 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %14, i32 0, i32 0
  store %..any* %122, %..any** %123, align 8
  %124 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %14, i32 0, i32 1
  store i64 1, i64* %124, align 8
  %125 = load { %..any*, i64 }, { %..any*, i64 }* %14, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %16, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 48, i32 9, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %17, align 8
  %126 = bitcast %runtime.Context* %11 to i8*
  call void @log.info({ %..any*, i64 }* %14, %..string* %16, %runtime.Source_Code_Location* %17, i8* %126)
  %127 = call i32 @SDL_Init(i32 32)
  store i32 %127, i32* %18, align 4
  %128 = load i32, i32* %18, align 4
  %129 = icmp ne i32 %128, 0
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %132 = load i32, i32* %18, align 4
  %133 = call i8* @SDL_GetError()
  %134 = bitcast %..any* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %134, i8 0, i64 16, i1 false)
  %135 = bitcast i32* %18 to i8*
  %136 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %137 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 1
  store i8* %135, i8** %136, align 8
  store i64 4683743612465315862, i64* %137, align 8
  %138 = load %..any, %..any* %19, align 8
  %139 = bitcast %..any* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %139, i8 0, i64 16, i1 false)
  store i8* %133, i8** %21, align 8
  %140 = bitcast i8** %21 to i8*
  %141 = getelementptr inbounds %..any, %..any* %20, i32 0, i32 0
  %142 = getelementptr inbounds %..any, %..any* %20, i32 0, i32 1
  store i8* %140, i8** %141, align 8
  store i64 5044031582654955616, i64* %142, align 8
  %143 = load %..any, %..any* %20, align 8
  %144 = bitcast { %..any*, i64 }* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %144, i8 0, i64 16, i1 false)
  %145 = bitcast [2 x %..any]* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* %145, i8 0, i64 32, i1 false)
  %146 = getelementptr [2 x %..any], [2 x %..any]* %23, i64 0, i64 0
  store %..any %138, %..any* %146, align 8
  %147 = getelementptr [2 x %..any], [2 x %..any]* %23, i64 0, i64 1
  store %..any %143, %..any* %147, align 8
  %148 = getelementptr [2 x %..any], [2 x %..any]* %23, i64 0, i64 0
  %149 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %22, i32 0, i32 0
  store %..any* %148, %..any** %149, align 8
  %150 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %22, i32 0, i32 1
  store i64 2, i64* %150, align 8
  %151 = load { %..any*, i64 }, { %..any*, i64 }* %22, align 8
  store %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$26a", i64 0, i64 0), i64 29 }, %..string* %24, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 52, i32 13, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %25, align 8
  %152 = bitcast %runtime.Context* %11 to i8*
  call void @log.debugf(%..string* %24, { %..any*, i64 }* %22, %runtime.Source_Code_Location* %25, i8* %152)
  br label %defer

defer:                                            ; preds = %if.then
  call void @SDL_Quit()
  ret void

if.done:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$26b", i64 0, i64 0), i64 24 }, %..string* %26, align 8
  %153 = bitcast %..string* %26 to i8*
  %154 = getelementptr inbounds %..any, %..any* %27, i32 0, i32 0
  %155 = getelementptr inbounds %..any, %..any* %27, i32 0, i32 1
  store i8* %153, i8** %154, align 8
  store i64 432345564227567617, i64* %155, align 8
  %156 = load %..any, %..any* %27, align 8
  %157 = bitcast { %..any*, i64 }* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* %157, i8 0, i64 16, i1 false)
  %158 = bitcast [1 x %..any]* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %158, i8 0, i64 16, i1 false)
  %159 = getelementptr [1 x %..any], [1 x %..any]* %29, i64 0, i64 0
  store %..any %156, %..any* %159, align 8
  %160 = getelementptr [1 x %..any], [1 x %..any]* %29, i64 0, i64 0
  %161 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %28, i32 0, i32 0
  store %..any* %160, %..any** %161, align 8
  %162 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %28, i32 0, i32 1
  store i64 1, i64* %162, align 8
  %163 = load { %..any*, i64 }, { %..any*, i64 }* %28, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %30, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 56, i32 9, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %31, align 8
  %164 = bitcast %runtime.Context* %11 to i8*
  call void @log.info({ %..any*, i64 }* %28, %..string* %30, %runtime.Source_Code_Location* %31, i8* %164)
  %165 = call %sdl2.Window* @SDL_CreateWindow(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$26c", i64 0, i64 0), i32 100, i32 100, i32 1280, i32 720, i32 1062)
  store %sdl2.Window* %165, %sdl2.Window** %32, align 8
  %166 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  %167 = icmp eq %sdl2.Window* %166, null
  %168 = zext i1 %167 to i8
  %169 = trunc i8 %168 to i1
  br i1 %169, label %if.then1, label %if.done3

if.then1:                                         ; preds = %if.done
  %170 = call i8* @SDL_GetError()
  %171 = bitcast %..any* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %171, i8 0, i64 16, i1 false)
  store i8* %170, i8** %34, align 8
  %172 = bitcast i8** %34 to i8*
  %173 = getelementptr inbounds %..any, %..any* %33, i32 0, i32 0
  %174 = getelementptr inbounds %..any, %..any* %33, i32 0, i32 1
  store i8* %172, i8** %173, align 8
  store i64 5044031582654955616, i64* %174, align 8
  %175 = load %..any, %..any* %33, align 8
  %176 = bitcast { %..any*, i64 }* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %176, i8 0, i64 16, i1 false)
  %177 = bitcast [1 x %..any]* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* %177, i8 0, i64 16, i1 false)
  %178 = getelementptr [1 x %..any], [1 x %..any]* %36, i64 0, i64 0
  store %..any %175, %..any* %178, align 8
  %179 = getelementptr [1 x %..any], [1 x %..any]* %36, i64 0, i64 0
  %180 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %35, i32 0, i32 0
  store %..any* %179, %..any** %180, align 8
  %181 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %35, i32 0, i32 1
  store i64 1, i64* %181, align 8
  %182 = load { %..any*, i64 }, { %..any*, i64 }* %35, align 8
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$26d", i64 0, i64 0), i64 32 }, %..string* %37, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 59, i32 13, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %38, align 8
  %183 = bitcast %runtime.Context* %11 to i8*
  call void @log.debugf(%..string* %37, { %..any*, i64 }* %35, %runtime.Source_Code_Location* %38, i8* %183)
  call void @SDL_Quit()
  br label %defer2

defer2:                                           ; preds = %if.then1
  call void @SDL_Quit()
  ret void

if.done3:                                         ; preds = %if.done
  store %..string { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @"csbs$26e", i64 0, i64 0), i64 24 }, %..string* %39, align 8
  %184 = bitcast %..string* %39 to i8*
  %185 = getelementptr inbounds %..any, %..any* %40, i32 0, i32 0
  %186 = getelementptr inbounds %..any, %..any* %40, i32 0, i32 1
  store i8* %184, i8** %185, align 8
  store i64 432345564227567617, i64* %186, align 8
  %187 = load %..any, %..any* %40, align 8
  %188 = bitcast { %..any*, i64 }* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %188, i8 0, i64 16, i1 false)
  %189 = bitcast [1 x %..any]* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %189, i8 0, i64 16, i1 false)
  %190 = getelementptr [1 x %..any], [1 x %..any]* %42, i64 0, i64 0
  store %..any %187, %..any* %190, align 8
  %191 = getelementptr [1 x %..any], [1 x %..any]* %42, i64 0, i64 0
  %192 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %41, i32 0, i32 0
  store %..any* %191, %..any** %192, align 8
  %193 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %41, i32 0, i32 1
  store i64 1, i64* %193, align 8
  %194 = load { %..any*, i64 }, { %..any*, i64 }* %41, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %43, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 65, i32 9, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %44, align 8
  %195 = bitcast %runtime.Context* %11 to i8*
  call void @log.info({ %..any*, i64 }* %41, %..string* %43, %runtime.Source_Code_Location* %44, i8* %195)
  %196 = call i32 @SDL_GL_SetAttribute(i32 17, i32 4)
  %197 = call i32 @SDL_GL_SetAttribute(i32 18, i32 5)
  %198 = call i32 @SDL_GL_SetAttribute(i32 21, i32 1)
  %199 = call i32 @SDL_GL_SetAttribute(i32 5, i32 1)
  %200 = call i32 @SDL_GL_SetAttribute(i32 6, i32 24)
  %201 = call i32 @SDL_GL_SetAttribute(i32 7, i32 8)
  %202 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  %203 = call i8* @SDL_GL_CreateContext(%sdl2.Window* %202)
  store i8* %203, i8** %45, align 8
  %204 = load i8*, i8** %45, align 8
  %205 = icmp eq i8* %204, null
  %206 = zext i1 %205 to i8
  %207 = trunc i8 %206 to i1
  br i1 %207, label %if.then4, label %if.done7

if.then4:                                         ; preds = %if.done3
  %208 = call i8* @SDL_GetError()
  %209 = bitcast %..any* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* %209, i8 0, i64 16, i1 false)
  store i8* %208, i8** %47, align 8
  %210 = bitcast i8** %47 to i8*
  %211 = getelementptr inbounds %..any, %..any* %46, i32 0, i32 0
  %212 = getelementptr inbounds %..any, %..any* %46, i32 0, i32 1
  store i8* %210, i8** %211, align 8
  store i64 5044031582654955616, i64* %212, align 8
  %213 = load %..any, %..any* %46, align 8
  %214 = bitcast { %..any*, i64 }* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* %214, i8 0, i64 16, i1 false)
  %215 = bitcast [1 x %..any]* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* %215, i8 0, i64 16, i1 false)
  %216 = getelementptr [1 x %..any], [1 x %..any]* %49, i64 0, i64 0
  store %..any %213, %..any* %216, align 8
  %217 = getelementptr [1 x %..any], [1 x %..any]* %49, i64 0, i64 0
  %218 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %48, i32 0, i32 0
  store %..any* %217, %..any** %218, align 8
  %219 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %48, i32 0, i32 1
  store i64 1, i64* %219, align 8
  %220 = load { %..any*, i64 }, { %..any*, i64 }* %48, align 8
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$26d", i64 0, i64 0), i64 32 }, %..string* %50, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 74, i32 13, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %51, align 8
  %221 = bitcast %runtime.Context* %11 to i8*
  call void @log.debugf(%..string* %50, { %..any*, i64 }* %48, %runtime.Source_Code_Location* %51, i8* %221)
  br label %defer5

defer5:                                           ; preds = %if.then4
  %222 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  call void @SDL_DestroyWindow(%sdl2.Window* %222)
  br label %defer6

defer6:                                           ; preds = %defer5
  call void @SDL_Quit()
  ret void

if.done7:                                         ; preds = %if.done3
  %223 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  %224 = load i8*, i8** %45, align 8
  %225 = call i32 @SDL_GL_MakeCurrent(%sdl2.Window* %223, i8* %224)
  %226 = call i32 @SDL_GL_SetSwapInterval(i32 1)
  %227 = icmp ne i32 %226, 0
  %228 = zext i1 %227 to i8
  %229 = trunc i8 %228 to i1
  br i1 %229, label %if.then8, label %if.done12

if.then8:                                         ; preds = %if.done7
  %230 = call i8* @SDL_GetError()
  %231 = bitcast %..any* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* %231, i8 0, i64 16, i1 false)
  store i8* %230, i8** %53, align 8
  %232 = bitcast i8** %53 to i8*
  %233 = getelementptr inbounds %..any, %..any* %52, i32 0, i32 0
  %234 = getelementptr inbounds %..any, %..any* %52, i32 0, i32 1
  store i8* %232, i8** %233, align 8
  store i64 5044031582654955616, i64* %234, align 8
  %235 = load %..any, %..any* %52, align 8
  %236 = bitcast { %..any*, i64 }* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* %236, i8 0, i64 16, i1 false)
  %237 = bitcast [1 x %..any]* %55 to i8*
  call void @llvm.memset.p0i8.i64(i8* %237, i8 0, i64 16, i1 false)
  %238 = getelementptr [1 x %..any], [1 x %..any]* %55, i64 0, i64 0
  store %..any %235, %..any* %238, align 8
  %239 = getelementptr [1 x %..any], [1 x %..any]* %55, i64 0, i64 0
  %240 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %54, i32 0, i32 0
  store %..any* %239, %..any** %240, align 8
  %241 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %54, i32 0, i32 1
  store i64 1, i64* %241, align 8
  %242 = load { %..any*, i64 }, { %..any*, i64 }* %54, align 8
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$26d", i64 0, i64 0), i64 32 }, %..string* %56, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 80, i32 13, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %57, align 8
  %243 = bitcast %runtime.Context* %11 to i8*
  call void @log.debugf(%..string* %56, { %..any*, i64 }* %54, %runtime.Source_Code_Location* %57, i8* %243)
  br label %defer9

defer9:                                           ; preds = %if.then8
  %244 = load i8*, i8** %45, align 8
  call void @SDL_GL_DeleteContext(i8* %244)
  br label %defer10

defer10:                                          ; preds = %defer9
  %245 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  call void @SDL_DestroyWindow(%sdl2.Window* %245)
  br label %defer11

defer11:                                          ; preds = %defer10
  call void @SDL_Quit()
  ret void

if.done12:                                        ; preds = %if.done7
  %246 = bitcast %runtime.Context* %11 to i8*
  call void @odin_gl.load_up_to(i64 4, i64 5, i8* bitcast (void (i8*, i8*, i8*)* @sdl2.gl_set_proc_address to i8*), i8* %246)
  call void @odin_gl.ClearColor(float 2.500000e-01, float 2.500000e-01, float 2.500000e-01, float 1.000000e+00)
  %247 = bitcast %main.Imgui_State* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* %247, i8 0, i64 128, i1 false)
  %248 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  %249 = bitcast %main.Imgui_State* %59 to i8*
  call void @llvm.memset.p0i8.i64(i8* %249, i8 0, i64 128, i1 false)
  %250 = bitcast %runtime.Context* %11 to i8*
  call void @main.init_imgui_state(%main.Imgui_State* sret(%main.Imgui_State*) %59, %sdl2.Window* %248, i8* %250)
  %251 = load %main.Imgui_State, %main.Imgui_State* %59, align 8
  %252 = bitcast %main.Imgui_State* %58 to i8*
  %253 = bitcast %main.Imgui_State* %59 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %252, i8* align 8 %253, i64 128, i1 false)
  store i8 1, i8* %60, align 1
  store i8 0, i8* %61, align 1
  %254 = bitcast %sdl2.Event* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %254, i8 0, i64 56, i1 false)
  %255 = bitcast %sdl2.Event* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %255, i8 0, i64 56, i1 false)
  br label %for.loop

for.loop:                                         ; preds = %if.done22, %if.done12
  %256 = load i8, i8* %60, align 1
  %257 = trunc i8 %256 to i1
  br i1 %257, label %for.body, label %for.done23

for.body:                                         ; preds = %for.loop
  br label %for.loop13

for.loop13:                                       ; preds = %switch.done20, %for.body
  %258 = call i32 @SDL_PollEvent(%sdl2.Event* %62)
  %259 = trunc i32 %258 to i1
  br i1 %259, label %for.body14, label %for.done

for.body14:                                       ; preds = %for.loop13
  %260 = load %sdl2.Event, %sdl2.Event* %62, align 8
  %261 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %58, i32 0, i32 0
  %262 = bitcast %runtime.Context* %11 to i8*
  call void @imgui_impl_sdl.process_event(%sdl2.Event* %62, %imgui_impl_sdl.SDL_State* %261, i8* %262)
  %263 = bitcast %sdl2.Event* %62 to i32*
  %264 = load i32, i32* %263, align 4
  switch i32 %264, label %switch.done20 [
    i32 256, label %switch.case.body
    i32 768, label %switch.case.body15
  ]

switch.case.body:                                 ; preds = %for.body14
  store %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$26f", i64 0, i64 0), i64 19 }, %..string* %63, align 8
  %265 = bitcast %..string* %63 to i8*
  %266 = getelementptr inbounds %..any, %..any* %64, i32 0, i32 0
  %267 = getelementptr inbounds %..any, %..any* %64, i32 0, i32 1
  store i8* %265, i8** %266, align 8
  store i64 432345564227567617, i64* %267, align 8
  %268 = load %..any, %..any* %64, align 8
  %269 = bitcast { %..any*, i64 }* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* %269, i8 0, i64 16, i1 false)
  %270 = bitcast [1 x %..any]* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* %270, i8 0, i64 16, i1 false)
  %271 = getelementptr [1 x %..any], [1 x %..any]* %66, i64 0, i64 0
  store %..any %268, %..any* %271, align 8
  %272 = getelementptr [1 x %..any], [1 x %..any]* %66, i64 0, i64 0
  %273 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %65, i32 0, i32 0
  store %..any* %272, %..any** %273, align 8
  %274 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %65, i32 0, i32 1
  store i64 1, i64* %274, align 8
  %275 = load { %..any*, i64 }, { %..any*, i64 }* %65, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %67, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 97, i32 25, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %68, align 8
  %276 = bitcast %runtime.Context* %11 to i8*
  call void @log.info({ %..any*, i64 }* %65, %..string* %67, %runtime.Source_Code_Location* %68, i8* %276)
  store i8 0, i8* %60, align 1
  br label %switch.done20

switch.case.body15:                               ; preds = %for.body14
  %277 = bitcast %sdl2.Event* %62 to %sdl2.KeyboardEvent*
  %278 = getelementptr inbounds %sdl2.KeyboardEvent, %sdl2.KeyboardEvent* %277, i32 0, i32 7
  %279 = getelementptr inbounds %sdl2.Keysym, %sdl2.Keysym* %278, i32 0, i32 1
  %280 = load i32, i32* %279, align 4
  switch i32 %280, label %switch.done [
    i32 27, label %switch.case.body16
    i32 9, label %switch.case.body17
  ]

switch.case.body16:                               ; preds = %switch.case.body15
  %281 = bitcast %sdl2.Event* %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* %281, i8 0, i64 56, i1 false)
  %282 = bitcast %sdl2.Event* %69 to i8*
  call void @llvm.memset.p0i8.i64(i8* %282, i8 0, i64 56, i1 false)
  %283 = bitcast %sdl2.Event* %69 to i32*
  store i32 256, i32* %283, align 4
  %284 = load %sdl2.Event, %sdl2.Event* %69, align 8
  %285 = bitcast %sdl2.Event* %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* %285, i8 0, i64 56, i1 false)
  store %sdl2.Event %284, %sdl2.Event* %70, align 8
  %286 = call i32 @SDL_PushEvent(%sdl2.Event* %70)
  br label %switch.done

switch.case.body17:                               ; preds = %switch.case.body15
  %287 = bitcast %runtime.Context* %11 to i8*
  %288 = call %imgui.IO* @imgui.get_io(i8* %287)
  store %imgui.IO* %288, %imgui.IO** %71, align 8
  %289 = load %imgui.IO*, %imgui.IO** %71, align 8
  %290 = getelementptr inbounds %imgui.IO, %imgui.IO* %289, i32 0, i32 49
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 0
  %293 = zext i1 %292 to i8
  %294 = trunc i8 %293 to i1
  br i1 %294, label %if.then18, label %if.done19

if.then18:                                        ; preds = %switch.case.body17
  store i8 1, i8* %61, align 1
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %switch.case.body17
  br label %switch.done

switch.done:                                      ; preds = %if.done19, %switch.case.body16, %switch.case.body15
  br label %switch.done20

switch.done20:                                    ; preds = %switch.done, %switch.case.body, %for.body14
  br label %for.loop13

for.done:                                         ; preds = %for.loop13
  %295 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  %296 = bitcast %runtime.Context* %11 to i8*
  call void @main.imgui_new_frame(%sdl2.Window* %295, %main.Imgui_State* %58, i8* %296)
  %297 = bitcast %runtime.Context* %11 to i8*
  call void @imgui.new_frame(i8* %297)
  %298 = bitcast %runtime.Context* %11 to i8*
  call void @main.info_overlay(i8* %298)
  %299 = load i8, i8* %61, align 1
  %300 = trunc i8 %299 to i1
  br i1 %300, label %if.then21, label %if.done22

if.then21:                                        ; preds = %for.done
  %301 = bitcast %runtime.Context* %11 to i8*
  call void @imgui.show_demo_window(i8* %61, i8* %301)
  br label %if.done22

if.done22:                                        ; preds = %if.then21, %for.done
  %302 = bitcast %runtime.Context* %11 to i8*
  %303 = call i64 @main.input_text_window(%enbench.DataToWrite* %0, %enbench.Backings* %2, i8* %302)
  store i64 %303, i64* %72, align 8
  %304 = load i64, i64* %72, align 8
  %305 = bitcast %runtime.Context* %11 to i8*
  call void @main.enum_window(i64 %304, %enbench.DataToWrite* %0, %enbench.Backings* %2, i8* %305)
  %306 = load i64, i64* %72, align 8
  %307 = bitcast %runtime.Context* %11 to i8*
  call void @main.enum_relation_window(i64 %306, %enbench.DataToWrite* %0, %enbench.Backings* %2, i8* %307)
  %308 = bitcast %runtime.Context* %11 to i8*
  call void @main.compile_window(%enbench.DataToWrite* %0, i8* %308)
  %309 = bitcast %runtime.Context* %11 to i8*
  call void @imgui.render(i8* %309)
  %310 = bitcast %runtime.Context* %11 to i8*
  %311 = call %imgui.IO* @imgui.get_io(i8* %310)
  store %imgui.IO* %311, %imgui.IO** %73, align 8
  %312 = load %imgui.IO*, %imgui.IO** %73, align 8
  %313 = getelementptr inbounds %imgui.IO, %imgui.IO* %312, i32 0, i32 2
  %314 = getelementptr inbounds %imgui.Vec2, %imgui.Vec2* %313, i32 0, i32 0
  %315 = load float, float* %314, align 4
  %316 = fptosi float %315 to i32
  %317 = load %imgui.IO*, %imgui.IO** %73, align 8
  %318 = getelementptr inbounds %imgui.IO, %imgui.IO* %317, i32 0, i32 2
  %319 = getelementptr inbounds %imgui.Vec2, %imgui.Vec2* %318, i32 0, i32 1
  %320 = load float, float* %319, align 4
  %321 = fptosi float %320 to i32
  call void @odin_gl.Viewport(i32 0, i32 0, i32 %316, i32 %321)
  %322 = load %imgui.IO*, %imgui.IO** %73, align 8
  %323 = getelementptr inbounds %imgui.IO, %imgui.IO* %322, i32 0, i32 2
  %324 = getelementptr inbounds %imgui.Vec2, %imgui.Vec2* %323, i32 0, i32 0
  %325 = load float, float* %324, align 4
  %326 = fptosi float %325 to i32
  %327 = load %imgui.IO*, %imgui.IO** %73, align 8
  %328 = getelementptr inbounds %imgui.IO, %imgui.IO* %327, i32 0, i32 2
  %329 = getelementptr inbounds %imgui.Vec2, %imgui.Vec2* %328, i32 0, i32 1
  %330 = load float, float* %329, align 4
  %331 = fptosi float %330 to i32
  call void @odin_gl.Scissor(i32 0, i32 0, i32 %326, i32 %331)
  call void @odin_gl.Clear(i32 16384)
  %332 = bitcast %runtime.Context* %11 to i8*
  %333 = call %imgui.Draw_Data* @imgui.get_draw_data(i8* %332)
  %334 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %58, i32 0, i32 1
  %335 = load %imgui_impl_opengl.OpenGL_State, %imgui_impl_opengl.OpenGL_State* %334, align 4
  %336 = bitcast %runtime.Context* %11 to i8*
  call void @imgui_impl_opengl.imgui_render(%imgui.Draw_Data* %333, %imgui_impl_opengl.OpenGL_State* %334, i8* %336)
  %337 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  call void @SDL_GL_SwapWindow(%sdl2.Window* %337)
  br label %for.loop

for.done23:                                       ; preds = %for.loop
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$270", i64 0, i64 0), i64 16 }, %..string* %74, align 8
  %338 = bitcast %..string* %74 to i8*
  %339 = getelementptr inbounds %..any, %..any* %75, i32 0, i32 0
  %340 = getelementptr inbounds %..any, %..any* %75, i32 0, i32 1
  store i8* %338, i8** %339, align 8
  store i64 432345564227567617, i64* %340, align 8
  %341 = load %..any, %..any* %75, align 8
  %342 = bitcast { %..any*, i64 }* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* %342, i8 0, i64 16, i1 false)
  %343 = bitcast [1 x %..any]* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* %343, i8 0, i64 16, i1 false)
  %344 = getelementptr [1 x %..any], [1 x %..any]* %77, i64 0, i64 0
  store %..any %341, %..any* %344, align 8
  %345 = getelementptr [1 x %..any], [1 x %..any]* %77, i64 0, i64 0
  %346 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %76, i32 0, i32 0
  store %..any* %345, %..any** %346, align 8
  %347 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %76, i32 0, i32 1
  store i64 1, i64* %347, align 8
  %348 = load { %..any*, i64 }, { %..any*, i64 }* %76, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %78, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 127, i32 9, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$268", i64 0, i64 0), i64 4 } }, %runtime.Source_Code_Location* %79, align 8
  %349 = bitcast %runtime.Context* %11 to i8*
  call void @log.info({ %..any*, i64 }* %76, %..string* %78, %runtime.Source_Code_Location* %79, i8* %349)
  br label %defer24

defer24:                                          ; preds = %for.done23
  %350 = load i8*, i8** %45, align 8
  call void @SDL_GL_DeleteContext(i8* %350)
  br label %defer25

defer25:                                          ; preds = %defer24
  %351 = load %sdl2.Window*, %sdl2.Window** %32, align 8
  call void @SDL_DestroyWindow(%sdl2.Window* %351)
  br label %defer26

defer26:                                          ; preds = %defer25
  call void @SDL_Quit()
  ret void
}

define internal void @main.info_overlay(i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %0 = alloca i64, align 8
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  %3 = alloca %..string, align 8
  %4 = alloca %..string, align 8
  %5 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = bitcast i64* %0 to %imgui.Vec2*
  store %imgui.Vec2 { float 1.000000e+01, float 1.000000e+01 }, %imgui.Vec2* %7, align 4
  %8 = load i64, i64* %0, align 8
  %9 = bitcast i64* %1 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %9, align 4
  %10 = load i64, i64* %1, align 8
  %11 = bitcast %runtime.Context* %6 to i8*
  call void @imgui.set_next_window_pos(i64 %8, i32 0, i64 %10, i8* %11)
  %12 = bitcast %runtime.Context* %6 to i8*
  call void @imgui.set_next_window_bg_alpha(float 0x3FC99999A0000000, i8* %12)
  store i32 790895, i32* %2, align 4
  %13 = load i32, i32* %2, align 4
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$111", i64 0, i64 0), i64 4 }, %..string* %3, align 8
  %14 = bitcast %runtime.Context* %6 to i8*
  %15 = call i8 @imgui.begin(%..string* %3, i8* null, i32 %13, i8* %14)
  store %..string { i8* getelementptr inbounds ([35 x i8], [35 x i8]* @"csbs$271", i64 0, i64 0), i64 34 }, %..string* %4, align 8
  %16 = bitcast %runtime.Context* %6 to i8*
  call void @imgui.text_unformatted(%..string* %4, i8* %16)
  store %..string { i8* getelementptr inbounds ([30 x i8], [30 x i8]* @"csbs$272", i64 0, i64 0), i64 29 }, %..string* %5, align 8
  %17 = bitcast %runtime.Context* %6 to i8*
  call void @imgui.text_unformatted(%..string* %5, i8* %17)
  %18 = bitcast %runtime.Context* %6 to i8*
  call void @imgui.end(i8* %18)
  ret void
}

define internal void @main.enum_relation_window(i64 %0, %enbench.DataToWrite* %1, %enbench.Backings* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %enbench.DataToWrite*, align 8
  %5 = alloca %enbench.Backings*, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { %..any*, i64 }, align 8
  %9 = alloca { i64*, i64, i64, %runtime.Allocator }, align 8
  %10 = alloca %..string, align 8
  %11 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %12 = alloca %..string, align 8
  %13 = alloca { %..string*, i64 }, align 8
  %14 = alloca { { %..string*, i64 }*, i64 }, align 8
  %15 = alloca [1 x %..string], align 16
  %16 = alloca { %..string*, i64 }, align 8
  %17 = alloca [2 x { %..string*, i64 }], align 8
  %18 = alloca [2 x { %..string*, i64 }], align 16
  %19 = alloca { { %..string*, i64 }*, i64 }, align 8
  %20 = alloca { %..string*, i64 }, align 8
  %21 = alloca { %..string*, i64 }, align 8
  %22 = alloca %..string, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca %..string, align 8
  %28 = alloca i64, align 8
  %29 = alloca { %..any*, i64 }, align 8
  %30 = alloca i64, align 8
  %31 = alloca %..string, align 8
  %32 = alloca %..string, align 8
  %33 = alloca %..string, align 8
  %34 = alloca %..any, align 8
  %35 = alloca { %..any*, i64 }, align 8
  %36 = alloca [1 x %..any], align 8
  %37 = alloca %..string, align 8
  %38 = alloca %..string, align 8
  %39 = alloca %..string, align 8
  %40 = alloca %..string, align 8
  %41 = alloca i64, align 8
  %42 = alloca i64, align 8
  %43 = alloca i64, align 8
  %44 = alloca %..string, align 8
  %45 = alloca i64, align 8
  %46 = alloca i8, align 1
  %47 = alloca i64, align 8
  %48 = alloca %..string, align 8
  %49 = alloca %..string, align 8
  %50 = alloca %..string, align 8
  %51 = alloca %..string, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca %..string, align 8
  %55 = alloca i64, align 8
  %56 = alloca { %..any*, i64 }, align 8
  %57 = alloca [128 x i8], align 1
  %58 = alloca %..string, align 8
  %59 = alloca %..string, align 8
  %60 = alloca %..any, align 8
  %61 = alloca { %..any*, i64 }, align 8
  %62 = alloca [1 x %..any], align 8
  %63 = alloca %..string, align 8
  %64 = alloca %..string, align 8
  %65 = alloca %..string, align 8
  %66 = alloca %..string, align 8
  %67 = alloca { i8*, i64 }, align 8
  %68 = alloca i64, align 8
  %69 = alloca i8, align 1
  %70 = alloca { i8*, i64 }, align 8
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = alloca i8, align 1
  %74 = alloca %..string, align 8
  %75 = alloca %..string, align 8
  %76 = alloca %..string, align 8
  %77 = alloca %..string, align 8
  %78 = alloca %..string, align 8
  %79 = alloca { i8*, i64 }, align 8
  %80 = alloca %..string, align 8
  %81 = alloca %..string, align 8
  %82 = alloca i64, align 8
  %83 = alloca i64, align 8
  %84 = alloca %..string, align 8
  %85 = alloca i64, align 8
  %86 = alloca { %..any*, i64 }, align 8
  %87 = alloca [128 x i8], align 1
  %88 = alloca %..string, align 8
  %89 = alloca %..string, align 8
  %90 = alloca %..any, align 8
  %91 = alloca { %..any*, i64 }, align 8
  %92 = alloca [1 x %..any], align 8
  %93 = alloca %..string, align 8
  %94 = alloca %..string, align 8
  %95 = alloca %..string, align 8
  %96 = alloca %..string, align 8
  %97 = alloca { i8*, i64 }, align 8
  %98 = alloca i64, align 8
  %99 = alloca i8, align 1
  %100 = alloca { i8*, i64 }, align 8
  %101 = alloca i64, align 8
  %102 = alloca i64, align 8
  %103 = alloca i8, align 1
  %104 = alloca %..string, align 8
  %105 = alloca %..string, align 8
  %106 = alloca %..string, align 8
  %107 = alloca %..string, align 8
  %108 = alloca %..string, align 8
  %109 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store %enbench.DataToWrite* %1, %enbench.DataToWrite** %4, align 8
  store %enbench.Backings* %2, %enbench.Backings** %5, align 8
  %110 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$273", i64 0, i64 0), i64 14 }, %..string* %6, align 8
  %111 = bitcast %runtime.Context* %110 to i8*
  %112 = call i8 @imgui.begin(%..string* %6, i8* null, i32 0, i8* %111)
  %113 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %114 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %113, i32 0, i32 0
  %115 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %114, i32 0, i32 0
  %116 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %115, align 8
  %117 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %115, i32 0, i32 0
  %118 = load %..string*, %..string** %117, align 8
  %119 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %115, i32 0, i32 1
  %120 = load i64, i64* %119, align 8
  %121 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 148, i32 39, i64 %121, i64 %120)
  %122 = getelementptr %..string, %..string* %118, i64 %121
  %123 = load %..string, %..string* %122, align 8
  %124 = load %..string, %..string* %122, align 8
  %125 = bitcast { %..any*, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %125, i8 0, i64 16, i1 false)
  %126 = load { %..any*, i64 }, { %..any*, i64 }* %8, align 8
  %127 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.text(%..string* %122, { %..any*, i64 }* %8, i8* %127)
  %128 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %129 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %128, i32 0, i32 1
  %130 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %129, i32 0, i32 0
  %131 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %130, align 8
  %132 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %130, i32 0, i32 0
  %133 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %132, align 8
  %134 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %130, i32 0, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 149, i32 47, i64 %136, i64 %135)
  %137 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %133, i64 %136
  %138 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %137, align 8
  store { i64*, i64, i64, %runtime.Allocator } %138, { i64*, i64, i64, %runtime.Allocator }* %9, align 8
  %139 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %140 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %139, i32 0, i32 0
  %141 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %140, i32 0, i32 1
  %142 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %141, align 8
  %143 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %141, i32 0, i32 0
  %144 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %143, align 8
  %145 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %141, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %12, align 8
  call void @runtime.bounds_check_error(%..string* %12, i32 151, i32 34, i64 %147, i64 %146)
  %148 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %144, i64 %147
  %149 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %148, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %149, { %..string*, i64, i64, %runtime.Allocator }* %11, align 8
  %150 = bitcast { { %..string*, i64 }*, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %150, i8 0, i64 16, i1 false)
  store [1 x %..string] [%..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }], [1 x %..string]* %15, align 8
  %151 = getelementptr inbounds [1 x %..string], [1 x %..string]* %15, i64 0, i64 0
  %152 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %16, i32 0, i32 0
  store %..string* %151, %..string** %152, align 8
  %153 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %16, i32 0, i32 1
  store i64 1, i64* %153, align 8
  %154 = load { %..string*, i64 }, { %..string*, i64 }* %16, align 8
  %155 = getelementptr [2 x { %..string*, i64 }], [2 x { %..string*, i64 }]* %17, i64 0, i64 0
  store { %..string*, i64 } %154, { %..string*, i64 }* %155, align 8
  %156 = getelementptr [2 x { %..string*, i64 }], [2 x { %..string*, i64 }]* %17, i64 0, i64 1
  store { %..string*, i64 } zeroinitializer, { %..string*, i64 }* %156, align 8
  %157 = load [2 x { %..string*, i64 }], [2 x { %..string*, i64 }]* %17, align 8
  store [2 x { %..string*, i64 }] %157, [2 x { %..string*, i64 }]* %18, align 8
  %158 = getelementptr inbounds [2 x { %..string*, i64 }], [2 x { %..string*, i64 }]* %18, i64 0, i64 0
  %159 = getelementptr inbounds { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %19, i32 0, i32 0
  store { %..string*, i64 }* %158, { %..string*, i64 }** %159, align 8
  %160 = getelementptr inbounds { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %19, i32 0, i32 1
  store i64 2, i64* %160, align 8
  %161 = load { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %19, align 8
  %162 = getelementptr inbounds { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %19, i32 0, i32 0
  %163 = load { %..string*, i64 }*, { %..string*, i64 }** %162, align 8
  %164 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %165 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %164, i32 0, i32 0
  %166 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %165, i32 0, i32 0
  %167 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %166, align 8
  %168 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %166, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %166, i32 0, i32 0
  %171 = load %..string*, %..string** %170, align 8
  %172 = getelementptr %..string, %..string* %171, i64 0
  %173 = sub i64 %169, 0
  %174 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  store %..string* %172, %..string** %174, align 8
  %175 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 1
  store i64 %173, i64* %175, align 8
  %176 = load { %..string*, i64 }, { %..string*, i64 }* %20, align 8
  %177 = load { %..string*, i64 }, { %..string*, i64 }* %20, align 8
  %178 = getelementptr { %..string*, i64 }, { %..string*, i64 }* %163, i64 1
  store { %..string*, i64 } %177, { %..string*, i64 }* %178, align 8
  %179 = extractvalue { { %..string*, i64 }*, i64 } %161, 1
  %180 = getelementptr inbounds { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %14, i32 0, i32 0
  store { %..string*, i64 }* %163, { %..string*, i64 }** %180, align 8
  %181 = getelementptr inbounds { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %14, i32 0, i32 1
  store i64 %179, i64* %181, align 8
  %182 = load { { %..string*, i64 }*, i64 }, { { %..string*, i64 }*, i64 }* %14, align 8
  %183 = getelementptr inbounds %runtime.Context, %runtime.Context* %110, i32 0, i32 0
  %184 = load %runtime.Allocator, %runtime.Allocator* %183, align 8
  %185 = bitcast { %..string*, i64 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 16, i1 false)
  %186 = bitcast %runtime.Context* %110 to i8*
  call void @slice.concatenate-48804({ %..string*, i64 }* sret({ %..string*, i64 }*) %21, { { %..string*, i64 }*, i64 }* %14, %runtime.Allocator* %183, i8* %186)
  %187 = load { %..string*, i64 }, { %..string*, i64 }* %21, align 8
  store { %..string*, i64 } %187, { %..string*, i64 }* %13, align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$274", i64 0, i64 0), i64 4 }, %..string* %22, align 8
  %188 = bitcast %runtime.Context* %110 to i8*
  %189 = call i8 @imgui.begin_tab_bar(%..string* %22, i32 0, i8* %188)
  %190 = trunc i8 %189 to i1
  br i1 %190, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  br label %defer

defer:                                            ; preds = %if.then
  %191 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end(i8* %191)
  ret void

if.done:                                          ; preds = %entry
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$275", i64 0, i64 0), i64 12 }, %..string* %23, align 8
  %192 = bitcast %runtime.Context* %110 to i8*
  %193 = call i8 @imgui.begin_tab_item(%..string* %23, i8* null, i32 0, i8* %192)
  %194 = trunc i8 %193 to i1
  br i1 %194, label %if.then1, label %if.done18

if.then1:                                         ; preds = %if.done
  %195 = bitcast %..string* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %195, i8 0, i64 16, i1 false)
  store i64 0, i64* %25, align 8
  %196 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 1
  store i64 -1, i64* %26, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %defer15, %if.then4, %if.then1
  %197 = load i64, i64* %26, align 8
  %198 = add i64 %197, 1
  store i64 %198, i64* %26, align 8
  %199 = load i64, i64* %196, align 8
  %200 = icmp slt i64 %198, %199
  br i1 %200, label %for.index.body, label %for.index.done16

for.index.body:                                   ; preds = %for.index.loop
  %201 = load i64, i64* %26, align 8
  %202 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 0
  %203 = load %..string*, %..string** %202, align 8
  %204 = getelementptr %..string, %..string* %203, i64 %201
  %205 = load %..string, %..string* %204, align 8
  store %..string %205, %..string* %27, align 8
  store i64 %201, i64* %28, align 8
  %206 = load %..string, %..string* %27, align 8
  %207 = bitcast { %..any*, i64 }* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %207, i8 0, i64 16, i1 false)
  %208 = load { %..any*, i64 }, { %..any*, i64 }* %29, align 8
  %209 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.text(%..string* %27, { %..any*, i64 }* %29, i8* %209)
  %210 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %210)
  %211 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, align 8
  %212 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, i32 0, i32 0
  %213 = load i64*, i64** %212, align 8
  %214 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, i32 0, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = load i64, i64* %28, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %31, align 8
  call void @runtime.bounds_check_error(%..string* %31, i32 163, i32 39, i64 %216, i64 %215)
  %217 = getelementptr i64, i64* %213, i64 %216
  %218 = load i64, i64* %217, align 8
  %219 = add i64 %218, 1
  store i64 %219, i64* %30, align 8
  %220 = load { %..string*, i64 }, { %..string*, i64 }* %13, align 8
  %221 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 0
  %222 = load %..string*, %..string** %221, align 8
  %223 = load i64, i64* %30, align 8
  %224 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 1
  %225 = load i64, i64* %224, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %33, align 8
  call void @runtime.bounds_check_error(%..string* %33, i32 164, i32 39, i64 %223, i64 %225)
  %226 = getelementptr %..string, %..string* %222, i64 %223
  %227 = load %..string, %..string* %226, align 8
  store %..string %227, %..string* %32, align 8
  %228 = load i64, i64* %28, align 8
  %229 = bitcast %..any* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %229, i8 0, i64 16, i1 false)
  %230 = bitcast i64* %28 to i8*
  %231 = getelementptr inbounds %..any, %..any* %34, i32 0, i32 0
  %232 = getelementptr inbounds %..any, %..any* %34, i32 0, i32 1
  store i8* %230, i8** %231, align 8
  store i64 4683743612465315844, i64* %232, align 8
  %233 = load %..any, %..any* %34, align 8
  %234 = bitcast { %..any*, i64 }* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %234, i8 0, i64 16, i1 false)
  %235 = bitcast [1 x %..any]* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* %235, i8 0, i64 16, i1 false)
  %236 = getelementptr [1 x %..any], [1 x %..any]* %36, i64 0, i64 0
  store %..any %233, %..any* %236, align 8
  %237 = getelementptr [1 x %..any], [1 x %..any]* %36, i64 0, i64 0
  %238 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %35, i32 0, i32 0
  store %..any* %237, %..any** %238, align 8
  %239 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %35, i32 0, i32 1
  store i64 1, i64* %239, align 8
  %240 = load { %..any*, i64 }, { %..any*, i64 }* %35, align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$276", i64 0, i64 0), i64 13 }, %..string* %37, align 8
  %241 = bitcast %..string* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* %241, i8 0, i64 16, i1 false)
  %242 = bitcast %runtime.Context* %110 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %38, %..string* %37, { %..any*, i64 }* %35, i8* %242)
  %243 = load %..string, %..string* %38, align 8
  %244 = load i64, i64* %30, align 8
  %245 = icmp eq i64 %244, 0
  %246 = zext i1 %245 to i8
  %247 = trunc i8 %246 to i1
  br i1 %247, label %if.then2, label %if.else

if.then2:                                         ; preds = %for.index.body
  br label %if.done3

if.else:                                          ; preds = %for.index.body
  %248 = load %..string, %..string* %32, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.else, %if.then2
  %249 = phi %..string [ { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %if.then2 ], [ %248, %if.else ]
  store %..string %249, %..string* %39, align 8
  %250 = bitcast %runtime.Context* %110 to i8*
  %251 = call i8 @imgui.begin_combo(%..string* %38, %..string* %39, i32 0, i8* %250)
  %252 = trunc i8 %251 to i1
  br i1 %252, label %if.done5, label %if.then4

if.then4:                                         ; preds = %if.done3
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done5

if.done5:                                         ; preds = %unreachable, %if.done3
  %253 = bitcast %..string* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %253, i8 0, i64 16, i1 false)
  store i64 0, i64* %41, align 8
  %254 = load { %..string*, i64 }, { %..string*, i64 }* %13, align 8
  %255 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 1
  %256 = load i64, i64* %255, align 8
  store i64 %256, i64* %42, align 8
  store i64 -1, i64* %43, align 8
  br label %for.index.loop6

for.index.loop6:                                  ; preds = %if.done14, %if.done5
  %257 = load i64, i64* %43, align 8
  %258 = add i64 %257, 1
  store i64 %258, i64* %43, align 8
  %259 = load i64, i64* %42, align 8
  %260 = icmp slt i64 %258, %259
  br i1 %260, label %for.index.body7, label %for.index.done

for.index.body7:                                  ; preds = %for.index.loop6
  %261 = load i64, i64* %43, align 8
  %262 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 0
  %263 = load %..string*, %..string** %262, align 8
  %264 = getelementptr %..string, %..string* %263, i64 %261
  %265 = load %..string, %..string* %264, align 8
  store %..string %265, %..string* %44, align 8
  store i64 %261, i64* %45, align 8
  %266 = load i64, i64* %45, align 8
  %267 = load i64, i64* %30, align 8
  %268 = icmp eq i64 %266, %267
  %269 = zext i1 %268 to i8
  store i8 %269, i8* %46, align 1
  %270 = load %..string, %..string* %44, align 8
  %271 = load i8, i8* %46, align 1
  %272 = icmp ne i8 %271, 0
  %273 = bitcast i64* %47 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %273, align 4
  %274 = load i64, i64* %47, align 8
  %275 = bitcast %runtime.Context* %110 to i8*
  %276 = call i8 @imgui.selectable_bool(%..string* %44, i1 %272, i32 0, i64 %274, i8* %275)
  %277 = trunc i8 %276 to i1
  br i1 %277, label %if.then8, label %if.done12

if.then8:                                         ; preds = %for.index.body7
  %278 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, align 8
  %279 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, i32 0, i32 0
  %280 = load i64*, i64** %279, align 8
  %281 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %9, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = load i64, i64* %28, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %48, align 8
  call void @runtime.bounds_check_error(%..string* %48, i32 169, i32 69, i64 %283, i64 %282)
  %284 = getelementptr i64, i64* %280, i64 %283
  %285 = load %..string, %..string* %44, align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %49, align 8
  %286 = call i8 @runtime.string_eq(%..string* %44, %..string* %49)
  %287 = trunc i8 %286 to i1
  br i1 %287, label %if.then9, label %if.else10

if.then9:                                         ; preds = %if.then8
  br label %if.done11

if.else10:                                        ; preds = %if.then8
  %288 = load i64, i64* %45, align 8
  %289 = sub i64 %288, 1
  br label %if.done11

if.done11:                                        ; preds = %if.else10, %if.then9
  %290 = phi i64 [ -1, %if.then9 ], [ %289, %if.else10 ]
  store i64 %290, i64* %284, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %for.index.body7
  %291 = load i8, i8* %46, align 1
  %292 = trunc i8 %291 to i1
  br i1 %292, label %if.then13, label %if.done14

if.then13:                                        ; preds = %if.done12
  %293 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.set_item_default_focus(i8* %293)
  br label %if.done14

if.done14:                                        ; preds = %if.then13, %if.done12
  br label %for.index.loop6

for.index.done:                                   ; preds = %for.index.loop6
  br label %defer15

defer15:                                          ; preds = %for.index.done
  %294 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end_combo(i8* %294)
  br label %for.index.loop

for.index.done16:                                 ; preds = %for.index.loop
  br label %defer17

defer17:                                          ; preds = %for.index.done16
  %295 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end_tab_item(i8* %295)
  br label %if.done18

if.done18:                                        ; preds = %defer17, %if.done
  store %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$277", i64 0, i64 0), i64 16 }, %..string* %50, align 8
  %296 = bitcast %runtime.Context* %110 to i8*
  %297 = call i8 @imgui.begin_tab_item(%..string* %50, i8* null, i32 0, i8* %296)
  %298 = trunc i8 %297 to i1
  br i1 %298, label %if.then19, label %if.done30

if.then19:                                        ; preds = %if.done18
  %299 = bitcast %..string* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* %299, i8 0, i64 16, i1 false)
  store i64 0, i64* %52, align 8
  %300 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 1
  store i64 -1, i64* %53, align 8
  br label %for.index.loop20

for.index.loop20:                                 ; preds = %for.index.done27, %if.then19
  %301 = load i64, i64* %53, align 8
  %302 = add i64 %301, 1
  store i64 %302, i64* %53, align 8
  %303 = load i64, i64* %300, align 8
  %304 = icmp slt i64 %302, %303
  br i1 %304, label %for.index.body21, label %for.index.done28

for.index.body21:                                 ; preds = %for.index.loop20
  %305 = load i64, i64* %53, align 8
  %306 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 0
  %307 = load %..string*, %..string** %306, align 8
  %308 = getelementptr %..string, %..string* %307, i64 %305
  %309 = load %..string, %..string* %308, align 8
  store %..string %309, %..string* %54, align 8
  store i64 %305, i64* %55, align 8
  %310 = load %..string, %..string* %54, align 8
  %311 = bitcast { %..any*, i64 }* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* %311, i8 0, i64 16, i1 false)
  %312 = load { %..any*, i64 }, { %..any*, i64 }* %56, align 8
  %313 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.text(%..string* %54, { %..any*, i64 }* %56, i8* %313)
  %314 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %314)
  %315 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %316 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %315, i32 0, i32 1
  %317 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %316, align 8
  %318 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %316, i32 0, i32 0
  %319 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %318, align 8
  %320 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %316, i32 0, i32 1
  %321 = load i64, i64* %320, align 8
  %322 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %58, align 8
  call void @runtime.bounds_check_error(%..string* %58, i32 181, i32 52, i64 %322, i64 %321)
  %323 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %319, i64 %322
  %324 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %323, align 8
  %325 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %323, i32 0, i32 0
  %326 = load [128 x i8]*, [128 x i8]** %325, align 8
  %327 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %323, i32 0, i32 1
  %328 = load i64, i64* %327, align 8
  %329 = load i64, i64* %55, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %59, align 8
  call void @runtime.bounds_check_error(%..string* %59, i32 181, i32 57, i64 %329, i64 %328)
  %330 = getelementptr [128 x i8], [128 x i8]* %326, i64 %329
  %331 = load [128 x i8], [128 x i8]* %330, align 1
  %332 = bitcast [128 x i8]* %57 to i8*
  %333 = bitcast [128 x i8]* %330 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %332, i8* align 1 %333, i64 128, i1 false)
  %334 = load i64, i64* %55, align 8
  %335 = bitcast %..any* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* %335, i8 0, i64 16, i1 false)
  %336 = bitcast i64* %55 to i8*
  %337 = getelementptr inbounds %..any, %..any* %60, i32 0, i32 0
  %338 = getelementptr inbounds %..any, %..any* %60, i32 0, i32 1
  store i8* %336, i8** %337, align 8
  store i64 4683743612465315844, i64* %338, align 8
  %339 = load %..any, %..any* %60, align 8
  %340 = bitcast { %..any*, i64 }* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* %340, i8 0, i64 16, i1 false)
  %341 = bitcast [1 x %..any]* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %341, i8 0, i64 16, i1 false)
  %342 = getelementptr [1 x %..any], [1 x %..any]* %62, i64 0, i64 0
  store %..any %339, %..any* %342, align 8
  %343 = getelementptr [1 x %..any], [1 x %..any]* %62, i64 0, i64 0
  %344 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %61, i32 0, i32 0
  store %..any* %343, %..any** %344, align 8
  %345 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %61, i32 0, i32 1
  store i64 1, i64* %345, align 8
  %346 = load { %..any*, i64 }, { %..any*, i64 }* %61, align 8
  store %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$278", i64 0, i64 0), i64 19 }, %..string* %63, align 8
  %347 = bitcast %..string* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* %347, i8 0, i64 16, i1 false)
  %348 = bitcast %runtime.Context* %110 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %64, %..string* %63, { %..any*, i64 }* %61, i8* %348)
  %349 = load %..string, %..string* %64, align 8
  %350 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %351 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %350, i32 0, i32 1
  %352 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %351, align 8
  %353 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %351, i32 0, i32 0
  %354 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %353, align 8
  %355 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %351, i32 0, i32 1
  %356 = load i64, i64* %355, align 8
  %357 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %65, align 8
  call void @runtime.bounds_check_error(%..string* %65, i32 182, i32 107, i64 %357, i64 %356)
  %358 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %354, i64 %357
  %359 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %358, align 8
  %360 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %358, i32 0, i32 0
  %361 = load [128 x i8]*, [128 x i8]** %360, align 8
  %362 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %358, i32 0, i32 1
  %363 = load i64, i64* %362, align 8
  %364 = load i64, i64* %55, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %66, align 8
  call void @runtime.bounds_check_error(%..string* %66, i32 182, i32 112, i64 %364, i64 %363)
  %365 = getelementptr [128 x i8], [128 x i8]* %361, i64 %364
  %366 = load [128 x i8], [128 x i8]* %365, align 1
  %367 = getelementptr [128 x i8], [128 x i8]* %365, i64 0, i64 0
  %368 = getelementptr i8, i8* %367, i64 0
  %369 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %67, i32 0, i32 0
  store i8* %368, i8** %369, align 8
  %370 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %67, i32 0, i32 1
  store i64 128, i64* %370, align 8
  %371 = load { i8*, i64 }, { i8*, i64 }* %67, align 8
  %372 = bitcast %runtime.Context* %110 to i8*
  %373 = call i8 @imgui.input_text(%..string* %64, { i8*, i64 }* %67, i32 0, i8* null, i8* null, i8* %372)
  store i64 0, i64* %68, align 8
  store i8 0, i8* %69, align 1
  %374 = load [128 x i8], [128 x i8]* %57, align 1
  %375 = getelementptr [128 x i8], [128 x i8]* %57, i64 0, i64 0
  %376 = getelementptr i8, i8* %375, i64 0
  %377 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 0
  store i8* %376, i8** %377, align 8
  %378 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 1
  store i64 128, i64* %378, align 8
  %379 = load { i8*, i64 }, { i8*, i64 }* %70, align 8
  %380 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 1
  %381 = load i64, i64* %380, align 8
  store i64 %381, i64* %71, align 8
  store i64 -1, i64* %72, align 8
  br label %for.index.loop22

for.index.loop22:                                 ; preds = %if.done26, %for.index.body21
  %382 = load i64, i64* %72, align 8
  %383 = add i64 %382, 1
  store i64 %383, i64* %72, align 8
  %384 = load i64, i64* %71, align 8
  %385 = icmp slt i64 %383, %384
  br i1 %385, label %for.index.body23, label %for.index.done27

for.index.body23:                                 ; preds = %for.index.loop22
  %386 = load i64, i64* %72, align 8
  %387 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %70, i32 0, i32 0
  %388 = load i8*, i8** %387, align 8
  %389 = getelementptr i8, i8* %388, i64 %386
  %390 = load i8, i8* %389, align 1
  store i8 %390, i8* %73, align 1
  %391 = load i8, i8* %73, align 1
  %392 = icmp eq i8 %391, 0
  %393 = zext i1 %392 to i8
  %394 = trunc i8 %393 to i1
  br i1 %394, label %if.then24, label %cmp.or

cmp.or:                                           ; preds = %for.index.body23
  %395 = load i8, i8* %73, align 1
  %396 = icmp eq i8 %395, 0
  %397 = zext i1 %396 to i8
  %398 = trunc i8 %397 to i1
  br i1 %398, label %if.then24, label %if.done26

if.then24:                                        ; preds = %cmp.or, %for.index.body23
  br label %for.index.done27

unreachable25:                                    ; No predecessors!
  br label %if.done26

if.done26:                                        ; preds = %unreachable25, %cmp.or
  %399 = load i64, i64* %68, align 8
  %400 = add i64 %399, 1
  store i64 %400, i64* %68, align 8
  br label %for.index.loop22

for.index.done27:                                 ; preds = %if.then24, %for.index.loop22
  %401 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %402 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %401, i32 0, i32 1
  %403 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %402, i32 0, i32 1
  %404 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %403, align 8
  %405 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %403, i32 0, i32 0
  %406 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %405, align 8
  %407 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %403, i32 0, i32 1
  %408 = load i64, i64* %407, align 8
  %409 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %74, align 8
  call void @runtime.bounds_check_error(%..string* %74, i32 188, i32 49, i64 %409, i64 %408)
  %410 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %406, i64 %409
  %411 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %410, align 8
  %412 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %410, i32 0, i32 0
  %413 = load %..string*, %..string** %412, align 8
  %414 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %410, i32 0, i32 1
  %415 = load i64, i64* %414, align 8
  %416 = load i64, i64* %55, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %75, align 8
  call void @runtime.bounds_check_error(%..string* %75, i32 188, i32 54, i64 %416, i64 %415)
  %417 = getelementptr %..string, %..string* %413, i64 %416
  %418 = load i64, i64* %68, align 8
  %419 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %420 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %419, i32 0, i32 1
  %421 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %420, align 8
  %422 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %420, i32 0, i32 0
  %423 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %422, align 8
  %424 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %420, i32 0, i32 1
  %425 = load i64, i64* %424, align 8
  %426 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %76, align 8
  call void @runtime.bounds_check_error(%..string* %76, i32 188, i32 114, i64 %426, i64 %425)
  %427 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %423, i64 %426
  %428 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %427, align 8
  %429 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %427, i32 0, i32 0
  %430 = load [128 x i8]*, [128 x i8]** %429, align 8
  %431 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %427, i32 0, i32 1
  %432 = load i64, i64* %431, align 8
  %433 = load i64, i64* %55, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %77, align 8
  call void @runtime.bounds_check_error(%..string* %77, i32 188, i32 119, i64 %433, i64 %432)
  %434 = getelementptr [128 x i8], [128 x i8]* %430, i64 %433
  %435 = load [128 x i8], [128 x i8]* %434, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %78, align 8
  call void @runtime.slice_expr_error_hi(%..string* %78, i32 188, i32 125, i64 %418, i64 128)
  %436 = getelementptr [128 x i8], [128 x i8]* %434, i64 0, i64 0
  %437 = getelementptr i8, i8* %436, i64 0
  %438 = sub i64 %418, 0
  %439 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %79, i32 0, i32 0
  store i8* %437, i8** %439, align 8
  %440 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %79, i32 0, i32 1
  store i64 %438, i64* %440, align 8
  %441 = load { i8*, i64 }, { i8*, i64 }* %79, align 8
  %442 = bitcast { i8*, i64 }* %79 to %..string*
  %443 = load %..string, %..string* %442, align 8
  store %..string %443, %..string* %417, align 8
  br label %for.index.loop20

for.index.done28:                                 ; preds = %for.index.loop20
  br label %defer29

defer29:                                          ; preds = %for.index.done28
  %444 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end_tab_item(i8* %444)
  br label %if.done30

if.done30:                                        ; preds = %defer29, %if.done18
  store %..string { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"csbs$279", i64 0, i64 0), i64 15 }, %..string* %80, align 8
  %445 = bitcast %runtime.Context* %110 to i8*
  %446 = call i8 @imgui.begin_tab_item(%..string* %80, i8* null, i32 0, i8* %445)
  %447 = trunc i8 %446 to i1
  br i1 %447, label %if.then31, label %if.done43

if.then31:                                        ; preds = %if.done30
  %448 = bitcast %..string* %81 to i8*
  call void @llvm.memset.p0i8.i64(i8* %448, i8 0, i64 16, i1 false)
  store i64 0, i64* %82, align 8
  %449 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 1
  store i64 -1, i64* %83, align 8
  br label %for.index.loop32

for.index.loop32:                                 ; preds = %for.index.done40, %if.then31
  %450 = load i64, i64* %83, align 8
  %451 = add i64 %450, 1
  store i64 %451, i64* %83, align 8
  %452 = load i64, i64* %449, align 8
  %453 = icmp slt i64 %451, %452
  br i1 %453, label %for.index.body33, label %for.index.done41

for.index.body33:                                 ; preds = %for.index.loop32
  %454 = load i64, i64* %83, align 8
  %455 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %11, i32 0, i32 0
  %456 = load %..string*, %..string** %455, align 8
  %457 = getelementptr %..string, %..string* %456, i64 %454
  %458 = load %..string, %..string* %457, align 8
  store %..string %458, %..string* %84, align 8
  store i64 %454, i64* %85, align 8
  %459 = load %..string, %..string* %84, align 8
  %460 = bitcast { %..any*, i64 }* %86 to i8*
  call void @llvm.memset.p0i8.i64(i8* %460, i8 0, i64 16, i1 false)
  %461 = load { %..any*, i64 }, { %..any*, i64 }* %86, align 8
  %462 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.text(%..string* %84, { %..any*, i64 }* %86, i8* %462)
  %463 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %463)
  %464 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %465 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %464, i32 0, i32 2
  %466 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %465, align 8
  %467 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %465, i32 0, i32 0
  %468 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %467, align 8
  %469 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %465, i32 0, i32 1
  %470 = load i64, i64* %469, align 8
  %471 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %88, align 8
  call void @runtime.bounds_check_error(%..string* %88, i32 198, i32 51, i64 %471, i64 %470)
  %472 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %468, i64 %471
  %473 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %472, align 8
  %474 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %472, i32 0, i32 0
  %475 = load [128 x i8]*, [128 x i8]** %474, align 8
  %476 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %472, i32 0, i32 1
  %477 = load i64, i64* %476, align 8
  %478 = load i64, i64* %85, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %89, align 8
  call void @runtime.bounds_check_error(%..string* %89, i32 198, i32 56, i64 %478, i64 %477)
  %479 = getelementptr [128 x i8], [128 x i8]* %475, i64 %478
  %480 = load [128 x i8], [128 x i8]* %479, align 1
  %481 = bitcast [128 x i8]* %87 to i8*
  %482 = bitcast [128 x i8]* %479 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %481, i8* align 1 %482, i64 128, i1 false)
  %483 = load i64, i64* %85, align 8
  %484 = bitcast %..any* %90 to i8*
  call void @llvm.memset.p0i8.i64(i8* %484, i8 0, i64 16, i1 false)
  %485 = bitcast i64* %85 to i8*
  %486 = getelementptr inbounds %..any, %..any* %90, i32 0, i32 0
  %487 = getelementptr inbounds %..any, %..any* %90, i32 0, i32 1
  store i8* %485, i8** %486, align 8
  store i64 4683743612465315844, i64* %487, align 8
  %488 = load %..any, %..any* %90, align 8
  %489 = bitcast { %..any*, i64 }* %91 to i8*
  call void @llvm.memset.p0i8.i64(i8* %489, i8 0, i64 16, i1 false)
  %490 = bitcast [1 x %..any]* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* %490, i8 0, i64 16, i1 false)
  %491 = getelementptr [1 x %..any], [1 x %..any]* %92, i64 0, i64 0
  store %..any %488, %..any* %491, align 8
  %492 = getelementptr [1 x %..any], [1 x %..any]* %92, i64 0, i64 0
  %493 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %91, i32 0, i32 0
  store %..any* %492, %..any** %493, align 8
  %494 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %91, i32 0, i32 1
  store i64 1, i64* %494, align 8
  %495 = load { %..any*, i64 }, { %..any*, i64 }* %91, align 8
  store %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$27a", i64 0, i64 0), i64 18 }, %..string* %93, align 8
  %496 = bitcast %..string* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* %496, i8 0, i64 16, i1 false)
  %497 = bitcast %runtime.Context* %110 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %94, %..string* %93, { %..any*, i64 }* %91, i8* %497)
  %498 = load %..string, %..string* %94, align 8
  %499 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %500 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %499, i32 0, i32 2
  %501 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %500, align 8
  %502 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %500, i32 0, i32 0
  %503 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %502, align 8
  %504 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %500, i32 0, i32 1
  %505 = load i64, i64* %504, align 8
  %506 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %95, align 8
  call void @runtime.bounds_check_error(%..string* %95, i32 199, i32 105, i64 %506, i64 %505)
  %507 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %503, i64 %506
  %508 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %507, align 8
  %509 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %507, i32 0, i32 0
  %510 = load [128 x i8]*, [128 x i8]** %509, align 8
  %511 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %507, i32 0, i32 1
  %512 = load i64, i64* %511, align 8
  %513 = load i64, i64* %85, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %96, align 8
  call void @runtime.bounds_check_error(%..string* %96, i32 199, i32 110, i64 %513, i64 %512)
  %514 = getelementptr [128 x i8], [128 x i8]* %510, i64 %513
  %515 = load [128 x i8], [128 x i8]* %514, align 1
  %516 = getelementptr [128 x i8], [128 x i8]* %514, i64 0, i64 0
  %517 = getelementptr i8, i8* %516, i64 0
  %518 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %97, i32 0, i32 0
  store i8* %517, i8** %518, align 8
  %519 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %97, i32 0, i32 1
  store i64 128, i64* %519, align 8
  %520 = load { i8*, i64 }, { i8*, i64 }* %97, align 8
  %521 = bitcast %runtime.Context* %110 to i8*
  %522 = call i8 @imgui.input_text(%..string* %94, { i8*, i64 }* %97, i32 0, i8* null, i8* null, i8* %521)
  store i64 0, i64* %98, align 8
  store i8 0, i8* %99, align 1
  %523 = load [128 x i8], [128 x i8]* %87, align 1
  %524 = getelementptr [128 x i8], [128 x i8]* %87, i64 0, i64 0
  %525 = getelementptr i8, i8* %524, i64 0
  %526 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %100, i32 0, i32 0
  store i8* %525, i8** %526, align 8
  %527 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %100, i32 0, i32 1
  store i64 128, i64* %527, align 8
  %528 = load { i8*, i64 }, { i8*, i64 }* %100, align 8
  %529 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %100, i32 0, i32 1
  %530 = load i64, i64* %529, align 8
  store i64 %530, i64* %101, align 8
  store i64 -1, i64* %102, align 8
  br label %for.index.loop34

for.index.loop34:                                 ; preds = %if.done39, %for.index.body33
  %531 = load i64, i64* %102, align 8
  %532 = add i64 %531, 1
  store i64 %532, i64* %102, align 8
  %533 = load i64, i64* %101, align 8
  %534 = icmp slt i64 %532, %533
  br i1 %534, label %for.index.body35, label %for.index.done40

for.index.body35:                                 ; preds = %for.index.loop34
  %535 = load i64, i64* %102, align 8
  %536 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %100, i32 0, i32 0
  %537 = load i8*, i8** %536, align 8
  %538 = getelementptr i8, i8* %537, i64 %535
  %539 = load i8, i8* %538, align 1
  store i8 %539, i8* %103, align 1
  %540 = load i8, i8* %103, align 1
  %541 = icmp eq i8 %540, 0
  %542 = zext i1 %541 to i8
  %543 = trunc i8 %542 to i1
  br i1 %543, label %if.then37, label %cmp.or36

cmp.or36:                                         ; preds = %for.index.body35
  %544 = load i8, i8* %103, align 1
  %545 = icmp eq i8 %544, 0
  %546 = zext i1 %545 to i8
  %547 = trunc i8 %546 to i1
  br i1 %547, label %if.then37, label %if.done39

if.then37:                                        ; preds = %cmp.or36, %for.index.body35
  br label %for.index.done40

unreachable38:                                    ; No predecessors!
  br label %if.done39

if.done39:                                        ; preds = %unreachable38, %cmp.or36
  %548 = load i64, i64* %98, align 8
  %549 = add i64 %548, 1
  store i64 %549, i64* %98, align 8
  br label %for.index.loop34

for.index.done40:                                 ; preds = %if.then37, %for.index.loop34
  %550 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %551 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %550, i32 0, i32 1
  %552 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %551, i32 0, i32 2
  %553 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %552, align 8
  %554 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %552, i32 0, i32 0
  %555 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %554, align 8
  %556 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %552, i32 0, i32 1
  %557 = load i64, i64* %556, align 8
  %558 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %104, align 8
  call void @runtime.bounds_check_error(%..string* %104, i32 205, i32 48, i64 %558, i64 %557)
  %559 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %555, i64 %558
  %560 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %559, align 8
  %561 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %559, i32 0, i32 0
  %562 = load %..string*, %..string** %561, align 8
  %563 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %559, i32 0, i32 1
  %564 = load i64, i64* %563, align 8
  %565 = load i64, i64* %85, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %105, align 8
  call void @runtime.bounds_check_error(%..string* %105, i32 205, i32 53, i64 %565, i64 %564)
  %566 = getelementptr %..string, %..string* %562, i64 %565
  %567 = load i64, i64* %98, align 8
  %568 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %569 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %568, i32 0, i32 2
  %570 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %569, align 8
  %571 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %569, i32 0, i32 0
  %572 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %571, align 8
  %573 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %569, i32 0, i32 1
  %574 = load i64, i64* %573, align 8
  %575 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %106, align 8
  call void @runtime.bounds_check_error(%..string* %106, i32 205, i32 112, i64 %575, i64 %574)
  %576 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %572, i64 %575
  %577 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %576, align 8
  %578 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %576, i32 0, i32 0
  %579 = load [128 x i8]*, [128 x i8]** %578, align 8
  %580 = getelementptr inbounds { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %576, i32 0, i32 1
  %581 = load i64, i64* %580, align 8
  %582 = load i64, i64* %85, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %107, align 8
  call void @runtime.bounds_check_error(%..string* %107, i32 205, i32 117, i64 %582, i64 %581)
  %583 = getelementptr [128 x i8], [128 x i8]* %579, i64 %582
  %584 = load [128 x i8], [128 x i8]* %583, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %108, align 8
  call void @runtime.slice_expr_error_hi(%..string* %108, i32 205, i32 123, i64 %567, i64 128)
  %585 = getelementptr [128 x i8], [128 x i8]* %583, i64 0, i64 0
  %586 = getelementptr i8, i8* %585, i64 0
  %587 = sub i64 %567, 0
  %588 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %109, i32 0, i32 0
  store i8* %586, i8** %588, align 8
  %589 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %109, i32 0, i32 1
  store i64 %587, i64* %589, align 8
  %590 = load { i8*, i64 }, { i8*, i64 }* %109, align 8
  %591 = bitcast { i8*, i64 }* %109 to %..string*
  %592 = load %..string, %..string* %591, align 8
  store %..string %592, %..string* %566, align 8
  br label %for.index.loop32

for.index.done41:                                 ; preds = %for.index.loop32
  br label %defer42

defer42:                                          ; preds = %for.index.done41
  %593 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end_tab_item(i8* %593)
  br label %if.done43

if.done43:                                        ; preds = %defer42, %if.done30
  br label %defer44

defer44:                                          ; preds = %if.done43
  %594 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end_tab_bar(i8* %594)
  br label %defer45

defer45:                                          ; preds = %defer44
  %595 = bitcast %runtime.Context* %110 to i8*
  call void @imgui.end(i8* %595)
  ret void
}

define internal void @main.enum_window(i64 %0, %enbench.DataToWrite* %1, %enbench.Backings* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %enbench.DataToWrite*, align 8
  %5 = alloca %enbench.Backings*, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { %..any*, i64 }, align 8
  %9 = alloca { [64 x i8]*, i64, i64, %runtime.Allocator }*, align 8
  %10 = alloca %..string, align 8
  %11 = alloca [64 x i8], align 1
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %..any, align 8
  %16 = alloca { %..any*, i64 }, align 8
  %17 = alloca [1 x %..any], align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i8*, i64 }, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8, align 1
  %23 = alloca { i8*, i64 }, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i8, align 1
  %27 = alloca %..string, align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca { i8*, i64 }, align 8
  %31 = alloca %..any, align 8
  %32 = alloca { %..any*, i64 }, align 8
  %33 = alloca [1 x %..any], align 8
  %34 = alloca %..string, align 8
  %35 = alloca %..string, align 8
  %36 = alloca i64, align 8
  %37 = alloca %runtime.Source_Code_Location, align 8
  %38 = alloca %..string, align 8
  %39 = alloca %runtime.Source_Code_Location, align 8
  %40 = alloca { i8*, i64 }, align 8
  %41 = alloca %..string, align 8
  %42 = alloca %..string, align 8
  %43 = alloca i64, align 8
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca { i8*, i64 }, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i8, align 1
  %50 = alloca [64 x i8]*, align 8
  %51 = alloca %runtime.Source_Code_Location, align 8
  %52 = alloca { [64 x i8]*, i8 }, align 8
  %53 = alloca { i8*, i64 }, align 8
  %54 = alloca %..string, align 8
  %55 = alloca { i8*, i64 }, align 8
  %56 = alloca %..string, align 8
  %57 = alloca %runtime.Source_Code_Location, align 8
  %58 = alloca %..string, align 8
  %59 = alloca %..string, align 8
  %60 = alloca { i8*, i64 }, align 8
  %61 = alloca %runtime.Source_Code_Location, align 8
  %62 = alloca %..string, align 8
  %63 = alloca %runtime.Source_Code_Location, align 8
  %64 = alloca { i8*, i64 }, align 8
  %65 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store %enbench.DataToWrite* %1, %enbench.DataToWrite** %4, align 8
  store %enbench.Backings* %2, %enbench.Backings** %5, align 8
  %66 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$27b", i64 0, i64 0), i64 12 }, %..string* %6, align 8
  %67 = bitcast %runtime.Context* %66 to i8*
  %68 = call i8 @imgui.begin(%..string* %6, i8* null, i32 0, i8* %67)
  %69 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %70 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %69, i32 0, i32 0
  %71 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %70, i32 0, i32 0
  %72 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %71, align 8
  %73 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %71, i32 0, i32 0
  %74 = load %..string*, %..string** %73, align 8
  %75 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %71, i32 0, i32 1
  %76 = load i64, i64* %75, align 8
  %77 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 212, i32 39, i64 %77, i64 %76)
  %78 = getelementptr %..string, %..string* %74, i64 %77
  %79 = load %..string, %..string* %78, align 8
  %80 = load %..string, %..string* %78, align 8
  %81 = bitcast { %..any*, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %81, i8 0, i64 16, i1 false)
  %82 = load { %..any*, i64 }, { %..any*, i64 }* %8, align 8
  %83 = bitcast %runtime.Context* %66 to i8*
  call void @imgui.text(%..string* %78, { %..any*, i64 }* %8, i8* %83)
  %84 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %85 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %84, i32 0, i32 0
  %86 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %85, align 8
  %87 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %85, i32 0, i32 0
  %88 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %87, align 8
  %89 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %85, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 214, i32 47, i64 %91, i64 %90)
  %92 = getelementptr { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %88, i64 %91
  store { [64 x i8]*, i64, i64, %runtime.Allocator }* %92, { [64 x i8]*, i64, i64, %runtime.Allocator }** %9, align 8
  %93 = bitcast [64 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %93, i8 0, i64 64, i1 false)
  store i64 0, i64* %12, align 8
  %94 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %9, align 8
  %95 = getelementptr inbounds { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %94, i32 0, i32 1
  store i64 -1, i64* %13, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done4, %entry
  %96 = load i64, i64* %13, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %13, align 8
  %98 = load i64, i64* %95, align 8
  %99 = icmp slt i64 %97, %98
  br i1 %99, label %for.index.body, label %for.index.done5

for.index.body:                                   ; preds = %for.index.loop
  %100 = load i64, i64* %13, align 8
  %101 = getelementptr inbounds { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %94, i32 0, i32 0
  %102 = load [64 x i8]*, [64 x i8]** %101, align 8
  %103 = getelementptr [64 x i8], [64 x i8]* %102, i64 %100
  %104 = load [64 x i8], [64 x i8]* %103, align 1
  store i64 %100, i64* %14, align 8
  %105 = load i64, i64* %14, align 8
  %106 = bitcast %..any* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %106, i8 0, i64 16, i1 false)
  %107 = bitcast i64* %14 to i8*
  %108 = getelementptr inbounds %..any, %..any* %15, i32 0, i32 0
  %109 = getelementptr inbounds %..any, %..any* %15, i32 0, i32 1
  store i8* %107, i8** %108, align 8
  store i64 4683743612465315844, i64* %109, align 8
  %110 = load %..any, %..any* %15, align 8
  %111 = bitcast { %..any*, i64 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %111, i8 0, i64 16, i1 false)
  %112 = bitcast [1 x %..any]* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %112, i8 0, i64 16, i1 false)
  %113 = getelementptr [1 x %..any], [1 x %..any]* %17, i64 0, i64 0
  store %..any %110, %..any* %113, align 8
  %114 = getelementptr [1 x %..any], [1 x %..any]* %17, i64 0, i64 0
  %115 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %16, i32 0, i32 0
  store %..any* %114, %..any** %115, align 8
  %116 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %16, i32 0, i32 1
  store i64 1, i64* %116, align 8
  %117 = load { %..any*, i64 }, { %..any*, i64 }* %16, align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$27c", i64 0, i64 0), i64 9 }, %..string* %18, align 8
  %118 = bitcast %..string* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %118, i8 0, i64 16, i1 false)
  %119 = bitcast %runtime.Context* %66 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %19, %..string* %18, { %..any*, i64 }* %16, i8* %119)
  %120 = load %..string, %..string* %19, align 8
  %121 = load [64 x i8], [64 x i8]* %103, align 1
  %122 = getelementptr [64 x i8], [64 x i8]* %103, i64 0, i64 0
  %123 = getelementptr i8, i8* %122, i64 0
  %124 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  store i8* %123, i8** %124, align 8
  %125 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  store i64 64, i64* %125, align 8
  %126 = load { i8*, i64 }, { i8*, i64 }* %20, align 8
  %127 = bitcast %runtime.Context* %66 to i8*
  %128 = call i8 @imgui.input_text(%..string* %19, { i8*, i64 }* %20, i32 0, i8* null, i8* null, i8* %127)
  store i64 0, i64* %21, align 8
  store i8 0, i8* %22, align 1
  %129 = load [64 x i8], [64 x i8]* %103, align 1
  %130 = getelementptr [64 x i8], [64 x i8]* %103, i64 0, i64 0
  %131 = getelementptr i8, i8* %130, i64 0
  %132 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  store i8* %131, i8** %132, align 8
  %133 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  store i64 64, i64* %133, align 8
  %134 = load { i8*, i64 }, { i8*, i64 }* %23, align 8
  %135 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 1
  %136 = load i64, i64* %135, align 8
  store i64 %136, i64* %24, align 8
  store i64 -1, i64* %25, align 8
  br label %for.index.loop1

for.index.loop1:                                  ; preds = %if.done, %for.index.body
  %137 = load i64, i64* %25, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %25, align 8
  %139 = load i64, i64* %24, align 8
  %140 = icmp slt i64 %138, %139
  br i1 %140, label %for.index.body2, label %for.index.done

for.index.body2:                                  ; preds = %for.index.loop1
  %141 = load i64, i64* %25, align 8
  %142 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %23, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = getelementptr i8, i8* %143, i64 %141
  %145 = load i8, i8* %144, align 1
  store i8 %145, i8* %26, align 1
  %146 = load i8, i8* %26, align 1
  %147 = icmp eq i8 %146, 0
  %148 = zext i1 %147 to i8
  %149 = trunc i8 %148 to i1
  br i1 %149, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %for.index.body2
  %150 = load i8, i8* %26, align 1
  %151 = icmp eq i8 %150, 32
  %152 = zext i1 %151 to i8
  %153 = trunc i8 %152 to i1
  br i1 %153, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %for.index.body2
  br label %for.index.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %cmp.or
  %154 = load i64, i64* %21, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %21, align 8
  br label %for.index.loop1

for.index.done:                                   ; preds = %if.then, %for.index.loop1
  %156 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %157 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %156, i32 0, i32 0
  %158 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %157, i32 0, i32 1
  %159 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %158, align 8
  %160 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %158, i32 0, i32 0
  %161 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %160, align 8
  %162 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %158, i32 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %27, align 8
  call void @runtime.bounds_check_error(%..string* %27, i32 223, i32 24, i64 %164, i64 %163)
  %165 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %161, i64 %164
  %166 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %165, align 8
  %167 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %165, i32 0, i32 0
  %168 = load %..string*, %..string** %167, align 8
  %169 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %165, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = load i64, i64* %14, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %28, align 8
  call void @runtime.bounds_check_error(%..string* %28, i32 223, i32 29, i64 %171, i64 %170)
  %172 = getelementptr %..string, %..string* %168, i64 %171
  %173 = load i64, i64* %21, align 8
  %174 = load [64 x i8], [64 x i8]* %103, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %29, align 8
  call void @runtime.slice_expr_error_hi(%..string* %29, i32 223, i32 50, i64 %173, i64 64)
  %175 = getelementptr [64 x i8], [64 x i8]* %103, i64 0, i64 0
  %176 = getelementptr i8, i8* %175, i64 0
  %177 = sub i64 %173, 0
  %178 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 0
  store i8* %176, i8** %178, align 8
  %179 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 1
  store i64 %177, i64* %179, align 8
  %180 = load { i8*, i64 }, { i8*, i64 }* %30, align 8
  %181 = bitcast { i8*, i64 }* %30 to %..string*
  %182 = load %..string, %..string* %181, align 8
  store %..string %182, %..string* %172, align 8
  %183 = bitcast %runtime.Context* %66 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %183)
  %184 = load i64, i64* %14, align 8
  %185 = bitcast %..any* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 16, i1 false)
  %186 = bitcast i64* %14 to i8*
  %187 = getelementptr inbounds %..any, %..any* %31, i32 0, i32 0
  %188 = getelementptr inbounds %..any, %..any* %31, i32 0, i32 1
  store i8* %186, i8** %187, align 8
  store i64 4683743612465315844, i64* %188, align 8
  %189 = load %..any, %..any* %31, align 8
  %190 = bitcast { %..any*, i64 }* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %190, i8 0, i64 16, i1 false)
  %191 = bitcast [1 x %..any]* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %191, i8 0, i64 16, i1 false)
  %192 = getelementptr [1 x %..any], [1 x %..any]* %33, i64 0, i64 0
  store %..any %189, %..any* %192, align 8
  %193 = getelementptr [1 x %..any], [1 x %..any]* %33, i64 0, i64 0
  %194 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %32, i32 0, i32 0
  store %..any* %193, %..any** %194, align 8
  %195 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %32, i32 0, i32 1
  store i64 1, i64* %195, align 8
  %196 = load { %..any*, i64 }, { %..any*, i64 }* %32, align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$27d", i64 0, i64 0), i64 10 }, %..string* %34, align 8
  %197 = bitcast %..string* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %197, i8 0, i64 16, i1 false)
  %198 = bitcast %runtime.Context* %66 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %35, %..string* %34, { %..any*, i64 }* %32, i8* %198)
  %199 = load %..string, %..string* %35, align 8
  %200 = bitcast i64* %36 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %200, align 4
  %201 = load i64, i64* %36, align 8
  %202 = bitcast %runtime.Context* %66 to i8*
  %203 = call i8 @imgui.button(%..string* %35, i64 %201, i8* %202)
  %204 = trunc i8 %203 to i1
  br i1 %204, label %if.then3, label %if.done4

if.then3:                                         ; preds = %for.index.done
  %205 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %9, align 8
  %206 = load i64, i64* %14, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 227, i32 13, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %37, align 8
  %207 = bitcast %runtime.Context* %66 to i8*
  call void @runtime.ordered_remove-48837({ [64 x i8]*, i64, i64, %runtime.Allocator }* %205, i64 %206, %runtime.Source_Code_Location* %37, i8* %207)
  %208 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %209 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %208, i32 0, i32 0
  %210 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %209, i32 0, i32 1
  %211 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %210, align 8
  %212 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %210, i32 0, i32 0
  %213 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %212, align 8
  %214 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %210, i32 0, i32 1
  %215 = load i64, i64* %214, align 8
  %216 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %38, align 8
  call void @runtime.bounds_check_error(%..string* %38, i32 228, i32 44, i64 %216, i64 %215)
  %217 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %213, i64 %216
  %218 = load i64, i64* %14, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 228, i32 13, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %39, align 8
  %219 = bitcast %runtime.Context* %66 to i8*
  call void @runtime.ordered_remove-48848({ %..string*, i64, i64, %runtime.Allocator }* %217, i64 %218, %runtime.Source_Code_Location* %39, i8* %219)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %for.index.done
  br label %for.index.loop

for.index.done5:                                  ; preds = %for.index.loop
  %220 = load [64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, align 1
  %221 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, i64 0, i64 0), i8** %221, align 8
  %222 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  store i64 64, i64* %222, align 8
  %223 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %41, align 8
  %224 = bitcast %runtime.Context* %66 to i8*
  %225 = call i8 @imgui.input_text(%..string* %41, { i8*, i64 }* %40, i32 0, i8* null, i8* null, i8* %224)
  %226 = bitcast %runtime.Context* %66 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %226)
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$280", i64 0, i64 0), i64 8 }, %..string* %42, align 8
  %227 = bitcast i64* %43 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %227, align 4
  %228 = load i64, i64* %43, align 8
  %229 = bitcast %runtime.Context* %66 to i8*
  %230 = call i8 @imgui.button(%..string* %42, i64 %228, i8* %229)
  %231 = trunc i8 %230 to i1
  br i1 %231, label %if.then6, label %if.done16

if.then6:                                         ; preds = %for.index.done5
  store i64 0, i64* %44, align 8
  store i8 0, i8* %45, align 1
  %232 = load [64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, align 1
  %233 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, i64 0, i64 0), i8** %233, align 8
  %234 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  store i64 64, i64* %234, align 8
  %235 = load { i8*, i64 }, { i8*, i64 }* %46, align 8
  %236 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  %237 = load i64, i64* %236, align 8
  store i64 %237, i64* %47, align 8
  store i64 -1, i64* %48, align 8
  br label %for.index.loop7

for.index.loop7:                                  ; preds = %if.done12, %if.then6
  %238 = load i64, i64* %48, align 8
  %239 = add i64 %238, 1
  store i64 %239, i64* %48, align 8
  %240 = load i64, i64* %47, align 8
  %241 = icmp slt i64 %239, %240
  br i1 %241, label %for.index.body8, label %for.index.done13

for.index.body8:                                  ; preds = %for.index.loop7
  %242 = load i64, i64* %48, align 8
  %243 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  %244 = load i8*, i8** %243, align 8
  %245 = getelementptr i8, i8* %244, i64 %242
  %246 = load i8, i8* %245, align 1
  store i8 %246, i8* %49, align 1
  %247 = load i8, i8* %49, align 1
  %248 = icmp eq i8 %247, 0
  %249 = zext i1 %248 to i8
  %250 = trunc i8 %249 to i1
  br i1 %250, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %for.index.body8
  %251 = load i8, i8* %49, align 1
  %252 = icmp eq i8 %251, 32
  %253 = zext i1 %252 to i8
  %254 = trunc i8 %253 to i1
  br i1 %254, label %if.then10, label %if.done12

if.then10:                                        ; preds = %cmp.or9, %for.index.body8
  br label %for.index.done13

unreachable11:                                    ; No predecessors!
  br label %if.done12

if.done12:                                        ; preds = %unreachable11, %cmp.or9
  %255 = load i64, i64* %44, align 8
  %256 = add i64 %255, 1
  store i64 %256, i64* %44, align 8
  br label %for.index.loop7

for.index.done13:                                 ; preds = %if.then10, %for.index.loop7
  %257 = load i64, i64* %44, align 8
  %258 = icmp sgt i64 %257, 0
  %259 = zext i1 %258 to i8
  %260 = trunc i8 %259 to i1
  br i1 %260, label %if.then14, label %if.done15

if.then14:                                        ; preds = %for.index.done13
  %261 = getelementptr inbounds %runtime.Context, %runtime.Context* %66, i32 0, i32 0
  %262 = load %runtime.Allocator, %runtime.Allocator* %261, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 243, i32 28, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %51, align 8
  %263 = bitcast { [64 x i8]*, i8 }* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* %263, i8 0, i64 16, i1 false)
  %264 = bitcast %runtime.Context* %66 to i8*
  call void @runtime.new-48863({ [64 x i8]*, i8 }* sret({ [64 x i8]*, i8 }*) %52, %runtime.Allocator* %261, %runtime.Source_Code_Location* %51, i8* %264)
  %265 = load { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %52, align 8
  %266 = getelementptr inbounds { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %52, i32 0, i32 0
  %267 = load [64 x i8]*, [64 x i8]** %266, align 8
  store [64 x i8]* %267, [64 x i8]** %50, align 8
  %268 = load [64 x i8]*, [64 x i8]** %50, align 8
  %269 = load [64 x i8], [64 x i8]* %268, align 1
  %270 = getelementptr [64 x i8], [64 x i8]* %268, i64 0, i64 0
  %271 = getelementptr i8, i8* %270, i64 0
  %272 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 0
  store i8* %271, i8** %272, align 8
  %273 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 1
  store i64 64, i64* %273, align 8
  %274 = load { i8*, i64 }, { i8*, i64 }* %53, align 8
  %275 = load i64, i64* %44, align 8
  %276 = load [64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %54, align 8
  call void @runtime.slice_expr_error_hi(%..string* %54, i32 244, i32 46, i64 %275, i64 64)
  %277 = sub i64 %275, 0
  %278 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %55, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, i64 0, i64 0), i8** %278, align 8
  %279 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %55, i32 0, i32 1
  store i64 %277, i64* %279, align 8
  %280 = load { i8*, i64 }, { i8*, i64 }* %55, align 8
  %281 = call i64 @runtime.copy_slice-48381({ i8*, i64 }* %53, { i8*, i64 }* %55)
  %282 = load %enbench.Backings*, %enbench.Backings** %5, align 8
  %283 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %282, i32 0, i32 0
  %284 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %283, align 8
  %285 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %283, i32 0, i32 0
  %286 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %285, align 8
  %287 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %283, i32 0, i32 1
  %288 = load i64, i64* %287, align 8
  %289 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %56, align 8
  call void @runtime.bounds_check_error(%..string* %56, i32 245, i32 43, i64 %289, i64 %288)
  %290 = getelementptr { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %286, i64 %289
  %291 = load [64 x i8]*, [64 x i8]** %50, align 8
  %292 = load [64 x i8], [64 x i8]* %291, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 245, i32 13, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %57, align 8
  %293 = bitcast %runtime.Context* %66 to i8*
  %294 = call i64 @runtime.append_elem-48892({ [64 x i8]*, i64, i64, %runtime.Allocator }* %290, [64 x i8]* %291, %runtime.Source_Code_Location* %57, i8* %293)
  %295 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %296 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %295, i32 0, i32 0
  %297 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %296, i32 0, i32 1
  %298 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %297, align 8
  %299 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %297, i32 0, i32 0
  %300 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %299, align 8
  %301 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %297, i32 0, i32 1
  %302 = load i64, i64* %301, align 8
  %303 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %58, align 8
  call void @runtime.bounds_check_error(%..string* %58, i32 246, i32 36, i64 %303, i64 %302)
  %304 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %300, i64 %303
  %305 = load i64, i64* %44, align 8
  %306 = load [64 x i8]*, [64 x i8]** %50, align 8
  %307 = load [64 x i8], [64 x i8]* %306, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %59, align 8
  call void @runtime.slice_expr_error_hi(%..string* %59, i32 246, i32 65, i64 %305, i64 64)
  %308 = getelementptr [64 x i8], [64 x i8]* %306, i64 0, i64 0
  %309 = getelementptr i8, i8* %308, i64 0
  %310 = sub i64 %305, 0
  %311 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 0
  store i8* %309, i8** %311, align 8
  %312 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %60, i32 0, i32 1
  store i64 %310, i64* %312, align 8
  %313 = load { i8*, i64 }, { i8*, i64 }* %60, align 8
  %314 = bitcast { i8*, i64 }* %60 to %..string*
  %315 = load %..string, %..string* %314, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 246, i32 13, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %61, align 8
  %316 = bitcast %runtime.Context* %66 to i8*
  %317 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %304, %..string* %314, %runtime.Source_Code_Location* %61, i8* %316)
  %318 = load %enbench.DataToWrite*, %enbench.DataToWrite** %4, align 8
  %319 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %318, i32 0, i32 1
  %320 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %319, i32 0, i32 0
  %321 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %320, align 8
  %322 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %320, i32 0, i32 0
  %323 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %322, align 8
  %324 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %320, i32 0, i32 1
  %325 = load i64, i64* %324, align 8
  %326 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %62, align 8
  call void @runtime.bounds_check_error(%..string* %62, i32 247, i32 50, i64 %326, i64 %325)
  %327 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %323, i64 %326
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 247, i32 13, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$27e", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %63, align 8
  %328 = bitcast %runtime.Context* %66 to i8*
  %329 = call i64 @runtime.append_elem-48958({ i64*, i64, i64, %runtime.Allocator }* %327, i64 -1, %runtime.Source_Code_Location* %63, i8* %328)
  %330 = load [64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, align 1
  %331 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %64, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.enum_window-.newtext_buff-48849, i64 0, i64 0), i8** %331, align 8
  %332 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %64, i32 0, i32 1
  store i64 64, i64* %332, align 8
  %333 = load { i8*, i64 }, { i8*, i64 }* %64, align 8
  %334 = bitcast { i8*, i64 }* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* %334, i8 0, i64 16, i1 false)
  call void @mem.zero_slice-48987({ i8*, i64 }* sret({ i8*, i64 }*) %65, { i8*, i64 }* %64)
  %335 = load { i8*, i64 }, { i8*, i64 }* %65, align 8
  br label %if.done15

if.done15:                                        ; preds = %if.then14, %for.index.done13
  br label %if.done16

if.done16:                                        ; preds = %if.done15, %for.index.done5
  br label %defer

defer:                                            ; preds = %if.done16
  %336 = bitcast %runtime.Context* %66 to i8*
  call void @imgui.end(i8* %336)
  ret void
}

define internal i64 @main.input_text_window(%enbench.DataToWrite* %0, %enbench.Backings* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %enbench.DataToWrite*, align 8
  %3 = alloca %enbench.Backings*, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  %11 = alloca { i8*, i64 }, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca [64 x i8]*, align 8
  %16 = alloca %runtime.Source_Code_Location, align 8
  %17 = alloca { [64 x i8]*, i8 }, align 8
  %18 = alloca %..string, align 8
  %19 = alloca { i8*, i64 }, align 8
  %20 = alloca %runtime.Source_Code_Location, align 8
  %21 = alloca %..string, align 8
  %22 = alloca { %..string*, i64 }, align 8
  %23 = alloca %runtime.Source_Code_Location, align 8
  %24 = alloca { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %25 = alloca %runtime.Source_Code_Location, align 8
  %26 = alloca { i8*, i64 }, align 8
  %27 = alloca { i8*, i64 }, align 8
  %28 = alloca %..string, align 8
  %29 = alloca i64, align 8
  %30 = alloca %..string, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca %..string, align 8
  %34 = alloca i64, align 8
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  %37 = alloca %..string, align 8
  %38 = alloca i64, align 8
  %39 = alloca { %..string*, i64 }, align 8
  %40 = alloca { %..string*, i64 }, align 8
  %41 = alloca { %..string*, i64 }, align 8
  %42 = alloca [64 x i8], align 1
  %43 = alloca %..string, align 8
  %44 = alloca { [64 x i8]*, i64, i64, %runtime.Allocator }*, align 8
  %45 = alloca i64, align 8
  %46 = alloca %runtime.Source_Code_Location, align 8
  %47 = alloca %runtime.Source_Code_Location, align 8
  %48 = alloca { %..string*, i64 }, align 8
  %49 = alloca { %..string*, i64 }, align 8
  %50 = alloca { %..string*, i64 }, align 8
  %51 = alloca { i64*, i64 }, align 8
  %52 = alloca %runtime.Source_Code_Location, align 8
  %53 = alloca { { i64*, i64 }, i8 }, align 8
  %54 = alloca %..string, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca %..string, align 8
  %59 = alloca i64, align 8
  %60 = alloca i64, align 8
  %61 = alloca i8, align 1
  %62 = alloca { i64, i8 }, align 8
  %63 = alloca %..string, align 8
  %64 = alloca { i64*, i64, i64, %runtime.Allocator }, align 8
  %65 = alloca { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, align 8
  %66 = alloca i64, align 8
  %67 = alloca i64, align 8
  %68 = alloca { i64*, i64, i64, %runtime.Allocator }*, align 8
  %69 = alloca i64, align 8
  %70 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %2, align 8
  store %enbench.Backings* %1, %enbench.Backings** %3, align 8
  %71 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$281", i64 0, i64 0), i64 10 }, %..string* %4, align 8
  %72 = bitcast %runtime.Context* %71 to i8*
  %73 = call i8 @imgui.begin(%..string* %4, i8* null, i32 0, i8* %72)
  %74 = load [64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, align 1
  %75 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, i64 0, i64 0), i8** %75, align 8
  %76 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  store i64 64, i64* %76, align 8
  %77 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$282", i64 0, i64 0), i64 10 }, %..string* %6, align 8
  %78 = bitcast %runtime.Context* %71 to i8*
  %79 = call i8 @imgui.input_text(%..string* %6, { i8*, i64 }* %5, i32 0, i8* null, i8* null, i8* %78)
  %80 = bitcast %runtime.Context* %71 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %80)
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$283", i64 0, i64 0), i64 8 }, %..string* %7, align 8
  %81 = bitcast i64* %8 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %81, align 4
  %82 = load i64, i64* %8, align 8
  %83 = bitcast %runtime.Context* %71 to i8*
  %84 = call i8 @imgui.button(%..string* %7, i64 %82, i8* %83)
  %85 = trunc i8 %84 to i1
  br i1 %85, label %if.then, label %if.done4

if.then:                                          ; preds = %entry
  store i64 0, i64* %9, align 8
  store i8 0, i8* %10, align 1
  %86 = load [64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, align 1
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, i64 0, i64 0), i8** %87, align 8
  %88 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  store i64 64, i64* %88, align 8
  %89 = load { i8*, i64 }, { i8*, i64 }* %11, align 8
  %90 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  store i64 %91, i64* %12, align 8
  store i64 -1, i64* %13, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %if.then
  %92 = load i64, i64* %13, align 8
  %93 = add i64 %92, 1
  store i64 %93, i64* %13, align 8
  %94 = load i64, i64* %12, align 8
  %95 = icmp slt i64 %93, %94
  br i1 %95, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %96 = load i64, i64* %13, align 8
  %97 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr i8, i8* %98, i64 %96
  %100 = load i8, i8* %99, align 1
  store i8 %100, i8* %14, align 1
  %101 = load i8, i8* %14, align 1
  %102 = icmp eq i8 %101, 0
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.index.body
  %105 = load i8, i8* %14, align 1
  %106 = icmp eq i8 %105, 32
  %107 = zext i1 %106 to i8
  %108 = trunc i8 %107 to i1
  br i1 %108, label %if.then1, label %if.done

if.then1:                                         ; preds = %cmp.or, %for.index.body
  br label %for.index.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %cmp.or
  %109 = load i64, i64* %9, align 8
  %110 = add i64 %109, 1
  store i64 %110, i64* %9, align 8
  br label %for.index.loop

for.index.done:                                   ; preds = %if.then1, %for.index.loop
  %111 = load i64, i64* %9, align 8
  %112 = icmp sgt i64 %111, 0
  %113 = zext i1 %112 to i8
  %114 = trunc i8 %113 to i1
  br i1 %114, label %if.then2, label %if.done3

if.then2:                                         ; preds = %for.index.done
  %115 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 0
  %116 = load %runtime.Allocator, %runtime.Allocator* %115, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 266, i32 28, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %16, align 8
  %117 = bitcast { [64 x i8]*, i8 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %117, i8 0, i64 16, i1 false)
  %118 = bitcast %runtime.Context* %71 to i8*
  call void @runtime.new-48863({ [64 x i8]*, i8 }* sret({ [64 x i8]*, i8 }*) %17, %runtime.Allocator* %115, %runtime.Source_Code_Location* %16, i8* %118)
  %119 = load { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %17, align 8
  %120 = getelementptr inbounds { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %17, i32 0, i32 0
  %121 = load [64 x i8]*, [64 x i8]** %120, align 8
  store [64 x i8]* %121, [64 x i8]** %15, align 8
  %122 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %123 = load i64, i64* %9, align 8
  %124 = load [64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, align 1
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %18, align 8
  call void @runtime.slice_expr_error_hi(%..string* %18, i32 268, i32 65, i64 %123, i64 64)
  %125 = sub i64 %123, 0
  %126 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, i64 0, i64 0), i8** %126, align 8
  %127 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %19, i32 0, i32 1
  store i64 %125, i64* %127, align 8
  %128 = load { i8*, i64 }, { i8*, i64 }* %19, align 8
  %129 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 0
  %130 = load %runtime.Allocator, %runtime.Allocator* %129, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 268, i32 35, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %20, align 8
  %131 = bitcast %..string* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %131, i8 0, i64 16, i1 false)
  %132 = bitcast %runtime.Context* %71 to i8*
  call void @strings.clone_from_bytes(%..string* sret(%..string*) %21, { i8*, i64 }* %19, %runtime.Allocator* %129, %runtime.Source_Code_Location* %20, i8* %132)
  %133 = load %..string, %..string* %21, align 8
  %134 = bitcast { %..string*, i64 }* %22 to i8*
  call void @llvm.memset.p0i8.i64(i8* %134, i8 0, i64 16, i1 false)
  %135 = load { %..string*, i64 }, { %..string*, i64 }* %22, align 8
  %136 = bitcast %runtime.Context* %71 to i8*
  call void @enbench.add_enum(%enbench.DataToWrite* %122, %..string* %21, { %..string*, i64 }* %22, i8* %136)
  %137 = load %enbench.Backings*, %enbench.Backings** %3, align 8
  %138 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %137, i32 0, i32 0
  %139 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 0
  %140 = load %runtime.Allocator, %runtime.Allocator* %139, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 269, i32 44, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %23, align 8
  %141 = bitcast { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %141, i8 0, i64 48, i1 false)
  %142 = bitcast %runtime.Context* %71 to i8*
  call void @runtime.make_dynamic_array-49024({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* sret({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }*) %24, %runtime.Allocator* %139, %runtime.Source_Code_Location* %23, i8* %142)
  %143 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %24, align 8
  %144 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %24, i32 0, i32 0
  %145 = load { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %144, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 269, i32 13, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %25, align 8
  %146 = bitcast %runtime.Context* %71 to i8*
  %147 = call i64 @runtime.append_elem-49037({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %138, { [64 x i8]*, i64, i64, %runtime.Allocator }* %144, %runtime.Source_Code_Location* %25, i8* %146)
  %148 = load [64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, align 1
  %149 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 0
  store i8* getelementptr inbounds ([64 x i8], [64 x i8]* @main.input_text_window-.new_enum_buff-48988, i64 0, i64 0), i8** %149, align 8
  %150 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %26, i32 0, i32 1
  store i64 64, i64* %150, align 8
  %151 = load { i8*, i64 }, { i8*, i64 }* %26, align 8
  %152 = bitcast { i8*, i64 }* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %152, i8 0, i64 16, i1 false)
  call void @mem.zero_slice-48987({ i8*, i64 }* sret({ i8*, i64 }*) %27, { i8*, i64 }* %26)
  %153 = load { i8*, i64 }, { i8*, i64 }* %27, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %for.index.done
  br label %if.done4

if.done4:                                         ; preds = %if.done3, %entry
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$285", i64 0, i64 0), i64 7 }, %..string* %28, align 8
  %154 = bitcast i64* %29 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %154, align 4
  %155 = load i64, i64* %29, align 8
  %156 = bitcast %runtime.Context* %71 to i8*
  %157 = call i8 @imgui.begin_list_box(%..string* %28, i64 %155, i8* %156)
  %158 = trunc i8 %157 to i1
  br i1 %158, label %if.then5, label %if.done11

if.then5:                                         ; preds = %if.done4
  %159 = bitcast %..string* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %159, i8 0, i64 16, i1 false)
  store i64 0, i64* %31, align 8
  %160 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %161 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %160, i32 0, i32 0
  %162 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %161, i32 0, i32 0
  %163 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %162, i32 0, i32 1
  store i64 -1, i64* %32, align 8
  br label %for.index.loop6

for.index.loop6:                                  ; preds = %if.done9, %if.then5
  %164 = load i64, i64* %32, align 8
  %165 = add i64 %164, 1
  store i64 %165, i64* %32, align 8
  %166 = load i64, i64* %163, align 8
  %167 = icmp slt i64 %165, %166
  br i1 %167, label %for.index.body7, label %for.index.done10

for.index.body7:                                  ; preds = %for.index.loop6
  %168 = load i64, i64* %32, align 8
  %169 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %162, i32 0, i32 0
  %170 = load %..string*, %..string** %169, align 8
  %171 = getelementptr %..string, %..string* %170, i64 %168
  %172 = load %..string, %..string* %171, align 8
  store %..string %172, %..string* %33, align 8
  store i64 %168, i64* %34, align 8
  %173 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  %174 = load i64, i64* %34, align 8
  %175 = icmp eq i64 %173, %174
  %176 = zext i1 %175 to i8
  store i8 %176, i8* %35, align 1
  %177 = load %..string, %..string* %33, align 8
  %178 = load %..string, %..string* %33, align 8
  %179 = load i8, i8* %35, align 1
  %180 = icmp ne i8 %179, 0
  %181 = bitcast i64* %36 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %181, align 4
  %182 = load i64, i64* %36, align 8
  %183 = bitcast %runtime.Context* %71 to i8*
  %184 = call i8 @imgui.selectable_bool(%..string* %33, i1 %180, i32 0, i64 %182, i8* %183)
  %185 = trunc i8 %184 to i1
  br i1 %185, label %if.then8, label %if.done9

if.then8:                                         ; preds = %for.index.body7
  %186 = load i64, i64* %34, align 8
  store i64 %186, i64* @main.input_text_window-.item_current_index-49062, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %for.index.body7
  br label %for.index.loop6

for.index.done10:                                 ; preds = %for.index.loop6
  br label %defer

defer:                                            ; preds = %for.index.done10
  %187 = bitcast %runtime.Context* %71 to i8*
  call void @imgui.end_list_box(i8* %187)
  br label %if.done11

if.done11:                                        ; preds = %defer, %if.done4
  %188 = bitcast %runtime.Context* %71 to i8*
  call void @imgui.same_line(float 0.000000e+00, float -1.000000e+00, i8* %188)
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$286", i64 0, i64 0), i64 11 }, %..string* %37, align 8
  %189 = bitcast i64* %38 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %189, align 4
  %190 = load i64, i64* %38, align 8
  %191 = bitcast %runtime.Context* %71 to i8*
  %192 = call i8 @imgui.button(%..string* %37, i64 %190, i8* %191)
  %193 = trunc i8 %192 to i1
  br i1 %193, label %if.then12, label %if.done33

if.then12:                                        ; preds = %if.done11
  %194 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  %195 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %196 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %195, i32 0, i32 0
  %197 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %196, i32 0, i32 0
  %198 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %197, align 8
  %199 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %197, i32 0, i32 1
  %200 = load i64, i64* %199, align 8
  %201 = sub i64 %200, 1
  %202 = icmp eq i64 %194, %201
  %203 = zext i1 %202 to i8
  %204 = trunc i8 %203 to i1
  br i1 %204, label %if.then13, label %if.done15

if.then13:                                        ; preds = %if.then12
  br label %defer14

defer14:                                          ; preds = %if.then13
  %205 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  %206 = sub i64 %205, 1
  store i64 %206, i64* @main.input_text_window-.item_current_index-49062, align 8
  br label %if.done15

if.done15:                                        ; preds = %defer14, %if.then12
  %207 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %208 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %207, i32 0, i32 0
  %209 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %208, i32 0, i32 0
  %210 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %209, align 8
  %211 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %209, i32 0, i32 1
  %212 = load i64, i64* %211, align 8
  %213 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %209, i32 0, i32 0
  %214 = load %..string*, %..string** %213, align 8
  %215 = getelementptr %..string, %..string* %214, i64 0
  %216 = sub i64 %212, 0
  %217 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %40, i32 0, i32 0
  store %..string* %215, %..string** %217, align 8
  %218 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %40, i32 0, i32 1
  store i64 %216, i64* %218, align 8
  %219 = load { %..string*, i64 }, { %..string*, i64 }* %40, align 8
  %220 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 1
  %221 = load %runtime.Allocator, %runtime.Allocator* %220, align 8
  %222 = bitcast { %..string*, i64 }* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %222, i8 0, i64 16, i1 false)
  %223 = bitcast %runtime.Context* %71 to i8*
  call void @slice.mapper-49087({ %..string*, i64 }* sret({ %..string*, i64 }*) %41, { %..string*, i64 }* %40, i8* bitcast (void (%..string*, %..string*, i8*)* @"main.input_text_window$anon-12" to i8*), %runtime.Allocator* %220, i8* %223)
  %224 = load { %..string*, i64 }, { %..string*, i64 }* %41, align 8
  store { %..string*, i64 } %224, { %..string*, i64 }* %39, align 8
  %225 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %226 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  %227 = bitcast %runtime.Context* %71 to i8*
  call void @enbench.delete_enum(%enbench.DataToWrite* %225, i64 %226, i8* %227)
  %228 = bitcast [64 x i8]* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %228, i8 0, i64 64, i1 false)
  %229 = load %enbench.Backings*, %enbench.Backings** %3, align 8
  %230 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %229, i32 0, i32 0
  %231 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %230, align 8
  %232 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %230, i32 0, i32 0
  %233 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %232, align 8
  %234 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %230, i32 0, i32 1
  %235 = load i64, i64* %234, align 8
  %236 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %43, align 8
  call void @runtime.bounds_check_error(%..string* %43, i32 291, i32 41, i64 %236, i64 %235)
  %237 = getelementptr { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %233, i64 %236
  store { [64 x i8]*, i64, i64, %runtime.Allocator }* %237, { [64 x i8]*, i64, i64, %runtime.Allocator }** %44, align 8
  %238 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %44, align 8
  %239 = getelementptr inbounds { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %238, i32 0, i32 1
  store i64 -1, i64* %45, align 8
  br label %for.index.loop16

for.index.loop16:                                 ; preds = %for.index.body17, %if.done15
  %240 = load i64, i64* %45, align 8
  %241 = add i64 %240, 1
  store i64 %241, i64* %45, align 8
  %242 = load i64, i64* %239, align 8
  %243 = icmp slt i64 %241, %242
  br i1 %243, label %for.index.body17, label %for.index.done18

for.index.body17:                                 ; preds = %for.index.loop16
  %244 = load i64, i64* %45, align 8
  %245 = getelementptr inbounds { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %238, i32 0, i32 0
  %246 = load [64 x i8]*, [64 x i8]** %245, align 8
  %247 = getelementptr [64 x i8], [64 x i8]* %246, i64 %244
  %248 = load [64 x i8], [64 x i8]* %247, align 1
  %249 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 0
  %250 = load %runtime.Allocator, %runtime.Allocator* %249, align 8
  %251 = bitcast [64 x i8]* %247 to i8*
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 291, i32 64, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %46, align 8
  %252 = bitcast %runtime.Context* %71 to i8*
  %253 = call i8 @runtime.mem_free(i8* %251, %runtime.Allocator* %249, %runtime.Source_Code_Location* %46, i8* %252)
  br label %for.index.loop16

for.index.done18:                                 ; preds = %for.index.loop16
  %254 = load %enbench.Backings*, %enbench.Backings** %3, align 8
  %255 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %254, i32 0, i32 0
  %256 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 292, i32 9, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %47, align 8
  %257 = bitcast %runtime.Context* %71 to i8*
  call void @runtime.ordered_remove-49099({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %255, i64 %256, %runtime.Source_Code_Location* %47, i8* %257)
  %258 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %259 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %258, i32 0, i32 0
  %260 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %259, i32 0, i32 0
  %261 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %260, align 8
  %262 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %260, i32 0, i32 1
  %263 = load i64, i64* %262, align 8
  %264 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %260, i32 0, i32 0
  %265 = load %..string*, %..string** %264, align 8
  %266 = getelementptr %..string, %..string* %265, i64 0
  %267 = sub i64 %263, 0
  %268 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %49, i32 0, i32 0
  store %..string* %266, %..string** %268, align 8
  %269 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %49, i32 0, i32 1
  store i64 %267, i64* %269, align 8
  %270 = load { %..string*, i64 }, { %..string*, i64 }* %49, align 8
  %271 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 1
  %272 = load %runtime.Allocator, %runtime.Allocator* %271, align 8
  %273 = bitcast { %..string*, i64 }* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* %273, i8 0, i64 16, i1 false)
  %274 = bitcast %runtime.Context* %71 to i8*
  call void @slice.mapper-49087({ %..string*, i64 }* sret({ %..string*, i64 }*) %50, { %..string*, i64 }* %49, i8* bitcast (void (%..string*, %..string*, i8*)* @"main.input_text_window$anon-13" to i8*), %runtime.Allocator* %271, i8* %274)
  %275 = load { %..string*, i64 }, { %..string*, i64 }* %50, align 8
  store { %..string*, i64 } %275, { %..string*, i64 }* %48, align 8
  %276 = load { %..string*, i64 }, { %..string*, i64 }* %39, align 8
  %277 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %39, i32 0, i32 1
  %278 = load i64, i64* %277, align 8
  %279 = getelementptr inbounds %runtime.Context, %runtime.Context* %71, i32 0, i32 1
  %280 = load %runtime.Allocator, %runtime.Allocator* %279, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, i32 295, i32 24, %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$284", i64 0, i64 0), i64 17 } }, %runtime.Source_Code_Location* %52, align 8
  %281 = bitcast { { i64*, i64 }, i8 }* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* %281, i8 0, i64 24, i1 false)
  %282 = bitcast %runtime.Context* %71 to i8*
  call void @runtime.make_slice-49127({ { i64*, i64 }, i8 }* sret({ { i64*, i64 }, i8 }*) %53, i64 %278, %runtime.Allocator* %279, %runtime.Source_Code_Location* %52, i8* %282)
  %283 = load { { i64*, i64 }, i8 }, { { i64*, i64 }, i8 }* %53, align 8
  %284 = getelementptr inbounds { { i64*, i64 }, i8 }, { { i64*, i64 }, i8 }* %53, i32 0, i32 0
  %285 = load { i64*, i64 }, { i64*, i64 }* %284, align 8
  store { i64*, i64 } %285, { i64*, i64 }* %51, align 8
  %286 = bitcast %..string* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* %286, i8 0, i64 16, i1 false)
  store i64 0, i64* %55, align 8
  %287 = load { %..string*, i64 }, { %..string*, i64 }* %39, align 8
  %288 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %39, i32 0, i32 1
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %56, align 8
  store i64 -1, i64* %57, align 8
  br label %for.index.loop19

for.index.loop19:                                 ; preds = %if.done22, %for.index.done18
  %290 = load i64, i64* %57, align 8
  %291 = add i64 %290, 1
  store i64 %291, i64* %57, align 8
  %292 = load i64, i64* %56, align 8
  %293 = icmp slt i64 %291, %292
  br i1 %293, label %for.index.body20, label %for.index.done23

for.index.body20:                                 ; preds = %for.index.loop19
  %294 = load i64, i64* %57, align 8
  %295 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %39, i32 0, i32 0
  %296 = load %..string*, %..string** %295, align 8
  %297 = getelementptr %..string, %..string* %296, i64 %294
  %298 = load %..string, %..string* %297, align 8
  store %..string %298, %..string* %58, align 8
  store i64 %294, i64* %59, align 8
  %299 = load { %..string*, i64 }, { %..string*, i64 }* %48, align 8
  %300 = load %..string, %..string* %58, align 8
  %301 = bitcast { i64, i8 }* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %301, i8 0, i64 16, i1 false)
  %302 = bitcast %runtime.Context* %71 to i8*
  call void @slice.linear_search-49187({ i64, i8 }* sret({ i64, i8 }*) %62, { %..string*, i64 }* %48, %..string* %58, i8* %302)
  %303 = load { i64, i8 }, { i64, i8 }* %62, align 8
  %304 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %62, i32 0, i32 0
  %305 = load i64, i64* %304, align 8
  %306 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %62, i32 0, i32 1
  %307 = load i8, i8* %306, align 1
  store i64 %305, i64* %60, align 8
  store i8 %307, i8* %61, align 1
  %308 = load { i64*, i64 }, { i64*, i64 }* %51, align 8
  %309 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %51, i32 0, i32 0
  %310 = load i64*, i64** %309, align 8
  %311 = load i64, i64* %59, align 8
  %312 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %51, i32 0, i32 1
  %313 = load i64, i64* %312, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %63, align 8
  call void @runtime.bounds_check_error(%..string* %63, i32 299, i32 25, i64 %311, i64 %313)
  %314 = getelementptr i64, i64* %310, i64 %311
  %315 = load i8, i8* %61, align 1
  %316 = trunc i8 %315 to i1
  br i1 %316, label %if.then21, label %if.else

if.then21:                                        ; preds = %for.index.body20
  %317 = load i64, i64* %60, align 8
  br label %if.done22

if.else:                                          ; preds = %for.index.body20
  br label %if.done22

if.done22:                                        ; preds = %if.else, %if.then21
  %318 = phi i64 [ %317, %if.then21 ], [ -1, %if.else ]
  store i64 %318, i64* %314, align 8
  br label %for.index.loop19

for.index.done23:                                 ; preds = %for.index.loop19
  %319 = bitcast { i64*, i64, i64, %runtime.Allocator }* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* %319, i8 0, i64 40, i1 false)
  %320 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %321 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %320, i32 0, i32 1
  %322 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %321, i32 0, i32 0
  store { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %322, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }** %65, align 8
  %323 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }** %65, align 8
  %324 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %323, i32 0, i32 1
  store i64 -1, i64* %66, align 8
  br label %for.index.loop24

for.index.loop24:                                 ; preds = %for.index.done31, %for.index.done23
  %325 = load i64, i64* %66, align 8
  %326 = add i64 %325, 1
  store i64 %326, i64* %66, align 8
  %327 = load i64, i64* %324, align 8
  %328 = icmp slt i64 %326, %327
  br i1 %328, label %for.index.body25, label %for.index.done32

for.index.body25:                                 ; preds = %for.index.loop24
  %329 = load i64, i64* %66, align 8
  %330 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %323, i32 0, i32 0
  %331 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %330, align 8
  %332 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %331, i64 %329
  %333 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %332, align 8
  store i64 0, i64* %67, align 8
  store { i64*, i64, i64, %runtime.Allocator }* %332, { i64*, i64, i64, %runtime.Allocator }** %68, align 8
  %334 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %68, align 8
  %335 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %334, i32 0, i32 1
  store i64 -1, i64* %69, align 8
  br label %for.index.loop26

for.index.loop26:                                 ; preds = %if.done30, %for.index.body25
  %336 = load i64, i64* %69, align 8
  %337 = add i64 %336, 1
  store i64 %337, i64* %69, align 8
  %338 = load i64, i64* %335, align 8
  %339 = icmp slt i64 %337, %338
  br i1 %339, label %for.index.body27, label %for.index.done31

for.index.body27:                                 ; preds = %for.index.loop26
  %340 = load i64, i64* %69, align 8
  %341 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %334, i32 0, i32 0
  %342 = load i64*, i64** %341, align 8
  %343 = getelementptr i64, i64* %342, i64 %340
  %344 = load i64, i64* %343, align 8
  %345 = load i64, i64* %343, align 8
  %346 = icmp eq i64 %345, -1
  %347 = zext i1 %346 to i8
  %348 = trunc i8 %347 to i1
  br i1 %348, label %if.then28, label %if.else29

if.then28:                                        ; preds = %for.index.body27
  %349 = load i64, i64* %343, align 8
  br label %if.done30

if.else29:                                        ; preds = %for.index.body27
  %350 = load { i64*, i64 }, { i64*, i64 }* %51, align 8
  %351 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %51, i32 0, i32 0
  %352 = load i64*, i64** %351, align 8
  %353 = load i64, i64* %343, align 8
  %354 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %51, i32 0, i32 1
  %355 = load i64, i64* %354, align 8
  store %..string { i8* getelementptr inbounds ([77 x i8], [77 x i8]* @"csbs$267", i64 0, i64 0), i64 76 }, %..string* %70, align 8
  call void @runtime.bounds_check_error(%..string* %70, i32 303, i32 68, i64 %353, i64 %355)
  %356 = getelementptr i64, i64* %352, i64 %353
  %357 = load i64, i64* %356, align 8
  br label %if.done30

if.done30:                                        ; preds = %if.else29, %if.then28
  %358 = phi i64 [ %349, %if.then28 ], [ %357, %if.else29 ]
  store i64 %358, i64* %343, align 8
  br label %for.index.loop26

for.index.done31:                                 ; preds = %for.index.loop26
  br label %for.index.loop24

for.index.done32:                                 ; preds = %for.index.loop24
  br label %if.done33

if.done33:                                        ; preds = %for.index.done32, %if.done11
  %359 = load i64, i64* @main.input_text_window-.item_current_index-49062, align 8
  br label %defer34

defer34:                                          ; preds = %if.done33
  %360 = bitcast %runtime.Context* %71 to i8*
  call void @imgui.end(i8* %360)
  ret i64 %359
}

define internal void @main.compile_window(%enbench.DataToWrite* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %enbench.DataToWrite*, align 8
  %2 = alloca %..string, align 8
  %3 = alloca %..string, align 8
  %4 = alloca i64, align 8
  %5 = alloca %..string, align 8
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %1, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  store %..string { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"csbs$287", i64 0, i64 0), i64 14 }, %..string* %2, align 8
  %8 = bitcast %runtime.Context* %7 to i8*
  %9 = call i8 @imgui.begin(%..string* %2, i8* null, i32 0, i8* %8)
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$288", i64 0, i64 0), i64 8 }, %..string* %3, align 8
  %10 = bitcast i64* %4 to %imgui.Vec2*
  store %imgui.Vec2 zeroinitializer, %imgui.Vec2* %10, align 4
  %11 = load i64, i64* %4, align 8
  %12 = bitcast %runtime.Context* %7 to i8*
  %13 = call i8 @imgui.button(%..string* %3, i64 %11, i8* %12)
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %15 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  store %..string { i8* getelementptr inbounds ([28 x i8], [28 x i8]* @"csbs$266", i64 0, i64 0), i64 27 }, %..string* %5, align 8
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$289", i64 0, i64 0), i64 4 }, %..string* %6, align 8
  %16 = bitcast %runtime.Context* %7 to i8*
  call void @enbench.write_data_to_file(%..string* %5, %..string* %6, %enbench.DataToWrite* %15, i8* %16)
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  br label %defer

defer:                                            ; preds = %if.done
  %17 = bitcast %runtime.Context* %7 to i8*
  call void @imgui.end(i8* %17)
  ret void
}

define internal void @main.init_imgui_state(%main.Imgui_State* noalias sret(%main.Imgui_State) %agg.result, %sdl2.Window* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %sdl2.Window*, align 8
  %2 = alloca %main.Imgui_State, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %sdl2.Window* %0, %sdl2.Window** %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = bitcast %main.Imgui_State* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 128, i1 false)
  %5 = bitcast %main.Imgui_State* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %5, i8 0, i64 128, i1 false)
  %6 = bitcast %runtime.Context* %3 to i8*
  %7 = call %imgui.Context* @imgui.create_context(%imgui.Font_Atlas* null, i8* %6)
  %8 = bitcast %runtime.Context* %3 to i8*
  call void @imgui.style_colors_dark(%imgui.Style* null, i8* %8)
  %9 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %2, i32 0, i32 0
  %10 = bitcast %runtime.Context* %3 to i8*
  call void @imgui_impl_sdl.setup_state(%imgui_impl_sdl.SDL_State* %9, i8* %10)
  %11 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %2, i32 0, i32 1
  %12 = bitcast %runtime.Context* %3 to i8*
  call void @imgui_impl_opengl.setup_state(%imgui_impl_opengl.OpenGL_State* %11, i8* %12)
  %13 = load %main.Imgui_State, %main.Imgui_State* %2, align 8
  %14 = bitcast %main.Imgui_State* %agg.result to i8*
  %15 = bitcast %main.Imgui_State* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 128, i1 false)
  ret void
}

define internal void @main.imgui_new_frame(%sdl2.Window* %0, %main.Imgui_State* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %sdl2.Window*, align 8
  %3 = alloca %main.Imgui_State*, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %sdl2.Window* %0, %sdl2.Window** %2, align 8
  store %main.Imgui_State* %1, %main.Imgui_State** %3, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  %5 = load %sdl2.Window*, %sdl2.Window** %2, align 8
  %6 = bitcast %runtime.Context* %4 to i8*
  call void @imgui_impl_sdl.update_display_size(%sdl2.Window* %5, i8* %6)
  %7 = load %main.Imgui_State*, %main.Imgui_State** %3, align 8
  %8 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %7, i32 0, i32 0
  %9 = load %sdl2.Window*, %sdl2.Window** %2, align 8
  %10 = bitcast %runtime.Context* %4 to i8*
  call void @imgui_impl_sdl.update_mouse(%imgui_impl_sdl.SDL_State* %8, %sdl2.Window* %9, i8* %10)
  %11 = load %main.Imgui_State*, %main.Imgui_State** %3, align 8
  %12 = getelementptr inbounds %main.Imgui_State, %main.Imgui_State* %11, i32 0, i32 0
  %13 = bitcast %runtime.Context* %4 to i8*
  call void @imgui_impl_sdl.update_dt(%imgui_impl_sdl.SDL_State* %12, i8* %13)
  ret void
}

define internal void @fmt.tprint(%..string* noalias sret(%..string) %agg.result, { %..any*, i64 }* %0, %..string* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = bitcast %strings.Builder* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 40, i1 false)
  %7 = getelementptr inbounds %runtime.Context, %runtime.Context* %5, i32 0, i32 1
  %8 = load %runtime.Allocator, %runtime.Allocator* %7, align 8
  %9 = bitcast %runtime.Context* %5 to i8*
  %10 = call %strings.Builder* @strings.builder_init_none(%strings.Builder* %2, %runtime.Allocator* %7, i8* %9)
  %11 = load { %..any*, i64 }, { %..any*, i64 }* %0, align 8
  %12 = load %..string, %..string* %1, align 8
  %13 = bitcast %..string* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = bitcast %runtime.Context* %5 to i8*
  call void @fmt.sbprint(%..string* sret(%..string*) %3, %strings.Builder* %2, { %..any*, i64 }* %0, %..string* %1, i8* %14)
  %15 = load %..string, %..string* %3, align 8
  %16 = load %strings.Builder, %strings.Builder* %2, align 8
  %17 = bitcast %..string* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %5 to i8*
  call void @strings.to_string(%..string* sret(%..string*) %4, %strings.Builder* %2, i8* %18)
  %19 = load %..string, %..string* %4, align 8
  %20 = bitcast %..string* %agg.result to i8*
  %21 = bitcast %..string* %4 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i1 false)
  ret void
}

define internal void @fmt.tprintf(%..string* noalias sret(%..string) %agg.result, %..string* %0, { %..any*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %strings.Builder, align 8
  %3 = alloca %..string, align 8
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %5 = bitcast i8* %__.context_ptr to %runtime.Context*
  %6 = bitcast %strings.Builder* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %6, i8 0, i64 40, i1 false)
  %7 = getelementptr inbounds %runtime.Context, %runtime.Context* %5, i32 0, i32 1
  %8 = load %runtime.Allocator, %runtime.Allocator* %7, align 8
  %9 = bitcast %runtime.Context* %5 to i8*
  %10 = call %strings.Builder* @strings.builder_init_none(%strings.Builder* %2, %runtime.Allocator* %7, i8* %9)
  %11 = load %..string, %..string* %0, align 8
  %12 = load { %..any*, i64 }, { %..any*, i64 }* %1, align 8
  %13 = bitcast %..string* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 16, i1 false)
  %14 = bitcast %runtime.Context* %5 to i8*
  call void @fmt.sbprintf(%..string* sret(%..string*) %3, %strings.Builder* %2, %..string* %0, { %..any*, i64 }* %1, i8* %14)
  %15 = load %..string, %..string* %3, align 8
  %16 = load %strings.Builder, %strings.Builder* %2, align 8
  %17 = bitcast %..string* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %5 to i8*
  call void @strings.to_string(%..string* sret(%..string*) %4, %strings.Builder* %2, i8* %18)
  %19 = load %..string, %..string* %4, align 8
  %20 = bitcast %..string* %agg.result to i8*
  %21 = bitcast %..string* %4 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i1 false)
  ret void
}

define internal void @fmt.sbprint(%..string* noalias sret(%..string) %agg.result, %strings.Builder* %0, { %..any*, i64 }* %1, %..string* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %strings.Builder*, align 8
  %4 = alloca %io.Writer, align 8
  %5 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %strings.Builder*, %strings.Builder** %3, align 8
  %8 = bitcast %io.Writer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i1 false)
  %9 = bitcast %runtime.Context* %6 to i8*
  call void @strings.to_writer(%io.Writer* sret(%io.Writer*) %4, %strings.Builder* %7, i8* %9)
  %10 = load %io.Writer, %io.Writer* %4, align 8
  %11 = load { %..any*, i64 }, { %..any*, i64 }* %1, align 8
  %12 = load %..string, %..string* %2, align 8
  %13 = bitcast %runtime.Context* %6 to i8*
  %14 = call i64 @fmt.wprint(%io.Writer* %4, { %..any*, i64 }* %1, %..string* %2, i8* %13)
  %15 = load %strings.Builder*, %strings.Builder** %3, align 8
  %16 = load %strings.Builder, %strings.Builder* %15, align 8
  %17 = bitcast %..string* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %6 to i8*
  call void @strings.to_string(%..string* sret(%..string*) %5, %strings.Builder* %15, i8* %18)
  %19 = load %..string, %..string* %5, align 8
  %20 = bitcast %..string* %agg.result to i8*
  %21 = bitcast %..string* %5 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i1 false)
  ret void
}

define internal void @fmt.sbprintf(%..string* noalias sret(%..string) %agg.result, %strings.Builder* %0, %..string* %1, { %..any*, i64 }* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %strings.Builder*, align 8
  %4 = alloca %io.Writer, align 8
  %5 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %strings.Builder* %0, %strings.Builder** %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %strings.Builder*, %strings.Builder** %3, align 8
  %8 = bitcast %io.Writer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 16, i1 false)
  %9 = bitcast %runtime.Context* %6 to i8*
  call void @strings.to_writer(%io.Writer* sret(%io.Writer*) %4, %strings.Builder* %7, i8* %9)
  %10 = load %io.Writer, %io.Writer* %4, align 8
  %11 = load %..string, %..string* %1, align 8
  %12 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %13 = bitcast %runtime.Context* %6 to i8*
  %14 = call i64 @fmt.wprintf(%io.Writer* %4, %..string* %1, { %..any*, i64 }* %2, i8* %13)
  %15 = load %strings.Builder*, %strings.Builder** %3, align 8
  %16 = load %strings.Builder, %strings.Builder* %15, align 8
  %17 = bitcast %..string* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %6 to i8*
  call void @strings.to_string(%..string* sret(%..string*) %5, %strings.Builder* %15, i8* %18)
  %19 = load %..string, %..string* %5, align 8
  %20 = bitcast %..string* %agg.result to i8*
  %21 = bitcast %..string* %5 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i1 false)
  ret void
}

define internal i64 @fmt.wprint(%io.Writer* %0, { %..any*, i64 }* %1, %..string* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %10 = bitcast i8* %__.context_ptr to %runtime.Context*
  %11 = bitcast %fmt.Info* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %11, i8 0, i64 120, i1 false)
  %12 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %13 = load %io.Writer, %io.Writer* %0, align 8
  store %io.Writer %13, %io.Writer* %12, align 8
  store i64 0, i64* %4, align 8
  %14 = load { %..any*, i64 }, { %..any*, i64 }* %1, align 8
  %15 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %1, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %5, align 8
  store i64 -1, i64* %6, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %entry
  %17 = load i64, i64* %6, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* %6, align 8
  %19 = load i64, i64* %5, align 8
  %20 = icmp slt i64 %18, %19
  br i1 %20, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %21 = load i64, i64* %6, align 8
  store i64 %21, i64* %7, align 8
  %22 = load i64, i64* %7, align 8
  %23 = icmp sgt i64 %22, 0
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %for.index.body
  %26 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %27 = load %io.Writer, %io.Writer* %26, align 8
  %28 = load %..string, %..string* %2, align 8
  %29 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %30 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %30, i8 0, i64 16, i1 false)
  %31 = bitcast %runtime.Context* %10 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %8, %io.Writer* %26, %..string* %2, i64* %29, i8* %31)
  %32 = load { i64, i32 }, { i64, i32 }* %8, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %for.index.body
  %33 = load { %..any*, i64 }, { %..any*, i64 }* %1, align 8
  %34 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %1, i32 0, i32 0
  %35 = load %..any*, %..any** %34, align 8
  %36 = load i64, i64* %7, align 8
  %37 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %1, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %9, align 8
  call void @runtime.bounds_check_error(%..string* %9, i32 211, i32 23, i64 %36, i64 %38)
  %39 = getelementptr %..any, %..any* %35, i64 %36
  %40 = load %..any, %..any* %39, align 8
  %41 = bitcast %runtime.Context* %10 to i8*
  call void @fmt.fmt_value(%fmt.Info* %3, %..any* %39, i32 118, i8* %41)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %42 = load %io.Writer, %io.Writer* %0, align 8
  %43 = bitcast %io.Writer* %0 to %io.Flusher*
  %44 = load %io.Flusher, %io.Flusher* %43, align 8
  %45 = bitcast %runtime.Context* %10 to i8*
  %46 = call i32 @io.flush(%io.Flusher* %43, i8* %45)
  %47 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %48 = load i64, i64* %47, align 8
  ret i64 %48
}

define internal i64 @fmt.wprintf(%io.Writer* %0, %..string* %1, { %..any*, i64 }* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca i64, align 8
  %8 = alloca %fmt.Info, align 8
  %9 = alloca i64, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..string, align 8
  %12 = alloca %..string, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %..string, align 8
  %15 = alloca { i64, i32 }, align 8
  %16 = alloca i8, align 1
  %17 = alloca %..string, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca %..string, align 8
  %21 = alloca { i64, i64, i8 }, align 8
  %22 = alloca %..string, align 8
  %23 = alloca { i64, i64, i8 }, align 8
  %24 = alloca %..string, align 8
  %25 = alloca { i64, i32 }, align 8
  %26 = alloca { i64, i64, i8 }, align 8
  %27 = alloca %..string, align 8
  %28 = alloca %..string, align 8
  %29 = alloca { i64, i64, i8 }, align 8
  %30 = alloca { i64, i64, i8 }, align 8
  %31 = alloca %..string, align 8
  %32 = alloca { i64, i32 }, align 8
  %33 = alloca { i64, i64, i8 }, align 8
  %34 = alloca { i64, i64, i8 }, align 8
  %35 = alloca %..string, align 8
  %36 = alloca { i64, i32 }, align 8
  %37 = alloca i32, align 4
  %38 = alloca i64, align 8
  %39 = alloca %..string, align 8
  %40 = alloca %..string, align 8
  %41 = alloca { i32, i64 }, align 8
  %42 = alloca %..string, align 8
  %43 = alloca { i64, i32 }, align 8
  %44 = alloca %..string, align 8
  %45 = alloca { i64, i32 }, align 8
  %46 = alloca %..string, align 8
  %47 = alloca %..string, align 8
  %48 = alloca %..string, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  %51 = alloca i8, align 1
  %52 = alloca { i64, i64, i8 }, align 8
  %53 = alloca %..string, align 8
  %54 = alloca { i64, i32 }, align 8
  %55 = alloca i64, align 8
  %56 = alloca %..string, align 8
  %57 = alloca %..string, align 8
  %58 = alloca %..string, align 8
  %59 = alloca %..string, align 8
  %60 = alloca %..any, align 8
  %61 = alloca %..string, align 8
  %62 = alloca { i64, i32 }, align 8
  %63 = alloca i32, align 4
  %64 = alloca %..string, align 8
  %65 = alloca %..string, align 8
  %66 = alloca { i64, i64, i8 }, align 8
  %67 = alloca %..string, align 8
  %68 = alloca { i64, i64, i8 }, align 8
  %69 = alloca %..string, align 8
  %70 = alloca { i64, i32 }, align 8
  %71 = alloca { i64, i64, i8 }, align 8
  %72 = alloca %..string, align 8
  %73 = alloca %..string, align 8
  %74 = alloca { i64, i64, i8 }, align 8
  %75 = alloca { i64, i64, i8 }, align 8
  %76 = alloca %..string, align 8
  %77 = alloca { i64, i32 }, align 8
  %78 = alloca { i64, i64, i8 }, align 8
  %79 = alloca { i64, i64, i8 }, align 8
  %80 = alloca %..string, align 8
  %81 = alloca { i64, i32 }, align 8
  %82 = alloca i64, align 8
  %83 = alloca %..string, align 8
  %84 = alloca %..string, align 8
  %85 = alloca { i32, i64 }, align 8
  %86 = alloca %..string, align 8
  %87 = alloca { i64, i32 }, align 8
  %88 = alloca i32, align 4
  %89 = alloca i64, align 8
  %90 = alloca %..string, align 8
  %91 = alloca %..string, align 8
  %92 = alloca { i32, i64 }, align 8
  %93 = alloca %..string, align 8
  %94 = alloca { i64, i32 }, align 8
  %95 = alloca %..string, align 8
  %96 = alloca { i64, i32 }, align 8
  %97 = alloca %..string, align 8
  %98 = alloca { i64, i32 }, align 8
  %99 = alloca %..string, align 8
  %100 = alloca %..string, align 8
  %101 = alloca { i64, i32 }, align 8
  %102 = alloca %..any, align 8
  %103 = alloca i64, align 8
  %104 = alloca %..string, align 8
  %105 = alloca { %..any*, i64 }, align 8
  %106 = alloca i64, align 8
  %107 = alloca i64, align 8
  %108 = alloca %..any, align 8
  %109 = alloca i64, align 8
  %110 = alloca %..string, align 8
  %111 = alloca { i64, i32 }, align 8
  %112 = alloca %..string, align 8
  %113 = alloca { i64, i32 }, align 8
  %114 = alloca %..string, align 8
  %115 = alloca %..string, align 8
  %116 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %117 = bitcast i8* %__.context_ptr to %runtime.Context*
  %118 = bitcast %fmt.Info* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %118, i8 0, i64 120, i1 false)
  store i64 0, i64* %4, align 8
  %119 = load %..string, %..string* %1, align 8
  %120 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %121 = load i64, i64* %120, align 8
  store i64 %121, i64* %5, align 8
  store i8 0, i8* %6, align 1
  br label %for.init

for.init:                                         ; preds = %entry
  store i64 0, i64* %7, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done133, %if.then13, %if.done9, %for.init
  %122 = load i64, i64* %7, align 8
  %123 = load i64, i64* %5, align 8
  %124 = icmp slt i64 %122, %123
  %125 = zext i1 %124 to i8
  %126 = trunc i8 %125 to i1
  br i1 %126, label %for.body, label %for.done134

for.body:                                         ; preds = %for.loop
  %127 = bitcast %fmt.Info* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %127, i8 0, i64 120, i1 false)
  %128 = bitcast %fmt.Info* %8 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %128, i8* getelementptr inbounds (%fmt.Info, %fmt.Info* @"ggv$4b", i32 0, i32 0), i64 120, i1 false)
  %129 = load %io.Writer, %io.Writer* %0, align 8
  %130 = getelementptr inbounds %fmt.Info, %fmt.Info* %8, i32 0, i32 16
  store %io.Writer %129, %io.Writer* %130, align 8
  %131 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 11
  %132 = load i8, i8* %131, align 1
  %133 = getelementptr inbounds %fmt.Info, %fmt.Info* %8, i32 0, i32 11
  store i8 %132, i8* %133, align 1
  %134 = load %fmt.Info, %fmt.Info* %8, align 8
  %135 = bitcast %fmt.Info* %3 to i8*
  %136 = bitcast %fmt.Info* %8 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %135, i8* align 8 %136, i64 120, i1 false)
  %137 = load i64, i64* %7, align 8
  store i64 %137, i64* %9, align 8
  br label %for.loop1

for.loop1:                                        ; preds = %for.body3, %for.body
  %138 = load i64, i64* %7, align 8
  %139 = load i64, i64* %5, align 8
  %140 = icmp slt i64 %138, %139
  %141 = zext i1 %140 to i8
  %142 = trunc i8 %141 to i1
  br i1 %142, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %for.loop1
  %143 = load %..string, %..string* %1, align 8
  %144 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  %146 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 246, i32 24, i64 %148, i64 %147)
  %149 = getelementptr i8, i8* %145, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 37
  %152 = zext i1 %151 to i8
  %153 = trunc i8 %152 to i1
  br i1 %153, label %for.done, label %cmp.or

cmp.or:                                           ; preds = %cmp.and
  %154 = load %..string, %..string* %1, align 8
  %155 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %158 = load i64, i64* %157, align 8
  %159 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %11, align 8
  call void @runtime.bounds_check_error(%..string* %11, i32 246, i32 41, i64 %159, i64 %158)
  %160 = getelementptr i8, i8* %156, i64 %159
  %161 = load i8, i8* %160, align 1
  %162 = icmp eq i8 %161, 123
  %163 = zext i1 %162 to i8
  %164 = trunc i8 %163 to i1
  br i1 %164, label %for.done, label %cmp.or2

cmp.or2:                                          ; preds = %cmp.or
  %165 = load %..string, %..string* %1, align 8
  %166 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %169 = load i64, i64* %168, align 8
  %170 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %12, align 8
  call void @runtime.bounds_check_error(%..string* %12, i32 246, i32 58, i64 %170, i64 %169)
  %171 = getelementptr i8, i8* %167, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = icmp eq i8 %172, 125
  %174 = zext i1 %173 to i8
  %175 = trunc i8 %174 to i1
  br i1 %175, label %for.done, label %for.body3

for.body3:                                        ; preds = %cmp.or2
  %176 = load i64, i64* %7, align 8
  %177 = add i64 %176, 1
  store i64 %177, i64* %7, align 8
  br label %for.loop1

for.done:                                         ; preds = %cmp.or2, %cmp.or, %cmp.and, %for.loop1
  %178 = load i64, i64* %7, align 8
  %179 = load i64, i64* %9, align 8
  %180 = icmp sgt i64 %178, %179
  %181 = zext i1 %180 to i8
  %182 = trunc i8 %181 to i1
  br i1 %182, label %if.then, label %if.done

if.then:                                          ; preds = %for.done
  %183 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %184 = load %io.Writer, %io.Writer* %183, align 8
  %185 = load i64, i64* %9, align 8
  %186 = load i64, i64* %7, align 8
  %187 = load %..string, %..string* %1, align 8
  %188 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %189 = load i64, i64* %188, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %13, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %13, i32 250, i32 34, i64 %185, i64 %186, i64 %189)
  %190 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr i8, i8* %191, i64 %185
  %193 = sub i64 %186, %185
  %194 = getelementptr inbounds %..string, %..string* %14, i32 0, i32 0
  store i8* %192, i8** %194, align 8
  %195 = getelementptr inbounds %..string, %..string* %14, i32 0, i32 1
  store i64 %193, i64* %195, align 8
  %196 = load %..string, %..string* %14, align 8
  %197 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %198 = bitcast { i64, i32 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %198, i8 0, i64 16, i1 false)
  %199 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %15, %io.Writer* %183, %..string* %14, i64* %197, i8* %199)
  %200 = load { i64, i32 }, { i64, i32 }* %15, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %for.done
  %201 = load i64, i64* %7, align 8
  %202 = load i64, i64* %5, align 8
  %203 = icmp sge i64 %201, %202
  %204 = zext i1 %203 to i8
  %205 = trunc i8 %204 to i1
  br i1 %205, label %if.then4, label %if.done5

if.then4:                                         ; preds = %if.done
  br label %for.done134

unreachable:                                      ; No predecessors!
  br label %if.done5

if.done5:                                         ; preds = %unreachable, %if.done
  %206 = load %..string, %..string* %1, align 8
  %207 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %210 = load i64, i64* %209, align 8
  %211 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %17, align 8
  call void @runtime.bounds_check_error(%..string* %17, i32 256, i32 15, i64 %211, i64 %210)
  %212 = getelementptr i8, i8* %208, i64 %211
  %213 = load i8, i8* %212, align 1
  store i8 %213, i8* %16, align 1
  %214 = load i64, i64* %7, align 8
  %215 = add i64 %214, 1
  store i64 %215, i64* %7, align 8
  %216 = load i8, i8* %16, align 1
  %217 = icmp eq i8 %216, 125
  %218 = zext i1 %217 to i8
  %219 = trunc i8 %218 to i1
  br i1 %219, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.done5
  %220 = load i64, i64* %7, align 8
  %221 = load i64, i64* %5, align 8
  %222 = icmp slt i64 %220, %221
  %223 = zext i1 %222 to i8
  %224 = trunc i8 %223 to i1
  br i1 %224, label %cmp.and7, label %if.done9

cmp.and7:                                         ; preds = %if.then6
  %225 = load %..string, %..string* %1, align 8
  %226 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %227 = load i8*, i8** %226, align 8
  %228 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %229 = load i64, i64* %228, align 8
  %230 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %18, align 8
  call void @runtime.bounds_check_error(%..string* %18, i32 261, i32 22, i64 %230, i64 %229)
  %231 = getelementptr i8, i8* %227, i64 %230
  %232 = load i8, i8* %231, align 1
  %233 = load i8, i8* %16, align 1
  %234 = icmp eq i8 %232, %233
  %235 = zext i1 %234 to i8
  %236 = trunc i8 %235 to i1
  br i1 %236, label %if.then8, label %if.done9

if.then8:                                         ; preds = %cmp.and7
  %237 = load i64, i64* %7, align 8
  %238 = add i64 %237, 1
  store i64 %238, i64* %7, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %cmp.and7, %if.then6
  %239 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %240 = load %io.Writer, %io.Writer* %239, align 8
  %241 = load i8, i8* %16, align 1
  %242 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %243 = bitcast %runtime.Context* %117 to i8*
  %244 = call i32 @io.write_byte_to_writer(%io.Writer* %239, i8 %241, i64* %242, i8* %243)
  br label %for.loop

unreachable10:                                    ; No predecessors!
  br label %if.done17

if.else:                                          ; preds = %if.done5
  %245 = load i8, i8* %16, align 1
  %246 = icmp eq i8 %245, 123
  %247 = zext i1 %246 to i8
  %248 = trunc i8 %247 to i1
  br i1 %248, label %if.then11, label %if.done16

if.then11:                                        ; preds = %if.else
  %249 = load i64, i64* %7, align 8
  %250 = load i64, i64* %5, align 8
  %251 = icmp slt i64 %249, %250
  %252 = zext i1 %251 to i8
  %253 = trunc i8 %252 to i1
  br i1 %253, label %cmp.and12, label %if.done15

cmp.and12:                                        ; preds = %if.then11
  %254 = load %..string, %..string* %1, align 8
  %255 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %256 = load i8*, i8** %255, align 8
  %257 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %258 = load i64, i64* %257, align 8
  %259 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %19, align 8
  call void @runtime.bounds_check_error(%..string* %19, i32 268, i32 22, i64 %259, i64 %258)
  %260 = getelementptr i8, i8* %256, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = load i8, i8* %16, align 1
  %263 = icmp eq i8 %261, %262
  %264 = zext i1 %263 to i8
  %265 = trunc i8 %264 to i1
  br i1 %265, label %if.then13, label %if.done15

if.then13:                                        ; preds = %cmp.and12
  %266 = load i64, i64* %7, align 8
  %267 = add i64 %266, 1
  store i64 %267, i64* %7, align 8
  %268 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %269 = load %io.Writer, %io.Writer* %268, align 8
  %270 = load i8, i8* %16, align 1
  %271 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %272 = bitcast %runtime.Context* %117 to i8*
  %273 = call i32 @io.write_byte_to_writer(%io.Writer* %268, i8 %270, i64* %271, i8* %272)
  br label %for.loop

unreachable14:                                    ; No predecessors!
  br label %if.done15

if.done15:                                        ; preds = %unreachable14, %cmp.and12, %if.then11
  br label %if.done16

if.done16:                                        ; preds = %if.done15, %if.else
  br label %if.done17

if.done17:                                        ; preds = %if.done16, %unreachable10
  %274 = load i8, i8* %16, align 1
  %275 = icmp eq i8 %274, 37
  %276 = zext i1 %275 to i8
  %277 = trunc i8 %276 to i1
  br i1 %277, label %if.then18, label %if.else63

if.then18:                                        ; preds = %if.done17
  br label %for.loop19

for.loop19:                                       ; preds = %for.post, %if.then18
  %278 = load i64, i64* %7, align 8
  %279 = load i64, i64* %5, align 8
  %280 = icmp slt i64 %278, %279
  %281 = zext i1 %280 to i8
  %282 = trunc i8 %281 to i1
  br i1 %282, label %for.body20, label %for.done26

for.body20:                                       ; preds = %for.loop19
  %283 = load %..string, %..string* %1, align 8
  %284 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %285 = load i8*, i8** %284, align 8
  %286 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %287 = load i64, i64* %286, align 8
  %288 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %20, align 8
  call void @runtime.bounds_check_error(%..string* %20, i32 278, i32 16, i64 %288, i64 %287)
  %289 = getelementptr i8, i8* %285, i64 %288
  %290 = load i8, i8* %289, align 1
  switch i8 %290, label %switch.default.body [
    i8 43, label %switch.case.body
    i8 45, label %switch.case.body21
    i8 32, label %switch.case.body22
    i8 35, label %switch.case.body23
    i8 48, label %switch.case.body24
  ]

switch.case.body:                                 ; preds = %for.body20
  %291 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 1
  store i8 1, i8* %291, align 1
  br label %switch.done

switch.case.body21:                               ; preds = %for.body20
  %292 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  store i8 1, i8* %292, align 1
  %293 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  store i8 0, i8* %293, align 1
  br label %switch.done

switch.case.body22:                               ; preds = %for.body20
  %294 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 2
  store i8 1, i8* %294, align 1
  br label %switch.done

switch.case.body23:                               ; preds = %for.body20
  %295 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 4
  store i8 1, i8* %295, align 1
  br label %switch.done

switch.case.body24:                               ; preds = %for.body20
  %296 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  %297 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  %298 = load i8, i8* %297, align 1
  %299 = icmp eq i8 %298, 0
  %300 = zext i1 %299 to i8
  store i8 %300, i8* %296, align 1
  br label %switch.done

switch.default.body:                              ; preds = %for.body20
  br label %for.done26

unreachable25:                                    ; No predecessors!
  br label %switch.done

switch.done:                                      ; preds = %unreachable25, %switch.case.body24, %switch.case.body23, %switch.case.body22, %switch.case.body21, %switch.case.body
  br label %for.post

for.post:                                         ; preds = %switch.done
  %301 = load i64, i64* %7, align 8
  %302 = add i64 %301, 1
  store i64 %302, i64* %7, align 8
  br label %for.loop19

for.done26:                                       ; preds = %switch.default.body, %for.loop19
  %303 = load i64, i64* %4, align 8
  %304 = load %..string, %..string* %1, align 8
  %305 = load i64, i64* %7, align 8
  %306 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %307 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %308 = load i64, i64* %307, align 8
  %309 = bitcast { i64, i64, i8 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %309, i8 0, i64 24, i1 false)
  %310 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %21, %fmt.Info* %3, i64 %303, %..string* %1, i64 %305, i64 %308, i8* %310)
  %311 = load { i64, i64, i8 }, { i64, i64, i8 }* %21, align 8
  %312 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %21, i32 0, i32 0
  %313 = load i64, i64* %312, align 8
  %314 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %21, i32 0, i32 1
  %315 = load i64, i64* %314, align 8
  %316 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %21, i32 0, i32 2
  %317 = load i8, i8* %316, align 1
  store i64 %313, i64* %4, align 8
  store i64 %315, i64* %7, align 8
  store i8 %317, i8* %6, align 1
  %318 = load i64, i64* %7, align 8
  %319 = load i64, i64* %5, align 8
  %320 = icmp slt i64 %318, %319
  %321 = zext i1 %320 to i8
  %322 = trunc i8 %321 to i1
  br i1 %322, label %cmp.and27, label %if.else33

cmp.and27:                                        ; preds = %for.done26
  %323 = load %..string, %..string* %1, align 8
  %324 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %325 = load i8*, i8** %324, align 8
  %326 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %327 = load i64, i64* %326, align 8
  %328 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %22, align 8
  call void @runtime.bounds_check_error(%..string* %22, i32 298, i32 22, i64 %328, i64 %327)
  %329 = getelementptr i8, i8* %325, i64 %328
  %330 = load i8, i8* %329, align 1
  %331 = icmp eq i8 %330, 42
  %332 = zext i1 %331 to i8
  %333 = trunc i8 %332 to i1
  br i1 %333, label %if.then28, label %if.else33

if.then28:                                        ; preds = %cmp.and27
  %334 = load i64, i64* %7, align 8
  %335 = add i64 %334, 1
  store i64 %335, i64* %7, align 8
  %336 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %337 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %338 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %339 = load i64, i64* %4, align 8
  %340 = bitcast { i64, i64, i8 }* %23 to i8*
  call void @llvm.memset.p0i8.i64(i8* %340, i8 0, i64 24, i1 false)
  %341 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.int_from_arg({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %23, { %..any*, i64 }* %2, i64 %339, i8* %341)
  %342 = load { i64, i64, i8 }, { i64, i64, i8 }* %23, align 8
  %343 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %23, i32 0, i32 0
  %344 = load i64, i64* %343, align 8
  %345 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %23, i32 0, i32 1
  %346 = load i64, i64* %345, align 8
  %347 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %23, i32 0, i32 2
  %348 = load i8, i8* %347, align 1
  store i64 %344, i64* %336, align 8
  store i64 %346, i64* %4, align 8
  store i8 %348, i8* %337, align 1
  %349 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %350 = load i8, i8* %349, align 1
  %351 = trunc i8 %350 to i1
  br i1 %351, label %if.done30, label %if.then29

if.then29:                                        ; preds = %if.then28
  %352 = load %io.Writer, %io.Writer* %0, align 8
  %353 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$28b", i64 0, i64 0), i64 13 }, %..string* %24, align 8
  %354 = bitcast { i64, i32 }* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %354, i8 0, i64 16, i1 false)
  %355 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %25, %io.Writer* %0, %..string* %24, i64* %353, i8* %355)
  %356 = load { i64, i32 }, { i64, i32 }* %25, align 8
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %if.then28
  %357 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %358 = load i64, i64* %357, align 8
  %359 = icmp slt i64 %358, 0
  %360 = zext i1 %359 to i8
  %361 = trunc i8 %360 to i1
  br i1 %361, label %if.then31, label %if.done32

if.then31:                                        ; preds = %if.done30
  %362 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %363 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %364 = load i64, i64* %363, align 8
  %365 = sub i64 0, %364
  store i64 %365, i64* %362, align 8
  %366 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  store i8 1, i8* %366, align 1
  %367 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  store i8 0, i8* %367, align 1
  br label %if.done32

if.done32:                                        ; preds = %if.then31, %if.done30
  store i8 0, i8* %6, align 1
  br label %if.done37

if.else33:                                        ; preds = %cmp.and27, %for.done26
  %368 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %369 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %370 = load %..string, %..string* %1, align 8
  %371 = load i64, i64* %7, align 8
  %372 = bitcast { i64, i64, i8 }* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %372, i8 0, i64 24, i1 false)
  %373 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._parse_int({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %26, %..string* %1, i64 %371, i8* %373)
  %374 = load { i64, i64, i8 }, { i64, i64, i8 }* %26, align 8
  %375 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %26, i32 0, i32 0
  %376 = load i64, i64* %375, align 8
  %377 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %26, i32 0, i32 1
  %378 = load i64, i64* %377, align 8
  %379 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %26, i32 0, i32 2
  %380 = load i8, i8* %379, align 1
  store i64 %376, i64* %368, align 8
  store i64 %378, i64* %7, align 8
  store i8 %380, i8* %369, align 1
  %381 = load i8, i8* %6, align 1
  %382 = trunc i8 %381 to i1
  br i1 %382, label %cmp.and34, label %if.done36

cmp.and34:                                        ; preds = %if.else33
  %383 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %384 = load i8, i8* %383, align 1
  %385 = trunc i8 %384 to i1
  br i1 %385, label %if.then35, label %if.done36

if.then35:                                        ; preds = %cmp.and34
  %386 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  store i8 0, i8* %386, align 1
  br label %if.done36

if.done36:                                        ; preds = %if.then35, %cmp.and34, %if.else33
  br label %if.done37

if.done37:                                        ; preds = %if.done36, %if.done32
  %387 = load i64, i64* %7, align 8
  %388 = load i64, i64* %5, align 8
  %389 = icmp slt i64 %387, %388
  %390 = zext i1 %389 to i8
  %391 = trunc i8 %390 to i1
  br i1 %391, label %cmp.and38, label %if.done50

cmp.and38:                                        ; preds = %if.done37
  %392 = load %..string, %..string* %1, align 8
  %393 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %394 = load i8*, i8** %393, align 8
  %395 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %396 = load i64, i64* %395, align 8
  %397 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %27, align 8
  call void @runtime.bounds_check_error(%..string* %27, i32 319, i32 22, i64 %397, i64 %396)
  %398 = getelementptr i8, i8* %394, i64 %397
  %399 = load i8, i8* %398, align 1
  %400 = icmp eq i8 %399, 46
  %401 = zext i1 %400 to i8
  %402 = trunc i8 %401 to i1
  br i1 %402, label %if.then39, label %if.done50

if.then39:                                        ; preds = %cmp.and38
  %403 = load i64, i64* %7, align 8
  %404 = add i64 %403, 1
  store i64 %404, i64* %7, align 8
  %405 = load i8, i8* %6, align 1
  %406 = trunc i8 %405 to i1
  br i1 %406, label %if.then40, label %if.done41

if.then40:                                        ; preds = %if.then39
  %407 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  store i8 0, i8* %407, align 1
  br label %if.done41

if.done41:                                        ; preds = %if.then40, %if.then39
  %408 = load i64, i64* %7, align 8
  %409 = load i64, i64* %5, align 8
  %410 = icmp slt i64 %408, %409
  %411 = zext i1 %410 to i8
  %412 = trunc i8 %411 to i1
  br i1 %412, label %cmp.and42, label %if.else48

cmp.and42:                                        ; preds = %if.done41
  %413 = load %..string, %..string* %1, align 8
  %414 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %415 = load i8*, i8** %414, align 8
  %416 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %417 = load i64, i64* %416, align 8
  %418 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %28, align 8
  call void @runtime.bounds_check_error(%..string* %28, i32 324, i32 23, i64 %418, i64 %417)
  %419 = getelementptr i8, i8* %415, i64 %418
  %420 = load i8, i8* %419, align 1
  %421 = icmp eq i8 %420, 42
  %422 = zext i1 %421 to i8
  %423 = trunc i8 %422 to i1
  br i1 %423, label %if.then43, label %if.else48

if.then43:                                        ; preds = %cmp.and42
  %424 = load i64, i64* %4, align 8
  %425 = load %..string, %..string* %1, align 8
  %426 = load i64, i64* %7, align 8
  %427 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %428 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %429 = load i64, i64* %428, align 8
  %430 = bitcast { i64, i64, i8 }* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %430, i8 0, i64 24, i1 false)
  %431 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %29, %fmt.Info* %3, i64 %424, %..string* %1, i64 %426, i64 %429, i8* %431)
  %432 = load { i64, i64, i8 }, { i64, i64, i8 }* %29, align 8
  %433 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %29, i32 0, i32 0
  %434 = load i64, i64* %433, align 8
  %435 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %29, i32 0, i32 1
  %436 = load i64, i64* %435, align 8
  %437 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %29, i32 0, i32 2
  %438 = load i8, i8* %437, align 1
  store i64 %434, i64* %4, align 8
  store i64 %436, i64* %7, align 8
  store i8 %438, i8* %6, align 1
  %439 = load i64, i64* %7, align 8
  %440 = add i64 %439, 1
  store i64 %440, i64* %7, align 8
  %441 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %442 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %443 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %444 = load i64, i64* %4, align 8
  %445 = bitcast { i64, i64, i8 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %445, i8 0, i64 24, i1 false)
  %446 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.int_from_arg({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %30, { %..any*, i64 }* %2, i64 %444, i8* %446)
  %447 = load { i64, i64, i8 }, { i64, i64, i8 }* %30, align 8
  %448 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %30, i32 0, i32 0
  %449 = load i64, i64* %448, align 8
  %450 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %30, i32 0, i32 1
  %451 = load i64, i64* %450, align 8
  %452 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %30, i32 0, i32 2
  %453 = load i8, i8* %452, align 1
  store i64 %449, i64* %441, align 8
  store i64 %451, i64* %4, align 8
  store i8 %453, i8* %442, align 1
  %454 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %455 = load i64, i64* %454, align 8
  %456 = icmp slt i64 %455, 0
  %457 = zext i1 %456 to i8
  %458 = trunc i8 %457 to i1
  br i1 %458, label %if.then44, label %if.done45

if.then44:                                        ; preds = %if.then43
  %459 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  store i64 0, i64* %459, align 8
  %460 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  store i8 0, i8* %460, align 1
  br label %if.done45

if.done45:                                        ; preds = %if.then44, %if.then43
  %461 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %462 = load i8, i8* %461, align 1
  %463 = trunc i8 %462 to i1
  br i1 %463, label %if.done47, label %if.then46

if.then46:                                        ; preds = %if.done45
  %464 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %465 = load %io.Writer, %io.Writer* %464, align 8
  %466 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$28c", i64 0, i64 0), i64 17 }, %..string* %31, align 8
  %467 = bitcast { i64, i32 }* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %467, i8 0, i64 16, i1 false)
  %468 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %32, %io.Writer* %464, %..string* %31, i64* %466, i8* %468)
  %469 = load { i64, i32 }, { i64, i32 }* %32, align 8
  br label %if.done47

if.done47:                                        ; preds = %if.then46, %if.done45
  store i8 0, i8* %6, align 1
  br label %if.done49

if.else48:                                        ; preds = %cmp.and42, %if.done41
  %470 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %471 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %472 = load %..string, %..string* %1, align 8
  %473 = load i64, i64* %7, align 8
  %474 = bitcast { i64, i64, i8 }* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %474, i8 0, i64 24, i1 false)
  %475 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._parse_int({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %33, %..string* %1, i64 %473, i8* %475)
  %476 = load { i64, i64, i8 }, { i64, i64, i8 }* %33, align 8
  %477 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %33, i32 0, i32 0
  %478 = load i64, i64* %477, align 8
  %479 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %33, i32 0, i32 1
  %480 = load i64, i64* %479, align 8
  %481 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %33, i32 0, i32 2
  %482 = load i8, i8* %481, align 1
  store i64 %478, i64* %470, align 8
  store i64 %480, i64* %7, align 8
  store i8 %482, i8* %471, align 1
  br label %if.done49

if.done49:                                        ; preds = %if.else48, %if.done47
  br label %if.done50

if.done50:                                        ; preds = %if.done49, %cmp.and38, %if.done37
  %483 = load i8, i8* %6, align 1
  %484 = trunc i8 %483 to i1
  br i1 %484, label %if.done52, label %if.then51

if.then51:                                        ; preds = %if.done50
  %485 = load i64, i64* %4, align 8
  %486 = load %..string, %..string* %1, align 8
  %487 = load i64, i64* %7, align 8
  %488 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %489 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %490 = load i64, i64* %489, align 8
  %491 = bitcast { i64, i64, i8 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %491, i8 0, i64 24, i1 false)
  %492 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %34, %fmt.Info* %3, i64 %485, %..string* %1, i64 %487, i64 %490, i8* %492)
  %493 = load { i64, i64, i8 }, { i64, i64, i8 }* %34, align 8
  %494 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %34, i32 0, i32 0
  %495 = load i64, i64* %494, align 8
  %496 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %34, i32 0, i32 1
  %497 = load i64, i64* %496, align 8
  %498 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %34, i32 0, i32 2
  %499 = load i8, i8* %498, align 1
  store i64 %495, i64* %4, align 8
  store i64 %497, i64* %7, align 8
  store i8 %499, i8* %6, align 1
  br label %if.done52

if.done52:                                        ; preds = %if.then51, %if.done50
  %500 = load i64, i64* %7, align 8
  %501 = load i64, i64* %5, align 8
  %502 = icmp sge i64 %500, %501
  %503 = zext i1 %502 to i8
  %504 = trunc i8 %503 to i1
  br i1 %504, label %if.then53, label %if.done55

if.then53:                                        ; preds = %if.done52
  %505 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %506 = load %io.Writer, %io.Writer* %505, align 8
  %507 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$28d", i64 0, i64 0), i64 11 }, %..string* %35, align 8
  %508 = bitcast { i64, i32 }* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* %508, i8 0, i64 16, i1 false)
  %509 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %36, %io.Writer* %505, %..string* %35, i64* %507, i8* %509)
  %510 = load { i64, i32 }, { i64, i32 }* %36, align 8
  br label %for.done134

unreachable54:                                    ; No predecessors!
  br label %if.done55

if.done55:                                        ; preds = %unreachable54, %if.done52
  %511 = load i64, i64* %7, align 8
  %512 = load %..string, %..string* %1, align 8
  %513 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %514 = load i64, i64* %513, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %39, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %39, i32 350, i32 45, i64 %511, i64 %514, i64 %514)
  %515 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %516 = load i8*, i8** %515, align 8
  %517 = getelementptr i8, i8* %516, i64 %511
  %518 = sub i64 %514, %511
  %519 = getelementptr inbounds %..string, %..string* %40, i32 0, i32 0
  store i8* %517, i8** %519, align 8
  %520 = getelementptr inbounds %..string, %..string* %40, i32 0, i32 1
  store i64 %518, i64* %520, align 8
  %521 = load %..string, %..string* %40, align 8
  %522 = bitcast { i32, i64 }* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %522, i8 0, i64 16, i1 false)
  %523 = bitcast %runtime.Context* %117 to i8*
  call void @utf8.decode_rune_in_string({ i32, i64 }* sret({ i32, i64 }*) %41, %..string* %40, i8* %523)
  %524 = load { i32, i64 }, { i32, i64 }* %41, align 8
  %525 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %41, i32 0, i32 0
  %526 = load i32, i32* %525, align 4
  %527 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %41, i32 0, i32 1
  %528 = load i64, i64* %527, align 8
  store i32 %526, i32* %37, align 4
  store i64 %528, i64* %38, align 8
  %529 = load i64, i64* %38, align 8
  %530 = load i64, i64* %7, align 8
  %531 = add i64 %530, %529
  store i64 %531, i64* %7, align 8
  %532 = load i32, i32* %37, align 4
  %533 = icmp eq i32 %532, 37
  %534 = zext i1 %533 to i8
  %535 = icmp eq i8 1, %534
  br i1 %535, label %switch.case.body56, label %switch.case.next

switch.case.next:                                 ; preds = %if.done55
  %536 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  %537 = load i8, i8* %536, align 1
  %538 = icmp eq i8 %537, 0
  %539 = zext i1 %538 to i8
  %540 = icmp eq i8 1, %539
  br i1 %540, label %switch.case.body58, label %switch.case.next57

switch.case.body56:                               ; preds = %if.done55
  %541 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %542 = load %io.Writer, %io.Writer* %541, align 8
  %543 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %544 = bitcast %runtime.Context* %117 to i8*
  %545 = call i32 @io.write_byte_to_writer(%io.Writer* %541, i8 37, i64* %543, i8* %544)
  br label %switch.done62

switch.case.next57:                               ; preds = %switch.case.next
  %546 = load i64, i64* %4, align 8
  %547 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %548 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %549 = load i64, i64* %548, align 8
  %550 = icmp sge i64 %546, %549
  %551 = zext i1 %550 to i8
  %552 = icmp eq i8 1, %551
  br i1 %552, label %switch.case.body60, label %switch.case.next59

switch.case.body58:                               ; preds = %switch.case.next
  %553 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %554 = load %io.Writer, %io.Writer* %553, align 8
  %555 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$28e", i64 0, i64 0), i64 23 }, %..string* %42, align 8
  %556 = bitcast { i64, i32 }* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* %556, i8 0, i64 16, i1 false)
  %557 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %43, %io.Writer* %553, %..string* %42, i64* %555, i8* %557)
  %558 = load { i64, i32 }, { i64, i32 }* %43, align 8
  br label %switch.done62

switch.case.next59:                               ; preds = %switch.case.next57
  br label %switch.default.body61

switch.case.body60:                               ; preds = %switch.case.next57
  %559 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %560 = load %io.Writer, %io.Writer* %559, align 8
  %561 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$28f", i64 0, i64 0), i64 20 }, %..string* %44, align 8
  %562 = bitcast { i64, i32 }* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* %562, i8 0, i64 16, i1 false)
  %563 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %45, %io.Writer* %559, %..string* %44, i64* %561, i8* %563)
  %564 = load { i64, i32 }, { i64, i32 }* %45, align 8
  br label %switch.done62

switch.default.body61:                            ; preds = %switch.case.next59
  %565 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %566 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 0
  %567 = load %..any*, %..any** %566, align 8
  %568 = load i64, i64* %4, align 8
  %569 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %570 = load i64, i64* %569, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %46, align 8
  call void @runtime.bounds_check_error(%..string* %46, i32 361, i32 23, i64 %568, i64 %570)
  %571 = getelementptr %..any, %..any* %567, i64 %568
  %572 = load %..any, %..any* %571, align 8
  %573 = load i32, i32* %37, align 4
  %574 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %3, %..any* %571, i32 %573, i8* %574)
  %575 = load i64, i64* %4, align 8
  %576 = add i64 %575, 1
  store i64 %576, i64* %4, align 8
  br label %switch.done62

switch.done62:                                    ; preds = %switch.default.body61, %switch.case.body60, %switch.case.body58, %switch.case.body56
  br label %if.done133

if.else63:                                        ; preds = %if.done17
  %577 = load i8, i8* %16, align 1
  %578 = icmp eq i8 %577, 123
  %579 = zext i1 %578 to i8
  %580 = trunc i8 %579 to i1
  br i1 %580, label %if.then64, label %if.done132

if.then64:                                        ; preds = %if.else63
  %581 = load i64, i64* %7, align 8
  %582 = load i64, i64* %5, align 8
  %583 = icmp slt i64 %581, %582
  %584 = zext i1 %583 to i8
  %585 = trunc i8 %584 to i1
  br i1 %585, label %cmp.and65, label %if.done76

cmp.and65:                                        ; preds = %if.then64
  %586 = load %..string, %..string* %1, align 8
  %587 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %588 = load i8*, i8** %587, align 8
  %589 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %590 = load i64, i64* %589, align 8
  %591 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %47, align 8
  call void @runtime.bounds_check_error(%..string* %47, i32 367, i32 22, i64 %591, i64 %590)
  %592 = getelementptr i8, i8* %588, i64 %591
  %593 = load i8, i8* %592, align 1
  %594 = icmp ne i8 %593, 125
  %595 = zext i1 %594 to i8
  %596 = trunc i8 %595 to i1
  br i1 %596, label %cmp.and66, label %if.done76

cmp.and66:                                        ; preds = %cmp.and65
  %597 = load %..string, %..string* %1, align 8
  %598 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %599 = load i8*, i8** %598, align 8
  %600 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %601 = load i64, i64* %600, align 8
  %602 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %48, align 8
  call void @runtime.bounds_check_error(%..string* %48, i32 367, i32 39, i64 %602, i64 %601)
  %603 = getelementptr i8, i8* %599, i64 %602
  %604 = load i8, i8* %603, align 1
  %605 = icmp ne i8 %604, 58
  %606 = zext i1 %605 to i8
  %607 = trunc i8 %606 to i1
  br i1 %607, label %if.then67, label %if.done76

if.then67:                                        ; preds = %cmp.and66
  %608 = load %..string, %..string* %1, align 8
  %609 = load i64, i64* %7, align 8
  %610 = bitcast { i64, i64, i8 }* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* %610, i8 0, i64 24, i1 false)
  %611 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._parse_int({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %52, %..string* %1, i64 %609, i8* %611)
  %612 = load { i64, i64, i8 }, { i64, i64, i8 }* %52, align 8
  %613 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %52, i32 0, i32 0
  %614 = load i64, i64* %613, align 8
  %615 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %52, i32 0, i32 1
  %616 = load i64, i64* %615, align 8
  %617 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %52, i32 0, i32 2
  %618 = load i8, i8* %617, align 1
  store i64 %614, i64* %49, align 8
  store i64 %616, i64* %50, align 8
  store i8 %618, i8* %51, align 1
  %619 = load i8, i8* %51, align 1
  %620 = trunc i8 %619 to i1
  br i1 %620, label %if.then68, label %if.else69

if.then68:                                        ; preds = %if.then67
  %621 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 11
  store i8 1, i8* %621, align 1
  store i8 1, i8* %6, align 1
  %622 = load i64, i64* %49, align 8
  store i64 %622, i64* %4, align 8
  %623 = load i64, i64* %50, align 8
  store i64 %623, i64* %7, align 8
  br label %if.done75

if.else69:                                        ; preds = %if.then67
  %624 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %625 = load %io.Writer, %io.Writer* %624, align 8
  %626 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$290", i64 0, i64 0), i64 23 }, %..string* %53, align 8
  %627 = bitcast { i64, i32 }* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* %627, i8 0, i64 16, i1 false)
  %628 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %54, %io.Writer* %624, %..string* %53, i64* %626, i8* %628)
  %629 = load { i64, i32 }, { i64, i32 }* %54, align 8
  %630 = load i64, i64* %7, align 8
  store i64 %630, i64* %55, align 8
  br label %for.loop70

for.loop70:                                       ; preds = %for.body73, %if.else69
  %631 = load i64, i64* %7, align 8
  %632 = load i64, i64* %5, align 8
  %633 = icmp slt i64 %631, %632
  %634 = zext i1 %633 to i8
  %635 = trunc i8 %634 to i1
  br i1 %635, label %cmp.and71, label %for.done74

cmp.and71:                                        ; preds = %for.loop70
  %636 = load %..string, %..string* %1, align 8
  %637 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %638 = load i8*, i8** %637, align 8
  %639 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %640 = load i64, i64* %639, align 8
  %641 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %56, align 8
  call void @runtime.bounds_check_error(%..string* %56, i32 378, i32 25, i64 %641, i64 %640)
  %642 = getelementptr i8, i8* %638, i64 %641
  %643 = load i8, i8* %642, align 1
  %644 = icmp ne i8 %643, 125
  %645 = zext i1 %644 to i8
  %646 = trunc i8 %645 to i1
  br i1 %646, label %cmp.and72, label %for.done74

cmp.and72:                                        ; preds = %cmp.and71
  %647 = load %..string, %..string* %1, align 8
  %648 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %649 = load i8*, i8** %648, align 8
  %650 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %651 = load i64, i64* %650, align 8
  %652 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %57, align 8
  call void @runtime.bounds_check_error(%..string* %57, i32 378, i32 42, i64 %652, i64 %651)
  %653 = getelementptr i8, i8* %649, i64 %652
  %654 = load i8, i8* %653, align 1
  %655 = icmp ne i8 %654, 58
  %656 = zext i1 %655 to i8
  %657 = trunc i8 %656 to i1
  br i1 %657, label %for.body73, label %for.done74

for.body73:                                       ; preds = %cmp.and72
  %658 = load i64, i64* %7, align 8
  %659 = add i64 %658, 1
  store i64 %659, i64* %7, align 8
  br label %for.loop70

for.done74:                                       ; preds = %cmp.and72, %cmp.and71, %for.loop70
  %660 = load i64, i64* %55, align 8
  %661 = load i64, i64* %7, align 8
  %662 = load %..string, %..string* %1, align 8
  %663 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %664 = load i64, i64* %663, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %58, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %58, i32 381, i32 22, i64 %660, i64 %661, i64 %664)
  %665 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %666 = load i8*, i8** %665, align 8
  %667 = getelementptr i8, i8* %666, i64 %660
  %668 = sub i64 %661, %660
  %669 = getelementptr inbounds %..string, %..string* %59, i32 0, i32 0
  store i8* %667, i8** %669, align 8
  %670 = getelementptr inbounds %..string, %..string* %59, i32 0, i32 1
  store i64 %668, i64* %670, align 8
  %671 = load %..string, %..string* %59, align 8
  %672 = bitcast %..any* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* %672, i8 0, i64 16, i1 false)
  %673 = bitcast %..string* %59 to i8*
  %674 = getelementptr inbounds %..any, %..any* %60, i32 0, i32 0
  %675 = getelementptr inbounds %..any, %..any* %60, i32 0, i32 1
  store i8* %673, i8** %674, align 8
  store i64 432345564227567617, i64* %675, align 8
  %676 = load %..any, %..any* %60, align 8
  %677 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %3, %..any* %60, i32 118, i8* %677)
  %678 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %679 = load %io.Writer, %io.Writer* %678, align 8
  %680 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24c", i64 0, i64 0), i64 1 }, %..string* %61, align 8
  %681 = bitcast { i64, i32 }* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %681, i8 0, i64 16, i1 false)
  %682 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %62, %io.Writer* %678, %..string* %61, i64* %680, i8* %682)
  %683 = load { i64, i32 }, { i64, i32 }* %62, align 8
  br label %if.done75

if.done75:                                        ; preds = %for.done74, %if.then68
  br label %if.done76

if.done76:                                        ; preds = %if.done75, %cmp.and66, %cmp.and65, %if.then64
  store i32 118, i32* %63, align 4
  %684 = load i64, i64* %7, align 8
  %685 = load i64, i64* %5, align 8
  %686 = icmp slt i64 %684, %685
  %687 = zext i1 %686 to i8
  %688 = trunc i8 %687 to i1
  br i1 %688, label %cmp.and77, label %if.done120

cmp.and77:                                        ; preds = %if.done76
  %689 = load %..string, %..string* %1, align 8
  %690 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %691 = load i8*, i8** %690, align 8
  %692 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %693 = load i64, i64* %692, align 8
  %694 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %64, align 8
  call void @runtime.bounds_check_error(%..string* %64, i32 388, i32 22, i64 %694, i64 %693)
  %695 = getelementptr i8, i8* %691, i64 %694
  %696 = load i8, i8* %695, align 1
  %697 = icmp eq i8 %696, 58
  %698 = zext i1 %697 to i8
  %699 = trunc i8 %698 to i1
  br i1 %699, label %if.then78, label %if.done120

if.then78:                                        ; preds = %cmp.and77
  %700 = load i64, i64* %7, align 8
  %701 = add i64 %700, 1
  store i64 %701, i64* %7, align 8
  br label %for.loop79

for.loop79:                                       ; preds = %for.post89, %if.then78
  %702 = load i64, i64* %7, align 8
  %703 = load i64, i64* %5, align 8
  %704 = icmp slt i64 %702, %703
  %705 = zext i1 %704 to i8
  %706 = trunc i8 %705 to i1
  br i1 %706, label %for.body80, label %for.done90

for.body80:                                       ; preds = %for.loop79
  %707 = load %..string, %..string* %1, align 8
  %708 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %709 = load i8*, i8** %708, align 8
  %710 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %711 = load i64, i64* %710, align 8
  %712 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %65, align 8
  call void @runtime.bounds_check_error(%..string* %65, i32 391, i32 17, i64 %712, i64 %711)
  %713 = getelementptr i8, i8* %709, i64 %712
  %714 = load i8, i8* %713, align 1
  switch i8 %714, label %switch.default.body86 [
    i8 43, label %switch.case.body81
    i8 45, label %switch.case.body82
    i8 32, label %switch.case.body83
    i8 35, label %switch.case.body84
    i8 48, label %switch.case.body85
  ]

switch.case.body81:                               ; preds = %for.body80
  %715 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 1
  store i8 1, i8* %715, align 1
  br label %switch.done88

switch.case.body82:                               ; preds = %for.body80
  %716 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  store i8 1, i8* %716, align 1
  %717 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  store i8 0, i8* %717, align 1
  br label %switch.done88

switch.case.body83:                               ; preds = %for.body80
  %718 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 2
  store i8 1, i8* %718, align 1
  br label %switch.done88

switch.case.body84:                               ; preds = %for.body80
  %719 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 4
  store i8 1, i8* %719, align 1
  br label %switch.done88

switch.case.body85:                               ; preds = %for.body80
  %720 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  %721 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  %722 = load i8, i8* %721, align 1
  %723 = icmp eq i8 %722, 0
  %724 = zext i1 %723 to i8
  store i8 %724, i8* %720, align 1
  br label %switch.done88

switch.default.body86:                            ; preds = %for.body80
  br label %for.done90

unreachable87:                                    ; No predecessors!
  br label %switch.done88

switch.done88:                                    ; preds = %unreachable87, %switch.case.body85, %switch.case.body84, %switch.case.body83, %switch.case.body82, %switch.case.body81
  br label %for.post89

for.post89:                                       ; preds = %switch.done88
  %725 = load i64, i64* %7, align 8
  %726 = add i64 %725, 1
  store i64 %726, i64* %7, align 8
  br label %for.loop79

for.done90:                                       ; preds = %switch.default.body86, %for.loop79
  %727 = load i64, i64* %4, align 8
  %728 = load %..string, %..string* %1, align 8
  %729 = load i64, i64* %7, align 8
  %730 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %731 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %732 = load i64, i64* %731, align 8
  %733 = bitcast { i64, i64, i8 }* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* %733, i8 0, i64 24, i1 false)
  %734 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %66, %fmt.Info* %3, i64 %727, %..string* %1, i64 %729, i64 %732, i8* %734)
  %735 = load { i64, i64, i8 }, { i64, i64, i8 }* %66, align 8
  %736 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %66, i32 0, i32 0
  %737 = load i64, i64* %736, align 8
  %738 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %66, i32 0, i32 1
  %739 = load i64, i64* %738, align 8
  %740 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %66, i32 0, i32 2
  %741 = load i8, i8* %740, align 1
  store i64 %737, i64* %4, align 8
  store i64 %739, i64* %7, align 8
  store i8 %741, i8* %6, align 1
  %742 = load i64, i64* %7, align 8
  %743 = load i64, i64* %5, align 8
  %744 = icmp slt i64 %742, %743
  %745 = zext i1 %744 to i8
  %746 = trunc i8 %745 to i1
  br i1 %746, label %cmp.and91, label %if.else97

cmp.and91:                                        ; preds = %for.done90
  %747 = load %..string, %..string* %1, align 8
  %748 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %749 = load i8*, i8** %748, align 8
  %750 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %751 = load i64, i64* %750, align 8
  %752 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %67, align 8
  call void @runtime.bounds_check_error(%..string* %67, i32 411, i32 23, i64 %752, i64 %751)
  %753 = getelementptr i8, i8* %749, i64 %752
  %754 = load i8, i8* %753, align 1
  %755 = icmp eq i8 %754, 42
  %756 = zext i1 %755 to i8
  %757 = trunc i8 %756 to i1
  br i1 %757, label %if.then92, label %if.else97

if.then92:                                        ; preds = %cmp.and91
  %758 = load i64, i64* %7, align 8
  %759 = add i64 %758, 1
  store i64 %759, i64* %7, align 8
  %760 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %761 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %762 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %763 = load i64, i64* %4, align 8
  %764 = bitcast { i64, i64, i8 }* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* %764, i8 0, i64 24, i1 false)
  %765 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.int_from_arg({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %68, { %..any*, i64 }* %2, i64 %763, i8* %765)
  %766 = load { i64, i64, i8 }, { i64, i64, i8 }* %68, align 8
  %767 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %68, i32 0, i32 0
  %768 = load i64, i64* %767, align 8
  %769 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %68, i32 0, i32 1
  %770 = load i64, i64* %769, align 8
  %771 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %68, i32 0, i32 2
  %772 = load i8, i8* %771, align 1
  store i64 %768, i64* %760, align 8
  store i64 %770, i64* %4, align 8
  store i8 %772, i8* %761, align 1
  %773 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %774 = load i8, i8* %773, align 1
  %775 = trunc i8 %774 to i1
  br i1 %775, label %if.done94, label %if.then93

if.then93:                                        ; preds = %if.then92
  %776 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %777 = load %io.Writer, %io.Writer* %776, align 8
  %778 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$28b", i64 0, i64 0), i64 13 }, %..string* %69, align 8
  %779 = bitcast { i64, i32 }* %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* %779, i8 0, i64 16, i1 false)
  %780 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %70, %io.Writer* %776, %..string* %69, i64* %778, i8* %780)
  %781 = load { i64, i32 }, { i64, i32 }* %70, align 8
  br label %if.done94

if.done94:                                        ; preds = %if.then93, %if.then92
  %782 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %783 = load i64, i64* %782, align 8
  %784 = icmp slt i64 %783, 0
  %785 = zext i1 %784 to i8
  %786 = trunc i8 %785 to i1
  br i1 %786, label %if.then95, label %if.done96

if.then95:                                        ; preds = %if.done94
  %787 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %788 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %789 = load i64, i64* %788, align 8
  %790 = sub i64 0, %789
  store i64 %790, i64* %787, align 8
  %791 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 0
  store i8 1, i8* %791, align 1
  %792 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 3
  store i8 0, i8* %792, align 1
  br label %if.done96

if.done96:                                        ; preds = %if.then95, %if.done94
  store i8 0, i8* %6, align 1
  br label %if.done101

if.else97:                                        ; preds = %cmp.and91, %for.done90
  %793 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 8
  %794 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %795 = load %..string, %..string* %1, align 8
  %796 = load i64, i64* %7, align 8
  %797 = bitcast { i64, i64, i8 }* %71 to i8*
  call void @llvm.memset.p0i8.i64(i8* %797, i8 0, i64 24, i1 false)
  %798 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._parse_int({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %71, %..string* %1, i64 %796, i8* %798)
  %799 = load { i64, i64, i8 }, { i64, i64, i8 }* %71, align 8
  %800 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %71, i32 0, i32 0
  %801 = load i64, i64* %800, align 8
  %802 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %71, i32 0, i32 1
  %803 = load i64, i64* %802, align 8
  %804 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %71, i32 0, i32 2
  %805 = load i8, i8* %804, align 1
  store i64 %801, i64* %793, align 8
  store i64 %803, i64* %7, align 8
  store i8 %805, i8* %794, align 1
  %806 = load i8, i8* %6, align 1
  %807 = trunc i8 %806 to i1
  br i1 %807, label %cmp.and98, label %if.done100

cmp.and98:                                        ; preds = %if.else97
  %808 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 5
  %809 = load i8, i8* %808, align 1
  %810 = trunc i8 %809 to i1
  br i1 %810, label %if.then99, label %if.done100

if.then99:                                        ; preds = %cmp.and98
  %811 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  store i8 0, i8* %811, align 1
  br label %if.done100

if.done100:                                       ; preds = %if.then99, %cmp.and98, %if.else97
  br label %if.done101

if.done101:                                       ; preds = %if.done100, %if.done96
  %812 = load i64, i64* %7, align 8
  %813 = load i64, i64* %5, align 8
  %814 = icmp slt i64 %812, %813
  %815 = zext i1 %814 to i8
  %816 = trunc i8 %815 to i1
  br i1 %816, label %cmp.and102, label %if.done114

cmp.and102:                                       ; preds = %if.done101
  %817 = load %..string, %..string* %1, align 8
  %818 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %819 = load i8*, i8** %818, align 8
  %820 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %821 = load i64, i64* %820, align 8
  %822 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %72, align 8
  call void @runtime.bounds_check_error(%..string* %72, i32 432, i32 23, i64 %822, i64 %821)
  %823 = getelementptr i8, i8* %819, i64 %822
  %824 = load i8, i8* %823, align 1
  %825 = icmp eq i8 %824, 46
  %826 = zext i1 %825 to i8
  %827 = trunc i8 %826 to i1
  br i1 %827, label %if.then103, label %if.done114

if.then103:                                       ; preds = %cmp.and102
  %828 = load i64, i64* %7, align 8
  %829 = add i64 %828, 1
  store i64 %829, i64* %7, align 8
  %830 = load i8, i8* %6, align 1
  %831 = trunc i8 %830 to i1
  br i1 %831, label %if.then104, label %if.done105

if.then104:                                       ; preds = %if.then103
  %832 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  store i8 0, i8* %832, align 1
  br label %if.done105

if.done105:                                       ; preds = %if.then104, %if.then103
  %833 = load i64, i64* %7, align 8
  %834 = load i64, i64* %5, align 8
  %835 = icmp slt i64 %833, %834
  %836 = zext i1 %835 to i8
  %837 = trunc i8 %836 to i1
  br i1 %837, label %cmp.and106, label %if.else112

cmp.and106:                                       ; preds = %if.done105
  %838 = load %..string, %..string* %1, align 8
  %839 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %840 = load i8*, i8** %839, align 8
  %841 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %842 = load i64, i64* %841, align 8
  %843 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %73, align 8
  call void @runtime.bounds_check_error(%..string* %73, i32 437, i32 24, i64 %843, i64 %842)
  %844 = getelementptr i8, i8* %840, i64 %843
  %845 = load i8, i8* %844, align 1
  %846 = icmp eq i8 %845, 42
  %847 = zext i1 %846 to i8
  %848 = trunc i8 %847 to i1
  br i1 %848, label %if.then107, label %if.else112

if.then107:                                       ; preds = %cmp.and106
  %849 = load i64, i64* %4, align 8
  %850 = load %..string, %..string* %1, align 8
  %851 = load i64, i64* %7, align 8
  %852 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %853 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %854 = load i64, i64* %853, align 8
  %855 = bitcast { i64, i64, i8 }* %74 to i8*
  call void @llvm.memset.p0i8.i64(i8* %855, i8 0, i64 24, i1 false)
  %856 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %74, %fmt.Info* %3, i64 %849, %..string* %1, i64 %851, i64 %854, i8* %856)
  %857 = load { i64, i64, i8 }, { i64, i64, i8 }* %74, align 8
  %858 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %74, i32 0, i32 0
  %859 = load i64, i64* %858, align 8
  %860 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %74, i32 0, i32 1
  %861 = load i64, i64* %860, align 8
  %862 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %74, i32 0, i32 2
  %863 = load i8, i8* %862, align 1
  store i64 %859, i64* %4, align 8
  store i64 %861, i64* %7, align 8
  store i8 %863, i8* %6, align 1
  %864 = load i64, i64* %7, align 8
  %865 = add i64 %864, 1
  store i64 %865, i64* %7, align 8
  %866 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %867 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %868 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %869 = load i64, i64* %4, align 8
  %870 = bitcast { i64, i64, i8 }* %75 to i8*
  call void @llvm.memset.p0i8.i64(i8* %870, i8 0, i64 24, i1 false)
  %871 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.int_from_arg({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %75, { %..any*, i64 }* %2, i64 %869, i8* %871)
  %872 = load { i64, i64, i8 }, { i64, i64, i8 }* %75, align 8
  %873 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %75, i32 0, i32 0
  %874 = load i64, i64* %873, align 8
  %875 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %75, i32 0, i32 1
  %876 = load i64, i64* %875, align 8
  %877 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %75, i32 0, i32 2
  %878 = load i8, i8* %877, align 1
  store i64 %874, i64* %866, align 8
  store i64 %876, i64* %4, align 8
  store i8 %878, i8* %867, align 1
  %879 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %880 = load i64, i64* %879, align 8
  %881 = icmp slt i64 %880, 0
  %882 = zext i1 %881 to i8
  %883 = trunc i8 %882 to i1
  br i1 %883, label %if.then108, label %if.done109

if.then108:                                       ; preds = %if.then107
  %884 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  store i64 0, i64* %884, align 8
  %885 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  store i8 0, i8* %885, align 1
  br label %if.done109

if.done109:                                       ; preds = %if.then108, %if.then107
  %886 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %887 = load i8, i8* %886, align 1
  %888 = trunc i8 %887 to i1
  br i1 %888, label %if.done111, label %if.then110

if.then110:                                       ; preds = %if.done109
  %889 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %890 = load %io.Writer, %io.Writer* %889, align 8
  %891 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"csbs$28c", i64 0, i64 0), i64 17 }, %..string* %76, align 8
  %892 = bitcast { i64, i32 }* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* %892, i8 0, i64 16, i1 false)
  %893 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %77, %io.Writer* %889, %..string* %76, i64* %891, i8* %893)
  %894 = load { i64, i32 }, { i64, i32 }* %77, align 8
  br label %if.done111

if.done111:                                       ; preds = %if.then110, %if.done109
  store i8 0, i8* %6, align 1
  br label %if.done113

if.else112:                                       ; preds = %cmp.and106, %if.done105
  %895 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 9
  %896 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 6
  %897 = load %..string, %..string* %1, align 8
  %898 = load i64, i64* %7, align 8
  %899 = bitcast { i64, i64, i8 }* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* %899, i8 0, i64 24, i1 false)
  %900 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._parse_int({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %78, %..string* %1, i64 %898, i8* %900)
  %901 = load { i64, i64, i8 }, { i64, i64, i8 }* %78, align 8
  %902 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %78, i32 0, i32 0
  %903 = load i64, i64* %902, align 8
  %904 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %78, i32 0, i32 1
  %905 = load i64, i64* %904, align 8
  %906 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %78, i32 0, i32 2
  %907 = load i8, i8* %906, align 1
  store i64 %903, i64* %895, align 8
  store i64 %905, i64* %7, align 8
  store i8 %907, i8* %896, align 1
  br label %if.done113

if.done113:                                       ; preds = %if.else112, %if.done111
  br label %if.done114

if.done114:                                       ; preds = %if.done113, %cmp.and102, %if.done101
  %908 = load i8, i8* %6, align 1
  %909 = trunc i8 %908 to i1
  br i1 %909, label %if.done116, label %if.then115

if.then115:                                       ; preds = %if.done114
  %910 = load i64, i64* %4, align 8
  %911 = load %..string, %..string* %1, align 8
  %912 = load i64, i64* %7, align 8
  %913 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %914 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %915 = load i64, i64* %914, align 8
  %916 = bitcast { i64, i64, i8 }* %79 to i8*
  call void @llvm.memset.p0i8.i64(i8* %916, i8 0, i64 24, i1 false)
  %917 = bitcast %runtime.Context* %117 to i8*
  call void @fmt._arg_number({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %79, %fmt.Info* %3, i64 %910, %..string* %1, i64 %912, i64 %915, i8* %917)
  %918 = load { i64, i64, i8 }, { i64, i64, i8 }* %79, align 8
  %919 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %79, i32 0, i32 0
  %920 = load i64, i64* %919, align 8
  %921 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %79, i32 0, i32 1
  %922 = load i64, i64* %921, align 8
  %923 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %79, i32 0, i32 2
  %924 = load i8, i8* %923, align 1
  store i64 %920, i64* %4, align 8
  store i64 %922, i64* %7, align 8
  store i8 %924, i8* %6, align 1
  br label %if.done116

if.done116:                                       ; preds = %if.then115, %if.done114
  %925 = load i64, i64* %7, align 8
  %926 = load i64, i64* %5, align 8
  %927 = icmp sge i64 %925, %926
  %928 = zext i1 %927 to i8
  %929 = trunc i8 %928 to i1
  br i1 %929, label %if.then117, label %if.done119

if.then117:                                       ; preds = %if.done116
  %930 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %931 = load %io.Writer, %io.Writer* %930, align 8
  %932 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$28d", i64 0, i64 0), i64 11 }, %..string* %80, align 8
  %933 = bitcast { i64, i32 }* %81 to i8*
  call void @llvm.memset.p0i8.i64(i8* %933, i8 0, i64 16, i1 false)
  %934 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %81, %io.Writer* %930, %..string* %80, i64* %932, i8* %934)
  %935 = load { i64, i32 }, { i64, i32 }* %81, align 8
  br label %for.done134

unreachable118:                                   ; No predecessors!
  br label %if.done119

if.done119:                                       ; preds = %unreachable118, %if.done116
  store i64 1, i64* %82, align 8
  %936 = load i64, i64* %7, align 8
  %937 = load %..string, %..string* %1, align 8
  %938 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %939 = load i64, i64* %938, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %83, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %83, i32 465, i32 45, i64 %936, i64 %939, i64 %939)
  %940 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %941 = load i8*, i8** %940, align 8
  %942 = getelementptr i8, i8* %941, i64 %936
  %943 = sub i64 %939, %936
  %944 = getelementptr inbounds %..string, %..string* %84, i32 0, i32 0
  store i8* %942, i8** %944, align 8
  %945 = getelementptr inbounds %..string, %..string* %84, i32 0, i32 1
  store i64 %943, i64* %945, align 8
  %946 = load %..string, %..string* %84, align 8
  %947 = bitcast { i32, i64 }* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* %947, i8 0, i64 16, i1 false)
  %948 = bitcast %runtime.Context* %117 to i8*
  call void @utf8.decode_rune_in_string({ i32, i64 }* sret({ i32, i64 }*) %85, %..string* %84, i8* %948)
  %949 = load { i32, i64 }, { i32, i64 }* %85, align 8
  %950 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %85, i32 0, i32 0
  %951 = load i32, i32* %950, align 4
  %952 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %85, i32 0, i32 1
  %953 = load i64, i64* %952, align 8
  store i32 %951, i32* %63, align 4
  store i64 %953, i64* %82, align 8
  %954 = load i64, i64* %82, align 8
  %955 = load i64, i64* %7, align 8
  %956 = add i64 %955, %954
  store i64 %956, i64* %7, align 8
  br label %if.done120

if.done120:                                       ; preds = %if.done119, %cmp.and77, %if.done76
  %957 = load i64, i64* %7, align 8
  %958 = load i64, i64* %5, align 8
  %959 = icmp sge i64 %957, %958
  %960 = zext i1 %959 to i8
  %961 = trunc i8 %960 to i1
  br i1 %961, label %if.then121, label %if.done123

if.then121:                                       ; preds = %if.done120
  %962 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %963 = load %io.Writer, %io.Writer* %962, align 8
  %964 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$291", i64 0, i64 0), i64 23 }, %..string* %86, align 8
  %965 = bitcast { i64, i32 }* %87 to i8*
  call void @llvm.memset.p0i8.i64(i8* %965, i8 0, i64 16, i1 false)
  %966 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %87, %io.Writer* %962, %..string* %86, i64* %964, i8* %966)
  %967 = load { i64, i32 }, { i64, i32 }* %87, align 8
  br label %for.done134

unreachable122:                                   ; No predecessors!
  br label %if.done123

if.done123:                                       ; preds = %unreachable122, %if.done120
  %968 = load i64, i64* %7, align 8
  %969 = load %..string, %..string* %1, align 8
  %970 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 1
  %971 = load i64, i64* %970, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %90, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %90, i32 474, i32 46, i64 %968, i64 %971, i64 %971)
  %972 = getelementptr inbounds %..string, %..string* %1, i32 0, i32 0
  %973 = load i8*, i8** %972, align 8
  %974 = getelementptr i8, i8* %973, i64 %968
  %975 = sub i64 %971, %968
  %976 = getelementptr inbounds %..string, %..string* %91, i32 0, i32 0
  store i8* %974, i8** %976, align 8
  %977 = getelementptr inbounds %..string, %..string* %91, i32 0, i32 1
  store i64 %975, i64* %977, align 8
  %978 = load %..string, %..string* %91, align 8
  %979 = bitcast { i32, i64 }* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* %979, i8 0, i64 16, i1 false)
  %980 = bitcast %runtime.Context* %117 to i8*
  call void @utf8.decode_rune_in_string({ i32, i64 }* sret({ i32, i64 }*) %92, %..string* %91, i8* %980)
  %981 = load { i32, i64 }, { i32, i64 }* %92, align 8
  %982 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %92, i32 0, i32 0
  %983 = load i32, i32* %982, align 4
  %984 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %92, i32 0, i32 1
  %985 = load i64, i64* %984, align 8
  store i32 %983, i32* %88, align 4
  store i64 %985, i64* %89, align 8
  %986 = load i64, i64* %89, align 8
  %987 = load i64, i64* %7, align 8
  %988 = add i64 %987, %986
  store i64 %988, i64* %7, align 8
  %989 = load i32, i32* %88, align 4
  %990 = icmp ne i32 %989, 125
  %991 = zext i1 %990 to i8
  %992 = icmp eq i8 1, %991
  br i1 %992, label %switch.case.body125, label %switch.case.next124

switch.case.next124:                              ; preds = %if.done123
  %993 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 12
  %994 = load i8, i8* %993, align 1
  %995 = icmp eq i8 %994, 0
  %996 = zext i1 %995 to i8
  %997 = icmp eq i8 1, %996
  br i1 %997, label %switch.case.body127, label %switch.case.next126

switch.case.body125:                              ; preds = %if.done123
  %998 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %999 = load %io.Writer, %io.Writer* %998, align 8
  %1000 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$291", i64 0, i64 0), i64 23 }, %..string* %93, align 8
  %1001 = bitcast { i64, i32 }* %94 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1001, i8 0, i64 16, i1 false)
  %1002 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %94, %io.Writer* %998, %..string* %93, i64* %1000, i8* %1002)
  %1003 = load { i64, i32 }, { i64, i32 }* %94, align 8
  br label %switch.done131

switch.case.next126:                              ; preds = %switch.case.next124
  %1004 = load i64, i64* %4, align 8
  %1005 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %1006 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %1007 = load i64, i64* %1006, align 8
  %1008 = icmp sge i64 %1004, %1007
  %1009 = zext i1 %1008 to i8
  %1010 = icmp eq i8 1, %1009
  br i1 %1010, label %switch.case.body129, label %switch.case.next128

switch.case.body127:                              ; preds = %switch.case.next124
  %1011 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1012 = load %io.Writer, %io.Writer* %1011, align 8
  %1013 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"csbs$28e", i64 0, i64 0), i64 23 }, %..string* %95, align 8
  %1014 = bitcast { i64, i32 }* %96 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1014, i8 0, i64 16, i1 false)
  %1015 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %96, %io.Writer* %1011, %..string* %95, i64* %1013, i8* %1015)
  %1016 = load { i64, i32 }, { i64, i32 }* %96, align 8
  br label %switch.done131

switch.case.next128:                              ; preds = %switch.case.next126
  br label %switch.default.body130

switch.case.body129:                              ; preds = %switch.case.next126
  %1017 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1018 = load %io.Writer, %io.Writer* %1017, align 8
  %1019 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$28f", i64 0, i64 0), i64 20 }, %..string* %97, align 8
  %1020 = bitcast { i64, i32 }* %98 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1020, i8 0, i64 16, i1 false)
  %1021 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %98, %io.Writer* %1017, %..string* %97, i64* %1019, i8* %1021)
  %1022 = load { i64, i32 }, { i64, i32 }* %98, align 8
  br label %switch.done131

switch.default.body130:                           ; preds = %switch.case.next128
  %1023 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %1024 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 0
  %1025 = load %..any*, %..any** %1024, align 8
  %1026 = load i64, i64* %4, align 8
  %1027 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %1028 = load i64, i64* %1027, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %99, align 8
  call void @runtime.bounds_check_error(%..string* %99, i32 485, i32 23, i64 %1026, i64 %1028)
  %1029 = getelementptr %..any, %..any* %1025, i64 %1026
  %1030 = load %..any, %..any* %1029, align 8
  %1031 = load i32, i32* %63, align 4
  %1032 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %3, %..any* %1029, i32 %1031, i8* %1032)
  %1033 = load i64, i64* %4, align 8
  %1034 = add i64 %1033, 1
  store i64 %1034, i64* %4, align 8
  br label %switch.done131

switch.done131:                                   ; preds = %switch.default.body130, %switch.case.body129, %switch.case.body127, %switch.case.body125
  br label %if.done132

if.done132:                                       ; preds = %switch.done131, %if.else63
  br label %if.done133

if.done133:                                       ; preds = %if.done132, %switch.done62
  br label %for.loop

for.done134:                                      ; preds = %if.then121, %if.then117, %if.then53, %if.then4, %for.loop
  %1035 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 11
  %1036 = load i8, i8* %1035, align 1
  %1037 = trunc i8 %1036 to i1
  br i1 %1037, label %if.done142, label %cmp.and135

cmp.and135:                                       ; preds = %for.done134
  %1038 = load i64, i64* %4, align 8
  %1039 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %1040 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %1041 = load i64, i64* %1040, align 8
  %1042 = icmp slt i64 %1038, %1041
  %1043 = zext i1 %1042 to i8
  %1044 = trunc i8 %1043 to i1
  br i1 %1044, label %if.then136, label %if.done142

if.then136:                                       ; preds = %cmp.and135
  %1045 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1046 = load %io.Writer, %io.Writer* %1045, align 8
  %1047 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$292", i64 0, i64 0), i64 9 }, %..string* %100, align 8
  %1048 = bitcast { i64, i32 }* %101 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1048, i8 0, i64 16, i1 false)
  %1049 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %101, %io.Writer* %1045, %..string* %100, i64* %1047, i8* %1049)
  %1050 = load { i64, i32 }, { i64, i32 }* %101, align 8
  %1051 = bitcast %..any* %102 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1051, i8 0, i64 16, i1 false)
  store i64 0, i64* %103, align 8
  %1052 = load i64, i64* %4, align 8
  %1053 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %1054 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %1055 = load i64, i64* %1054, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %104, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %104, i32 493, i32 25, i64 %1052, i64 %1055, i64 %1055)
  %1056 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 0
  %1057 = load %..any*, %..any** %1056, align 8
  %1058 = getelementptr %..any, %..any* %1057, i64 %1052
  %1059 = sub i64 %1055, %1052
  %1060 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %105, i32 0, i32 0
  store %..any* %1058, %..any** %1060, align 8
  %1061 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %105, i32 0, i32 1
  store i64 %1059, i64* %1061, align 8
  %1062 = load { %..any*, i64 }, { %..any*, i64 }* %105, align 8
  %1063 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %105, i32 0, i32 1
  %1064 = load i64, i64* %1063, align 8
  store i64 %1064, i64* %106, align 8
  store i64 -1, i64* %107, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done141, %if.then136
  %1065 = load i64, i64* %107, align 8
  %1066 = add i64 %1065, 1
  store i64 %1066, i64* %107, align 8
  %1067 = load i64, i64* %106, align 8
  %1068 = icmp slt i64 %1066, %1067
  br i1 %1068, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %1069 = load i64, i64* %107, align 8
  %1070 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %105, i32 0, i32 0
  %1071 = load %..any*, %..any** %1070, align 8
  %1072 = getelementptr %..any, %..any* %1071, i64 %1069
  %1073 = load %..any, %..any* %1072, align 8
  store %..any %1073, %..any* %108, align 8
  store i64 %1069, i64* %109, align 8
  %1074 = load i64, i64* %109, align 8
  %1075 = icmp sgt i64 %1074, 0
  %1076 = zext i1 %1075 to i8
  %1077 = trunc i8 %1076 to i1
  br i1 %1077, label %if.then137, label %if.done138

if.then137:                                       ; preds = %for.index.body
  %1078 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1079 = load %io.Writer, %io.Writer* %1078, align 8
  %1080 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %110, align 8
  %1081 = bitcast { i64, i32 }* %111 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1081, i8 0, i64 16, i1 false)
  %1082 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %111, %io.Writer* %1078, %..string* %110, i64* %1080, i8* %1082)
  %1083 = load { i64, i32 }, { i64, i32 }* %111, align 8
  br label %if.done138

if.done138:                                       ; preds = %if.then137, %for.index.body
  %1084 = load %..any, %..any* %108, align 8
  %1085 = getelementptr inbounds %..any, %..any* %108, i32 0, i32 0
  %1086 = load i8*, i8** %1085, align 8
  %1087 = getelementptr inbounds %..any, %..any* %108, i32 0, i32 1
  %1088 = load i64, i64* %1087, align 8
  %1089 = icmp eq i8* %1086, null
  %1090 = icmp eq i64 %1088, 0
  %1091 = or i1 %1089, %1090
  %1092 = zext i1 %1091 to i8
  %1093 = trunc i8 %1092 to i1
  br i1 %1093, label %if.then139, label %if.else140

if.then139:                                       ; preds = %if.done138
  %1094 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1095 = load %io.Writer, %io.Writer* %1094, align 8
  %1096 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %112, align 8
  %1097 = bitcast { i64, i32 }* %113 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1097, i8 0, i64 16, i1 false)
  %1098 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %113, %io.Writer* %1094, %..string* %112, i64* %1096, i8* %1098)
  %1099 = load { i64, i32 }, { i64, i32 }* %113, align 8
  br label %if.done141

if.else140:                                       ; preds = %if.done138
  %1100 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %1101 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 0
  %1102 = load %..any*, %..any** %1101, align 8
  %1103 = load i64, i64* %109, align 8
  %1104 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %2, i32 0, i32 1
  %1105 = load i64, i64* %1104, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %114, align 8
  call void @runtime.bounds_check_error(%..string* %114, i32 501, i32 23, i64 %1103, i64 %1105)
  %1106 = getelementptr %..any, %..any* %1102, i64 %1103
  %1107 = load %..any, %..any* %1106, align 8
  %1108 = bitcast %runtime.Context* %117 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %3, %..any* %1106, i32 118, i8* %1108)
  br label %if.done141

if.done141:                                       ; preds = %if.else140, %if.then139
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %1109 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 16
  %1110 = load %io.Writer, %io.Writer* %1109, align 8
  %1111 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24c", i64 0, i64 0), i64 1 }, %..string* %115, align 8
  %1112 = bitcast { i64, i32 }* %116 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1112, i8 0, i64 16, i1 false)
  %1113 = bitcast %runtime.Context* %117 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %116, %io.Writer* %1109, %..string* %115, i64* %1111, i8* %1113)
  %1114 = load { i64, i32 }, { i64, i32 }* %116, align 8
  br label %if.done142

if.done142:                                       ; preds = %for.index.done, %cmp.and135, %for.done134
  %1115 = load %io.Writer, %io.Writer* %0, align 8
  %1116 = bitcast %io.Writer* %0 to %io.Flusher*
  %1117 = load %io.Flusher, %io.Flusher* %1116, align 8
  %1118 = bitcast %runtime.Context* %117 to i8*
  %1119 = call i32 @io.flush(%io.Flusher* %1116, i8* %1118)
  %1120 = getelementptr inbounds %fmt.Info, %fmt.Info* %3, i32 0, i32 23
  %1121 = load i64, i64* %1120, align 8
  ret i64 %1121
}

define internal void @fmt._parse_int({ i64, i64, i8 }* noalias sret({ i64, i64, i8 }) %agg.result, %..string* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i8, align 1
  %4 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %5 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %6 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %7 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i64, i64* %2, align 8
  store i64 %9, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done, %entry
  %10 = load i64, i64* %6, align 8
  %11 = load %..string, %..string* %0, align 8
  %12 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp sle i64 %10, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %17 = load %..string, %..string* %0, align 8
  %18 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = load i64, i64* %6, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %4, align 8
  call void @runtime.bounds_check_error(%..string* %4, i32 533, i32 10, i64 %22, i64 %21)
  %23 = getelementptr i8, i8* %19, i64 %22
  %24 = load i8, i8* %23, align 1
  store i8 %24, i8* %3, align 1
  %25 = load i8, i8* %3, align 1
  %26 = bitcast %runtime.Context* %8 to i8*
  %27 = call i8 @fmt._parse_int.is_digit-0(i8 %25, i8* %26)
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.done, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.body
  %29 = load i64, i64* %6, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %6, align 8
  %31 = load i64, i64* %5, align 8
  %32 = mul i64 %31, 10
  store i64 %32, i64* %5, align 8
  %33 = load i8, i8* %3, align 1
  %34 = zext i8 %33 to i64
  %35 = sub i64 %34, 48
  %36 = load i64, i64* %5, align 8
  %37 = add i64 %36, %35
  store i64 %37, i64* %5, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then, %for.loop
  %38 = load i64, i64* %6, align 8
  %39 = load i64, i64* %2, align 8
  %40 = icmp sgt i64 %38, %39
  %41 = zext i1 %40 to i8
  store i8 %41, i8* %7, align 1
  %42 = load i64, i64* %5, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load i8, i8* %7, align 1
  store i64 %42, i64* %5, align 8
  store i64 %43, i64* %6, align 8
  store i8 %44, i8* %7, align 1
  %45 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %46 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %47 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  store i64 %42, i64* %45, align 8
  store i64 %43, i64* %46, align 8
  store i8 %44, i8* %47, align 1
  ret void
}

define internal void @fmt._arg_number({ i64, i64, i8 }* noalias sret({ i64, i64, i8 }) %agg.result, %fmt.Info* %0, i64 %1, %..string* %2, i64 %3, i64 %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %fmt.Info*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %..string, align 8
  %10 = alloca i64, align 8
  %11 = alloca %..string, align 8
  %12 = alloca %..string, align 8
  %13 = alloca { i64, i64, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %3, i64* %7, align 8
  store i64 %4, i64* %8, align 8
  %14 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %15 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %16 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load %..string, %..string* %2, align 8
  %19 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = load i64, i64* %7, align 8
  %22 = icmp sle i64 %20, %21
  %23 = zext i1 %22 to i8
  %24 = trunc i8 %23 to i1
  br i1 %24, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %25 = load %..string, %..string* %2, align 8
  %26 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %9, align 8
  call void @runtime.bounds_check_error(%..string* %9, i32 566, i32 37, i64 %30, i64 %29)
  %31 = getelementptr i8, i8* %27, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = icmp ne i8 %32, 91
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  %36 = load i64, i64* %6, align 8
  %37 = load i64, i64* %7, align 8
  store i64 %36, i64* %14, align 8
  store i64 %37, i64* %15, align 8
  store i8 0, i8* %16, align 1
  %38 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %39 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %40 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  store i64 %36, i64* %38, align 8
  store i64 %37, i64* %39, align 8
  store i8 0, i8* %40, align 1
  ret void

if.done:                                          ; preds = %cmp.or
  %41 = load %fmt.Info*, %fmt.Info** %5, align 8
  %42 = getelementptr inbounds %fmt.Info, %fmt.Info* %41, i32 0, i32 11
  store i8 1, i8* %42, align 1
  store i64 0, i64* %10, align 8
  %43 = load i64, i64* %7, align 8
  %44 = load %..string, %..string* %2, align 8
  %45 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %11, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %11, i32 572, i32 44, i64 %43, i64 %46, i64 %46)
  %47 = getelementptr inbounds %..string, %..string* %2, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr i8, i8* %48, i64 %43
  %50 = sub i64 %46, %43
  %51 = getelementptr inbounds %..string, %..string* %12, i32 0, i32 0
  store i8* %49, i8** %51, align 8
  %52 = getelementptr inbounds %..string, %..string* %12, i32 0, i32 1
  store i64 %50, i64* %52, align 8
  %53 = load %..string, %..string* %12, align 8
  %54 = bitcast { i64, i64, i8 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %54, i8 0, i64 24, i1 false)
  %55 = bitcast %runtime.Context* %17 to i8*
  call void @fmt._arg_number.parse_arg_number-0({ i64, i64, i8 }* sret({ i64, i64, i8 }*) %13, %..string* %12, i8* %55)
  %56 = load { i64, i64, i8 }, { i64, i64, i8 }* %13, align 8
  %57 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %13, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %13, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %13, i32 0, i32 2
  %62 = load i8, i8* %61, align 1
  store i64 %58, i64* %14, align 8
  store i64 %60, i64* %10, align 8
  store i8 %62, i8* %16, align 1
  %63 = load i8, i8* %16, align 1
  %64 = trunc i8 %63 to i1
  br i1 %64, label %cmp.and, label %if.done3

cmp.and:                                          ; preds = %if.done
  %65 = load i64, i64* %14, align 8
  %66 = icmp sle i64 0, %65
  %67 = zext i1 %66 to i8
  %68 = trunc i8 %67 to i1
  br i1 %68, label %cmp.and1, label %if.done3

cmp.and1:                                         ; preds = %cmp.and
  %69 = load i64, i64* %14, align 8
  %70 = load i64, i64* %8, align 8
  %71 = icmp slt i64 %69, %70
  %72 = zext i1 %71 to i8
  %73 = trunc i8 %72 to i1
  br i1 %73, label %if.then2, label %if.done3

if.then2:                                         ; preds = %cmp.and1
  %74 = load i64, i64* %14, align 8
  %75 = load i64, i64* %7, align 8
  %76 = load i64, i64* %10, align 8
  %77 = add i64 %75, %76
  store i64 %74, i64* %14, align 8
  store i64 %77, i64* %15, align 8
  store i8 1, i8* %16, align 1
  %78 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %79 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %80 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  store i64 %74, i64* %78, align 8
  store i64 %77, i64* %79, align 8
  store i8 1, i8* %80, align 1
  ret void

if.done3:                                         ; preds = %cmp.and1, %cmp.and, %if.done
  %81 = load %fmt.Info*, %fmt.Info** %5, align 8
  %82 = getelementptr inbounds %fmt.Info, %fmt.Info* %81, i32 0, i32 12
  store i8 0, i8* %82, align 1
  %83 = load i64, i64* %6, align 8
  %84 = load i64, i64* %7, align 8
  %85 = load i64, i64* %10, align 8
  %86 = add i64 %84, %85
  store i64 %83, i64* %14, align 8
  store i64 %86, i64* %15, align 8
  store i8 0, i8* %16, align 1
  %87 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %88 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %89 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  store i64 %83, i64* %87, align 8
  store i64 %86, i64* %88, align 8
  store i8 0, i8* %89, align 1
  ret void
}

define internal void @fmt.int_from_arg({ i64, i64, i8 }* noalias sret({ i64, i64, i8 }) %agg.result, { %..any*, i64 }* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i8, align 1
  %6 = alloca %..string, align 8
  %7 = alloca { i64, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %3, align 8
  %9 = load i64, i64* %2, align 8
  store i64 %9, i64* %4, align 8
  store i8 1, i8* %5, align 1
  %10 = load i64, i64* %2, align 8
  %11 = load { %..any*, i64 }, { %..any*, i64 }* %0, align 8
  %12 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp slt i64 %10, %13
  %15 = zext i1 %14 to i8
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %17 = load { %..any*, i64 }, { %..any*, i64 }* %0, align 8
  %18 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %0, i32 0, i32 0
  %19 = load %..any*, %..any** %18, align 8
  %20 = load i64, i64* %2, align 8
  %21 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %0, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %6, align 8
  call void @runtime.bounds_check_error(%..string* %6, i32 585, i32 33, i64 %20, i64 %22)
  %23 = getelementptr %..any, %..any* %19, i64 %20
  %24 = load %..any, %..any* %23, align 8
  %25 = bitcast { i64, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 16, i1 false)
  %26 = bitcast %runtime.Context* %8 to i8*
  call void @reflect.as_int({ i64, i8 }* sret({ i64, i8 }*) %7, %..any* %23, i8* %26)
  %27 = load { i64, i8 }, { i64, i8 }* %7, align 8
  %28 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %7, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %7, i32 0, i32 1
  %31 = load i8, i8* %30, align 1
  store i64 %29, i64* %3, align 8
  store i8 %31, i8* %5, align 1
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %32 = load i8, i8* %5, align 1
  %33 = trunc i8 %32 to i1
  br i1 %33, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %34 = load i64, i64* %4, align 8
  %35 = add i64 %34, 1
  store i64 %35, i64* %4, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  %36 = load i64, i64* %3, align 8
  %37 = load i64, i64* %4, align 8
  %38 = load i8, i8* %5, align 1
  %39 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 0
  %40 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 1
  %41 = getelementptr inbounds { i64, i64, i8 }, { i64, i64, i8 }* %agg.result, i32 0, i32 2
  store i64 %36, i64* %39, align 8
  store i64 %37, i64* %40, align 8
  store i8 %38, i8* %41, align 1
  ret void
}

define internal void @fmt.fmt_bad_verb(%fmt.Info* %0, i32 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %fmt.Info*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca { i64, i32 }, align 8
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %2, align 8
  store i32 %1, i32* %3, align 4
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load %fmt.Info*, %fmt.Info** %2, align 8
  %13 = getelementptr inbounds %fmt.Info, %fmt.Info* %12, i32 0, i32 14
  %14 = load i8, i8* %13, align 1
  store i8 %14, i8* %4, align 1
  %15 = load %fmt.Info*, %fmt.Info** %2, align 8
  %16 = getelementptr inbounds %fmt.Info, %fmt.Info* %15, i32 0, i32 14
  store i8 1, i8* %16, align 1
  %17 = load %fmt.Info*, %fmt.Info** %2, align 8
  %18 = getelementptr inbounds %fmt.Info, %fmt.Info* %17, i32 0, i32 16
  %19 = load %io.Writer, %io.Writer* %18, align 8
  %20 = load %fmt.Info*, %fmt.Info** %2, align 8
  %21 = getelementptr inbounds %fmt.Info, %fmt.Info* %20, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$294", i64 0, i64 0), i64 2 }, %..string* %5, align 8
  %22 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 16, i1 false)
  %23 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %18, %..string* %5, i64* %21, i8* %23)
  %24 = load { i64, i32 }, { i64, i32 }* %6, align 8
  %25 = load %fmt.Info*, %fmt.Info** %2, align 8
  %26 = getelementptr inbounds %fmt.Info, %fmt.Info* %25, i32 0, i32 16
  %27 = load %io.Writer, %io.Writer* %26, align 8
  %28 = load i32, i32* %3, align 4
  %29 = load %fmt.Info*, %fmt.Info** %2, align 8
  %30 = getelementptr inbounds %fmt.Info, %fmt.Info* %29, i32 0, i32 23
  %31 = bitcast { i64, i32 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 16, i1 false)
  %32 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %7, %io.Writer* %26, i32 %28, i64* %30, i8* %32)
  %33 = load { i64, i32 }, { i64, i32 }* %7, align 8
  %34 = load %fmt.Info*, %fmt.Info** %2, align 8
  %35 = getelementptr inbounds %fmt.Info, %fmt.Info* %34, i32 0, i32 16
  %36 = load %io.Writer, %io.Writer* %35, align 8
  %37 = load %fmt.Info*, %fmt.Info** %2, align 8
  %38 = getelementptr inbounds %fmt.Info, %fmt.Info* %37, i32 0, i32 23
  %39 = bitcast %runtime.Context* %11 to i8*
  %40 = call i32 @io.write_byte_to_writer(%io.Writer* %35, i8 40, i64* %38, i8* %39)
  %41 = load %fmt.Info*, %fmt.Info** %2, align 8
  %42 = getelementptr inbounds %fmt.Info, %fmt.Info* %41, i32 0, i32 17
  %43 = getelementptr inbounds %..any, %..any* %42, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = icmp ne i64 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %48 = load %fmt.Info*, %fmt.Info** %2, align 8
  %49 = getelementptr inbounds %fmt.Info, %fmt.Info* %48, i32 0, i32 16
  %50 = load %io.Writer, %io.Writer* %49, align 8
  %51 = load %fmt.Info*, %fmt.Info** %2, align 8
  %52 = getelementptr inbounds %fmt.Info, %fmt.Info* %51, i32 0, i32 17
  %53 = getelementptr inbounds %..any, %..any* %52, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = load %fmt.Info*, %fmt.Info** %2, align 8
  %56 = getelementptr inbounds %fmt.Info, %fmt.Info* %55, i32 0, i32 23
  %57 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %57, i8 0, i64 16, i1 false)
  %58 = bitcast %runtime.Context* %11 to i8*
  call void @reflect.write_typeid_writer({ i64, i32 }* sret({ i64, i32 }*) %8, %io.Writer* %49, i64 %54, i64* %56, i8* %58)
  %59 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %60 = load %fmt.Info*, %fmt.Info** %2, align 8
  %61 = getelementptr inbounds %fmt.Info, %fmt.Info* %60, i32 0, i32 16
  %62 = load %io.Writer, %io.Writer* %61, align 8
  %63 = load %fmt.Info*, %fmt.Info** %2, align 8
  %64 = getelementptr inbounds %fmt.Info, %fmt.Info* %63, i32 0, i32 23
  %65 = bitcast %runtime.Context* %11 to i8*
  %66 = call i32 @io.write_byte_to_writer(%io.Writer* %61, i8 61, i64* %64, i8* %65)
  %67 = load %fmt.Info*, %fmt.Info** %2, align 8
  %68 = load %fmt.Info*, %fmt.Info** %2, align 8
  %69 = getelementptr inbounds %fmt.Info, %fmt.Info* %68, i32 0, i32 17
  %70 = load %..any, %..any* %69, align 8
  %71 = bitcast %runtime.Context* %11 to i8*
  call void @fmt.fmt_value(%fmt.Info* %67, %..any* %69, i32 118, i8* %71)
  br label %if.done

if.else:                                          ; preds = %entry
  %72 = load %fmt.Info*, %fmt.Info** %2, align 8
  %73 = getelementptr inbounds %fmt.Info, %fmt.Info* %72, i32 0, i32 16
  %74 = load %io.Writer, %io.Writer* %73, align 8
  %75 = load %fmt.Info*, %fmt.Info** %2, align 8
  %76 = getelementptr inbounds %fmt.Info, %fmt.Info* %75, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %9, align 8
  %77 = bitcast { i64, i32 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 16, i1 false)
  %78 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %10, %io.Writer* %73, %..string* %9, i64* %76, i8* %78)
  %79 = load { i64, i32 }, { i64, i32 }* %10, align 8
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %80 = load %fmt.Info*, %fmt.Info** %2, align 8
  %81 = getelementptr inbounds %fmt.Info, %fmt.Info* %80, i32 0, i32 16
  %82 = load %io.Writer, %io.Writer* %81, align 8
  %83 = load %fmt.Info*, %fmt.Info** %2, align 8
  %84 = getelementptr inbounds %fmt.Info, %fmt.Info* %83, i32 0, i32 23
  %85 = bitcast %runtime.Context* %11 to i8*
  %86 = call i32 @io.write_byte_to_writer(%io.Writer* %81, i8 41, i64* %84, i8* %85)
  br label %defer

defer:                                            ; preds = %if.done
  %87 = load %fmt.Info*, %fmt.Info** %2, align 8
  %88 = getelementptr inbounds %fmt.Info, %fmt.Info* %87, i32 0, i32 14
  %89 = load i8, i8* %4, align 1
  store i8 %89, i8* %88, align 1
  ret void
}

define internal void @fmt.fmt_bool(%fmt.Info* %0, i1 zeroext %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  %7 = zext i1 %1 to i8
  store i8 %7, i8* %4, align 1
  store i32 %2, i32* %5, align 4
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  %9 = load i32, i32* %5, align 4
  switch i32 %9, label %switch.default.body [
    i32 116, label %switch.case.body
    i32 118, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %entry, %entry
  %10 = load %fmt.Info*, %fmt.Info** %3, align 8
  %11 = load i8, i8* %4, align 1
  %12 = trunc i8 %11 to i1
  br i1 %12, label %if.then, label %if.else

if.then:                                          ; preds = %switch.case.body
  br label %if.done

if.else:                                          ; preds = %switch.case.body
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  %13 = phi %..string [ { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$295", i64 0, i64 0), i64 4 }, %if.then ], [ { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$296", i64 0, i64 0), i64 5 }, %if.else ]
  store %..string %13, %..string* %6, align 8
  %14 = bitcast %runtime.Context* %8 to i8*
  call void @fmt.fmt_string(%fmt.Info* %10, %..string* %6, i32 115, i8* %14)
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %15 = load %fmt.Info*, %fmt.Info** %3, align 8
  %16 = load i32, i32* %5, align 4
  %17 = bitcast %runtime.Context* %8 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %15, i32 %16, i8* %17)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %if.done
  ret void
}

define internal void @fmt.fmt_write_padding(%fmt.Info* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %fmt.Info*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %2, align 8
  store i64 %1, i64* %3, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load i64, i64* %3, align 8
  %8 = icmp sle i64 %7, 0
  %9 = zext i1 %8 to i8
  %10 = trunc i8 %9 to i1
  br i1 %10, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  ret void

if.done:                                          ; preds = %entry
  store i8 32, i8* %4, align 1
  %11 = load %fmt.Info*, %fmt.Info** %2, align 8
  %12 = getelementptr inbounds %fmt.Info, %fmt.Info* %11, i32 0, i32 2
  %13 = load i8, i8* %12, align 1
  %14 = trunc i8 %13 to i1
  br i1 %14, label %if.done2, label %if.then1

if.then1:                                         ; preds = %if.done
  store i8 48, i8* %4, align 1
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %if.done
  br label %for.init

for.init:                                         ; preds = %if.done2
  store i64 0, i64* %5, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %15 = load i64, i64* %5, align 8
  %16 = load i64, i64* %3, align 8
  %17 = icmp slt i64 %15, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %20 = load %fmt.Info*, %fmt.Info** %2, align 8
  %21 = getelementptr inbounds %fmt.Info, %fmt.Info* %20, i32 0, i32 16
  %22 = load %io.Writer, %io.Writer* %21, align 8
  %23 = load i8, i8* %4, align 1
  %24 = load %fmt.Info*, %fmt.Info** %2, align 8
  %25 = getelementptr inbounds %fmt.Info, %fmt.Info* %24, i32 0, i32 23
  %26 = bitcast %runtime.Context* %6 to i8*
  %27 = call i32 @io.write_byte_to_writer(%io.Writer* %21, i8 %23, i64* %25, i8* %26)
  br label %for.post

for.post:                                         ; preds = %for.body
  %28 = load i64, i64* %5, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* %5, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  ret void
}

define internal void @fmt._fmt_int(%fmt.Info* %0, i64 %1, i64 %2, i1 zeroext %3, i64 %4, %..string* %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %fmt.Info*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca i64, align 8
  %11 = alloca i8, align 1
  %12 = alloca { i64, i8 }, align 8
  %13 = alloca i64, align 8
  %14 = alloca %..string, align 8
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8, align 1
  %18 = alloca %..string, align 8
  %19 = alloca %runtime.Source_Code_Location, align 8
  %20 = alloca [256 x i8], align 1
  %21 = alloca i64, align 8
  %22 = alloca i8, align 1
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca { i8*, i64 }, align 8
  %26 = alloca %..string, align 8
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  %29 = zext i1 %3 to i8
  store i8 %29, i8* %9, align 1
  store i64 %4, i64* %10, align 8
  %30 = bitcast i8* %__.context_ptr to %runtime.Context*
  %31 = load i64, i64* %7, align 8
  %32 = load i8, i8* %9, align 1
  %33 = load i64, i64* %10, align 8
  %34 = icmp ne i8 %32, 0
  %35 = bitcast { i64, i8 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 16, i1 false)
  %36 = bitcast %runtime.Context* %30 to i8*
  call void @strconv.is_integer_negative({ i64, i8 }* sret({ i64, i8 }*) %12, i64 %31, i1 %34, i64 %33, i8* %36)
  %37 = load { i64, i8 }, { i64, i8 }* %12, align 8
  %38 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %12, i32 0, i32 1
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %11, align 1
  %42 = load %fmt.Info*, %fmt.Info** %6, align 8
  %43 = getelementptr inbounds %fmt.Info, %fmt.Info* %42, i32 0, i32 5
  %44 = load i8, i8* %43, align 1
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %46 = load %fmt.Info*, %fmt.Info** %6, align 8
  %47 = getelementptr inbounds %fmt.Info, %fmt.Info* %46, i32 0, i32 6
  %48 = load i8, i8* %47, align 1
  %49 = trunc i8 %48 to i1
  br i1 %49, label %if.then, label %if.done2

if.then:                                          ; preds = %cmp.or, %entry
  %50 = load %fmt.Info*, %fmt.Info** %6, align 8
  %51 = getelementptr inbounds %fmt.Info, %fmt.Info* %50, i32 0, i32 8
  %52 = load i64, i64* %51, align 8
  %53 = load %fmt.Info*, %fmt.Info** %6, align 8
  %54 = getelementptr inbounds %fmt.Info, %fmt.Info* %53, i32 0, i32 9
  %55 = load i64, i64* %54, align 8
  %56 = add i64 %52, %55
  %57 = add i64 %56, 3
  store i64 %57, i64* %13, align 8
  %58 = load i64, i64* %13, align 8
  %59 = icmp sgt i64 %58, 256
  %60 = zext i1 %59 to i8
  %61 = trunc i8 %60 to i1
  br i1 %61, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$297", i64 0, i64 0), i64 53 }, %..string* %14, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 647, i32 4, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$298", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %15, align 8
  %62 = bitcast %runtime.Context* %30 to i8*
  call void @runtime.panic(%..string* %14, %runtime.Source_Code_Location* %15, i8* %62)
  unreachable

if.done:                                          ; preds = %if.then
  br label %if.done2

if.done2:                                         ; preds = %if.done, %cmp.or
  store i64 0, i64* %16, align 8
  %63 = load %fmt.Info*, %fmt.Info** %6, align 8
  %64 = getelementptr inbounds %fmt.Info, %fmt.Info* %63, i32 0, i32 6
  %65 = load i8, i8* %64, align 1
  %66 = trunc i8 %65 to i1
  br i1 %66, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.done2
  %67 = load %fmt.Info*, %fmt.Info** %6, align 8
  %68 = getelementptr inbounds %fmt.Info, %fmt.Info* %67, i32 0, i32 9
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %16, align 8
  %70 = load i64, i64* %16, align 8
  %71 = icmp eq i64 %70, 0
  %72 = zext i1 %71 to i8
  %73 = trunc i8 %72 to i1
  br i1 %73, label %cmp.and, label %if.done5

cmp.and:                                          ; preds = %if.then3
  %74 = load i64, i64* %7, align 8
  %75 = icmp eq i64 %74, 0
  %76 = zext i1 %75 to i8
  %77 = trunc i8 %76 to i1
  br i1 %77, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.and
  %78 = load %fmt.Info*, %fmt.Info** %6, align 8
  %79 = getelementptr inbounds %fmt.Info, %fmt.Info* %78, i32 0, i32 3
  %80 = load i8, i8* %79, align 1
  store i8 %80, i8* %17, align 1
  %81 = load %fmt.Info*, %fmt.Info** %6, align 8
  %82 = getelementptr inbounds %fmt.Info, %fmt.Info* %81, i32 0, i32 3
  store i8 0, i8* %82, align 1
  %83 = load %fmt.Info*, %fmt.Info** %6, align 8
  %84 = load %fmt.Info*, %fmt.Info** %6, align 8
  %85 = getelementptr inbounds %fmt.Info, %fmt.Info* %84, i32 0, i32 8
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %runtime.Context* %30 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %83, i64 %86, i8* %87)
  %88 = load %fmt.Info*, %fmt.Info** %6, align 8
  %89 = getelementptr inbounds %fmt.Info, %fmt.Info* %88, i32 0, i32 3
  %90 = load i8, i8* %17, align 1
  store i8 %90, i8* %89, align 1
  ret void

if.done5:                                         ; preds = %cmp.and, %if.then3
  br label %if.done13

if.else:                                          ; preds = %if.done2
  %91 = load %fmt.Info*, %fmt.Info** %6, align 8
  %92 = getelementptr inbounds %fmt.Info, %fmt.Info* %91, i32 0, i32 3
  %93 = load i8, i8* %92, align 1
  %94 = trunc i8 %93 to i1
  br i1 %94, label %cmp.and6, label %if.done12

cmp.and6:                                         ; preds = %if.else
  %95 = load %fmt.Info*, %fmt.Info** %6, align 8
  %96 = getelementptr inbounds %fmt.Info, %fmt.Info* %95, i32 0, i32 5
  %97 = load i8, i8* %96, align 1
  %98 = trunc i8 %97 to i1
  br i1 %98, label %if.then7, label %if.done12

if.then7:                                         ; preds = %cmp.and6
  %99 = load %fmt.Info*, %fmt.Info** %6, align 8
  %100 = getelementptr inbounds %fmt.Info, %fmt.Info* %99, i32 0, i32 8
  %101 = load i64, i64* %100, align 8
  store i64 %101, i64* %16, align 8
  %102 = load i8, i8* %11, align 1
  %103 = trunc i8 %102 to i1
  br i1 %103, label %if.then10, label %cmp.or8

cmp.or8:                                          ; preds = %if.then7
  %104 = load %fmt.Info*, %fmt.Info** %6, align 8
  %105 = getelementptr inbounds %fmt.Info, %fmt.Info* %104, i32 0, i32 1
  %106 = load i8, i8* %105, align 1
  %107 = trunc i8 %106 to i1
  br i1 %107, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %cmp.or8
  %108 = load %fmt.Info*, %fmt.Info** %6, align 8
  %109 = getelementptr inbounds %fmt.Info, %fmt.Info* %108, i32 0, i32 2
  %110 = load i8, i8* %109, align 1
  %111 = trunc i8 %110 to i1
  br i1 %111, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.or9, %cmp.or8, %if.then7
  %112 = load i64, i64* %16, align 8
  %113 = sub i64 %112, 1
  store i64 %113, i64* %16, align 8
  br label %if.done11

if.done11:                                        ; preds = %if.then10, %cmp.or9
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %cmp.and6, %if.else
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.done5
  %114 = load i64, i64* %8, align 8
  switch i64 %114, label %switch.default.body [
    i64 2, label %switch.case.body
    i64 8, label %switch.case.body
    i64 10, label %switch.case.body
    i64 12, label %switch.case.body
    i64 16, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %if.done13, %if.done13, %if.done13, %if.done13, %if.done13
  br label %switch.done

unreachable:                                      ; No predecessors!
  br label %switch.done

switch.default.body:                              ; preds = %if.done13
  store %..string { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"csbs$299", i64 0, i64 0), i64 30 }, %..string* %18, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 673, i32 3, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$298", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %19, align 8
  %115 = bitcast %runtime.Context* %30 to i8*
  call void @runtime.panic(%..string* %18, %runtime.Source_Code_Location* %19, i8* %115)
  unreachable

switch.done:                                      ; preds = %unreachable, %switch.case.body
  %116 = bitcast [256 x i8]* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %116, i8 0, i64 256, i1 false)
  store i64 0, i64* %21, align 8
  store i8 0, i8* %22, align 1
  %117 = load %fmt.Info*, %fmt.Info** %6, align 8
  %118 = getelementptr inbounds %fmt.Info, %fmt.Info* %117, i32 0, i32 4
  %119 = load i8, i8* %118, align 1
  %120 = trunc i8 %119 to i1
  br i1 %120, label %cmp.and14, label %if.done16

cmp.and14:                                        ; preds = %switch.done
  %121 = load %fmt.Info*, %fmt.Info** %6, align 8
  %122 = getelementptr inbounds %fmt.Info, %fmt.Info* %121, i32 0, i32 3
  %123 = load i8, i8* %122, align 1
  %124 = trunc i8 %123 to i1
  br i1 %124, label %if.done16, label %if.then15

if.then15:                                        ; preds = %cmp.and14
  %125 = load i8, i8* %22, align 1
  %126 = or i8 %125, 1
  store i8 %126, i8* %22, align 1
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %cmp.and14, %switch.done
  %127 = load %fmt.Info*, %fmt.Info** %6, align 8
  %128 = getelementptr inbounds %fmt.Info, %fmt.Info* %127, i32 0, i32 1
  %129 = load i8, i8* %128, align 1
  %130 = trunc i8 %129 to i1
  br i1 %130, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.done16
  %131 = load i8, i8* %22, align 1
  %132 = or i8 %131, 2
  store i8 %132, i8* %22, align 1
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.done16
  %133 = load %fmt.Info*, %fmt.Info** %6, align 8
  %134 = getelementptr inbounds %fmt.Info, %fmt.Info* %133, i32 0, i32 2
  %135 = load i8, i8* %134, align 1
  %136 = trunc i8 %135 to i1
  br i1 %136, label %if.then19, label %if.done20

if.then19:                                        ; preds = %if.done18
  %137 = load i8, i8* %22, align 1
  %138 = or i8 %137, 4
  store i8 %138, i8* %22, align 1
  br label %if.done20

if.done20:                                        ; preds = %if.then19, %if.done18
  %139 = load i64, i64* %21, align 8
  %140 = load [256 x i8], [256 x i8]* %20, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %24, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %24, i32 683, i32 30, i64 %139, i64 256, i64 256)
  %141 = getelementptr [256 x i8], [256 x i8]* %20, i64 0, i64 0
  %142 = getelementptr i8, i8* %141, i64 %139
  %143 = sub i64 256, %139
  %144 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  store i8* %142, i8** %144, align 8
  %145 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  store i64 %143, i64* %145, align 8
  %146 = load { i8*, i64 }, { i8*, i64 }* %25, align 8
  %147 = load i64, i64* %7, align 8
  %148 = load i64, i64* %8, align 8
  %149 = load i8, i8* %9, align 1
  %150 = load i64, i64* %10, align 8
  %151 = load %..string, %..string* %5, align 8
  %152 = load i8, i8* %22, align 1
  %153 = icmp ne i8 %149, 0
  %154 = bitcast %..string* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %154, i8 0, i64 16, i1 false)
  %155 = bitcast %runtime.Context* %30 to i8*
  call void @strconv.append_bits(%..string* sret(%..string*) %26, { i8*, i64 }* %25, i64 %147, i64 %148, i1 %153, i64 %150, %..string* %5, i8 %152, i8* %155)
  %156 = load %..string, %..string* %26, align 8
  store %..string %156, %..string* %23, align 8
  %157 = load %fmt.Info*, %fmt.Info** %6, align 8
  %158 = getelementptr inbounds %fmt.Info, %fmt.Info* %157, i32 0, i32 4
  %159 = load i8, i8* %158, align 1
  %160 = trunc i8 %159 to i1
  br i1 %160, label %cmp.and21, label %if.done31

cmp.and21:                                        ; preds = %if.done20
  %161 = load %fmt.Info*, %fmt.Info** %6, align 8
  %162 = getelementptr inbounds %fmt.Info, %fmt.Info* %161, i32 0, i32 3
  %163 = load i8, i8* %162, align 1
  %164 = trunc i8 %163 to i1
  br i1 %164, label %cmp.and22, label %if.done31

cmp.and22:                                        ; preds = %cmp.and21
  %165 = load %fmt.Info*, %fmt.Info** %6, align 8
  %166 = getelementptr inbounds %fmt.Info, %fmt.Info* %165, i32 0, i32 10
  %167 = load i64, i64* %166, align 8
  %168 = icmp eq i64 %167, 0
  %169 = zext i1 %168 to i8
  %170 = trunc i8 %169 to i1
  br i1 %170, label %if.then23, label %if.done31

if.then23:                                        ; preds = %cmp.and22
  store i8 0, i8* %27, align 1
  %171 = load i64, i64* %8, align 8
  switch i64 %171, label %switch.done28 [
    i64 2, label %switch.case.body24
    i64 8, label %switch.case.body25
    i64 12, label %switch.case.body26
    i64 16, label %switch.case.body27
  ]

switch.case.body24:                               ; preds = %if.then23
  store i8 98, i8* %27, align 1
  br label %switch.done28

switch.case.body25:                               ; preds = %if.then23
  store i8 111, i8* %27, align 1
  br label %switch.done28

switch.case.body26:                               ; preds = %if.then23
  store i8 122, i8* %27, align 1
  br label %switch.done28

switch.case.body27:                               ; preds = %if.then23
  store i8 120, i8* %27, align 1
  br label %switch.done28

switch.done28:                                    ; preds = %switch.case.body27, %switch.case.body26, %switch.case.body25, %switch.case.body24, %if.then23
  %172 = load i8, i8* %27, align 1
  %173 = icmp ne i8 %172, 0
  %174 = zext i1 %173 to i8
  %175 = trunc i8 %174 to i1
  br i1 %175, label %if.then29, label %if.done30

if.then29:                                        ; preds = %switch.done28
  %176 = load %fmt.Info*, %fmt.Info** %6, align 8
  %177 = getelementptr inbounds %fmt.Info, %fmt.Info* %176, i32 0, i32 16
  %178 = load %io.Writer, %io.Writer* %177, align 8
  %179 = load %fmt.Info*, %fmt.Info** %6, align 8
  %180 = getelementptr inbounds %fmt.Info, %fmt.Info* %179, i32 0, i32 23
  %181 = bitcast %runtime.Context* %30 to i8*
  %182 = call i32 @io.write_byte_to_writer(%io.Writer* %177, i8 48, i64* %180, i8* %181)
  %183 = load %fmt.Info*, %fmt.Info** %6, align 8
  %184 = getelementptr inbounds %fmt.Info, %fmt.Info* %183, i32 0, i32 16
  %185 = load %io.Writer, %io.Writer* %184, align 8
  %186 = load i8, i8* %27, align 1
  %187 = load %fmt.Info*, %fmt.Info** %6, align 8
  %188 = getelementptr inbounds %fmt.Info, %fmt.Info* %187, i32 0, i32 23
  %189 = bitcast %runtime.Context* %30 to i8*
  %190 = call i32 @io.write_byte_to_writer(%io.Writer* %184, i8 %186, i64* %188, i8* %189)
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %switch.done28
  br label %if.done31

if.done31:                                        ; preds = %if.done30, %cmp.and22, %cmp.and21, %if.done20
  %191 = load %fmt.Info*, %fmt.Info** %6, align 8
  %192 = getelementptr inbounds %fmt.Info, %fmt.Info* %191, i32 0, i32 3
  %193 = load i8, i8* %192, align 1
  store i8 %193, i8* %28, align 1
  %194 = load %fmt.Info*, %fmt.Info** %6, align 8
  %195 = getelementptr inbounds %fmt.Info, %fmt.Info* %194, i32 0, i32 3
  store i8 0, i8* %195, align 1
  %196 = load %fmt.Info*, %fmt.Info** %6, align 8
  %197 = load %..string, %..string* %23, align 8
  %198 = bitcast %runtime.Context* %30 to i8*
  call void @fmt._pad(%fmt.Info* %196, %..string* %23, i8* %198)
  br label %defer

defer:                                            ; preds = %if.done31
  %199 = load %fmt.Info*, %fmt.Info** %6, align 8
  %200 = getelementptr inbounds %fmt.Info, %fmt.Info* %199, i32 0, i32 3
  %201 = load i8, i8* %28, align 1
  store i8 %201, i8* %200, align 1
  ret void
}

define internal void @fmt._fmt_int_128(%fmt.Info* %0, i128* %1, i64 %2, i1 zeroext %3, i64 %4, %..string* %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %fmt.Info*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i64, align 8
  %10 = alloca i8, align 1
  %11 = alloca { i128, i8 }, align 8
  %12 = alloca i64, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %runtime.Source_Code_Location, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8, align 1
  %17 = alloca %..string, align 8
  %18 = alloca %runtime.Source_Code_Location, align 8
  %19 = alloca [256 x i8], align 1
  %20 = alloca i64, align 8
  %21 = alloca i8, align 1
  %22 = alloca %..string, align 8
  %23 = alloca %..string, align 8
  %24 = alloca { i8*, i64 }, align 8
  %25 = alloca %..string, align 8
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %6, align 8
  store i64 %2, i64* %7, align 8
  %28 = zext i1 %3 to i8
  store i8 %28, i8* %8, align 1
  store i64 %4, i64* %9, align 8
  %29 = bitcast i8* %__.context_ptr to %runtime.Context*
  %30 = load i128, i128* %1, align 8
  %31 = load i8, i8* %8, align 1
  %32 = load i64, i64* %9, align 8
  %33 = icmp ne i8 %31, 0
  %34 = bitcast { i128, i8 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 24, i1 false)
  %35 = bitcast %runtime.Context* %29 to i8*
  call void @strconv.is_integer_negative_128({ i128, i8 }* sret({ i128, i8 }*) %11, i128* %1, i1 %33, i64 %32, i8* %35)
  %36 = load { i128, i8 }, { i128, i8 }* %11, align 8
  %37 = getelementptr inbounds { i128, i8 }, { i128, i8 }* %11, i32 0, i32 0
  %38 = load i128, i128* %37, align 8
  %39 = getelementptr inbounds { i128, i8 }, { i128, i8 }* %11, i32 0, i32 1
  %40 = load i8, i8* %39, align 1
  store i8 %40, i8* %10, align 1
  %41 = load %fmt.Info*, %fmt.Info** %6, align 8
  %42 = getelementptr inbounds %fmt.Info, %fmt.Info* %41, i32 0, i32 5
  %43 = load i8, i8* %42, align 1
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %45 = load %fmt.Info*, %fmt.Info** %6, align 8
  %46 = getelementptr inbounds %fmt.Info, %fmt.Info* %45, i32 0, i32 6
  %47 = load i8, i8* %46, align 1
  %48 = trunc i8 %47 to i1
  br i1 %48, label %if.then, label %if.done2

if.then:                                          ; preds = %cmp.or, %entry
  %49 = load %fmt.Info*, %fmt.Info** %6, align 8
  %50 = getelementptr inbounds %fmt.Info, %fmt.Info* %49, i32 0, i32 8
  %51 = load i64, i64* %50, align 8
  %52 = load %fmt.Info*, %fmt.Info** %6, align 8
  %53 = getelementptr inbounds %fmt.Info, %fmt.Info* %52, i32 0, i32 9
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %51, %54
  %56 = add i64 %55, 3
  store i64 %56, i64* %12, align 8
  %57 = load i64, i64* %12, align 8
  %58 = icmp sgt i64 %57, 256
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %if.then1, label %if.done

if.then1:                                         ; preds = %if.then
  store %..string { i8* getelementptr inbounds ([54 x i8], [54 x i8]* @"csbs$297", i64 0, i64 0), i64 53 }, %..string* %13, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 713, i32 4, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$29a", i64 0, i64 0), i64 12 } }, %runtime.Source_Code_Location* %14, align 8
  %61 = bitcast %runtime.Context* %29 to i8*
  call void @runtime.panic(%..string* %13, %runtime.Source_Code_Location* %14, i8* %61)
  unreachable

if.done:                                          ; preds = %if.then
  br label %if.done2

if.done2:                                         ; preds = %if.done, %cmp.or
  store i64 0, i64* %15, align 8
  %62 = load %fmt.Info*, %fmt.Info** %6, align 8
  %63 = getelementptr inbounds %fmt.Info, %fmt.Info* %62, i32 0, i32 6
  %64 = load i8, i8* %63, align 1
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.done2
  %66 = load %fmt.Info*, %fmt.Info** %6, align 8
  %67 = getelementptr inbounds %fmt.Info, %fmt.Info* %66, i32 0, i32 9
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %15, align 8
  %69 = load i64, i64* %15, align 8
  %70 = icmp eq i64 %69, 0
  %71 = zext i1 %70 to i8
  %72 = trunc i8 %71 to i1
  br i1 %72, label %cmp.and, label %if.done5

cmp.and:                                          ; preds = %if.then3
  %73 = load i128, i128* %1, align 8
  %74 = icmp eq i128 %73, 0
  %75 = zext i1 %74 to i8
  %76 = trunc i8 %75 to i1
  br i1 %76, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.and
  %77 = load %fmt.Info*, %fmt.Info** %6, align 8
  %78 = getelementptr inbounds %fmt.Info, %fmt.Info* %77, i32 0, i32 3
  %79 = load i8, i8* %78, align 1
  store i8 %79, i8* %16, align 1
  %80 = load %fmt.Info*, %fmt.Info** %6, align 8
  %81 = getelementptr inbounds %fmt.Info, %fmt.Info* %80, i32 0, i32 3
  store i8 0, i8* %81, align 1
  %82 = load %fmt.Info*, %fmt.Info** %6, align 8
  %83 = load %fmt.Info*, %fmt.Info** %6, align 8
  %84 = getelementptr inbounds %fmt.Info, %fmt.Info* %83, i32 0, i32 8
  %85 = load i64, i64* %84, align 8
  %86 = bitcast %runtime.Context* %29 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %82, i64 %85, i8* %86)
  %87 = load %fmt.Info*, %fmt.Info** %6, align 8
  %88 = getelementptr inbounds %fmt.Info, %fmt.Info* %87, i32 0, i32 3
  %89 = load i8, i8* %16, align 1
  store i8 %89, i8* %88, align 1
  ret void

if.done5:                                         ; preds = %cmp.and, %if.then3
  br label %if.done13

if.else:                                          ; preds = %if.done2
  %90 = load %fmt.Info*, %fmt.Info** %6, align 8
  %91 = getelementptr inbounds %fmt.Info, %fmt.Info* %90, i32 0, i32 3
  %92 = load i8, i8* %91, align 1
  %93 = trunc i8 %92 to i1
  br i1 %93, label %cmp.and6, label %if.done12

cmp.and6:                                         ; preds = %if.else
  %94 = load %fmt.Info*, %fmt.Info** %6, align 8
  %95 = getelementptr inbounds %fmt.Info, %fmt.Info* %94, i32 0, i32 5
  %96 = load i8, i8* %95, align 1
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then7, label %if.done12

if.then7:                                         ; preds = %cmp.and6
  %98 = load %fmt.Info*, %fmt.Info** %6, align 8
  %99 = getelementptr inbounds %fmt.Info, %fmt.Info* %98, i32 0, i32 8
  %100 = load i64, i64* %99, align 8
  store i64 %100, i64* %15, align 8
  %101 = load i8, i8* %10, align 1
  %102 = trunc i8 %101 to i1
  br i1 %102, label %if.then10, label %cmp.or8

cmp.or8:                                          ; preds = %if.then7
  %103 = load %fmt.Info*, %fmt.Info** %6, align 8
  %104 = getelementptr inbounds %fmt.Info, %fmt.Info* %103, i32 0, i32 1
  %105 = load i8, i8* %104, align 1
  %106 = trunc i8 %105 to i1
  br i1 %106, label %if.then10, label %cmp.or9

cmp.or9:                                          ; preds = %cmp.or8
  %107 = load %fmt.Info*, %fmt.Info** %6, align 8
  %108 = getelementptr inbounds %fmt.Info, %fmt.Info* %107, i32 0, i32 2
  %109 = load i8, i8* %108, align 1
  %110 = trunc i8 %109 to i1
  br i1 %110, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.or9, %cmp.or8, %if.then7
  %111 = load i64, i64* %15, align 8
  %112 = sub i64 %111, 1
  store i64 %112, i64* %15, align 8
  br label %if.done11

if.done11:                                        ; preds = %if.then10, %cmp.or9
  br label %if.done12

if.done12:                                        ; preds = %if.done11, %cmp.and6, %if.else
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %if.done5
  %113 = load i64, i64* %7, align 8
  switch i64 %113, label %switch.default.body [
    i64 2, label %switch.case.body
    i64 8, label %switch.case.body
    i64 10, label %switch.case.body
    i64 12, label %switch.case.body
    i64 16, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %if.done13, %if.done13, %if.done13, %if.done13, %if.done13
  br label %switch.done

unreachable:                                      ; No predecessors!
  br label %switch.done

switch.default.body:                              ; preds = %if.done13
  store %..string { i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"csbs$299", i64 0, i64 0), i64 30 }, %..string* %17, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 739, i32 3, %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$29a", i64 0, i64 0), i64 12 } }, %runtime.Source_Code_Location* %18, align 8
  %114 = bitcast %runtime.Context* %29 to i8*
  call void @runtime.panic(%..string* %17, %runtime.Source_Code_Location* %18, i8* %114)
  unreachable

switch.done:                                      ; preds = %unreachable, %switch.case.body
  %115 = bitcast [256 x i8]* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %115, i8 0, i64 256, i1 false)
  store i64 0, i64* %20, align 8
  store i8 0, i8* %21, align 1
  %116 = load %fmt.Info*, %fmt.Info** %6, align 8
  %117 = getelementptr inbounds %fmt.Info, %fmt.Info* %116, i32 0, i32 4
  %118 = load i8, i8* %117, align 1
  %119 = trunc i8 %118 to i1
  br i1 %119, label %cmp.and14, label %if.done16

cmp.and14:                                        ; preds = %switch.done
  %120 = load %fmt.Info*, %fmt.Info** %6, align 8
  %121 = getelementptr inbounds %fmt.Info, %fmt.Info* %120, i32 0, i32 3
  %122 = load i8, i8* %121, align 1
  %123 = trunc i8 %122 to i1
  br i1 %123, label %if.done16, label %if.then15

if.then15:                                        ; preds = %cmp.and14
  %124 = load i8, i8* %21, align 1
  %125 = or i8 %124, 1
  store i8 %125, i8* %21, align 1
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %cmp.and14, %switch.done
  %126 = load %fmt.Info*, %fmt.Info** %6, align 8
  %127 = getelementptr inbounds %fmt.Info, %fmt.Info* %126, i32 0, i32 1
  %128 = load i8, i8* %127, align 1
  %129 = trunc i8 %128 to i1
  br i1 %129, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.done16
  %130 = load i8, i8* %21, align 1
  %131 = or i8 %130, 2
  store i8 %131, i8* %21, align 1
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.done16
  %132 = load %fmt.Info*, %fmt.Info** %6, align 8
  %133 = getelementptr inbounds %fmt.Info, %fmt.Info* %132, i32 0, i32 2
  %134 = load i8, i8* %133, align 1
  %135 = trunc i8 %134 to i1
  br i1 %135, label %if.then19, label %if.done20

if.then19:                                        ; preds = %if.done18
  %136 = load i8, i8* %21, align 1
  %137 = or i8 %136, 4
  store i8 %137, i8* %21, align 1
  br label %if.done20

if.done20:                                        ; preds = %if.then19, %if.done18
  %138 = load i64, i64* %20, align 8
  %139 = load [256 x i8], [256 x i8]* %19, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %23, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %23, i32 749, i32 34, i64 %138, i64 256, i64 256)
  %140 = getelementptr [256 x i8], [256 x i8]* %19, i64 0, i64 0
  %141 = getelementptr i8, i8* %140, i64 %138
  %142 = sub i64 256, %138
  %143 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 0
  store i8* %141, i8** %143, align 8
  %144 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %24, i32 0, i32 1
  store i64 %142, i64* %144, align 8
  %145 = load { i8*, i64 }, { i8*, i64 }* %24, align 8
  %146 = load i128, i128* %1, align 8
  %147 = load i64, i64* %7, align 8
  %148 = load i8, i8* %8, align 1
  %149 = load i64, i64* %9, align 8
  %150 = load %..string, %..string* %5, align 8
  %151 = load i8, i8* %21, align 1
  %152 = icmp ne i8 %148, 0
  %153 = bitcast %..string* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %153, i8 0, i64 16, i1 false)
  %154 = bitcast %runtime.Context* %29 to i8*
  call void @strconv.append_bits_128(%..string* sret(%..string*) %25, { i8*, i64 }* %24, i128* %1, i64 %147, i1 %152, i64 %149, %..string* %5, i8 %151, i8* %154)
  %155 = load %..string, %..string* %25, align 8
  store %..string %155, %..string* %22, align 8
  %156 = load %fmt.Info*, %fmt.Info** %6, align 8
  %157 = getelementptr inbounds %fmt.Info, %fmt.Info* %156, i32 0, i32 4
  %158 = load i8, i8* %157, align 1
  %159 = trunc i8 %158 to i1
  br i1 %159, label %cmp.and21, label %if.done31

cmp.and21:                                        ; preds = %if.done20
  %160 = load %fmt.Info*, %fmt.Info** %6, align 8
  %161 = getelementptr inbounds %fmt.Info, %fmt.Info* %160, i32 0, i32 3
  %162 = load i8, i8* %161, align 1
  %163 = trunc i8 %162 to i1
  br i1 %163, label %cmp.and22, label %if.done31

cmp.and22:                                        ; preds = %cmp.and21
  %164 = load %fmt.Info*, %fmt.Info** %6, align 8
  %165 = getelementptr inbounds %fmt.Info, %fmt.Info* %164, i32 0, i32 10
  %166 = load i64, i64* %165, align 8
  %167 = icmp eq i64 %166, 0
  %168 = zext i1 %167 to i8
  %169 = trunc i8 %168 to i1
  br i1 %169, label %if.then23, label %if.done31

if.then23:                                        ; preds = %cmp.and22
  store i8 0, i8* %26, align 1
  %170 = load i64, i64* %7, align 8
  switch i64 %170, label %switch.done28 [
    i64 2, label %switch.case.body24
    i64 8, label %switch.case.body25
    i64 12, label %switch.case.body26
    i64 16, label %switch.case.body27
  ]

switch.case.body24:                               ; preds = %if.then23
  store i8 98, i8* %26, align 1
  br label %switch.done28

switch.case.body25:                               ; preds = %if.then23
  store i8 111, i8* %26, align 1
  br label %switch.done28

switch.case.body26:                               ; preds = %if.then23
  store i8 122, i8* %26, align 1
  br label %switch.done28

switch.case.body27:                               ; preds = %if.then23
  store i8 120, i8* %26, align 1
  br label %switch.done28

switch.done28:                                    ; preds = %switch.case.body27, %switch.case.body26, %switch.case.body25, %switch.case.body24, %if.then23
  %171 = load i8, i8* %26, align 1
  %172 = icmp ne i8 %171, 0
  %173 = zext i1 %172 to i8
  %174 = trunc i8 %173 to i1
  br i1 %174, label %if.then29, label %if.done30

if.then29:                                        ; preds = %switch.done28
  %175 = load %fmt.Info*, %fmt.Info** %6, align 8
  %176 = getelementptr inbounds %fmt.Info, %fmt.Info* %175, i32 0, i32 16
  %177 = load %io.Writer, %io.Writer* %176, align 8
  %178 = load %fmt.Info*, %fmt.Info** %6, align 8
  %179 = getelementptr inbounds %fmt.Info, %fmt.Info* %178, i32 0, i32 23
  %180 = bitcast %runtime.Context* %29 to i8*
  %181 = call i32 @io.write_byte_to_writer(%io.Writer* %176, i8 48, i64* %179, i8* %180)
  %182 = load %fmt.Info*, %fmt.Info** %6, align 8
  %183 = getelementptr inbounds %fmt.Info, %fmt.Info* %182, i32 0, i32 16
  %184 = load %io.Writer, %io.Writer* %183, align 8
  %185 = load i8, i8* %26, align 1
  %186 = load %fmt.Info*, %fmt.Info** %6, align 8
  %187 = getelementptr inbounds %fmt.Info, %fmt.Info* %186, i32 0, i32 23
  %188 = bitcast %runtime.Context* %29 to i8*
  %189 = call i32 @io.write_byte_to_writer(%io.Writer* %183, i8 %185, i64* %187, i8* %188)
  br label %if.done30

if.done30:                                        ; preds = %if.then29, %switch.done28
  br label %if.done31

if.done31:                                        ; preds = %if.done30, %cmp.and22, %cmp.and21, %if.done20
  %190 = load %fmt.Info*, %fmt.Info** %6, align 8
  %191 = getelementptr inbounds %fmt.Info, %fmt.Info* %190, i32 0, i32 3
  %192 = load i8, i8* %191, align 1
  store i8 %192, i8* %27, align 1
  %193 = load %fmt.Info*, %fmt.Info** %6, align 8
  %194 = getelementptr inbounds %fmt.Info, %fmt.Info* %193, i32 0, i32 3
  store i8 0, i8* %194, align 1
  %195 = load %fmt.Info*, %fmt.Info** %6, align 8
  %196 = load %..string, %..string* %22, align 8
  %197 = bitcast %runtime.Context* %29 to i8*
  call void @fmt._pad(%fmt.Info* %195, %..string* %22, i8* %197)
  br label %defer

defer:                                            ; preds = %if.done31
  %198 = load %fmt.Info*, %fmt.Info** %6, align 8
  %199 = getelementptr inbounds %fmt.Info, %fmt.Info* %198, i32 0, i32 3
  %200 = load i8, i8* %27, align 1
  store i8 %200, i8* %199, align 1
  ret void
}

define internal void @fmt.fmt_rune(%fmt.Info* %0, i32 %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 %2, i32* %5, align 4
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load i32, i32* %5, align 4
  switch i32 %8, label %switch.default.body [
    i32 99, label %switch.case.body
    i32 114, label %switch.case.body
    i32 118, label %switch.case.body
    i32 113, label %switch.case.body1
  ]

switch.case.body:                                 ; preds = %entry, %entry, %entry
  %9 = load %fmt.Info*, %fmt.Info** %3, align 8
  %10 = getelementptr inbounds %fmt.Info, %fmt.Info* %9, i32 0, i32 16
  %11 = load %io.Writer, %io.Writer* %10, align 8
  %12 = load i32, i32* %4, align 4
  %13 = load %fmt.Info*, %fmt.Info** %3, align 8
  %14 = getelementptr inbounds %fmt.Info, %fmt.Info* %13, i32 0, i32 23
  %15 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %15, i8 0, i64 16, i1 false)
  %16 = bitcast %runtime.Context* %7 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %10, i32 %12, i64* %14, i8* %16)
  %17 = load { i64, i32 }, { i64, i32 }* %6, align 8
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %18 = load %fmt.Info*, %fmt.Info** %3, align 8
  %19 = getelementptr inbounds %fmt.Info, %fmt.Info* %18, i32 0, i32 23
  %20 = load %fmt.Info*, %fmt.Info** %3, align 8
  %21 = getelementptr inbounds %fmt.Info, %fmt.Info* %20, i32 0, i32 16
  %22 = load %io.Writer, %io.Writer* %21, align 8
  %23 = load i32, i32* %4, align 4
  %24 = bitcast %runtime.Context* %7 to i8*
  %25 = call i64 @io.write_quoted_rune(%io.Writer* %21, i32 %23, i8* %24)
  %26 = load i64, i64* %19, align 8
  %27 = add i64 %26, %25
  store i64 %27, i64* %19, align 8
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %28 = load %fmt.Info*, %fmt.Info** %3, align 8
  %29 = load i32, i32* %4, align 4
  %30 = sext i32 %29 to i64
  %31 = load i32, i32* %5, align 4
  %32 = bitcast %runtime.Context* %7 to i8*
  call void @fmt.fmt_int(%fmt.Info* %28, i64 %30, i1 false, i64 32, i32 %31, i8* %32)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body1, %switch.case.body
  ret void
}

define internal void @fmt.fmt_int(%fmt.Info* %0, i64 %1, i1 zeroext %2, i64 %3, i32 %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %fmt.Info*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %..string, align 8
  %12 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %5, align 8
  store i64 %1, i64* %6, align 8
  %13 = zext i1 %2 to i8
  store i8 %13, i8* %7, align 1
  store i64 %3, i64* %8, align 8
  store i32 %4, i32* %9, align 4
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load i32, i32* %9, align 4
  switch i32 %15, label %switch.default.body [
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
    i32 99, label %switch.case.body7
    i32 114, label %switch.case.body7
    i32 85, label %switch.case.body8
  ]

switch.case.body:                                 ; preds = %entry
  %16 = load %fmt.Info*, %fmt.Info** %5, align 8
  %17 = load i64, i64* %6, align 8
  %18 = load i8, i8* %7, align 1
  %19 = load i64, i64* %8, align 8
  %20 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %21 = icmp ne i8 %18, 0
  %22 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %16, i64 %17, i64 10, i1 %21, i64 %19, %..string* @fmt.__DIGITS_LOWER, i8* %22)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %23 = load %fmt.Info*, %fmt.Info** %5, align 8
  %24 = load i64, i64* %6, align 8
  %25 = load i8, i8* %7, align 1
  %26 = load i64, i64* %8, align 8
  %27 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %28 = icmp ne i8 %25, 0
  %29 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %23, i64 %24, i64 2, i1 %28, i64 %26, %..string* @fmt.__DIGITS_LOWER, i8* %29)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %30 = load %fmt.Info*, %fmt.Info** %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = load i8, i8* %7, align 1
  %33 = load i64, i64* %8, align 8
  %34 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %35 = icmp ne i8 %32, 0
  %36 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %30, i64 %31, i64 8, i1 %35, i64 %33, %..string* @fmt.__DIGITS_LOWER, i8* %36)
  br label %switch.done

switch.case.body3:                                ; preds = %entry, %entry
  %37 = load %fmt.Info*, %fmt.Info** %5, align 8
  %38 = load i64, i64* %6, align 8
  %39 = load i8, i8* %7, align 1
  %40 = load i64, i64* %8, align 8
  %41 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %42 = icmp ne i8 %39, 0
  %43 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %37, i64 %38, i64 10, i1 %42, i64 %40, %..string* @fmt.__DIGITS_LOWER, i8* %43)
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %44 = load %fmt.Info*, %fmt.Info** %5, align 8
  %45 = load i64, i64* %6, align 8
  %46 = load i8, i8* %7, align 1
  %47 = load i64, i64* %8, align 8
  %48 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %49 = icmp ne i8 %46, 0
  %50 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %44, i64 %45, i64 12, i1 %49, i64 %47, %..string* @fmt.__DIGITS_LOWER, i8* %50)
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %51 = load %fmt.Info*, %fmt.Info** %5, align 8
  %52 = load i64, i64* %6, align 8
  %53 = load i8, i8* %7, align 1
  %54 = load i64, i64* %8, align 8
  %55 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %56 = icmp ne i8 %53, 0
  %57 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %51, i64 %52, i64 16, i1 %56, i64 %54, %..string* @fmt.__DIGITS_LOWER, i8* %57)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %58 = load %fmt.Info*, %fmt.Info** %5, align 8
  %59 = load i64, i64* %6, align 8
  %60 = load i8, i8* %7, align 1
  %61 = load i64, i64* %8, align 8
  %62 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %63 = icmp ne i8 %60, 0
  %64 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %58, i64 %59, i64 16, i1 %63, i64 %61, %..string* @fmt.__DIGITS_UPPER, i8* %64)
  br label %switch.done

switch.case.body7:                                ; preds = %entry, %entry
  %65 = load %fmt.Info*, %fmt.Info** %5, align 8
  %66 = load i64, i64* %6, align 8
  %67 = trunc i64 %66 to i32
  %68 = load i32, i32* %9, align 4
  %69 = bitcast %runtime.Context* %14 to i8*
  call void @fmt.fmt_rune(%fmt.Info* %65, i32 %67, i32 %68, i8* %69)
  br label %switch.done

switch.case.body8:                                ; preds = %entry
  %70 = load i64, i64* %6, align 8
  %71 = trunc i64 %70 to i32
  store i32 %71, i32* %10, align 4
  %72 = load i32, i32* %10, align 4
  %73 = icmp slt i32 %72, 0
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body8
  %76 = load i32, i32* %10, align 4
  %77 = icmp sgt i32 %76, 1114111
  %78 = zext i1 %77 to i8
  %79 = trunc i8 %78 to i1
  br i1 %79, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body8
  %80 = load %fmt.Info*, %fmt.Info** %5, align 8
  %81 = load i32, i32* %9, align 4
  %82 = bitcast %runtime.Context* %14 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %80, i32 %81, i8* %82)
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %83 = load %fmt.Info*, %fmt.Info** %5, align 8
  %84 = getelementptr inbounds %fmt.Info, %fmt.Info* %83, i32 0, i32 16
  %85 = load %io.Writer, %io.Writer* %84, align 8
  %86 = load %fmt.Info*, %fmt.Info** %5, align 8
  %87 = getelementptr inbounds %fmt.Info, %fmt.Info* %86, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$29b", i64 0, i64 0), i64 2 }, %..string* %11, align 8
  %88 = bitcast { i64, i32 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %88, i8 0, i64 16, i1 false)
  %89 = bitcast %runtime.Context* %14 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %12, %io.Writer* %84, %..string* %11, i64* %87, i8* %89)
  %90 = load { i64, i32 }, { i64, i32 }* %12, align 8
  %91 = load %fmt.Info*, %fmt.Info** %5, align 8
  %92 = load i64, i64* %6, align 8
  %93 = load i64, i64* %8, align 8
  %94 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %95 = bitcast %runtime.Context* %14 to i8*
  call void @fmt._fmt_int(%fmt.Info* %91, i64 %92, i64 16, i1 false, i64 %93, %..string* @fmt.__DIGITS_UPPER, i8* %95)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %96 = load %fmt.Info*, %fmt.Info** %5, align 8
  %97 = load i32, i32* %9, align 4
  %98 = bitcast %runtime.Context* %14 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %96, i32 %97, i8* %98)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %if.done, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  ret void
}

define internal void @fmt.fmt_int_128(%fmt.Info* %0, i128* %1, i1 zeroext %2, i64 %3, i32 %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %fmt.Info*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %..string, align 8
  %11 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %5, align 8
  %12 = zext i1 %2 to i8
  store i8 %12, i8* %6, align 1
  store i64 %3, i64* %7, align 8
  store i32 %4, i32* %8, align 4
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load i32, i32* %8, align 4
  switch i32 %14, label %switch.default.body [
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
    i32 99, label %switch.case.body7
    i32 114, label %switch.case.body7
    i32 85, label %switch.case.body8
  ]

switch.case.body:                                 ; preds = %entry
  %15 = load %fmt.Info*, %fmt.Info** %5, align 8
  %16 = load i128, i128* %1, align 8
  %17 = load i8, i8* %6, align 1
  %18 = load i64, i64* %7, align 8
  %19 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %20 = icmp ne i8 %17, 0
  %21 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %15, i128* %1, i64 10, i1 %20, i64 %18, %..string* @fmt.__DIGITS_LOWER, i8* %21)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %22 = load %fmt.Info*, %fmt.Info** %5, align 8
  %23 = load i128, i128* %1, align 8
  %24 = load i8, i8* %6, align 1
  %25 = load i64, i64* %7, align 8
  %26 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %27 = icmp ne i8 %24, 0
  %28 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %22, i128* %1, i64 2, i1 %27, i64 %25, %..string* @fmt.__DIGITS_LOWER, i8* %28)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %29 = load %fmt.Info*, %fmt.Info** %5, align 8
  %30 = load i128, i128* %1, align 8
  %31 = load i8, i8* %6, align 1
  %32 = load i64, i64* %7, align 8
  %33 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %34 = icmp ne i8 %31, 0
  %35 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %29, i128* %1, i64 8, i1 %34, i64 %32, %..string* @fmt.__DIGITS_LOWER, i8* %35)
  br label %switch.done

switch.case.body3:                                ; preds = %entry, %entry
  %36 = load %fmt.Info*, %fmt.Info** %5, align 8
  %37 = load i128, i128* %1, align 8
  %38 = load i8, i8* %6, align 1
  %39 = load i64, i64* %7, align 8
  %40 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %41 = icmp ne i8 %38, 0
  %42 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %36, i128* %1, i64 10, i1 %41, i64 %39, %..string* @fmt.__DIGITS_LOWER, i8* %42)
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %43 = load %fmt.Info*, %fmt.Info** %5, align 8
  %44 = load i128, i128* %1, align 8
  %45 = load i8, i8* %6, align 1
  %46 = load i64, i64* %7, align 8
  %47 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %48 = icmp ne i8 %45, 0
  %49 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %43, i128* %1, i64 12, i1 %48, i64 %46, %..string* @fmt.__DIGITS_LOWER, i8* %49)
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %50 = load %fmt.Info*, %fmt.Info** %5, align 8
  %51 = load i128, i128* %1, align 8
  %52 = load i8, i8* %6, align 1
  %53 = load i64, i64* %7, align 8
  %54 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  %55 = icmp ne i8 %52, 0
  %56 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %50, i128* %1, i64 16, i1 %55, i64 %53, %..string* @fmt.__DIGITS_LOWER, i8* %56)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %57 = load %fmt.Info*, %fmt.Info** %5, align 8
  %58 = load i128, i128* %1, align 8
  %59 = load i8, i8* %6, align 1
  %60 = load i64, i64* %7, align 8
  %61 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %62 = icmp ne i8 %59, 0
  %63 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %57, i128* %1, i64 16, i1 %62, i64 %60, %..string* @fmt.__DIGITS_UPPER, i8* %63)
  br label %switch.done

switch.case.body7:                                ; preds = %entry, %entry
  %64 = load %fmt.Info*, %fmt.Info** %5, align 8
  %65 = load i128, i128* %1, align 8
  %66 = trunc i128 %65 to i32
  %67 = load i32, i32* %8, align 4
  %68 = bitcast %runtime.Context* %13 to i8*
  call void @fmt.fmt_rune(%fmt.Info* %64, i32 %66, i32 %67, i8* %68)
  br label %switch.done

switch.case.body8:                                ; preds = %entry
  %69 = load i128, i128* %1, align 8
  %70 = trunc i128 %69 to i32
  store i32 %70, i32* %9, align 4
  %71 = load i32, i32* %9, align 4
  %72 = icmp slt i32 %71, 0
  %73 = zext i1 %72 to i8
  %74 = trunc i8 %73 to i1
  br i1 %74, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %switch.case.body8
  %75 = load i32, i32* %9, align 4
  %76 = icmp sgt i32 %75, 1114111
  %77 = zext i1 %76 to i8
  %78 = trunc i8 %77 to i1
  br i1 %78, label %if.then, label %if.else

if.then:                                          ; preds = %cmp.or, %switch.case.body8
  %79 = load %fmt.Info*, %fmt.Info** %5, align 8
  %80 = load i32, i32* %8, align 4
  %81 = bitcast %runtime.Context* %13 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %79, i32 %80, i8* %81)
  br label %if.done

if.else:                                          ; preds = %cmp.or
  %82 = load %fmt.Info*, %fmt.Info** %5, align 8
  %83 = getelementptr inbounds %fmt.Info, %fmt.Info* %82, i32 0, i32 16
  %84 = load %io.Writer, %io.Writer* %83, align 8
  %85 = load %fmt.Info*, %fmt.Info** %5, align 8
  %86 = getelementptr inbounds %fmt.Info, %fmt.Info* %85, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$29b", i64 0, i64 0), i64 2 }, %..string* %10, align 8
  %87 = bitcast { i64, i32 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %87, i8 0, i64 16, i1 false)
  %88 = bitcast %runtime.Context* %13 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %11, %io.Writer* %83, %..string* %10, i64* %86, i8* %88)
  %89 = load { i64, i32 }, { i64, i32 }* %11, align 8
  %90 = load %fmt.Info*, %fmt.Info** %5, align 8
  %91 = load i128, i128* %1, align 8
  %92 = load i64, i64* %7, align 8
  %93 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %94 = bitcast %runtime.Context* %13 to i8*
  call void @fmt._fmt_int_128(%fmt.Info* %90, i128* %1, i64 16, i1 false, i64 %92, %..string* @fmt.__DIGITS_UPPER, i8* %94)
  br label %if.done

if.done:                                          ; preds = %if.else, %if.then
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %95 = load %fmt.Info*, %fmt.Info** %5, align 8
  %96 = load i32, i32* %8, align 4
  %97 = bitcast %runtime.Context* %13 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %95, i32 %96, i8* %97)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %if.done, %switch.case.body7, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %switch.case.body
  ret void
}

define internal void @fmt._pad(%fmt.Info* %0, %..string* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %fmt.Info*, align 8
  %3 = alloca { i64, i32 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i64, i32 }, align 8
  %6 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %2, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %fmt.Info*, %fmt.Info** %2, align 8
  %9 = getelementptr inbounds %fmt.Info, %fmt.Info* %8, i32 0, i32 5
  %10 = load i8, i8* %9, align 1
  %11 = trunc i8 %10 to i1
  br i1 %11, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %12 = load %fmt.Info*, %fmt.Info** %2, align 8
  %13 = getelementptr inbounds %fmt.Info, %fmt.Info* %12, i32 0, i32 16
  %14 = load %io.Writer, %io.Writer* %13, align 8
  %15 = load %..string, %..string* %1, align 8
  %16 = load %fmt.Info*, %fmt.Info** %2, align 8
  %17 = getelementptr inbounds %fmt.Info, %fmt.Info* %16, i32 0, i32 23
  %18 = bitcast { i64, i32 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %18, i8 0, i64 16, i1 false)
  %19 = bitcast %runtime.Context* %7 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %3, %io.Writer* %13, %..string* %1, i64* %17, i8* %19)
  %20 = load { i64, i32 }, { i64, i32 }* %3, align 8
  ret void

if.done:                                          ; preds = %entry
  %21 = load %fmt.Info*, %fmt.Info** %2, align 8
  %22 = getelementptr inbounds %fmt.Info, %fmt.Info* %21, i32 0, i32 8
  %23 = load i64, i64* %22, align 8
  %24 = load %..string, %..string* %1, align 8
  %25 = bitcast %runtime.Context* %7 to i8*
  %26 = call i64 @utf8.rune_count_in_string(%..string* %1, i8* %25)
  %27 = sub i64 %23, %26
  store i64 %27, i64* %4, align 8
  %28 = load %fmt.Info*, %fmt.Info** %2, align 8
  %29 = getelementptr inbounds %fmt.Info, %fmt.Info* %28, i32 0, i32 0
  %30 = load i8, i8* %29, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %32 = load %fmt.Info*, %fmt.Info** %2, align 8
  %33 = getelementptr inbounds %fmt.Info, %fmt.Info* %32, i32 0, i32 16
  %34 = load %io.Writer, %io.Writer* %33, align 8
  %35 = load %..string, %..string* %1, align 8
  %36 = load %fmt.Info*, %fmt.Info** %2, align 8
  %37 = getelementptr inbounds %fmt.Info, %fmt.Info* %36, i32 0, i32 23
  %38 = bitcast { i64, i32 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 16, i1 false)
  %39 = bitcast %runtime.Context* %7 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %5, %io.Writer* %33, %..string* %1, i64* %37, i8* %39)
  %40 = load { i64, i32 }, { i64, i32 }* %5, align 8
  %41 = load %fmt.Info*, %fmt.Info** %2, align 8
  %42 = load i64, i64* %4, align 8
  %43 = bitcast %runtime.Context* %7 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %41, i64 %42, i8* %43)
  br label %if.done2

if.else:                                          ; preds = %if.done
  %44 = load %fmt.Info*, %fmt.Info** %2, align 8
  %45 = load i64, i64* %4, align 8
  %46 = bitcast %runtime.Context* %7 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %44, i64 %45, i8* %46)
  %47 = load %fmt.Info*, %fmt.Info** %2, align 8
  %48 = getelementptr inbounds %fmt.Info, %fmt.Info* %47, i32 0, i32 16
  %49 = load %io.Writer, %io.Writer* %48, align 8
  %50 = load %..string, %..string* %1, align 8
  %51 = load %fmt.Info*, %fmt.Info** %2, align 8
  %52 = getelementptr inbounds %fmt.Info, %fmt.Info* %51, i32 0, i32 23
  %53 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %53, i8 0, i64 16, i1 false)
  %54 = bitcast %runtime.Context* %7 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %48, %..string* %1, i64* %52, i8* %54)
  %55 = load { i64, i32 }, { i64, i32 }* %6, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  ret void
}

define internal void @fmt.fmt_float(%fmt.Info* %0, double %1, i64 %2, i32 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %fmt.Info*, align 8
  %5 = alloca double, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca [386 x i8], align 1
  %10 = alloca %..string, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i8*, i64 }, align 8
  %13 = alloca %..string, align 8
  %14 = alloca { i8*, i64 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { i8*, i64 }, align 8
  %17 = alloca %..string, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i8*, i64 }, align 8
  %21 = alloca %..string, align 8
  %22 = alloca %..string, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca %..string, align 8
  %26 = alloca { i64, i32 }, align 8
  %27 = alloca %..string, align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca { i8*, i64 }, align 8
  %31 = alloca { i64, i32 }, align 8
  %32 = alloca %..string, align 8
  %33 = alloca { i8*, i64 }, align 8
  %34 = alloca i64, align 8
  %35 = alloca [386 x i8], align 1
  %36 = alloca %..string, align 8
  %37 = alloca %..string, align 8
  %38 = alloca { i8*, i64 }, align 8
  %39 = alloca %..string, align 8
  %40 = alloca { i8*, i64 }, align 8
  %41 = alloca %..string, align 8
  %42 = alloca { i8*, i64 }, align 8
  %43 = alloca %..string, align 8
  %44 = alloca %..string, align 8
  %45 = alloca %..string, align 8
  %46 = alloca { i8*, i64 }, align 8
  %47 = alloca %..string, align 8
  %48 = alloca %..string, align 8
  %49 = alloca %..string, align 8
  %50 = alloca %..string, align 8
  %51 = alloca %..string, align 8
  %52 = alloca { i64, i32 }, align 8
  %53 = alloca %..string, align 8
  %54 = alloca %..string, align 8
  %55 = alloca %..string, align 8
  %56 = alloca { i8*, i64 }, align 8
  %57 = alloca { i64, i32 }, align 8
  %58 = alloca %..string, align 8
  %59 = alloca { i8*, i64 }, align 8
  %60 = alloca %fmt.Info, align 8
  %61 = alloca i64, align 8
  %62 = alloca %..string, align 8
  %63 = alloca %runtime.Source_Code_Location, align 8
  %64 = alloca %..string, align 8
  %65 = alloca { i64, i32 }, align 8
  %66 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %4, align 8
  store double %1, double* %5, align 8
  store i64 %2, i64* %6, align 8
  store i32 %3, i32* %7, align 4
  %67 = bitcast i8* %__.context_ptr to %runtime.Context*
  %68 = load i32, i32* %7, align 4
  switch i32 %68, label %switch.default.body50 [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 103, label %switch.case.body
    i32 71, label %switch.case.body
    i32 118, label %switch.case.body
    i32 101, label %switch.case.body19
    i32 69, label %switch.case.body19
    i32 104, label %switch.case.body43
    i32 72, label %switch.case.body43
  ]

switch.case.body:                                 ; preds = %entry, %entry, %entry, %entry, %entry
  store i64 3, i64* %8, align 8
  %69 = load %fmt.Info*, %fmt.Info** %4, align 8
  %70 = getelementptr inbounds %fmt.Info, %fmt.Info* %69, i32 0, i32 6
  %71 = load i8, i8* %70, align 1
  %72 = trunc i8 %71 to i1
  br i1 %72, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body
  %73 = load %fmt.Info*, %fmt.Info** %4, align 8
  %74 = getelementptr inbounds %fmt.Info, %fmt.Info* %73, i32 0, i32 9
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %8, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body
  %76 = bitcast [386 x i8]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 386, i1 false)
  %77 = load [386 x i8], [386 x i8]* %9, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %11, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %11, i32 861, i32 34, i64 1, i64 386, i64 386)
  %78 = getelementptr [386 x i8], [386 x i8]* %9, i64 0, i64 0
  %79 = getelementptr i8, i8* %78, i64 1
  %80 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 0
  store i8* %79, i8** %80, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %12, i32 0, i32 1
  store i64 385, i64* %81, align 8
  %82 = load { i8*, i64 }, { i8*, i64 }* %12, align 8
  %83 = load double, double* %5, align 8
  %84 = load i64, i64* %8, align 8
  %85 = load i64, i64* %6, align 8
  %86 = bitcast %..string* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %86, i8 0, i64 16, i1 false)
  %87 = bitcast %runtime.Context* %67 to i8*
  call void @strconv.append_float(%..string* sret(%..string*) %13, { i8*, i64 }* %12, double %83, i8 102, i64 %84, i64 %85, i8* %87)
  %88 = load %..string, %..string* %13, align 8
  store %..string %88, %..string* %10, align 8
  %89 = load %..string, %..string* %10, align 8
  %90 = getelementptr inbounds %..string, %..string* %10, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %91, 1
  %93 = load [386 x i8], [386 x i8]* %9, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %15, align 8
  call void @runtime.slice_expr_error_hi(%..string* %15, i32 862, i32 11, i64 %92, i64 386)
  %94 = getelementptr [386 x i8], [386 x i8]* %9, i64 0, i64 0
  %95 = getelementptr i8, i8* %94, i64 0
  %96 = sub i64 %92, 0
  %97 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  store i8* %95, i8** %97, align 8
  %98 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  store i64 %96, i64* %98, align 8
  %99 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  store { i8*, i64 } %99, { i8*, i64 }* %14, align 8
  %100 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %17, align 8
  call void @runtime.bounds_check_error(%..string* %17, i32 863, i32 8, i64 1, i64 %104)
  %105 = getelementptr i8, i8* %102, i64 1
  %106 = load i8, i8* %105, align 1
  %107 = icmp eq i8 %106, 43
  %108 = zext i1 %107 to i8
  %109 = trunc i8 %108 to i1
  br i1 %109, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %if.done
  %110 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %111 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %114 = load i64, i64* %113, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %18, align 8
  call void @runtime.bounds_check_error(%..string* %18, i32 863, i32 23, i64 1, i64 %114)
  %115 = getelementptr i8, i8* %112, i64 1
  %116 = load i8, i8* %115, align 1
  %117 = icmp eq i8 %116, 45
  %118 = zext i1 %117 to i8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %if.then1, label %if.else

if.then1:                                         ; preds = %cmp.or, %if.done
  %120 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %121 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %19, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %19, i32 864, i32 9, i64 1, i64 %122, i64 %122)
  %123 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %124 = load i8*, i8** %123, align 8
  %125 = getelementptr i8, i8* %124, i64 1
  %126 = sub i64 %122, 1
  %127 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 0
  store i8* %125, i8** %127, align 8
  %128 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %20, i32 0, i32 1
  store i64 %126, i64* %128, align 8
  %129 = load { i8*, i64 }, { i8*, i64 }* %20, align 8
  store { i8*, i64 } %129, { i8*, i64 }* %14, align 8
  br label %if.done2

if.else:                                          ; preds = %cmp.or
  %130 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %131 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %134 = load i64, i64* %133, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %21, align 8
  call void @runtime.bounds_check_error(%..string* %21, i32 866, i32 6, i64 0, i64 %134)
  %135 = getelementptr i8, i8* %132, i64 0
  store i8 43, i8* %135, align 1
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  %136 = load %fmt.Info*, %fmt.Info** %4, align 8
  %137 = getelementptr inbounds %fmt.Info, %fmt.Info* %136, i32 0, i32 2
  %138 = load i8, i8* %137, align 1
  %139 = trunc i8 %138 to i1
  br i1 %139, label %cmp.and, label %if.done5

cmp.and:                                          ; preds = %if.done2
  %140 = load %fmt.Info*, %fmt.Info** %4, align 8
  %141 = getelementptr inbounds %fmt.Info, %fmt.Info* %140, i32 0, i32 1
  %142 = load i8, i8* %141, align 1
  %143 = trunc i8 %142 to i1
  br i1 %143, label %if.done5, label %cmp.and3

cmp.and3:                                         ; preds = %cmp.and
  %144 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %145 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  %147 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %148 = load i64, i64* %147, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %22, align 8
  call void @runtime.bounds_check_error(%..string* %22, i32 869, i32 32, i64 0, i64 %148)
  %149 = getelementptr i8, i8* %146, i64 0
  %150 = load i8, i8* %149, align 1
  %151 = icmp eq i8 %150, 43
  %152 = zext i1 %151 to i8
  %153 = trunc i8 %152 to i1
  br i1 %153, label %if.then4, label %if.done5

if.then4:                                         ; preds = %cmp.and3
  %154 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %155 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %158 = load i64, i64* %157, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %23, align 8
  call void @runtime.bounds_check_error(%..string* %23, i32 870, i32 6, i64 0, i64 %158)
  %159 = getelementptr i8, i8* %156, i64 0
  store i8 32, i8* %159, align 1
  br label %if.done5

if.done5:                                         ; preds = %if.then4, %cmp.and3, %cmp.and, %if.done2
  %160 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %161 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %162 = load i64, i64* %161, align 8
  %163 = icmp sgt i64 %162, 1
  %164 = zext i1 %163 to i8
  %165 = trunc i8 %164 to i1
  br i1 %165, label %cmp.and6, label %if.done9

cmp.and6:                                         ; preds = %if.done5
  %166 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %167 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %168 = load i8*, i8** %167, align 8
  %169 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %24, align 8
  call void @runtime.bounds_check_error(%..string* %24, i32 873, i32 23, i64 1, i64 %170)
  %171 = getelementptr i8, i8* %168, i64 1
  %172 = load i8, i8* %171, align 1
  %173 = icmp eq i8 %172, 78
  %174 = zext i1 %173 to i8
  %175 = trunc i8 %174 to i1
  br i1 %175, label %if.then8, label %cmp.or7

cmp.or7:                                          ; preds = %cmp.and6
  %176 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %177 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  %179 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %180 = load i64, i64* %179, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %25, align 8
  call void @runtime.bounds_check_error(%..string* %25, i32 873, i32 38, i64 1, i64 %180)
  %181 = getelementptr i8, i8* %178, i64 1
  %182 = load i8, i8* %181, align 1
  %183 = icmp eq i8 %182, 73
  %184 = zext i1 %183 to i8
  %185 = trunc i8 %184 to i1
  br i1 %185, label %if.then8, label %if.done9

if.then8:                                         ; preds = %cmp.or7, %cmp.and6
  %186 = load %fmt.Info*, %fmt.Info** %4, align 8
  %187 = getelementptr inbounds %fmt.Info, %fmt.Info* %186, i32 0, i32 16
  %188 = load %io.Writer, %io.Writer* %187, align 8
  %189 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %190 = bitcast { i8*, i64 }* %14 to %..string*
  %191 = load %..string, %..string* %190, align 8
  %192 = load %fmt.Info*, %fmt.Info** %4, align 8
  %193 = getelementptr inbounds %fmt.Info, %fmt.Info* %192, i32 0, i32 23
  %194 = bitcast { i64, i32 }* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %194, i8 0, i64 16, i1 false)
  %195 = bitcast %runtime.Context* %67 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %26, %io.Writer* %187, %..string* %190, i64* %193, i8* %195)
  %196 = load { i64, i32 }, { i64, i32 }* %26, align 8
  ret void

if.done9:                                         ; preds = %cmp.or7, %if.done5
  %197 = load %fmt.Info*, %fmt.Info** %4, align 8
  %198 = getelementptr inbounds %fmt.Info, %fmt.Info* %197, i32 0, i32 1
  %199 = load i8, i8* %198, align 1
  %200 = trunc i8 %199 to i1
  br i1 %200, label %if.then11, label %cmp.or10

cmp.or10:                                         ; preds = %if.done9
  %201 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %202 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %203 = load i8*, i8** %202, align 8
  %204 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %205 = load i64, i64* %204, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %27, align 8
  call void @runtime.bounds_check_error(%..string* %27, i32 878, i32 19, i64 0, i64 %205)
  %206 = getelementptr i8, i8* %203, i64 0
  %207 = load i8, i8* %206, align 1
  %208 = icmp ne i8 %207, 43
  %209 = zext i1 %208 to i8
  %210 = trunc i8 %209 to i1
  br i1 %210, label %if.then11, label %if.else17

if.then11:                                        ; preds = %cmp.or10, %if.done9
  %211 = load %fmt.Info*, %fmt.Info** %4, align 8
  %212 = getelementptr inbounds %fmt.Info, %fmt.Info* %211, i32 0, i32 3
  %213 = load i8, i8* %212, align 1
  %214 = trunc i8 %213 to i1
  br i1 %214, label %cmp.and12, label %if.else15

cmp.and12:                                        ; preds = %if.then11
  %215 = load %fmt.Info*, %fmt.Info** %4, align 8
  %216 = getelementptr inbounds %fmt.Info, %fmt.Info* %215, i32 0, i32 5
  %217 = load i8, i8* %216, align 1
  %218 = trunc i8 %217 to i1
  br i1 %218, label %cmp.and13, label %if.else15

cmp.and13:                                        ; preds = %cmp.and12
  %219 = load %fmt.Info*, %fmt.Info** %4, align 8
  %220 = getelementptr inbounds %fmt.Info, %fmt.Info* %219, i32 0, i32 8
  %221 = load i64, i64* %220, align 8
  %222 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %223 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %224 = load i64, i64* %223, align 8
  %225 = icmp sgt i64 %221, %224
  %226 = zext i1 %225 to i8
  %227 = trunc i8 %226 to i1
  br i1 %227, label %if.then14, label %if.else15

if.then14:                                        ; preds = %cmp.and13
  %228 = load %fmt.Info*, %fmt.Info** %4, align 8
  %229 = getelementptr inbounds %fmt.Info, %fmt.Info* %228, i32 0, i32 16
  %230 = load %io.Writer, %io.Writer* %229, align 8
  %231 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %232 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %233 = load i8*, i8** %232, align 8
  %234 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %235 = load i64, i64* %234, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %28, align 8
  call void @runtime.bounds_check_error(%..string* %28, i32 880, i32 32, i64 0, i64 %235)
  %236 = getelementptr i8, i8* %233, i64 0
  %237 = load i8, i8* %236, align 1
  %238 = load %fmt.Info*, %fmt.Info** %4, align 8
  %239 = getelementptr inbounds %fmt.Info, %fmt.Info* %238, i32 0, i32 23
  %240 = bitcast %runtime.Context* %67 to i8*
  %241 = call i32 @io.write_byte_to_writer(%io.Writer* %229, i8 %237, i64* %239, i8* %240)
  %242 = load %fmt.Info*, %fmt.Info** %4, align 8
  %243 = load %fmt.Info*, %fmt.Info** %4, align 8
  %244 = getelementptr inbounds %fmt.Info, %fmt.Info* %243, i32 0, i32 8
  %245 = load i64, i64* %244, align 8
  %246 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %247 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %248 = load i64, i64* %247, align 8
  %249 = sub i64 %245, %248
  %250 = bitcast %runtime.Context* %67 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %242, i64 %249, i8* %250)
  %251 = load %fmt.Info*, %fmt.Info** %4, align 8
  %252 = getelementptr inbounds %fmt.Info, %fmt.Info* %251, i32 0, i32 16
  %253 = load %io.Writer, %io.Writer* %252, align 8
  %254 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %255 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %256 = load i64, i64* %255, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %29, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %29, i32 882, i32 40, i64 1, i64 %256, i64 %256)
  %257 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %258 = load i8*, i8** %257, align 8
  %259 = getelementptr i8, i8* %258, i64 1
  %260 = sub i64 %256, 1
  %261 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 0
  store i8* %259, i8** %261, align 8
  %262 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %30, i32 0, i32 1
  store i64 %260, i64* %262, align 8
  %263 = load { i8*, i64 }, { i8*, i64 }* %30, align 8
  %264 = bitcast { i8*, i64 }* %30 to %..string*
  %265 = load %..string, %..string* %264, align 8
  %266 = load %fmt.Info*, %fmt.Info** %4, align 8
  %267 = getelementptr inbounds %fmt.Info, %fmt.Info* %266, i32 0, i32 23
  %268 = bitcast { i64, i32 }* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %268, i8 0, i64 16, i1 false)
  %269 = bitcast %runtime.Context* %67 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %31, %io.Writer* %252, %..string* %264, i64* %267, i8* %269)
  %270 = load { i64, i32 }, { i64, i32 }* %31, align 8
  br label %if.done16

if.else15:                                        ; preds = %cmp.and13, %cmp.and12, %if.then11
  %271 = load %fmt.Info*, %fmt.Info** %4, align 8
  %272 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %273 = bitcast { i8*, i64 }* %14 to %..string*
  %274 = load %..string, %..string* %273, align 8
  %275 = bitcast %runtime.Context* %67 to i8*
  call void @fmt._pad(%fmt.Info* %271, %..string* %273, i8* %275)
  br label %if.done16

if.done16:                                        ; preds = %if.else15, %if.then14
  br label %if.done18

if.else17:                                        ; preds = %cmp.or10
  %276 = load %fmt.Info*, %fmt.Info** %4, align 8
  %277 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %278 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %279 = load i64, i64* %278, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %32, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %32, i32 887, i32 21, i64 1, i64 %279, i64 %279)
  %280 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %281 = load i8*, i8** %280, align 8
  %282 = getelementptr i8, i8* %281, i64 1
  %283 = sub i64 %279, 1
  %284 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 0
  store i8* %282, i8** %284, align 8
  %285 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %33, i32 0, i32 1
  store i64 %283, i64* %285, align 8
  %286 = load { i8*, i64 }, { i8*, i64 }* %33, align 8
  %287 = bitcast { i8*, i64 }* %33 to %..string*
  %288 = load %..string, %..string* %287, align 8
  %289 = bitcast %runtime.Context* %67 to i8*
  call void @fmt._pad(%fmt.Info* %276, %..string* %287, i8* %289)
  br label %if.done18

if.done18:                                        ; preds = %if.else17, %if.done16
  br label %switch.done51

switch.case.body19:                               ; preds = %entry, %entry
  store i64 3, i64* %34, align 8
  %290 = load %fmt.Info*, %fmt.Info** %4, align 8
  %291 = getelementptr inbounds %fmt.Info, %fmt.Info* %290, i32 0, i32 6
  %292 = load i8, i8* %291, align 1
  %293 = trunc i8 %292 to i1
  br i1 %293, label %if.then20, label %if.done21

if.then20:                                        ; preds = %switch.case.body19
  %294 = load %fmt.Info*, %fmt.Info** %4, align 8
  %295 = getelementptr inbounds %fmt.Info, %fmt.Info* %294, i32 0, i32 9
  %296 = load i64, i64* %295, align 8
  store i64 %296, i64* %34, align 8
  br label %if.done21

if.done21:                                        ; preds = %if.then20, %switch.case.body19
  %297 = bitcast [386 x i8]* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %297, i8 0, i64 386, i1 false)
  %298 = load [386 x i8], [386 x i8]* %35, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %37, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %37, i32 897, i32 34, i64 1, i64 386, i64 386)
  %299 = getelementptr [386 x i8], [386 x i8]* %35, i64 0, i64 0
  %300 = getelementptr i8, i8* %299, i64 1
  %301 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 0
  store i8* %300, i8** %301, align 8
  %302 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %38, i32 0, i32 1
  store i64 385, i64* %302, align 8
  %303 = load { i8*, i64 }, { i8*, i64 }* %38, align 8
  %304 = load double, double* %5, align 8
  %305 = load i64, i64* %34, align 8
  %306 = load i64, i64* %6, align 8
  %307 = bitcast %..string* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* %307, i8 0, i64 16, i1 false)
  %308 = bitcast %runtime.Context* %67 to i8*
  call void @strconv.append_float(%..string* sret(%..string*) %39, { i8*, i64 }* %38, double %304, i8 101, i64 %305, i64 %306, i8* %308)
  %309 = load %..string, %..string* %39, align 8
  store %..string %309, %..string* %36, align 8
  %310 = load %..string, %..string* %36, align 8
  %311 = getelementptr inbounds %..string, %..string* %36, i32 0, i32 1
  %312 = load i64, i64* %311, align 8
  %313 = add i64 %312, 1
  %314 = load [386 x i8], [386 x i8]* %35, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %41, align 8
  call void @runtime.slice_expr_error_hi(%..string* %41, i32 898, i32 11, i64 %313, i64 386)
  %315 = getelementptr [386 x i8], [386 x i8]* %35, i64 0, i64 0
  %316 = getelementptr i8, i8* %315, i64 0
  %317 = sub i64 %313, 0
  %318 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 0
  store i8* %316, i8** %318, align 8
  %319 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %42, i32 0, i32 1
  store i64 %317, i64* %319, align 8
  %320 = load { i8*, i64 }, { i8*, i64 }* %42, align 8
  store { i8*, i64 } %320, { i8*, i64 }* %40, align 8
  %321 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %322 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %323 = load i8*, i8** %322, align 8
  %324 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %325 = load i64, i64* %324, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %43, align 8
  call void @runtime.bounds_check_error(%..string* %43, i32 899, i32 8, i64 1, i64 %325)
  %326 = getelementptr i8, i8* %323, i64 1
  %327 = load i8, i8* %326, align 1
  %328 = icmp eq i8 %327, 43
  %329 = zext i1 %328 to i8
  %330 = trunc i8 %329 to i1
  br i1 %330, label %if.then23, label %cmp.or22

cmp.or22:                                         ; preds = %if.done21
  %331 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %332 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %333 = load i8*, i8** %332, align 8
  %334 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %335 = load i64, i64* %334, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %44, align 8
  call void @runtime.bounds_check_error(%..string* %44, i32 899, i32 23, i64 1, i64 %335)
  %336 = getelementptr i8, i8* %333, i64 1
  %337 = load i8, i8* %336, align 1
  %338 = icmp eq i8 %337, 45
  %339 = zext i1 %338 to i8
  %340 = trunc i8 %339 to i1
  br i1 %340, label %if.then23, label %if.else24

if.then23:                                        ; preds = %cmp.or22, %if.done21
  %341 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %342 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %343 = load i64, i64* %342, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %45, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %45, i32 900, i32 9, i64 1, i64 %343, i64 %343)
  %344 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %345 = load i8*, i8** %344, align 8
  %346 = getelementptr i8, i8* %345, i64 1
  %347 = sub i64 %343, 1
  %348 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 0
  store i8* %346, i8** %348, align 8
  %349 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %46, i32 0, i32 1
  store i64 %347, i64* %349, align 8
  %350 = load { i8*, i64 }, { i8*, i64 }* %46, align 8
  store { i8*, i64 } %350, { i8*, i64 }* %40, align 8
  br label %if.done25

if.else24:                                        ; preds = %cmp.or22
  %351 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %352 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %353 = load i8*, i8** %352, align 8
  %354 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %355 = load i64, i64* %354, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %47, align 8
  call void @runtime.bounds_check_error(%..string* %47, i32 902, i32 6, i64 0, i64 %355)
  %356 = getelementptr i8, i8* %353, i64 0
  store i8 43, i8* %356, align 1
  br label %if.done25

if.done25:                                        ; preds = %if.else24, %if.then23
  %357 = load %fmt.Info*, %fmt.Info** %4, align 8
  %358 = getelementptr inbounds %fmt.Info, %fmt.Info* %357, i32 0, i32 2
  %359 = load i8, i8* %358, align 1
  %360 = trunc i8 %359 to i1
  br i1 %360, label %cmp.and26, label %if.done29

cmp.and26:                                        ; preds = %if.done25
  %361 = load %fmt.Info*, %fmt.Info** %4, align 8
  %362 = getelementptr inbounds %fmt.Info, %fmt.Info* %361, i32 0, i32 1
  %363 = load i8, i8* %362, align 1
  %364 = trunc i8 %363 to i1
  br i1 %364, label %if.done29, label %cmp.and27

cmp.and27:                                        ; preds = %cmp.and26
  %365 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %366 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %367 = load i8*, i8** %366, align 8
  %368 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %369 = load i64, i64* %368, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %48, align 8
  call void @runtime.bounds_check_error(%..string* %48, i32 905, i32 32, i64 0, i64 %369)
  %370 = getelementptr i8, i8* %367, i64 0
  %371 = load i8, i8* %370, align 1
  %372 = icmp eq i8 %371, 43
  %373 = zext i1 %372 to i8
  %374 = trunc i8 %373 to i1
  br i1 %374, label %if.then28, label %if.done29

if.then28:                                        ; preds = %cmp.and27
  %375 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %376 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %377 = load i8*, i8** %376, align 8
  %378 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %379 = load i64, i64* %378, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %49, align 8
  call void @runtime.bounds_check_error(%..string* %49, i32 906, i32 6, i64 0, i64 %379)
  %380 = getelementptr i8, i8* %377, i64 0
  store i8 32, i8* %380, align 1
  br label %if.done29

if.done29:                                        ; preds = %if.then28, %cmp.and27, %cmp.and26, %if.done25
  %381 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %382 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %383 = load i64, i64* %382, align 8
  %384 = icmp sgt i64 %383, 1
  %385 = zext i1 %384 to i8
  %386 = trunc i8 %385 to i1
  br i1 %386, label %cmp.and30, label %if.done33

cmp.and30:                                        ; preds = %if.done29
  %387 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %388 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %389 = load i8*, i8** %388, align 8
  %390 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %391 = load i64, i64* %390, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %50, align 8
  call void @runtime.bounds_check_error(%..string* %50, i32 909, i32 23, i64 1, i64 %391)
  %392 = getelementptr i8, i8* %389, i64 1
  %393 = load i8, i8* %392, align 1
  %394 = icmp eq i8 %393, 78
  %395 = zext i1 %394 to i8
  %396 = trunc i8 %395 to i1
  br i1 %396, label %if.then32, label %cmp.or31

cmp.or31:                                         ; preds = %cmp.and30
  %397 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %398 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %399 = load i8*, i8** %398, align 8
  %400 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %401 = load i64, i64* %400, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %51, align 8
  call void @runtime.bounds_check_error(%..string* %51, i32 909, i32 38, i64 1, i64 %401)
  %402 = getelementptr i8, i8* %399, i64 1
  %403 = load i8, i8* %402, align 1
  %404 = icmp eq i8 %403, 73
  %405 = zext i1 %404 to i8
  %406 = trunc i8 %405 to i1
  br i1 %406, label %if.then32, label %if.done33

if.then32:                                        ; preds = %cmp.or31, %cmp.and30
  %407 = load %fmt.Info*, %fmt.Info** %4, align 8
  %408 = getelementptr inbounds %fmt.Info, %fmt.Info* %407, i32 0, i32 16
  %409 = load %io.Writer, %io.Writer* %408, align 8
  %410 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %411 = bitcast { i8*, i64 }* %40 to %..string*
  %412 = load %..string, %..string* %411, align 8
  %413 = load %fmt.Info*, %fmt.Info** %4, align 8
  %414 = getelementptr inbounds %fmt.Info, %fmt.Info* %413, i32 0, i32 23
  %415 = bitcast { i64, i32 }* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* %415, i8 0, i64 16, i1 false)
  %416 = bitcast %runtime.Context* %67 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %52, %io.Writer* %408, %..string* %411, i64* %414, i8* %416)
  %417 = load { i64, i32 }, { i64, i32 }* %52, align 8
  ret void

if.done33:                                        ; preds = %cmp.or31, %if.done29
  %418 = load %fmt.Info*, %fmt.Info** %4, align 8
  %419 = getelementptr inbounds %fmt.Info, %fmt.Info* %418, i32 0, i32 1
  %420 = load i8, i8* %419, align 1
  %421 = trunc i8 %420 to i1
  br i1 %421, label %if.then35, label %cmp.or34

cmp.or34:                                         ; preds = %if.done33
  %422 = load %..string, %..string* %36, align 8
  %423 = getelementptr inbounds %..string, %..string* %36, i32 0, i32 0
  %424 = load i8*, i8** %423, align 8
  %425 = getelementptr inbounds %..string, %..string* %36, i32 0, i32 1
  %426 = load i64, i64* %425, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %53, align 8
  call void @runtime.bounds_check_error(%..string* %53, i32 914, i32 21, i64 0, i64 %426)
  %427 = getelementptr i8, i8* %424, i64 0
  %428 = load i8, i8* %427, align 1
  %429 = icmp ne i8 %428, 43
  %430 = zext i1 %429 to i8
  %431 = trunc i8 %430 to i1
  br i1 %431, label %if.then35, label %if.else41

if.then35:                                        ; preds = %cmp.or34, %if.done33
  %432 = load %fmt.Info*, %fmt.Info** %4, align 8
  %433 = getelementptr inbounds %fmt.Info, %fmt.Info* %432, i32 0, i32 3
  %434 = load i8, i8* %433, align 1
  %435 = trunc i8 %434 to i1
  br i1 %435, label %cmp.and36, label %if.else39

cmp.and36:                                        ; preds = %if.then35
  %436 = load %fmt.Info*, %fmt.Info** %4, align 8
  %437 = getelementptr inbounds %fmt.Info, %fmt.Info* %436, i32 0, i32 5
  %438 = load i8, i8* %437, align 1
  %439 = trunc i8 %438 to i1
  br i1 %439, label %cmp.and37, label %if.else39

cmp.and37:                                        ; preds = %cmp.and36
  %440 = load %fmt.Info*, %fmt.Info** %4, align 8
  %441 = getelementptr inbounds %fmt.Info, %fmt.Info* %440, i32 0, i32 8
  %442 = load i64, i64* %441, align 8
  %443 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %444 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %445 = load i64, i64* %444, align 8
  %446 = icmp sgt i64 %442, %445
  %447 = zext i1 %446 to i8
  %448 = trunc i8 %447 to i1
  br i1 %448, label %if.then38, label %if.else39

if.then38:                                        ; preds = %cmp.and37
  %449 = load %fmt.Info*, %fmt.Info** %4, align 8
  %450 = getelementptr inbounds %fmt.Info, %fmt.Info* %449, i32 0, i32 16
  %451 = load %io.Writer, %io.Writer* %450, align 8
  %452 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %453 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %454 = load i8*, i8** %453, align 8
  %455 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %456 = load i64, i64* %455, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %54, align 8
  call void @runtime.bounds_check_error(%..string* %54, i32 916, i32 32, i64 0, i64 %456)
  %457 = getelementptr i8, i8* %454, i64 0
  %458 = load i8, i8* %457, align 1
  %459 = load %fmt.Info*, %fmt.Info** %4, align 8
  %460 = getelementptr inbounds %fmt.Info, %fmt.Info* %459, i32 0, i32 23
  %461 = bitcast %runtime.Context* %67 to i8*
  %462 = call i32 @io.write_byte_to_writer(%io.Writer* %450, i8 %458, i64* %460, i8* %461)
  %463 = load %fmt.Info*, %fmt.Info** %4, align 8
  %464 = load %fmt.Info*, %fmt.Info** %4, align 8
  %465 = getelementptr inbounds %fmt.Info, %fmt.Info* %464, i32 0, i32 8
  %466 = load i64, i64* %465, align 8
  %467 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %468 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %469 = load i64, i64* %468, align 8
  %470 = sub i64 %466, %469
  %471 = bitcast %runtime.Context* %67 to i8*
  call void @fmt.fmt_write_padding(%fmt.Info* %463, i64 %470, i8* %471)
  %472 = load %fmt.Info*, %fmt.Info** %4, align 8
  %473 = getelementptr inbounds %fmt.Info, %fmt.Info* %472, i32 0, i32 16
  %474 = load %io.Writer, %io.Writer* %473, align 8
  %475 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %476 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %477 = load i64, i64* %476, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %55, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %55, i32 918, i32 40, i64 1, i64 %477, i64 %477)
  %478 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %479 = load i8*, i8** %478, align 8
  %480 = getelementptr i8, i8* %479, i64 1
  %481 = sub i64 %477, 1
  %482 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 0
  store i8* %480, i8** %482, align 8
  %483 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %56, i32 0, i32 1
  store i64 %481, i64* %483, align 8
  %484 = load { i8*, i64 }, { i8*, i64 }* %56, align 8
  %485 = bitcast { i8*, i64 }* %56 to %..string*
  %486 = load %..string, %..string* %485, align 8
  %487 = load %fmt.Info*, %fmt.Info** %4, align 8
  %488 = getelementptr inbounds %fmt.Info, %fmt.Info* %487, i32 0, i32 23
  %489 = bitcast { i64, i32 }* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %489, i8 0, i64 16, i1 false)
  %490 = bitcast %runtime.Context* %67 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %57, %io.Writer* %473, %..string* %485, i64* %488, i8* %490)
  %491 = load { i64, i32 }, { i64, i32 }* %57, align 8
  br label %if.done40

if.else39:                                        ; preds = %cmp.and37, %cmp.and36, %if.then35
  %492 = load %fmt.Info*, %fmt.Info** %4, align 8
  %493 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %494 = bitcast { i8*, i64 }* %40 to %..string*
  %495 = load %..string, %..string* %494, align 8
  %496 = bitcast %runtime.Context* %67 to i8*
  call void @fmt._pad(%fmt.Info* %492, %..string* %494, i8* %496)
  br label %if.done40

if.done40:                                        ; preds = %if.else39, %if.then38
  br label %if.done42

if.else41:                                        ; preds = %cmp.or34
  %497 = load %fmt.Info*, %fmt.Info** %4, align 8
  %498 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %499 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  %500 = load i64, i64* %499, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %58, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %58, i32 923, i32 21, i64 1, i64 %500, i64 %500)
  %501 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  %502 = load i8*, i8** %501, align 8
  %503 = getelementptr i8, i8* %502, i64 1
  %504 = sub i64 %500, 1
  %505 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %59, i32 0, i32 0
  store i8* %503, i8** %505, align 8
  %506 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %59, i32 0, i32 1
  store i64 %504, i64* %506, align 8
  %507 = load { i8*, i64 }, { i8*, i64 }* %59, align 8
  %508 = bitcast { i8*, i64 }* %59 to %..string*
  %509 = load %..string, %..string* %508, align 8
  %510 = bitcast %runtime.Context* %67 to i8*
  call void @fmt._pad(%fmt.Info* %497, %..string* %508, i8* %510)
  br label %if.done42

if.done42:                                        ; preds = %if.else41, %if.done40
  br label %switch.done51

switch.case.body43:                               ; preds = %entry, %entry
  %511 = bitcast %fmt.Info* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* %511, i8 0, i64 120, i1 false)
  %512 = load %fmt.Info*, %fmt.Info** %4, align 8
  %513 = load %fmt.Info, %fmt.Info* %512, align 8
  %514 = bitcast %fmt.Info* %60 to i8*
  %515 = bitcast %fmt.Info* %512 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %514, i8* align 8 %515, i64 120, i1 false)
  %516 = load %fmt.Info*, %fmt.Info** %4, align 8
  %517 = getelementptr inbounds %fmt.Info, %fmt.Info* %516, i32 0, i32 4
  store i8 0, i8* %517, align 1
  %518 = load %fmt.Info*, %fmt.Info** %4, align 8
  %519 = getelementptr inbounds %fmt.Info, %fmt.Info* %518, i32 0, i32 8
  %520 = load i64, i64* %6, align 8
  store i64 %520, i64* %519, align 8
  %521 = load %fmt.Info*, %fmt.Info** %4, align 8
  %522 = getelementptr inbounds %fmt.Info, %fmt.Info* %521, i32 0, i32 3
  store i8 1, i8* %522, align 1
  %523 = load %fmt.Info*, %fmt.Info** %4, align 8
  %524 = getelementptr inbounds %fmt.Info, %fmt.Info* %523, i32 0, i32 1
  store i8 0, i8* %524, align 1
  store i64 0, i64* %61, align 8
  %525 = load i64, i64* %6, align 8
  switch i64 %525, label %switch.default.body [
    i64 16, label %switch.case.body44
    i64 32, label %switch.case.body45
    i64 64, label %switch.case.body46
  ]

switch.case.body44:                               ; preds = %switch.case.body43
  %526 = load double, double* %5, align 8
  %527 = fptrunc double %526 to half
  %528 = bitcast half %527 to i16
  %529 = zext i16 %528 to i64
  store i64 %529, i64* %61, align 8
  br label %switch.done

switch.case.body45:                               ; preds = %switch.case.body43
  %530 = load double, double* %5, align 8
  %531 = fptrunc double %530 to float
  %532 = bitcast float %531 to i32
  %533 = zext i32 %532 to i64
  store i64 %533, i64* %61, align 8
  br label %switch.done

switch.case.body46:                               ; preds = %switch.case.body43
  %534 = load double, double* %5, align 8
  %535 = bitcast double %534 to i64
  store i64 %535, i64* %61, align 8
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.body43
  store %..string { i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"csbs$29c", i64 0, i64 0), i64 20 }, %..string* %62, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 939, i32 9, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$29d", i64 0, i64 0), i64 9 } }, %runtime.Source_Code_Location* %63, align 8
  %536 = bitcast %runtime.Context* %67 to i8*
  call void @runtime.panic(%..string* %62, %runtime.Source_Code_Location* %63, i8* %536)
  unreachable

switch.done:                                      ; preds = %switch.case.body46, %switch.case.body45, %switch.case.body44
  %537 = load %fmt.Info*, %fmt.Info** %4, align 8
  %538 = getelementptr inbounds %fmt.Info, %fmt.Info* %537, i32 0, i32 16
  %539 = load %io.Writer, %io.Writer* %538, align 8
  %540 = load %fmt.Info*, %fmt.Info** %4, align 8
  %541 = getelementptr inbounds %fmt.Info, %fmt.Info* %540, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$29e", i64 0, i64 0), i64 2 }, %..string* %64, align 8
  %542 = bitcast { i64, i32 }* %65 to i8*
  call void @llvm.memset.p0i8.i64(i8* %542, i8 0, i64 16, i1 false)
  %543 = bitcast %runtime.Context* %67 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %65, %io.Writer* %538, %..string* %64, i64* %541, i8* %543)
  %544 = load { i64, i32 }, { i64, i32 }* %65, align 8
  %545 = load %fmt.Info*, %fmt.Info** %4, align 8
  %546 = load i64, i64* %61, align 8
  %547 = load i64, i64* %6, align 8
  %548 = load i32, i32* %7, align 4
  %549 = icmp eq i32 %548, 104
  %550 = zext i1 %549 to i8
  %551 = trunc i8 %550 to i1
  br i1 %551, label %if.then47, label %if.else48

if.then47:                                        ; preds = %switch.done
  %552 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  br label %if.done49

if.else48:                                        ; preds = %switch.done
  %553 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  br label %if.done49

if.done49:                                        ; preds = %if.else48, %if.then47
  %554 = phi %..string [ %552, %if.then47 ], [ %553, %if.else48 ]
  store %..string %554, %..string* %66, align 8
  %555 = bitcast %runtime.Context* %67 to i8*
  call void @fmt._fmt_int(%fmt.Info* %545, i64 %546, i64 16, i1 false, i64 %547, %..string* %66, i8* %555)
  br label %defer

defer:                                            ; preds = %if.done49
  %556 = load %fmt.Info*, %fmt.Info** %4, align 8
  %557 = load %fmt.Info, %fmt.Info* %60, align 8
  %558 = bitcast %fmt.Info* %556 to i8*
  %559 = bitcast %fmt.Info* %60 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %558, i8* align 8 %559, i64 120, i1 false)
  br label %switch.done51

switch.default.body50:                            ; preds = %entry
  %560 = load %fmt.Info*, %fmt.Info** %4, align 8
  %561 = load i32, i32* %7, align 4
  %562 = bitcast %runtime.Context* %67 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %560, i32 %561, i8* %562)
  br label %switch.done51

switch.done51:                                    ; preds = %switch.default.body50, %defer, %if.done42, %if.done18
  ret void
}

define internal void @fmt.fmt_string(%fmt.Info* %0, %..string* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %..string, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca { i64, i8 }, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i64, i32 }, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca { i64, i32 }, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { i64, i32 }, align 8
  %19 = alloca { i64, i32 }, align 8
  %20 = alloca { i64, i32 }, align 8
  %21 = alloca i8, align 1
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca %..string, align 8
  %26 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %2, i32* %4, align 4
  %27 = bitcast i8* %__.context_ptr to %runtime.Context*
  %28 = load %..string, %..string* %1, align 8
  %29 = load i32, i32* %4, align 4
  store %..string %28, %..string* %5, align 8
  store i32 %29, i32* %6, align 4
  br label %if.init

if.init:                                          ; preds = %entry
  %30 = load %fmt.Info*, %fmt.Info** %3, align 8
  %31 = getelementptr inbounds %fmt.Info, %fmt.Info* %30, i32 0, i32 20
  %32 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %31, align 8
  %33 = bitcast { i64, i8 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %33, i8 0, i64 16, i1 false)
  %34 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %9, i32 0, i32 0
  %35 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %9, i32 0, i32 1
  %36 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %31, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 1
  br i1 %38, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.init
  %39 = bitcast %"runtime.Maybe(int)-16164"* %31 to i64*
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %34, align 8
  store i8 1, i8* %35, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.init
  %41 = load { i64, i8 }, { i64, i8 }* %9, align 8
  %42 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %9, i32 0, i32 0
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %9, i32 0, i32 1
  %45 = load i8, i8* %44, align 1
  store i64 %43, i64* %7, align 8
  store i8 %45, i8* %8, align 1
  %46 = load i8, i8* %8, align 1
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then, label %if.done

if.then:                                          ; preds = %union_cast.end
  %48 = load %..string, %..string* %5, align 8
  %49 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = load i64, i64* %7, align 8
  %52 = icmp sgt i64 %51, 0
  %53 = select i1 %52, i64 %51, i64 0
  %54 = icmp slt i64 %53, %50
  %55 = select i1 %54, i64 %53, i64 %50
  %56 = load %..string, %..string* %5, align 8
  %57 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %58 = load i64, i64* %57, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %10, align 8
  call void @runtime.slice_expr_error_hi(%..string* %10, i32 955, i32 8, i64 %55, i64 %58)
  %59 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr i8, i8* %60, i64 0
  %62 = sub i64 %55, 0
  %63 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 0
  store i8* %61, i8** %63, align 8
  %64 = getelementptr inbounds %..string, %..string* %11, i32 0, i32 1
  store i64 %62, i64* %64, align 8
  %65 = load %..string, %..string* %11, align 8
  store %..string %65, %..string* %5, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %union_cast.end
  %66 = load %fmt.Info*, %fmt.Info** %3, align 8
  %67 = getelementptr inbounds %fmt.Info, %fmt.Info* %66, i32 0, i32 14
  %68 = load i8, i8* %67, align 1
  %69 = trunc i8 %68 to i1
  br i1 %69, label %if.done3, label %cmp.and

cmp.and:                                          ; preds = %if.done
  %70 = load %fmt.Info*, %fmt.Info** %3, align 8
  %71 = getelementptr inbounds %fmt.Info, %fmt.Info* %70, i32 0, i32 19
  %72 = load i64, i64* %71, align 8
  %73 = icmp sgt i64 %72, 0
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %cmp.and1, label %if.done3

cmp.and1:                                         ; preds = %cmp.and
  %76 = load i32, i32* %6, align 4
  %77 = icmp eq i32 %76, 118
  %78 = zext i1 %77 to i8
  %79 = trunc i8 %78 to i1
  br i1 %79, label %if.then2, label %if.done3

if.then2:                                         ; preds = %cmp.and1
  store i32 113, i32* %6, align 4
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %cmp.and1, %cmp.and, %if.done
  %80 = load i32, i32* %6, align 4
  switch i32 %80, label %switch.default.body [
    i32 115, label %switch.case.body
    i32 118, label %switch.case.body
    i32 113, label %switch.case.body13
    i32 120, label %switch.case.body14
    i32 88, label %switch.case.body14
  ]

switch.case.body:                                 ; preds = %if.done3, %if.done3
  %81 = load %fmt.Info*, %fmt.Info** %3, align 8
  %82 = getelementptr inbounds %fmt.Info, %fmt.Info* %81, i32 0, i32 5
  %83 = load i8, i8* %82, align 1
  %84 = trunc i8 %83 to i1
  br i1 %84, label %if.then4, label %if.else11

if.then4:                                         ; preds = %switch.case.body
  %85 = load %fmt.Info*, %fmt.Info** %3, align 8
  %86 = getelementptr inbounds %fmt.Info, %fmt.Info* %85, i32 0, i32 8
  %87 = load i64, i64* %86, align 8
  %88 = load %..string, %..string* %5, align 8
  %89 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp sgt i64 %87, %90
  %92 = zext i1 %91 to i8
  %93 = trunc i8 %92 to i1
  br i1 %93, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then4
  %94 = load %fmt.Info*, %fmt.Info** %3, align 8
  %95 = getelementptr inbounds %fmt.Info, %fmt.Info* %94, i32 0, i32 0
  %96 = load i8, i8* %95, align 1
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then6, label %if.done7

if.then6:                                         ; preds = %if.then5
  %98 = load %fmt.Info*, %fmt.Info** %3, align 8
  %99 = getelementptr inbounds %fmt.Info, %fmt.Info* %98, i32 0, i32 16
  %100 = load %io.Writer, %io.Writer* %99, align 8
  %101 = load %..string, %..string* %5, align 8
  %102 = load %fmt.Info*, %fmt.Info** %3, align 8
  %103 = getelementptr inbounds %fmt.Info, %fmt.Info* %102, i32 0, i32 23
  %104 = bitcast { i64, i32 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %104, i8 0, i64 16, i1 false)
  %105 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %12, %io.Writer* %99, %..string* %5, i64* %103, i8* %105)
  %106 = load { i64, i32 }, { i64, i32 }* %12, align 8
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %if.then5
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.done7
  %107 = load %fmt.Info*, %fmt.Info** %3, align 8
  %108 = getelementptr inbounds %fmt.Info, %fmt.Info* %107, i32 0, i32 8
  %109 = load i64, i64* %108, align 8
  %110 = load %..string, %..string* %5, align 8
  %111 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = sub i64 %109, %112
  %114 = load i64, i64* %13, align 8
  %115 = icmp slt i64 %114, %113
  br i1 %115, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %116 = load i64, i64* %13, align 8
  %117 = load i64, i64* %14, align 8
  %118 = load %fmt.Info*, %fmt.Info** %3, align 8
  %119 = getelementptr inbounds %fmt.Info, %fmt.Info* %118, i32 0, i32 16
  %120 = load %io.Writer, %io.Writer* %119, align 8
  %121 = load %fmt.Info*, %fmt.Info** %3, align 8
  %122 = getelementptr inbounds %fmt.Info, %fmt.Info* %121, i32 0, i32 23
  %123 = bitcast %runtime.Context* %27 to i8*
  %124 = call i32 @io.write_byte_to_writer(%io.Writer* %119, i8 32, i64* %122, i8* %123)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %125 = load i64, i64* %13, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %13, align 8
  %127 = load i64, i64* %14, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %14, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %129 = load %fmt.Info*, %fmt.Info** %3, align 8
  %130 = getelementptr inbounds %fmt.Info, %fmt.Info* %129, i32 0, i32 0
  %131 = load i8, i8* %130, align 1
  %132 = trunc i8 %131 to i1
  br i1 %132, label %if.done9, label %if.then8

if.then8:                                         ; preds = %for.interval.done
  %133 = load %fmt.Info*, %fmt.Info** %3, align 8
  %134 = getelementptr inbounds %fmt.Info, %fmt.Info* %133, i32 0, i32 16
  %135 = load %io.Writer, %io.Writer* %134, align 8
  %136 = load %..string, %..string* %5, align 8
  %137 = load %fmt.Info*, %fmt.Info** %3, align 8
  %138 = getelementptr inbounds %fmt.Info, %fmt.Info* %137, i32 0, i32 23
  %139 = bitcast { i64, i32 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %139, i8 0, i64 16, i1 false)
  %140 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %15, %io.Writer* %134, %..string* %5, i64* %138, i8* %140)
  %141 = load { i64, i32 }, { i64, i32 }* %15, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %for.interval.done
  br label %if.done10

if.else:                                          ; preds = %if.then4
  %142 = load %fmt.Info*, %fmt.Info** %3, align 8
  %143 = getelementptr inbounds %fmt.Info, %fmt.Info* %142, i32 0, i32 16
  %144 = load %io.Writer, %io.Writer* %143, align 8
  %145 = load %fmt.Info*, %fmt.Info** %3, align 8
  %146 = getelementptr inbounds %fmt.Info, %fmt.Info* %145, i32 0, i32 8
  %147 = load i64, i64* %146, align 8
  %148 = load %..string, %..string* %5, align 8
  %149 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %150 = load i64, i64* %149, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %16, align 8
  call void @runtime.slice_expr_error_hi(%..string* %16, i32 978, i32 33, i64 %147, i64 %150)
  %151 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 0
  %152 = load i8*, i8** %151, align 8
  %153 = getelementptr i8, i8* %152, i64 0
  %154 = sub i64 %147, 0
  %155 = getelementptr inbounds %..string, %..string* %17, i32 0, i32 0
  store i8* %153, i8** %155, align 8
  %156 = getelementptr inbounds %..string, %..string* %17, i32 0, i32 1
  store i64 %154, i64* %156, align 8
  %157 = load %..string, %..string* %17, align 8
  %158 = load %fmt.Info*, %fmt.Info** %3, align 8
  %159 = getelementptr inbounds %fmt.Info, %fmt.Info* %158, i32 0, i32 23
  %160 = bitcast { i64, i32 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %160, i8 0, i64 16, i1 false)
  %161 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %18, %io.Writer* %143, %..string* %17, i64* %159, i8* %161)
  %162 = load { i64, i32 }, { i64, i32 }* %18, align 8
  br label %if.done10

if.done10:                                        ; preds = %if.else, %if.done9
  br label %if.done12

if.else11:                                        ; preds = %switch.case.body
  %163 = load %fmt.Info*, %fmt.Info** %3, align 8
  %164 = getelementptr inbounds %fmt.Info, %fmt.Info* %163, i32 0, i32 16
  %165 = load %io.Writer, %io.Writer* %164, align 8
  %166 = load %..string, %..string* %5, align 8
  %167 = load %fmt.Info*, %fmt.Info** %3, align 8
  %168 = getelementptr inbounds %fmt.Info, %fmt.Info* %167, i32 0, i32 23
  %169 = bitcast { i64, i32 }* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %169, i8 0, i64 16, i1 false)
  %170 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %19, %io.Writer* %164, %..string* %5, i64* %168, i8* %170)
  %171 = load { i64, i32 }, { i64, i32 }* %19, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.else11, %if.done10
  br label %switch.done

switch.case.body13:                               ; preds = %if.done3
  %172 = load %fmt.Info*, %fmt.Info** %3, align 8
  %173 = getelementptr inbounds %fmt.Info, %fmt.Info* %172, i32 0, i32 16
  %174 = load %io.Writer, %io.Writer* %173, align 8
  %175 = load %..string, %..string* %5, align 8
  %176 = load %fmt.Info*, %fmt.Info** %3, align 8
  %177 = getelementptr inbounds %fmt.Info, %fmt.Info* %176, i32 0, i32 23
  %178 = bitcast { i64, i32 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %178, i8 0, i64 16, i1 false)
  %179 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_quoted_string({ i64, i32 }* sret({ i64, i32 }*) %20, %io.Writer* %173, %..string* %5, i8 34, i64* %177, i8* %179)
  %180 = load { i64, i32 }, { i64, i32 }* %20, align 8
  br label %switch.done

switch.case.body14:                               ; preds = %if.done3, %if.done3
  %181 = load %fmt.Info*, %fmt.Info** %3, align 8
  %182 = getelementptr inbounds %fmt.Info, %fmt.Info* %181, i32 0, i32 2
  %183 = load i8, i8* %182, align 1
  store i8 %183, i8* %21, align 1
  %184 = load %fmt.Info*, %fmt.Info** %3, align 8
  %185 = getelementptr inbounds %fmt.Info, %fmt.Info* %184, i32 0, i32 2
  store i8 0, i8* %185, align 1
  store i64 0, i64* %22, align 8
  store i64 0, i64* %23, align 8
  br label %for.interval.loop15

for.interval.loop15:                              ; preds = %for.interval.post22, %switch.case.body14
  %186 = load %..string, %..string* %5, align 8
  %187 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = load i64, i64* %22, align 8
  %190 = icmp slt i64 %189, %188
  br i1 %190, label %for.interval.body16, label %for.interval.done23

for.interval.body16:                              ; preds = %for.interval.loop15
  %191 = load i64, i64* %22, align 8
  %192 = load i64, i64* %23, align 8
  store i64 %191, i64* %24, align 8
  %193 = load i64, i64* %24, align 8
  %194 = icmp sgt i64 %193, 0
  %195 = zext i1 %194 to i8
  %196 = trunc i8 %195 to i1
  br i1 %196, label %cmp.and17, label %if.done19

cmp.and17:                                        ; preds = %for.interval.body16
  %197 = load i8, i8* %21, align 1
  %198 = trunc i8 %197 to i1
  br i1 %198, label %if.then18, label %if.done19

if.then18:                                        ; preds = %cmp.and17
  %199 = load %fmt.Info*, %fmt.Info** %3, align 8
  %200 = getelementptr inbounds %fmt.Info, %fmt.Info* %199, i32 0, i32 16
  %201 = load %io.Writer, %io.Writer* %200, align 8
  %202 = load %fmt.Info*, %fmt.Info** %3, align 8
  %203 = getelementptr inbounds %fmt.Info, %fmt.Info* %202, i32 0, i32 23
  %204 = bitcast %runtime.Context* %27 to i8*
  %205 = call i32 @io.write_byte_to_writer(%io.Writer* %200, i8 32, i64* %203, i8* %204)
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %cmp.and17, %for.interval.body16
  %206 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  store %..string %206, %..string* %25, align 8
  %207 = load i32, i32* %6, align 4
  %208 = icmp eq i32 %207, 120
  %209 = zext i1 %208 to i8
  %210 = trunc i8 %209 to i1
  br i1 %210, label %if.then20, label %if.done21

if.then20:                                        ; preds = %if.done19
  %211 = load %..string, %..string* @fmt.__DIGITS_LOWER, align 8
  store %..string %211, %..string* %25, align 8
  br label %if.done21

if.done21:                                        ; preds = %if.then20, %if.done19
  %212 = load %fmt.Info*, %fmt.Info** %3, align 8
  %213 = load %..string, %..string* %5, align 8
  %214 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  %216 = getelementptr inbounds %..string, %..string* %5, i32 0, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = load i64, i64* %24, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %26, align 8
  call void @runtime.bounds_check_error(%..string* %26, i32 1002, i32 23, i64 %218, i64 %217)
  %219 = getelementptr i8, i8* %215, i64 %218
  %220 = load i8, i8* %219, align 1
  %221 = zext i8 %220 to i64
  %222 = load %..string, %..string* %25, align 8
  %223 = bitcast %runtime.Context* %27 to i8*
  call void @fmt._fmt_int(%fmt.Info* %212, i64 %221, i64 16, i1 false, i64 8, %..string* %25, i8* %223)
  br label %for.interval.post22

for.interval.post22:                              ; preds = %if.done21
  %224 = load i64, i64* %22, align 8
  %225 = add i64 %224, 1
  store i64 %225, i64* %22, align 8
  %226 = load i64, i64* %23, align 8
  %227 = add i64 %226, 1
  store i64 %227, i64* %23, align 8
  br label %for.interval.loop15

for.interval.done23:                              ; preds = %for.interval.loop15
  br label %defer

defer:                                            ; preds = %for.interval.done23
  %228 = load %fmt.Info*, %fmt.Info** %3, align 8
  %229 = getelementptr inbounds %fmt.Info, %fmt.Info* %228, i32 0, i32 2
  %230 = load i8, i8* %21, align 1
  store i8 %230, i8* %229, align 1
  br label %switch.done

switch.default.body:                              ; preds = %if.done3
  %231 = load %fmt.Info*, %fmt.Info** %3, align 8
  %232 = load i32, i32* %6, align 4
  %233 = bitcast %runtime.Context* %27 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %231, i32 %232, i8* %233)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %defer, %switch.case.body13, %if.done12
  ret void
}

define internal void @fmt.fmt_cstring(%fmt.Info* %0, i8* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i8* %1, i8** %4, align 8
  store i32 %2, i32* %5, align 4
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load %fmt.Info*, %fmt.Info** %3, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = bitcast %..string* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %10, i8 0, i64 16, i1 false)
  call void @runtime.cstring_to_string(%..string* sret(%..string*) %6, i8* %9)
  %11 = load %..string, %..string* %6, align 8
  %12 = load i32, i32* %5, align 4
  %13 = bitcast %runtime.Context* %7 to i8*
  call void @fmt.fmt_string(%fmt.Info* %8, %..string* %6, i32 %12, i8* %13)
  ret void
}

define internal void @fmt.fmt_pointer(%fmt.Info* %0, i8* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i8* %1, i8** %4, align 8
  store i32 %2, i32* %5, align 4
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load i8*, i8** %4, align 8
  %11 = ptrtoint i8* %10 to i64
  store i64 %11, i64* %6, align 8
  %12 = load i32, i32* %5, align 4
  switch i32 %12, label %switch.default.body [
    i32 112, label %switch.case.body
    i32 118, label %switch.case.body
    i32 98, label %switch.case.body1
    i32 111, label %switch.case.body2
    i32 105, label %switch.case.body3
    i32 100, label %switch.case.body3
    i32 122, label %switch.case.body4
    i32 120, label %switch.case.body5
    i32 88, label %switch.case.body6
  ]

switch.case.body:                                 ; preds = %entry, %entry
  %13 = load %fmt.Info*, %fmt.Info** %3, align 8
  %14 = getelementptr inbounds %fmt.Info, %fmt.Info* %13, i32 0, i32 4
  %15 = load i8, i8* %14, align 1
  %16 = trunc i8 %15 to i1
  br i1 %16, label %if.done, label %cmp.and

cmp.and:                                          ; preds = %switch.case.body
  %17 = load i32, i32* %5, align 4
  %18 = icmp eq i32 %17, 118
  %19 = zext i1 %18 to i8
  %20 = trunc i8 %19 to i1
  br i1 %20, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %21 = load %fmt.Info*, %fmt.Info** %3, align 8
  %22 = getelementptr inbounds %fmt.Info, %fmt.Info* %21, i32 0, i32 16
  %23 = load %io.Writer, %io.Writer* %22, align 8
  %24 = load %fmt.Info*, %fmt.Info** %3, align 8
  %25 = getelementptr inbounds %fmt.Info, %fmt.Info* %24, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$29f", i64 0, i64 0), i64 2 }, %..string* %7, align 8
  %26 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %26, i8 0, i64 16, i1 false)
  %27 = bitcast %runtime.Context* %9 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %8, %io.Writer* %22, %..string* %7, i64* %25, i8* %27)
  %28 = load { i64, i32 }, { i64, i32 }* %8, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %switch.case.body
  %29 = load %fmt.Info*, %fmt.Info** %3, align 8
  %30 = load i64, i64* %6, align 8
  %31 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %32 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %29, i64 %30, i64 16, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %32)
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  %33 = load %fmt.Info*, %fmt.Info** %3, align 8
  %34 = load i64, i64* %6, align 8
  %35 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %36 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %33, i64 %34, i64 2, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %36)
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  %37 = load %fmt.Info*, %fmt.Info** %3, align 8
  %38 = load i64, i64* %6, align 8
  %39 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %40 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %37, i64 %38, i64 8, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %40)
  br label %switch.done

switch.case.body3:                                ; preds = %entry, %entry
  %41 = load %fmt.Info*, %fmt.Info** %3, align 8
  %42 = load i64, i64* %6, align 8
  %43 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %44 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %41, i64 %42, i64 10, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %44)
  br label %switch.done

switch.case.body4:                                ; preds = %entry
  %45 = load %fmt.Info*, %fmt.Info** %3, align 8
  %46 = load i64, i64* %6, align 8
  %47 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %48 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %45, i64 %46, i64 12, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %48)
  br label %switch.done

switch.case.body5:                                ; preds = %entry
  %49 = load %fmt.Info*, %fmt.Info** %3, align 8
  %50 = load i64, i64* %6, align 8
  %51 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %52 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %49, i64 %50, i64 16, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %52)
  br label %switch.done

switch.case.body6:                                ; preds = %entry
  %53 = load %fmt.Info*, %fmt.Info** %3, align 8
  %54 = load i64, i64* %6, align 8
  %55 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %56 = bitcast %runtime.Context* %9 to i8*
  call void @fmt._fmt_int(%fmt.Info* %53, i64 %54, i64 16, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %56)
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %57 = load %fmt.Info*, %fmt.Info** %3, align 8
  %58 = load i32, i32* %5, align 4
  %59 = bitcast %runtime.Context* %9 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %57, i32 %58, i8* %59)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body6, %switch.case.body5, %switch.case.body4, %switch.case.body3, %switch.case.body2, %switch.case.body1, %if.done
  ret void
}

define internal void @fmt.fmt_soa_pointer(%fmt.Info* %0, %runtime.Raw_Soa_Pointer* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %2, i32* %4, align 4
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load %fmt.Info*, %fmt.Info** %3, align 8
  %13 = getelementptr inbounds %fmt.Info, %fmt.Info* %12, i32 0, i32 16
  %14 = load %io.Writer, %io.Writer* %13, align 8
  %15 = load %fmt.Info*, %fmt.Info** %3, align 8
  %16 = getelementptr inbounds %fmt.Info, %fmt.Info* %15, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2a0", i64 0, i64 0), i64 12 }, %..string* %5, align 8
  %17 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %13, %..string* %5, i64* %16, i8* %18)
  %19 = load { i64, i32 }, { i64, i32 }* %6, align 8
  %20 = load %fmt.Info*, %fmt.Info** %3, align 8
  %21 = getelementptr inbounds %runtime.Raw_Soa_Pointer, %runtime.Raw_Soa_Pointer* %1, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = ptrtoint i8* %22 to i64
  %24 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %25 = bitcast %runtime.Context* %11 to i8*
  call void @fmt._fmt_int(%fmt.Info* %20, i64 %23, i64 16, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %25)
  %26 = load %fmt.Info*, %fmt.Info** %3, align 8
  %27 = getelementptr inbounds %fmt.Info, %fmt.Info* %26, i32 0, i32 16
  %28 = load %io.Writer, %io.Writer* %27, align 8
  %29 = load %fmt.Info*, %fmt.Info** %3, align 8
  %30 = getelementptr inbounds %fmt.Info, %fmt.Info* %29, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2a1", i64 0, i64 0), i64 8 }, %..string* %7, align 8
  %31 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %31, i8 0, i64 16, i1 false)
  %32 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %8, %io.Writer* %27, %..string* %7, i64* %30, i8* %32)
  %33 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %34 = load %fmt.Info*, %fmt.Info** %3, align 8
  %35 = getelementptr inbounds %runtime.Raw_Soa_Pointer, %runtime.Raw_Soa_Pointer* %1, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = load %..string, %..string* @fmt.__DIGITS_UPPER, align 8
  %38 = bitcast %runtime.Context* %11 to i8*
  call void @fmt._fmt_int(%fmt.Info* %34, i64 %36, i64 10, i1 false, i64 64, %..string* @fmt.__DIGITS_UPPER, i8* %38)
  %39 = load %fmt.Info*, %fmt.Info** %3, align 8
  %40 = getelementptr inbounds %fmt.Info, %fmt.Info* %39, i32 0, i32 16
  %41 = load %io.Writer, %io.Writer* %40, align 8
  %42 = load %fmt.Info*, %fmt.Info** %3, align 8
  %43 = getelementptr inbounds %fmt.Info, %fmt.Info* %42, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$25b", i64 0, i64 0), i64 1 }, %..string* %9, align 8
  %44 = bitcast { i64, i32 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %44, i8 0, i64 16, i1 false)
  %45 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %10, %io.Writer* %40, %..string* %9, i64* %43, i8* %45)
  %46 = load { i64, i32 }, { i64, i32 }* %10, align 8
  ret void
}

define internal void @fmt.enum_value_to_string({ %..string, i8 }* noalias sret({ %..string, i8 }) %agg.result, %..any* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %..any, align 8
  %2 = alloca %runtime.Type_Info*, align 8
  %3 = alloca { [15 x i64], i64 }, align 8
  %4 = alloca %runtime.Type_Info_Enum, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca { i64, i8 }, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load %..any, %..any* %0, align 8
  store %..any %17, %..any* %1, align 8
  %18 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %19 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = call i64 @runtime.typeid_base(i64 %20)
  store i64 %21, i64* %18, align 8
  %22 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %23)
  store %runtime.Type_Info* %24, %runtime.Type_Info** %2, align 8
  %25 = load %runtime.Type_Info*, %runtime.Type_Info** %2, align 8
  %26 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %25, i32 0, i32 5
  %27 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %26, align 8
  %28 = bitcast { [15 x i64], i64 }* %26 to i8*
  %29 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %26, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  switch i64 %30, label %typeswitch.default.body [
    i64 21, label %typeswitch.body
  ]

typeswitch.default.body:                          ; preds = %entry
  %31 = bitcast { [15 x i64], i64 }* %3 to i8*
  %32 = bitcast { [15 x i64], i64 }* %26 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 1 %32, i64 128, i1 false)
  %33 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %34 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %33, align 8
  store i8 0, i8* %34, align 1
  ret void

typeswitch.body:                                  ; preds = %entry
  %35 = bitcast i8* %28 to %runtime.Type_Info_Enum*
  %36 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %35, align 8
  store %runtime.Type_Info_Enum %36, %runtime.Type_Info_Enum* %4, align 8
  %37 = load %..any, %..any* %0, align 8
  %38 = bitcast { i64, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 16, i1 false)
  %39 = bitcast %runtime.Context* %16 to i8*
  call void @reflect.as_i64({ i64, i8 }* sret({ i64, i8 }*) %7, %..any* %0, i8* %39)
  %40 = load { i64, i8 }, { i64, i8 }* %7, align 8
  %41 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %7, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %7, i32 0, i32 1
  %44 = load i8, i8* %43, align 1
  store i64 %42, i64* %5, align 8
  store i8 %44, i8* %6, align 1
  %45 = load i64, i64* %5, align 8
  store i64 %45, i64* %8, align 8
  %46 = load i8, i8* %6, align 1
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then, label %if.done4

if.then:                                          ; preds = %typeswitch.body
  %48 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i32 0, i32 2
  %49 = load { i64*, i64 }, { i64*, i64 }* %48, align 8
  %50 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %48, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp eq i64 %51, 0
  %53 = zext i1 %52 to i8
  %54 = trunc i8 %53 to i1
  br i1 %54, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  %55 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %56 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %55, align 8
  store i8 1, i8* %56, align 1
  ret void

if.else:                                          ; preds = %if.then
  store i64 0, i64* %9, align 8
  store i64 0, i64* %10, align 8
  %57 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i32 0, i32 2
  %58 = load { i64*, i64 }, { i64*, i64 }* %57, align 8
  %59 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %57, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %11, align 8
  store i64 -1, i64* %12, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %if.else
  %61 = load i64, i64* %12, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %12, align 8
  %63 = load i64, i64* %11, align 8
  %64 = icmp slt i64 %62, %63
  br i1 %64, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %65 = load i64, i64* %12, align 8
  %66 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %57, i32 0, i32 0
  %67 = load i64*, i64** %66, align 8
  %68 = getelementptr i64, i64* %67, i64 %65
  %69 = load i64, i64* %68, align 8
  store i64 %69, i64* %13, align 8
  store i64 %65, i64* %14, align 8
  %70 = load i64, i64* %13, align 8
  %71 = load i64, i64* %8, align 8
  %72 = icmp eq i64 %70, %71
  %73 = zext i1 %72 to i8
  %74 = trunc i8 %73 to i1
  br i1 %74, label %if.then2, label %if.done

if.then2:                                         ; preds = %for.index.body
  %75 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %4, i32 0, i32 1
  %76 = load { %..string*, i64 }, { %..string*, i64 }* %75, align 8
  %77 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %75, i32 0, i32 0
  %78 = load %..string*, %..string** %77, align 8
  %79 = load i64, i64* %14, align 8
  %80 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %75, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %15, align 8
  call void @runtime.bounds_check_error(%..string* %15, i32 1062, i32 22, i64 %79, i64 %81)
  %82 = getelementptr %..string, %..string* %78, i64 %79
  %83 = load %..string, %..string* %82, align 8
  %84 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %85 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %83, %..string* %84, align 8
  store i8 1, i8* %85, align 1
  ret void

if.done:                                          ; preds = %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done3

if.done3:                                         ; preds = %for.index.done
  %86 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %87 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %86, align 8
  store i8 0, i8* %87, align 1
  ret void

if.done4:                                         ; preds = %typeswitch.body
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %if.done4
  %88 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %89 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %88, align 8
  store i8 0, i8* %89, align 1
  ret void
}

define internal void @fmt.fmt_enum(%fmt.Info* %0, %..any* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca %runtime.Type_Info*, align 8
  %8 = alloca { [15 x i64], i64 }, align 8
  %9 = alloca %runtime.Type_Info_Enum, align 8
  %10 = alloca %..any, align 8
  %11 = alloca %runtime.Type_Info*, align 8
  %12 = alloca %..string, align 8
  %13 = alloca i8, align 1
  %14 = alloca { %..string, i8 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { i64, i32 }, align 8
  %17 = alloca %..any, align 8
  %18 = alloca %runtime.Type_Info*, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %2, i32* %4, align 4
  %21 = bitcast i8* %__.context_ptr to %runtime.Context*
  %22 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %27 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = icmp eq i8* %28, null
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  %32 = load %fmt.Info*, %fmt.Info** %3, align 8
  %33 = getelementptr inbounds %fmt.Info, %fmt.Info* %32, i32 0, i32 16
  %34 = load %io.Writer, %io.Writer* %33, align 8
  %35 = load %fmt.Info*, %fmt.Info** %3, align 8
  %36 = getelementptr inbounds %fmt.Info, %fmt.Info* %35, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %5, align 8
  %37 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %37, i8 0, i64 16, i1 false)
  %38 = bitcast %runtime.Context* %21 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %33, %..string* %5, i64* %36, i8* %38)
  %39 = load { i64, i32 }, { i64, i32 }* %6, align 8
  ret void

if.done:                                          ; preds = %cmp.or
  %40 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %41)
  store %runtime.Type_Info* %42, %runtime.Type_Info** %7, align 8
  %43 = load %runtime.Type_Info*, %runtime.Type_Info** %7, align 8
  %44 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %43, i32 0, i32 5
  %45 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %44, align 8
  %46 = bitcast { [15 x i64], i64 }* %44 to i8*
  %47 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %44, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  switch i64 %48, label %typeswitch.default.body [
    i64 21, label %typeswitch.body
  ]

typeswitch.default.body:                          ; preds = %if.done
  %49 = bitcast { [15 x i64], i64 }* %8 to i8*
  %50 = bitcast { [15 x i64], i64 }* %44 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %49, i8* align 1 %50, i64 128, i1 false)
  %51 = load %fmt.Info*, %fmt.Info** %3, align 8
  %52 = load i32, i32* %4, align 4
  %53 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %51, i32 %52, i8* %53)
  br label %typeswitch.done

typeswitch.body:                                  ; preds = %if.done
  %54 = bitcast i8* %46 to %runtime.Type_Info_Enum*
  %55 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %54, align 8
  store %runtime.Type_Info_Enum %55, %runtime.Type_Info_Enum* %9, align 8
  %56 = load i32, i32* %4, align 4
  switch i32 %56, label %switch.default.body [
    i32 105, label %switch.case.body
    i32 100, label %switch.case.body
    i32 102, label %switch.case.body
    i32 115, label %switch.case.body1
    i32 118, label %switch.case.body1
    i32 113, label %switch.case.body1
  ]

switch.case.body:                                 ; preds = %typeswitch.body, %typeswitch.body, %typeswitch.body
  %57 = load %fmt.Info*, %fmt.Info** %3, align 8
  %58 = bitcast %..any* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %58, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %10, align 8
  %59 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = getelementptr inbounds %..any, %..any* %10, i32 0, i32 0
  store i8* %60, i8** %61, align 8
  %62 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 0
  %63 = load %runtime.Type_Info*, %runtime.Type_Info** %62, align 8
  %64 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %63)
  store %runtime.Type_Info* %64, %runtime.Type_Info** %11, align 8
  %65 = load %runtime.Type_Info*, %runtime.Type_Info** %11, align 8
  %66 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %65, i32 0, i32 4
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %..any, %..any* %10, i32 0, i32 1
  store i64 %67, i64* %68, align 8
  %69 = load %..any, %..any* %10, align 8
  %70 = load i32, i32* %4, align 4
  %71 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %57, %..any* %10, i32 %70, i8* %71)
  br label %switch.done

switch.case.body1:                                ; preds = %typeswitch.body, %typeswitch.body, %typeswitch.body
  br label %if.init

if.init:                                          ; preds = %switch.case.body1
  %72 = load %..any, %..any* %1, align 8
  %73 = bitcast { %..string, i8 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %73, i8 0, i64 24, i1 false)
  %74 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.enum_value_to_string({ %..string, i8 }* sret({ %..string, i8 }*) %14, %..any* %1, i8* %74)
  %75 = load { %..string, i8 }, { %..string, i8 }* %14, align 8
  %76 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %14, i32 0, i32 0
  %77 = load %..string, %..string* %76, align 8
  %78 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %14, i32 0, i32 1
  %79 = load i8, i8* %78, align 1
  store %..string %77, %..string* %12, align 8
  store i8 %79, i8* %13, align 1
  %80 = load i8, i8* %13, align 1
  %81 = trunc i8 %80 to i1
  br i1 %81, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.init
  %82 = load %fmt.Info*, %fmt.Info** %3, align 8
  %83 = load %..string, %..string* %12, align 8
  %84 = load i32, i32* %4, align 4
  %85 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.fmt_string(%fmt.Info* %82, %..string* %12, i32 %84, i8* %85)
  br label %if.done3

if.else:                                          ; preds = %if.init
  %86 = load %fmt.Info*, %fmt.Info** %3, align 8
  %87 = getelementptr inbounds %fmt.Info, %fmt.Info* %86, i32 0, i32 16
  %88 = load %io.Writer, %io.Writer* %87, align 8
  %89 = load %fmt.Info*, %fmt.Info** %3, align 8
  %90 = getelementptr inbounds %fmt.Info, %fmt.Info* %89, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2a2", i64 0, i64 0), i64 18 }, %..string* %15, align 8
  %91 = bitcast { i64, i32 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %91, i8 0, i64 16, i1 false)
  %92 = bitcast %runtime.Context* %21 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %16, %io.Writer* %87, %..string* %15, i64* %90, i8* %92)
  %93 = load { i64, i32 }, { i64, i32 }* %16, align 8
  %94 = load %fmt.Info*, %fmt.Info** %3, align 8
  %95 = bitcast %..any* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %95, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %17, align 8
  %96 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  store i8* %97, i8** %98, align 8
  %99 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 0
  %100 = load %runtime.Type_Info*, %runtime.Type_Info** %99, align 8
  %101 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %100)
  store %runtime.Type_Info* %101, %runtime.Type_Info** %18, align 8
  %102 = load %runtime.Type_Info*, %runtime.Type_Info** %18, align 8
  %103 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %102, i32 0, i32 4
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 1
  store i64 %104, i64* %105, align 8
  %106 = load %..any, %..any* %17, align 8
  %107 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %94, %..any* %17, i32 105, i8* %107)
  %108 = load %fmt.Info*, %fmt.Info** %3, align 8
  %109 = getelementptr inbounds %fmt.Info, %fmt.Info* %108, i32 0, i32 16
  %110 = load %io.Writer, %io.Writer* %109, align 8
  %111 = load %fmt.Info*, %fmt.Info** %3, align 8
  %112 = getelementptr inbounds %fmt.Info, %fmt.Info* %111, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$24c", i64 0, i64 0), i64 1 }, %..string* %19, align 8
  %113 = bitcast { i64, i32 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %113, i8 0, i64 16, i1 false)
  %114 = bitcast %runtime.Context* %21 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %20, %io.Writer* %109, %..string* %19, i64* %112, i8* %114)
  %115 = load { i64, i32 }, { i64, i32 }* %20, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.else, %if.then2
  br label %switch.done

switch.default.body:                              ; preds = %typeswitch.body
  %116 = load %fmt.Info*, %fmt.Info** %3, align 8
  %117 = load i32, i32* %4, align 4
  %118 = bitcast %runtime.Context* %21 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %116, i32 %117, i8* %118)
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %if.done3, %switch.case.body
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %switch.done, %typeswitch.default.body
  ret void
}

define internal void @fmt.stored_enum_value_to_string({ %..string, i8 }* noalias sret({ %..string, i8 }) %agg.result, %runtime.Type_Info* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %runtime.Type_Info*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %runtime.Type_Info*, align 8
  %7 = alloca i64, align 8
  %8 = alloca { [15 x i64], i64 }, align 8
  %9 = alloca %runtime.Type_Info_Enum, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %..string, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %runtime.Type_Info* %0, %runtime.Type_Info** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  %24 = bitcast i8* %__.context_ptr to %runtime.Context*
  %25 = load %runtime.Type_Info*, %runtime.Type_Info** %3, align 8
  %26 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %25)
  store %runtime.Type_Info* %26, %runtime.Type_Info** %6, align 8
  %27 = load i64, i64* %4, align 8
  store i64 %27, i64* %7, align 8
  %28 = load i64, i64* %5, align 8
  %29 = load i64, i64* %7, align 8
  %30 = add i64 %29, %28
  store i64 %30, i64* %7, align 8
  %31 = load %runtime.Type_Info*, %runtime.Type_Info** %6, align 8
  %32 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %31, i32 0, i32 5
  %33 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %32, align 8
  %34 = bitcast { [15 x i64], i64 }* %32 to i8*
  %35 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %32, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  switch i64 %36, label %typeswitch.default.body [
    i64 21, label %typeswitch.body
  ]

typeswitch.default.body:                          ; preds = %entry
  %37 = bitcast { [15 x i64], i64 }* %8 to i8*
  %38 = bitcast { [15 x i64], i64 }* %32 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %37, i8* align 1 %38, i64 128, i1 false)
  %39 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %40 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %39, align 8
  store i8 0, i8* %40, align 1
  ret void

typeswitch.body:                                  ; preds = %entry
  %41 = bitcast i8* %34 to %runtime.Type_Info_Enum*
  %42 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %41, align 8
  store %runtime.Type_Info_Enum %42, %runtime.Type_Info_Enum* %9, align 8
  %43 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 0
  %44 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %45 = bitcast %runtime.Context* %24 to i8*
  %46 = call i8 @reflect.is_string(%runtime.Type_Info* %44, i8* %45)
  %47 = trunc i8 %46 to i1
  br i1 %47, label %if.then, label %if.else

if.then:                                          ; preds = %typeswitch.body
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  %48 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 2
  %49 = load { i64*, i64 }, { i64*, i64 }* %48, align 8
  %50 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %48, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %12, align 8
  store i64 -1, i64* %13, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done, %if.then
  %52 = load i64, i64* %13, align 8
  %53 = add i64 %52, 1
  store i64 %53, i64* %13, align 8
  %54 = load i64, i64* %12, align 8
  %55 = icmp slt i64 %53, %54
  br i1 %55, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %56 = load i64, i64* %13, align 8
  %57 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %48, i32 0, i32 0
  %58 = load i64*, i64** %57, align 8
  %59 = getelementptr i64, i64* %58, i64 %56
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %14, align 8
  store i64 %56, i64* %15, align 8
  %61 = load i64, i64* %14, align 8
  %62 = load i64, i64* %7, align 8
  %63 = icmp eq i64 %61, %62
  %64 = zext i1 %63 to i8
  %65 = trunc i8 %64 to i1
  br i1 %65, label %if.then1, label %if.done

if.then1:                                         ; preds = %for.index.body
  %66 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 1
  %67 = load { %..string*, i64 }, { %..string*, i64 }* %66, align 8
  %68 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %66, i32 0, i32 0
  %69 = load %..string*, %..string** %68, align 8
  %70 = load i64, i64* %15, align 8
  %71 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %66, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %16, align 8
  call void @runtime.bounds_check_error(%..string* %16, i32 1124, i32 21, i64 %70, i64 %72)
  %73 = getelementptr %..string, %..string* %69, i64 %70
  %74 = load %..string, %..string* %73, align 8
  %75 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %76 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %74, %..string* %75, align 8
  store i8 1, i8* %76, align 1
  ret void

if.done:                                          ; preds = %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done10

if.else:                                          ; preds = %typeswitch.body
  %77 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 2
  %78 = load { i64*, i64 }, { i64*, i64 }* %77, align 8
  %79 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %77, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = icmp eq i64 %80, 0
  %82 = zext i1 %81 to i8
  %83 = trunc i8 %82 to i1
  br i1 %83, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %84 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %85 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %84, align 8
  store i8 1, i8* %85, align 1
  ret void

if.else3:                                         ; preds = %if.else
  store i64 0, i64* %17, align 8
  store i64 0, i64* %18, align 8
  %86 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 2
  %87 = load { i64*, i64 }, { i64*, i64 }* %86, align 8
  %88 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %86, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  store i64 %89, i64* %19, align 8
  store i64 -1, i64* %20, align 8
  br label %for.index.loop4

for.index.loop4:                                  ; preds = %if.done7, %if.else3
  %90 = load i64, i64* %20, align 8
  %91 = add i64 %90, 1
  store i64 %91, i64* %20, align 8
  %92 = load i64, i64* %19, align 8
  %93 = icmp slt i64 %91, %92
  br i1 %93, label %for.index.body5, label %for.index.done8

for.index.body5:                                  ; preds = %for.index.loop4
  %94 = load i64, i64* %20, align 8
  %95 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %86, i32 0, i32 0
  %96 = load i64*, i64** %95, align 8
  %97 = getelementptr i64, i64* %96, i64 %94
  %98 = load i64, i64* %97, align 8
  store i64 %98, i64* %21, align 8
  store i64 %94, i64* %22, align 8
  %99 = load i64, i64* %21, align 8
  %100 = load i64, i64* %7, align 8
  %101 = icmp eq i64 %99, %100
  %102 = zext i1 %101 to i8
  %103 = trunc i8 %102 to i1
  br i1 %103, label %if.then6, label %if.done7

if.then6:                                         ; preds = %for.index.body5
  %104 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %9, i32 0, i32 1
  %105 = load { %..string*, i64 }, { %..string*, i64 }* %104, align 8
  %106 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %104, i32 0, i32 0
  %107 = load %..string*, %..string** %106, align 8
  %108 = load i64, i64* %22, align 8
  %109 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %104, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %23, align 8
  call void @runtime.bounds_check_error(%..string* %23, i32 1132, i32 21, i64 %108, i64 %110)
  %111 = getelementptr %..string, %..string* %107, i64 %108
  %112 = load %..string, %..string* %111, align 8
  %113 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %114 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %112, %..string* %113, align 8
  store i8 1, i8* %114, align 1
  ret void

if.done7:                                         ; preds = %for.index.body5
  br label %for.index.loop4

for.index.done8:                                  ; preds = %for.index.loop4
  br label %if.done9

if.done9:                                         ; preds = %for.index.done8
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %for.index.done
  %115 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %116 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %115, align 8
  store i8 0, i8* %116, align 1
  ret void

typeswitch.done:                                  ; No predecessors!
  %117 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %118 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %117, align 8
  store i8 0, i8* %118, align 1
  ret void
}

define internal void @fmt.fmt_bit_set(%fmt.Info* %0, %..any* %1, %..string* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca %runtime.Type_Info*, align 8
  %5 = alloca %runtime.Type_Info_Named, align 8
  %6 = alloca %..any, align 8
  %7 = alloca %runtime.Type_Info_Bit_Set, align 8
  %8 = alloca i128, align 8
  %9 = alloca i128, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca i128, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %runtime.Source_Code_Location, align 8
  %18 = alloca %runtime.Type_Info*, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i64, i32 }, align 8
  %21 = alloca { i64, i32 }, align 8
  %22 = alloca %runtime.Type_Info_Enum, align 8
  %23 = alloca i8, align 1
  %24 = alloca { %runtime.Type_Info_Enum, i8 }, align 8
  %25 = alloca i64, align 8
  %26 = alloca i128, align 8
  %27 = alloca i64, align 8
  %28 = alloca i128, align 8
  %29 = alloca %..string, align 8
  %30 = alloca { i64, i32 }, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca %..string, align 8
  %39 = alloca { i64, i32 }, align 8
  %40 = alloca i64, align 8
  %41 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  %42 = bitcast i8* %__.context_ptr to %runtime.Context*
  %43 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %44)
  store %runtime.Type_Info* %45, %runtime.Type_Info** %4, align 8
  %46 = load %runtime.Type_Info*, %runtime.Type_Info** %4, align 8
  %47 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %46, i32 0, i32 5
  %48 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %47, align 8
  %49 = bitcast { [15 x i64], i64 }* %47 to i8*
  %50 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %47, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  switch i64 %51, label %typeswitch.done [
    i64 1, label %typeswitch.body
    i64 23, label %typeswitch.body1
  ]

typeswitch.body:                                  ; preds = %entry
  %52 = bitcast i8* %49 to %runtime.Type_Info_Named*
  %53 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %52, align 8
  %54 = bitcast %runtime.Type_Info_Named* %5 to i8*
  %55 = bitcast %runtime.Type_Info_Named* %52 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %54, i8* align 1 %55, i64 80, i1 false)
  %56 = load %..any, %..any* %1, align 8
  store %..any %56, %..any* %6, align 8
  %57 = getelementptr inbounds %..any, %..any* %6, i32 0, i32 1
  %58 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %5, i32 0, i32 1
  %59 = load %runtime.Type_Info*, %runtime.Type_Info** %58, align 8
  %60 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %59, i32 0, i32 4
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %57, align 8
  %62 = load %fmt.Info*, %fmt.Info** %3, align 8
  %63 = load %..any, %..any* %6, align 8
  %64 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %5, i32 0, i32 0
  %65 = load %..string, %..string* %64, align 8
  %66 = bitcast %runtime.Context* %42 to i8*
  call void @fmt.fmt_bit_set(%fmt.Info* %62, %..any* %6, %..string* %64, i8* %66)
  br label %typeswitch.done

typeswitch.body1:                                 ; preds = %entry
  %67 = bitcast i8* %49 to %runtime.Type_Info_Bit_Set*
  %68 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %67, align 8
  store %runtime.Type_Info_Bit_Set %68, %runtime.Type_Info_Bit_Set* %7, align 8
  store i128 0, i128* %8, align 8
  %69 = load %runtime.Type_Info*, %runtime.Type_Info** %4, align 8
  %70 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %69, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = mul i64 8, %71
  %73 = sext i64 %72 to i128
  store i128 %73, i128* %9, align 8
  %74 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %7, i32 0, i32 1
  %75 = load %runtime.Type_Info*, %runtime.Type_Info** %74, align 8
  %76 = bitcast %runtime.Context* %42 to i8*
  %77 = call i8 @fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0(%runtime.Type_Info* %75, i8* %76)
  store i8 %77, i8* %10, align 1
  %78 = load i128, i128* %9, align 8
  switch i128 %78, label %switch.default.body [
    i128 0, label %switch.case.body
    i128 8, label %switch.case.body2
    i128 16, label %switch.case.body3
    i128 32, label %switch.case.body4
    i128 64, label %switch.case.body7
    i128 128, label %switch.case.body10
  ]

switch.case.body:                                 ; preds = %typeswitch.body1
  store i128 0, i128* %8, align 8
  br label %switch.done

switch.case.body2:                                ; preds = %typeswitch.body1
  %79 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = load i8, i8* %80, align 1
  store i8 %81, i8* %11, align 1
  %82 = load i8, i8* %11, align 1
  %83 = zext i8 %82 to i128
  store i128 %83, i128* %8, align 8
  br label %switch.done

switch.case.body3:                                ; preds = %typeswitch.body1
  %84 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = bitcast i8* %85 to i16*
  %87 = load i16, i16* %86, align 2
  store i16 %87, i16* %12, align 2
  %88 = load i8, i8* %10, align 1
  %89 = trunc i8 %88 to i1
  br i1 %89, label %if.then, label %if.done

if.then:                                          ; preds = %switch.case.body3
  %90 = load i16, i16* %12, align 2
  %91 = call i16 @llvm.bswap.i16(i16 %90)
  store i16 %91, i16* %12, align 2
  br label %if.done

if.done:                                          ; preds = %if.then, %switch.case.body3
  %92 = load i16, i16* %12, align 2
  %93 = zext i16 %92 to i128
  store i128 %93, i128* %8, align 8
  br label %switch.done

switch.case.body4:                                ; preds = %typeswitch.body1
  %94 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8
  %96 = bitcast i8* %95 to i32*
  %97 = load i32, i32* %96, align 4
  store i32 %97, i32* %13, align 4
  %98 = load i8, i8* %10, align 1
  %99 = trunc i8 %98 to i1
  br i1 %99, label %if.then5, label %if.done6

if.then5:                                         ; preds = %switch.case.body4
  %100 = load i32, i32* %13, align 4
  %101 = call i32 @llvm.bswap.i32(i32 %100)
  store i32 %101, i32* %13, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %switch.case.body4
  %102 = load i32, i32* %13, align 4
  %103 = zext i32 %102 to i128
  store i128 %103, i128* %8, align 8
  br label %switch.done

switch.case.body7:                                ; preds = %typeswitch.body1
  %104 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = bitcast i8* %105 to i64*
  %107 = load i64, i64* %106, align 8
  store i64 %107, i64* %14, align 8
  %108 = load i8, i8* %10, align 1
  %109 = trunc i8 %108 to i1
  br i1 %109, label %if.then8, label %if.done9

if.then8:                                         ; preds = %switch.case.body7
  %110 = load i64, i64* %14, align 8
  %111 = call i64 @llvm.bswap.i64(i64 %110)
  store i64 %111, i64* %14, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %switch.case.body7
  %112 = load i64, i64* %14, align 8
  %113 = zext i64 %112 to i128
  store i128 %113, i128* %8, align 8
  br label %switch.done

switch.case.body10:                               ; preds = %typeswitch.body1
  %114 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %115 = load i8*, i8** %114, align 8
  %116 = bitcast i8* %115 to i128*
  %117 = load i128, i128* %116, align 8
  store i128 %117, i128* %15, align 8
  %118 = load i8, i8* %10, align 1
  %119 = trunc i8 %118 to i1
  br i1 %119, label %if.then11, label %if.done12

if.then11:                                        ; preds = %switch.case.body10
  %120 = load i128, i128* %15, align 8
  %121 = call i128 @llvm.bswap.i128(i128 %120)
  store i128 %121, i128* %15, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %switch.case.body10
  %122 = load i128, i128* %15, align 8
  store i128 %122, i128* %8, align 8
  br label %switch.done

switch.default.body:                              ; preds = %typeswitch.body1
  store %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$2a3", i64 0, i64 0), i64 21 }, %..string* %16, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 1195, i32 9, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2a4", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %17, align 8
  %123 = bitcast %runtime.Context* %42 to i8*
  call void @runtime.panic(%..string* %16, %runtime.Source_Code_Location* %17, i8* %123)
  unreachable

switch.done:                                      ; preds = %if.done12, %if.done9, %if.done6, %if.done, %switch.case.body2, %switch.case.body
  %124 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %7, i32 0, i32 0
  %125 = load %runtime.Type_Info*, %runtime.Type_Info** %124, align 8
  %126 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %125)
  store %runtime.Type_Info* %126, %runtime.Type_Info** %18, align 8
  %127 = load %..string, %..string* %2, align 8
  store %..string zeroinitializer, %..string* %19, align 8
  %128 = call i8 @runtime.string_ne(%..string* %2, %..string* %19)
  %129 = trunc i8 %128 to i1
  br i1 %129, label %if.then13, label %if.else

if.then13:                                        ; preds = %switch.done
  %130 = load %fmt.Info*, %fmt.Info** %3, align 8
  %131 = getelementptr inbounds %fmt.Info, %fmt.Info* %130, i32 0, i32 16
  %132 = load %io.Writer, %io.Writer* %131, align 8
  %133 = load %..string, %..string* %2, align 8
  %134 = load %fmt.Info*, %fmt.Info** %3, align 8
  %135 = getelementptr inbounds %fmt.Info, %fmt.Info* %134, i32 0, i32 23
  %136 = bitcast { i64, i32 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %136, i8 0, i64 16, i1 false)
  %137 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %20, %io.Writer* %131, %..string* %2, i64* %135, i8* %137)
  %138 = load { i64, i32 }, { i64, i32 }* %20, align 8
  br label %if.done14

if.else:                                          ; preds = %switch.done
  %139 = load %fmt.Info*, %fmt.Info** %3, align 8
  %140 = getelementptr inbounds %fmt.Info, %fmt.Info* %139, i32 0, i32 16
  %141 = load %io.Writer, %io.Writer* %140, align 8
  %142 = load %runtime.Type_Info*, %runtime.Type_Info** %4, align 8
  %143 = load %fmt.Info*, %fmt.Info** %3, align 8
  %144 = getelementptr inbounds %fmt.Info, %fmt.Info* %143, i32 0, i32 23
  %145 = bitcast { i64, i32 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %145, i8 0, i64 16, i1 false)
  %146 = bitcast %runtime.Context* %42 to i8*
  call void @reflect.write_type_writer({ i64, i32 }* sret({ i64, i32 }*) %21, %io.Writer* %140, %runtime.Type_Info* %142, i64* %144, i8* %146)
  %147 = load { i64, i32 }, { i64, i32 }* %21, align 8
  br label %if.done14

if.done14:                                        ; preds = %if.else, %if.then13
  %148 = load %fmt.Info*, %fmt.Info** %3, align 8
  %149 = getelementptr inbounds %fmt.Info, %fmt.Info* %148, i32 0, i32 16
  %150 = load %io.Writer, %io.Writer* %149, align 8
  %151 = load %fmt.Info*, %fmt.Info** %3, align 8
  %152 = getelementptr inbounds %fmt.Info, %fmt.Info* %151, i32 0, i32 23
  %153 = bitcast %runtime.Context* %42 to i8*
  %154 = call i32 @io.write_byte_to_writer(%io.Writer* %149, i8 123, i64* %152, i8* %153)
  %155 = load %runtime.Type_Info*, %runtime.Type_Info** %18, align 8
  %156 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %155, i32 0, i32 5
  %157 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %156, align 8
  %158 = bitcast { %runtime.Type_Info_Enum, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %158, i8 0, i64 48, i1 false)
  %159 = getelementptr inbounds { %runtime.Type_Info_Enum, i8 }, { %runtime.Type_Info_Enum, i8 }* %24, i32 0, i32 0
  %160 = getelementptr inbounds { %runtime.Type_Info_Enum, i8 }, { %runtime.Type_Info_Enum, i8 }* %24, i32 0, i32 1
  %161 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %156, i32 0, i32 1
  %162 = load i64, i64* %161, align 8
  %163 = icmp eq i64 %162, 21
  br i1 %163, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.done14
  %164 = bitcast { [15 x i64], i64 }* %156 to %runtime.Type_Info_Enum*
  %165 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %164, align 8
  store %runtime.Type_Info_Enum %165, %runtime.Type_Info_Enum* %159, align 8
  store i8 1, i8* %160, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.done14
  %166 = load { %runtime.Type_Info_Enum, i8 }, { %runtime.Type_Info_Enum, i8 }* %24, align 8
  %167 = getelementptr inbounds { %runtime.Type_Info_Enum, i8 }, { %runtime.Type_Info_Enum, i8 }* %24, i32 0, i32 0
  %168 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %167, align 8
  %169 = getelementptr inbounds { %runtime.Type_Info_Enum, i8 }, { %runtime.Type_Info_Enum, i8 }* %24, i32 0, i32 1
  %170 = load i8, i8* %169, align 1
  store %runtime.Type_Info_Enum %168, %runtime.Type_Info_Enum* %22, align 8
  store i8 %170, i8* %23, align 1
  store i64 0, i64* %25, align 8
  store i128 0, i128* %26, align 8
  store i64 0, i64* %27, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %union_cast.end
  %171 = load i128, i128* %9, align 8
  %172 = load i128, i128* %26, align 8
  %173 = icmp ult i128 %172, %171
  br i1 %173, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %174 = load i128, i128* %26, align 8
  %175 = load i64, i64* %27, align 8
  store i128 %174, i128* %28, align 8
  %176 = load i128, i128* %8, align 8
  %177 = load i128, i128* %28, align 8
  %178 = icmp ult i128 %177, 128
  %179 = shl i128 1, %177
  %180 = select i1 %178, i128 %179, i128 0
  %181 = and i128 %176, %180
  %182 = icmp eq i128 %181, 0
  %183 = zext i1 %182 to i8
  %184 = trunc i8 %183 to i1
  br i1 %184, label %if.then15, label %if.done16

if.then15:                                        ; preds = %for.interval.body
  br label %for.interval.post

unreachable:                                      ; No predecessors!
  br label %if.done16

if.done16:                                        ; preds = %unreachable, %for.interval.body
  %185 = load i64, i64* %25, align 8
  %186 = icmp sgt i64 %185, 0
  %187 = zext i1 %186 to i8
  %188 = trunc i8 %187 to i1
  br i1 %188, label %if.then17, label %if.done18

if.then17:                                        ; preds = %if.done16
  %189 = load %fmt.Info*, %fmt.Info** %3, align 8
  %190 = getelementptr inbounds %fmt.Info, %fmt.Info* %189, i32 0, i32 16
  %191 = load %io.Writer, %io.Writer* %190, align 8
  %192 = load %fmt.Info*, %fmt.Info** %3, align 8
  %193 = getelementptr inbounds %fmt.Info, %fmt.Info* %192, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %29, align 8
  %194 = bitcast { i64, i32 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %194, i8 0, i64 16, i1 false)
  %195 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %30, %io.Writer* %190, %..string* %29, i64* %193, i8* %195)
  %196 = load { i64, i32 }, { i64, i32 }* %30, align 8
  br label %if.done18

if.done18:                                        ; preds = %if.then17, %if.done16
  %197 = load i8, i8* %23, align 1
  %198 = trunc i8 %197 to i1
  br i1 %198, label %if.then19, label %if.done23

if.then19:                                        ; preds = %if.done18
  store i64 0, i64* %31, align 8
  store i64 0, i64* %32, align 8
  %199 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %22, i32 0, i32 2
  %200 = load { i64*, i64 }, { i64*, i64 }* %199, align 8
  %201 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %199, i32 0, i32 1
  %202 = load i64, i64* %201, align 8
  store i64 %202, i64* %33, align 8
  store i64 -1, i64* %34, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done22, %if.then19
  %203 = load i64, i64* %34, align 8
  %204 = add i64 %203, 1
  store i64 %204, i64* %34, align 8
  %205 = load i64, i64* %33, align 8
  %206 = icmp slt i64 %204, %205
  br i1 %206, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %207 = load i64, i64* %34, align 8
  %208 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %199, i32 0, i32 0
  %209 = load i64*, i64** %208, align 8
  %210 = getelementptr i64, i64* %209, i64 %207
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %35, align 8
  store i64 %207, i64* %36, align 8
  %212 = load i64, i64* %35, align 8
  store i64 %212, i64* %37, align 8
  %213 = load i64, i64* %37, align 8
  %214 = load i128, i128* %28, align 8
  %215 = trunc i128 %214 to i64
  %216 = icmp eq i64 %213, %215
  %217 = zext i1 %216 to i8
  %218 = trunc i8 %217 to i1
  br i1 %218, label %if.then20, label %if.done22

if.then20:                                        ; preds = %for.index.body
  %219 = load %fmt.Info*, %fmt.Info** %3, align 8
  %220 = getelementptr inbounds %fmt.Info, %fmt.Info* %219, i32 0, i32 16
  %221 = load %io.Writer, %io.Writer* %220, align 8
  %222 = getelementptr inbounds %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %22, i32 0, i32 1
  %223 = load { %..string*, i64 }, { %..string*, i64 }* %222, align 8
  %224 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %222, i32 0, i32 0
  %225 = load %..string*, %..string** %224, align 8
  %226 = load i64, i64* %36, align 8
  %227 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %222, i32 0, i32 1
  %228 = load i64, i64* %227, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %38, align 8
  call void @runtime.bounds_check_error(%..string* %38, i32 1223, i32 42, i64 %226, i64 %228)
  %229 = getelementptr %..string, %..string* %225, i64 %226
  %230 = load %..string, %..string* %229, align 8
  %231 = load %fmt.Info*, %fmt.Info** %3, align 8
  %232 = getelementptr inbounds %fmt.Info, %fmt.Info* %231, i32 0, i32 23
  %233 = bitcast { i64, i32 }* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* %233, i8 0, i64 16, i1 false)
  %234 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %39, %io.Writer* %220, %..string* %229, i64* %232, i8* %234)
  %235 = load { i64, i32 }, { i64, i32 }* %39, align 8
  %236 = load i64, i64* %25, align 8
  %237 = add i64 %236, 1
  store i64 %237, i64* %25, align 8
  br label %for.interval.post

unreachable21:                                    ; No predecessors!
  br label %if.done22

if.done22:                                        ; preds = %unreachable21, %for.index.body
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done23

if.done23:                                        ; preds = %for.index.done, %if.done18
  %238 = load i128, i128* %28, align 8
  %239 = trunc i128 %238 to i64
  %240 = getelementptr inbounds %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %7, i32 0, i32 2
  %241 = load i64, i64* %240, align 8
  %242 = add i64 %239, %241
  store i64 %242, i64* %40, align 8
  %243 = load %fmt.Info*, %fmt.Info** %3, align 8
  %244 = getelementptr inbounds %fmt.Info, %fmt.Info* %243, i32 0, i32 16
  %245 = load %io.Writer, %io.Writer* %244, align 8
  %246 = load i64, i64* %40, align 8
  %247 = load %fmt.Info*, %fmt.Info** %3, align 8
  %248 = getelementptr inbounds %fmt.Info, %fmt.Info* %247, i32 0, i32 23
  %249 = bitcast { i64, i32 }* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %249, i8 0, i64 16, i1 false)
  %250 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_i64({ i64, i32 }* sret({ i64, i32 }*) %41, %io.Writer* %244, i64 %246, i64 10, i64* %248, i8* %250)
  %251 = load { i64, i32 }, { i64, i32 }* %41, align 8
  %252 = load i64, i64* %25, align 8
  %253 = add i64 %252, 1
  store i64 %253, i64* %25, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done23, %if.then20, %if.then15
  %254 = load i128, i128* %26, align 8
  %255 = add i128 %254, 1
  store i128 %255, i128* %26, align 8
  %256 = load i64, i64* %27, align 8
  %257 = add i64 %256, 1
  store i64 %257, i64* %27, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %defer

defer:                                            ; preds = %for.interval.done
  %258 = load %fmt.Info*, %fmt.Info** %3, align 8
  %259 = getelementptr inbounds %fmt.Info, %fmt.Info* %258, i32 0, i32 16
  %260 = load %io.Writer, %io.Writer* %259, align 8
  %261 = load %fmt.Info*, %fmt.Info** %3, align 8
  %262 = getelementptr inbounds %fmt.Info, %fmt.Info* %261, i32 0, i32 23
  %263 = bitcast %runtime.Context* %42 to i8*
  %264 = call i32 @io.write_byte_to_writer(%io.Writer* %259, i8 125, i64* %262, i8* %263)
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %defer, %typeswitch.body, %entry
  ret void
}

define internal void @fmt.fmt_write_indent(%fmt.Info* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %fmt.Info*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %5 = load %fmt.Info*, %fmt.Info** %1, align 8
  %6 = getelementptr inbounds %fmt.Info, %fmt.Info* %5, i32 0, i32 10
  %7 = load i64, i64* %6, align 8
  %8 = load i64, i64* %2, align 8
  %9 = icmp slt i64 %8, %7
  br i1 %9, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %10 = load i64, i64* %2, align 8
  %11 = load i64, i64* %3, align 8
  %12 = load %fmt.Info*, %fmt.Info** %1, align 8
  %13 = getelementptr inbounds %fmt.Info, %fmt.Info* %12, i32 0, i32 16
  %14 = load %io.Writer, %io.Writer* %13, align 8
  %15 = load %fmt.Info*, %fmt.Info** %1, align 8
  %16 = getelementptr inbounds %fmt.Info, %fmt.Info* %15, i32 0, i32 23
  %17 = bitcast %runtime.Context* %4 to i8*
  %18 = call i32 @io.write_byte_to_writer(%io.Writer* %13, i8 9, i64* %16, i8* %17)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %19 = load i64, i64* %2, align 8
  %20 = add i64 %19, 1
  store i64 %20, i64* %2, align 8
  %21 = load i64, i64* %3, align 8
  %22 = add i64 %21, 1
  store i64 %22, i64* %3, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  ret void
}

define internal void @fmt.fmt_write_array(%fmt.Info* %0, i8* %1, i64 %2, i64 %3, i64 %4, i32 %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %fmt.Info*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %..any, align 8
  %18 = alloca %..string, align 8
  %19 = alloca { i64, i32 }, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca %..string, align 8
  %24 = alloca { i64, i32 }, align 8
  %25 = alloca i64, align 8
  %26 = alloca %..any, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  store i32 %5, i32* %11, align 4
  %27 = bitcast i8* %__.context_ptr to %runtime.Context*
  %28 = load %fmt.Info*, %fmt.Info** %6, align 8
  %29 = getelementptr inbounds %fmt.Info, %fmt.Info* %28, i32 0, i32 16
  %30 = load %io.Writer, %io.Writer* %29, align 8
  %31 = load %fmt.Info*, %fmt.Info** %6, align 8
  %32 = getelementptr inbounds %fmt.Info, %fmt.Info* %31, i32 0, i32 23
  %33 = bitcast %runtime.Context* %27 to i8*
  %34 = call i32 @io.write_byte_to_writer(%io.Writer* %29, i8 91, i64* %32, i8* %33)
  %35 = load i64, i64* %8, align 8
  %36 = icmp sle i64 %35, 0
  %37 = zext i1 %36 to i8
  %38 = trunc i8 %37 to i1
  br i1 %38, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  br label %defer

defer:                                            ; preds = %if.then
  %39 = load %fmt.Info*, %fmt.Info** %6, align 8
  %40 = getelementptr inbounds %fmt.Info, %fmt.Info* %39, i32 0, i32 16
  %41 = load %io.Writer, %io.Writer* %40, align 8
  %42 = load %fmt.Info*, %fmt.Info** %6, align 8
  %43 = getelementptr inbounds %fmt.Info, %fmt.Info* %42, i32 0, i32 23
  %44 = bitcast %runtime.Context* %27 to i8*
  %45 = call i32 @io.write_byte_to_writer(%io.Writer* %40, i8 93, i64* %43, i8* %44)
  ret void

if.done:                                          ; preds = %entry
  %46 = load %fmt.Info*, %fmt.Info** %6, align 8
  %47 = getelementptr inbounds %fmt.Info, %fmt.Info* %46, i32 0, i32 19
  %48 = load i64, i64* %47, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %47, align 8
  %50 = load %fmt.Info*, %fmt.Info** %6, align 8
  %51 = getelementptr inbounds %fmt.Info, %fmt.Info* %50, i32 0, i32 4
  %52 = load i8, i8* %51, align 1
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %54 = load %fmt.Info*, %fmt.Info** %6, align 8
  %55 = getelementptr inbounds %fmt.Info, %fmt.Info* %54, i32 0, i32 16
  %56 = load %io.Writer, %io.Writer* %55, align 8
  %57 = load %fmt.Info*, %fmt.Info** %6, align 8
  %58 = getelementptr inbounds %fmt.Info, %fmt.Info* %57, i32 0, i32 23
  %59 = bitcast %runtime.Context* %27 to i8*
  %60 = call i32 @io.write_byte_to_writer(%io.Writer* %55, i8 10, i64* %58, i8* %59)
  %61 = load %fmt.Info*, %fmt.Info** %6, align 8
  %62 = getelementptr inbounds %fmt.Info, %fmt.Info* %61, i32 0, i32 10
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %12, align 8
  %64 = load %fmt.Info*, %fmt.Info** %6, align 8
  %65 = getelementptr inbounds %fmt.Info, %fmt.Info* %64, i32 0, i32 10
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 1
  store i64 %67, i64* %65, align 8
  store i64 0, i64* %13, align 8
  store i64 0, i64* %14, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.then1
  %68 = load i64, i64* %8, align 8
  %69 = load i64, i64* %13, align 8
  %70 = icmp slt i64 %69, %68
  br i1 %70, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %71 = load i64, i64* %13, align 8
  %72 = load i64, i64* %14, align 8
  store i64 %71, i64* %15, align 8
  %73 = load %fmt.Info*, %fmt.Info** %6, align 8
  %74 = bitcast %runtime.Context* %27 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %73, i8* %74)
  %75 = load i8*, i8** %7, align 8
  %76 = ptrtoint i8* %75 to i64
  %77 = load i64, i64* %15, align 8
  %78 = load i64, i64* %9, align 8
  %79 = mul i64 %77, %78
  %80 = add i64 %76, %79
  store i64 %80, i64* %16, align 8
  %81 = load %fmt.Info*, %fmt.Info** %6, align 8
  %82 = bitcast %..any* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %82, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %17, align 8
  %83 = load i64, i64* %16, align 8
  %84 = inttoptr i64 %83 to i8*
  %85 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  store i8* %84, i8** %85, align 8
  %86 = load i64, i64* %10, align 8
  %87 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 1
  store i64 %86, i64* %87, align 8
  %88 = load %..any, %..any* %17, align 8
  %89 = load i32, i32* %11, align 4
  %90 = bitcast %runtime.Context* %27 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %81, %..any* %17, i32 %89, i8* %90)
  %91 = load %fmt.Info*, %fmt.Info** %6, align 8
  %92 = getelementptr inbounds %fmt.Info, %fmt.Info* %91, i32 0, i32 16
  %93 = load %io.Writer, %io.Writer* %92, align 8
  %94 = load %fmt.Info*, %fmt.Info** %6, align 8
  %95 = getelementptr inbounds %fmt.Info, %fmt.Info* %94, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2a5", i64 0, i64 0), i64 2 }, %..string* %18, align 8
  %96 = bitcast { i64, i32 }* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 16, i1 false)
  %97 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %19, %io.Writer* %92, %..string* %18, i64* %95, i8* %97)
  %98 = load { i64, i32 }, { i64, i32 }* %19, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %99 = load i64, i64* %13, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %13, align 8
  %101 = load i64, i64* %14, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %14, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %defer2

defer2:                                           ; preds = %for.interval.done
  %103 = load %fmt.Info*, %fmt.Info** %6, align 8
  %104 = getelementptr inbounds %fmt.Info, %fmt.Info* %103, i32 0, i32 10
  %105 = load i64, i64* %12, align 8
  store i64 %105, i64* %104, align 8
  br label %defer3

defer3:                                           ; preds = %defer2
  %106 = load %fmt.Info*, %fmt.Info** %6, align 8
  %107 = bitcast %runtime.Context* %27 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %106, i8* %107)
  br label %if.done10

if.else:                                          ; preds = %if.done
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %for.interval.loop4

for.interval.loop4:                               ; preds = %for.interval.post8, %if.else
  %108 = load i64, i64* %8, align 8
  %109 = load i64, i64* %20, align 8
  %110 = icmp slt i64 %109, %108
  br i1 %110, label %for.interval.body5, label %for.interval.done9

for.interval.body5:                               ; preds = %for.interval.loop4
  %111 = load i64, i64* %20, align 8
  %112 = load i64, i64* %21, align 8
  store i64 %111, i64* %22, align 8
  %113 = load i64, i64* %22, align 8
  %114 = icmp sgt i64 %113, 0
  %115 = zext i1 %114 to i8
  %116 = trunc i8 %115 to i1
  br i1 %116, label %if.then6, label %if.done7

if.then6:                                         ; preds = %for.interval.body5
  %117 = load %fmt.Info*, %fmt.Info** %6, align 8
  %118 = getelementptr inbounds %fmt.Info, %fmt.Info* %117, i32 0, i32 16
  %119 = load %io.Writer, %io.Writer* %118, align 8
  %120 = load %fmt.Info*, %fmt.Info** %6, align 8
  %121 = getelementptr inbounds %fmt.Info, %fmt.Info* %120, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %23, align 8
  %122 = bitcast { i64, i32 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %122, i8 0, i64 16, i1 false)
  %123 = bitcast %runtime.Context* %27 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %24, %io.Writer* %118, %..string* %23, i64* %121, i8* %123)
  %124 = load { i64, i32 }, { i64, i32 }* %24, align 8
  br label %if.done7

if.done7:                                         ; preds = %if.then6, %for.interval.body5
  %125 = load i8*, i8** %7, align 8
  %126 = ptrtoint i8* %125 to i64
  %127 = load i64, i64* %22, align 8
  %128 = load i64, i64* %9, align 8
  %129 = mul i64 %127, %128
  %130 = add i64 %126, %129
  store i64 %130, i64* %25, align 8
  %131 = load %fmt.Info*, %fmt.Info** %6, align 8
  %132 = bitcast %..any* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %132, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %26, align 8
  %133 = load i64, i64* %25, align 8
  %134 = inttoptr i64 %133 to i8*
  %135 = getelementptr inbounds %..any, %..any* %26, i32 0, i32 0
  store i8* %134, i8** %135, align 8
  %136 = load i64, i64* %10, align 8
  %137 = getelementptr inbounds %..any, %..any* %26, i32 0, i32 1
  store i64 %136, i64* %137, align 8
  %138 = load %..any, %..any* %26, align 8
  %139 = load i32, i32* %11, align 4
  %140 = bitcast %runtime.Context* %27 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %131, %..any* %26, i32 %139, i8* %140)
  br label %for.interval.post8

for.interval.post8:                               ; preds = %if.done7
  %141 = load i64, i64* %20, align 8
  %142 = add i64 %141, 1
  store i64 %142, i64* %20, align 8
  %143 = load i64, i64* %21, align 8
  %144 = add i64 %143, 1
  store i64 %144, i64* %21, align 8
  br label %for.interval.loop4

for.interval.done9:                               ; preds = %for.interval.loop4
  br label %if.done10

if.done10:                                        ; preds = %for.interval.done9, %defer3
  br label %defer11

defer11:                                          ; preds = %if.done10
  %145 = load %fmt.Info*, %fmt.Info** %6, align 8
  %146 = getelementptr inbounds %fmt.Info, %fmt.Info* %145, i32 0, i32 19
  %147 = load i64, i64* %146, align 8
  %148 = sub i64 %147, 1
  store i64 %148, i64* %146, align 8
  br label %defer12

defer12:                                          ; preds = %defer11
  %149 = load %fmt.Info*, %fmt.Info** %6, align 8
  %150 = getelementptr inbounds %fmt.Info, %fmt.Info* %149, i32 0, i32 16
  %151 = load %io.Writer, %io.Writer* %150, align 8
  %152 = load %fmt.Info*, %fmt.Info** %6, align 8
  %153 = getelementptr inbounds %fmt.Info, %fmt.Info* %152, i32 0, i32 23
  %154 = bitcast %runtime.Context* %27 to i8*
  %155 = call i32 @io.write_byte_to_writer(%io.Writer* %150, i8 93, i64* %153, i8* %154)
  ret void
}

define internal i8 @fmt.handle_tag-830(i8* %0, %runtime.Type_Info_Struct* %1, i64 %2, i32* %3, i64* %4, i8* %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8, align 1
  %12 = alloca %..string, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %..string, align 8
  %15 = alloca i8, align 1
  %16 = alloca %..string, align 8
  %17 = alloca { %..string, i8 }, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca %..string, align 8
  %21 = alloca %..string, align 8
  %22 = alloca i32, align 4
  %23 = alloca i64, align 8
  %24 = alloca { i32, i64 }, align 8
  %25 = alloca %..string, align 8
  %26 = alloca %..string, align 8
  %27 = alloca %..string, align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca %..string, align 8
  %31 = alloca %..string, align 8
  %32 = alloca %..string, align 8
  %33 = alloca %..string, align 8
  %34 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store i32* %3, i32** %8, align 8
  store i64* %4, i64** %9, align 8
  store i8* %5, i8** %10, align 8
  store i8 0, i8* %11, align 1
  %35 = bitcast i8* %__.context_ptr to %runtime.Context*
  %36 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1, i32 0, i32 4
  %37 = load { %..string*, i64 }, { %..string*, i64 }* %36, align 8
  %38 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %36, i32 0, i32 0
  %39 = load %..string*, %..string** %38, align 8
  %40 = load i64, i64* %7, align 8
  %41 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %36, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %13, align 8
  call void @runtime.bounds_check_error(%..string* %13, i32 1297, i32 19, i64 %40, i64 %42)
  %43 = getelementptr %..string, %..string* %39, i64 %40
  %44 = load %..string, %..string* %43, align 8
  store %..string %44, %..string* %12, align 8
  br label %if.init

if.init:                                          ; preds = %entry
  %45 = load %..string, %..string* %12, align 8
  %46 = load %..string, %..string* %12, align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2a6", i64 0, i64 0), i64 3 }, %..string* %16, align 8
  %47 = bitcast { %..string, i8 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %47, i8 0, i64 24, i1 false)
  %48 = bitcast %runtime.Context* %35 to i8*
  call void @reflect.struct_tag_lookup({ %..string, i8 }* sret({ %..string, i8 }*) %17, %..string* %12, %..string* %16, i8* %48)
  %49 = load { %..string, i8 }, { %..string, i8 }* %17, align 8
  %50 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %17, i32 0, i32 0
  %51 = load %..string, %..string* %50, align 8
  %52 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %17, i32 0, i32 1
  %53 = load i8, i8* %52, align 1
  store %..string %51, %..string* %14, align 8
  store i8 %53, i8* %15, align 1
  %54 = load i8, i8* %15, align 1
  %55 = trunc i8 %54 to i1
  br i1 %55, label %if.then, label %if.done15

if.then:                                          ; preds = %if.init
  %56 = load %..string, %..string* %14, align 8
  %57 = load %..string, %..string* %14, align 8
  %58 = bitcast %..string* %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* %58, i8 0, i64 16, i1 false)
  %59 = bitcast %runtime.Context* %35 to i8*
  call void @strings.trim_space(%..string* sret(%..string*) %19, %..string* %14, i8* %59)
  %60 = load %..string, %..string* %19, align 8
  store %..string %60, %..string* %18, align 8
  %61 = load %..string, %..string* %18, align 8
  store %..string zeroinitializer, %..string* %20, align 8
  %62 = call i8 @runtime.string_eq(%..string* %18, %..string* %20)
  %63 = trunc i8 %62 to i1
  br i1 %63, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %if.then
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2a7", i64 0, i64 0), i64 1 }, %..string* %21, align 8
  %64 = call i8 @runtime.string_eq(%..string* %18, %..string* %21)
  %65 = trunc i8 %64 to i1
  br i1 %65, label %switch.case.body2, label %switch.case.next1

switch.case.body:                                 ; preds = %if.then
  store i8 0, i8* %11, align 1
  ret i8 0

switch.case.next1:                                ; preds = %switch.case.next
  br label %switch.done

switch.case.body2:                                ; preds = %switch.case.next
  store i8 1, i8* %11, align 1
  ret i8 1

switch.done:                                      ; preds = %switch.case.next1
  %66 = load %..string, %..string* %18, align 8
  %67 = bitcast { i32, i64 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 16, i1 false)
  %68 = bitcast %runtime.Context* %35 to i8*
  call void @utf8.decode_rune_in_string({ i32, i64 }* sret({ i32, i64 }*) %24, %..string* %18, i8* %68)
  %69 = load { i32, i64 }, { i32, i64 }* %24, align 8
  %70 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %24, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds { i32, i64 }, { i32, i64 }* %24, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  store i32 %71, i32* %22, align 4
  store i64 %73, i64* %23, align 8
  %74 = load i64, i64* %23, align 8
  %75 = load %..string, %..string* %18, align 8
  %76 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %25, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %25, i32 1305, i32 16, i64 %74, i64 %77, i64 %77)
  %78 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = getelementptr i8, i8* %79, i64 %74
  %81 = sub i64 %77, %74
  %82 = getelementptr inbounds %..string, %..string* %26, i32 0, i32 0
  store i8* %80, i8** %82, align 8
  %83 = getelementptr inbounds %..string, %..string* %26, i32 0, i32 1
  store i64 %81, i64* %83, align 8
  %84 = load %..string, %..string* %26, align 8
  store %..string %84, %..string* %18, align 8
  %85 = load %..string, %..string* %18, align 8
  store %..string zeroinitializer, %..string* %27, align 8
  %86 = call i8 @runtime.string_eq(%..string* %18, %..string* %27)
  %87 = trunc i8 %86 to i1
  br i1 %87, label %if.then3, label %cmp.or

cmp.or:                                           ; preds = %switch.done
  %88 = load %..string, %..string* %18, align 8
  %89 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 1
  %92 = load i64, i64* %91, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %28, align 8
  call void @runtime.bounds_check_error(%..string* %28, i32 1306, i32 27, i64 0, i64 %92)
  %93 = getelementptr i8, i8* %90, i64 0
  %94 = load i8, i8* %93, align 1
  %95 = icmp eq i8 %94, 44
  %96 = zext i1 %95 to i8
  %97 = trunc i8 %96 to i1
  br i1 %97, label %if.then3, label %if.done14

if.then3:                                         ; preds = %cmp.or, %switch.done
  %98 = load i32*, i32** %8, align 8
  %99 = load i32, i32* %22, align 4
  store i32 %99, i32* %98, align 4
  %100 = load %..string, %..string* %18, align 8
  %101 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = icmp sgt i64 %102, 0
  %104 = zext i1 %103 to i8
  %105 = trunc i8 %104 to i1
  br i1 %105, label %cmp.and, label %if.done13

cmp.and:                                          ; preds = %if.then3
  %106 = load %..string, %..string* %18, align 8
  %107 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 0
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %29, align 8
  call void @runtime.bounds_check_error(%..string* %29, i32 1308, i32 31, i64 0, i64 %110)
  %111 = getelementptr i8, i8* %108, i64 0
  %112 = load i8, i8* %111, align 1
  %113 = icmp eq i8 %112, 44
  %114 = zext i1 %113 to i8
  %115 = trunc i8 %114 to i1
  br i1 %115, label %if.then4, label %if.done13

if.then4:                                         ; preds = %cmp.and
  %116 = load %..string, %..string* %18, align 8
  %117 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 1
  %118 = load i64, i64* %117, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %31, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %31, i32 1309, i32 24, i64 1, i64 %118, i64 %118)
  %119 = getelementptr inbounds %..string, %..string* %18, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr i8, i8* %120, i64 1
  %122 = sub i64 %118, 1
  %123 = getelementptr inbounds %..string, %..string* %32, i32 0, i32 0
  store i8* %121, i8** %123, align 8
  %124 = getelementptr inbounds %..string, %..string* %32, i32 0, i32 1
  store i64 %122, i64* %124, align 8
  %125 = load %..string, %..string* %32, align 8
  store %..string %125, %..string* %30, align 8
  %126 = load %..string, %..string* %30, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2a8", i64 0, i64 0), i64 1 }, %..string* %33, align 8
  %127 = call i8 @runtime.string_eq(%..string* %30, %..string* %33)
  %128 = trunc i8 %127 to i1
  br i1 %128, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then4
  %129 = load i8*, i8** %10, align 8
  %130 = icmp ne i8* %129, null
  %131 = zext i1 %130 to i8
  %132 = trunc i8 %131 to i1
  br i1 %132, label %if.then6, label %if.done

if.then6:                                         ; preds = %if.then5
  %133 = load i8*, i8** %10, align 8
  store i8 1, i8* %133, align 1
  br label %if.done

if.done:                                          ; preds = %if.then6, %if.then5
  br label %if.done12

if.else:                                          ; preds = %if.then4
  %134 = load i32, i32* %22, align 4
  switch i32 %134, label %switch.done11 [
    i32 115, label %switch.case.body7
    i32 113, label %switch.case.body7
    i32 118, label %switch.case.body8
  ]

switch.case.body7:                                ; preds = %if.else, %if.else
  %135 = load i8*, i8** %6, align 8
  %136 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1, align 8
  %137 = load %..string, %..string* %30, align 8
  %138 = load i64*, i64** %9, align 8
  %139 = bitcast %runtime.Context* %35 to i8*
  call void @fmt.handle_tag-830.handle_optional_len-0(i8* %135, %runtime.Type_Info_Struct* %1, %..string* %30, i64* %138, i8* %139)
  br label %switch.done11

switch.case.body8:                                ; preds = %if.else
  %140 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1, i32 0, i32 0
  %141 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %140, align 8
  %142 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %140, i32 0, i32 0
  %143 = load %runtime.Type_Info**, %runtime.Type_Info*** %142, align 8
  %144 = load i64, i64* %7, align 8
  %145 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %140, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %34, align 8
  call void @runtime.bounds_check_error(%..string* %34, i32 1319, i32 52, i64 %144, i64 %146)
  %147 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %143, i64 %144
  %148 = load %runtime.Type_Info*, %runtime.Type_Info** %147, align 8
  %149 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %148, i32 0, i32 4
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %runtime.Context* %35 to i8*
  %152 = call i64 @reflect.type_kind(i64 %150, i8* %151)
  switch i64 %152, label %switch.done10 [
    i64 7, label %switch.case.body9
    i64 12, label %switch.case.body9
    i64 14, label %switch.case.body9
    i64 17, label %switch.case.body9
    i64 16, label %switch.case.body9
  ]

switch.case.body9:                                ; preds = %switch.case.body8, %switch.case.body8, %switch.case.body8, %switch.case.body8, %switch.case.body8
  %153 = load i8*, i8** %6, align 8
  %154 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1, align 8
  %155 = load %..string, %..string* %30, align 8
  %156 = load i64*, i64** %9, align 8
  %157 = bitcast %runtime.Context* %35 to i8*
  call void @fmt.handle_tag-830.handle_optional_len-0(i8* %153, %runtime.Type_Info_Struct* %1, %..string* %30, i64* %156, i8* %157)
  br label %switch.done10

switch.done10:                                    ; preds = %switch.case.body9, %switch.case.body8
  br label %switch.done11

switch.done11:                                    ; preds = %switch.done10, %switch.case.body7, %if.else
  br label %if.done12

if.done12:                                        ; preds = %switch.done11, %if.done
  br label %if.done13

if.done13:                                        ; preds = %if.done12, %cmp.and, %if.then3
  br label %if.done14

if.done14:                                        ; preds = %if.done13, %cmp.or
  br label %if.done15

if.done15:                                        ; preds = %if.done14, %if.init
  store i8 0, i8* %11, align 1
  ret i8 0
}

define internal void @fmt.fmt_struct(%fmt.Info* %0, %..any* %1, i32 %2, %runtime.Type_Info_Struct* %3, %..string* %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %fmt.Info*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %..string, align 8
  %8 = alloca %..string, align 8
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca { i64, i32 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i64, i32 }, align 8
  %13 = alloca i8, align 1
  %14 = alloca { i64, i32 }, align 8
  %15 = alloca i8, align 1
  %16 = alloca i64, align 8
  %17 = alloca i8, align 1
  %18 = alloca %..string, align 8
  %19 = alloca %runtime.Type_Info_Named, align 8
  %20 = alloca i8, align 1
  %21 = alloca { %runtime.Type_Info_Named, i8 }, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca %..string, align 8
  %25 = alloca %..string, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca %..string, align 8
  %30 = alloca { i64, i32 }, align 8
  %31 = alloca i64, align 8
  %32 = alloca %..string, align 8
  %33 = alloca { i64, i32 }, align 8
  %34 = alloca { i64, i32 }, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i32, align 4
  %39 = alloca %..string, align 8
  %40 = alloca %..string, align 8
  %41 = alloca %..string, align 8
  %42 = alloca { i64, i32 }, align 8
  %43 = alloca { i64, i32 }, align 8
  %44 = alloca %..string, align 8
  %45 = alloca { i64, i32 }, align 8
  %46 = alloca %runtime.Type_Info*, align 8
  %47 = alloca %..string, align 8
  %48 = alloca %runtime.Type_Info_Array, align 8
  %49 = alloca %..string, align 8
  %50 = alloca { %runtime.Type_Info_Array, i8 }, align 8
  %51 = alloca %..string, align 8
  %52 = alloca i64, align 8
  %53 = alloca %..string, align 8
  %54 = alloca { i64, i32 }, align 8
  %55 = alloca i8*, align 8
  %56 = alloca %..string, align 8
  %57 = alloca %..any, align 8
  %58 = alloca %runtime.Type_Info*, align 8
  %59 = alloca %..string, align 8
  %60 = alloca %runtime.Type_Info_Pointer, align 8
  %61 = alloca %..string, align 8
  %62 = alloca { %runtime.Type_Info_Pointer, i8 }, align 8
  %63 = alloca %..string, align 8
  %64 = alloca i64, align 8
  %65 = alloca %..string, align 8
  %66 = alloca { i64, i32 }, align 8
  %67 = alloca i8*, align 8
  %68 = alloca %..string, align 8
  %69 = alloca i8*, align 8
  %70 = alloca %..any, align 8
  %71 = alloca %..string, align 8
  %72 = alloca { i64, i32 }, align 8
  %73 = alloca i64, align 8
  %74 = alloca %..string, align 8
  %75 = alloca i64, align 8
  %76 = alloca i64, align 8
  %77 = alloca i64, align 8
  %78 = alloca %..string, align 8
  %79 = alloca i64, align 8
  %80 = alloca i64, align 8
  %81 = alloca i8, align 1
  %82 = alloca i32, align 4
  %83 = alloca %"runtime.Maybe(int)-16164", align 8
  %84 = alloca %..string, align 8
  %85 = alloca { i64, i32 }, align 8
  %86 = alloca { i64, i32 }, align 8
  %87 = alloca %..string, align 8
  %88 = alloca { i64, i32 }, align 8
  %89 = alloca %runtime.Type_Info*, align 8
  %90 = alloca %..string, align 8
  %91 = alloca %..string, align 8
  %92 = alloca { i64, i32 }, align 8
  %93 = alloca i8*, align 8
  %94 = alloca %..string, align 8
  %95 = alloca %..any, align 8
  %96 = alloca %..string, align 8
  %97 = alloca { i64, i32 }, align 8
  %98 = alloca i64, align 8
  %99 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %5, align 8
  store i32 %2, i32* %6, align 4
  %100 = bitcast i8* %__.context_ptr to %runtime.Context*
  %101 = load i32, i32* %6, align 4
  %102 = icmp ne i32 %101, 118
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %105 = load %fmt.Info*, %fmt.Info** %5, align 8
  %106 = load i32, i32* %6, align 4
  %107 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %105, i32 %106, i8* %107)
  ret void

if.done:                                          ; preds = %entry
  %108 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 6
  %109 = load i8, i8* %108, align 1
  %110 = trunc i8 %109 to i1
  br i1 %110, label %if.then1, label %if.done4

if.then1:                                         ; preds = %if.done
  %111 = load %..string, %..string* %4, align 8
  store %..string zeroinitializer, %..string* %7, align 8
  %112 = call i8 @runtime.string_eq(%..string* %4, %..string* %7)
  %113 = trunc i8 %112 to i1
  br i1 %113, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then1
  %114 = load %fmt.Info*, %fmt.Info** %5, align 8
  %115 = getelementptr inbounds %fmt.Info, %fmt.Info* %114, i32 0, i32 16
  %116 = load %io.Writer, %io.Writer* %115, align 8
  %117 = load %fmt.Info*, %fmt.Info** %5, align 8
  %118 = getelementptr inbounds %fmt.Info, %fmt.Info* %117, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2a9", i64 0, i64 0), i64 11 }, %..string* %8, align 8
  %119 = bitcast { i64, i32 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %119, i8 0, i64 16, i1 false)
  %120 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %9, %io.Writer* %115, %..string* %8, i64* %118, i8* %120)
  %121 = load { i64, i32 }, { i64, i32 }* %9, align 8
  br label %if.done3

if.else:                                          ; preds = %if.then1
  %122 = load %fmt.Info*, %fmt.Info** %5, align 8
  %123 = getelementptr inbounds %fmt.Info, %fmt.Info* %122, i32 0, i32 16
  %124 = load %io.Writer, %io.Writer* %123, align 8
  %125 = load %..string, %..string* %4, align 8
  %126 = load %fmt.Info*, %fmt.Info** %5, align 8
  %127 = getelementptr inbounds %fmt.Info, %fmt.Info* %126, i32 0, i32 23
  %128 = bitcast { i64, i32 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %128, i8 0, i64 16, i1 false)
  %129 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %10, %io.Writer* %123, %..string* %4, i64* %127, i8* %129)
  %130 = load { i64, i32 }, { i64, i32 }* %10, align 8
  %131 = load %fmt.Info*, %fmt.Info** %5, align 8
  %132 = getelementptr inbounds %fmt.Info, %fmt.Info* %131, i32 0, i32 16
  %133 = load %io.Writer, %io.Writer* %132, align 8
  %134 = load %fmt.Info*, %fmt.Info** %5, align 8
  %135 = getelementptr inbounds %fmt.Info, %fmt.Info* %134, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2aa", i64 0, i64 0), i64 2 }, %..string* %11, align 8
  %136 = bitcast { i64, i32 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %136, i8 0, i64 16, i1 false)
  %137 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %12, %io.Writer* %132, %..string* %11, i64* %135, i8* %137)
  %138 = load { i64, i32 }, { i64, i32 }* %12, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.else, %if.then2
  ret void

if.done4:                                         ; preds = %if.done
  %139 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 10
  %140 = load i8, i8* %139, align 1
  %141 = icmp ne i8 %140, 0
  %142 = zext i1 %141 to i8
  store i8 %142, i8* %13, align 1
  %143 = load %fmt.Info*, %fmt.Info** %5, align 8
  %144 = getelementptr inbounds %fmt.Info, %fmt.Info* %143, i32 0, i32 16
  %145 = load %io.Writer, %io.Writer* %144, align 8
  %146 = load %..string, %..string* %4, align 8
  %147 = load %fmt.Info*, %fmt.Info** %5, align 8
  %148 = getelementptr inbounds %fmt.Info, %fmt.Info* %147, i32 0, i32 23
  %149 = bitcast { i64, i32 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %149, i8 0, i64 16, i1 false)
  %150 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %14, %io.Writer* %144, %..string* %4, i64* %148, i8* %150)
  %151 = load { i64, i32 }, { i64, i32 }* %14, align 8
  %152 = load %fmt.Info*, %fmt.Info** %5, align 8
  %153 = getelementptr inbounds %fmt.Info, %fmt.Info* %152, i32 0, i32 16
  %154 = load %io.Writer, %io.Writer* %153, align 8
  %155 = load i8, i8* %13, align 1
  %156 = trunc i8 %155 to i1
  br i1 %156, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.done4
  br label %if.done7

if.else6:                                         ; preds = %if.done4
  br label %if.done7

if.done7:                                         ; preds = %if.else6, %if.then5
  %157 = phi i8 [ 91, %if.then5 ], [ 123, %if.else6 ]
  %158 = load %fmt.Info*, %fmt.Info** %5, align 8
  %159 = getelementptr inbounds %fmt.Info, %fmt.Info* %158, i32 0, i32 23
  %160 = bitcast %runtime.Context* %100 to i8*
  %161 = call i32 @io.write_byte_to_writer(%io.Writer* %153, i8 %157, i64* %159, i8* %160)
  %162 = load %fmt.Info*, %fmt.Info** %5, align 8
  %163 = getelementptr inbounds %fmt.Info, %fmt.Info* %162, i32 0, i32 19
  %164 = load i64, i64* %163, align 8
  %165 = add i64 %164, 1
  store i64 %165, i64* %163, align 8
  %166 = load %fmt.Info*, %fmt.Info** %5, align 8
  %167 = getelementptr inbounds %fmt.Info, %fmt.Info* %166, i32 0, i32 4
  %168 = load i8, i8* %167, align 1
  store i8 %168, i8* %15, align 1
  %169 = load %fmt.Info*, %fmt.Info** %5, align 8
  %170 = getelementptr inbounds %fmt.Info, %fmt.Info* %169, i32 0, i32 10
  %171 = load i64, i64* %170, align 8
  store i64 %171, i64* %16, align 8
  %172 = load i8, i8* %15, align 1
  store i8 %172, i8* %17, align 1
  %173 = load %fmt.Info*, %fmt.Info** %5, align 8
  %174 = getelementptr inbounds %fmt.Info, %fmt.Info* %173, i32 0, i32 10
  %175 = load i64, i64* %174, align 8
  %176 = add i64 %175, 1
  store i64 %176, i64* %174, align 8
  %177 = load i8, i8* %15, align 1
  %178 = trunc i8 %177 to i1
  br i1 %178, label %if.then8, label %if.done9

if.then8:                                         ; preds = %if.done7
  %179 = load %fmt.Info*, %fmt.Info** %5, align 8
  %180 = getelementptr inbounds %fmt.Info, %fmt.Info* %179, i32 0, i32 16
  %181 = load %io.Writer, %io.Writer* %180, align 8
  %182 = load %fmt.Info*, %fmt.Info** %5, align 8
  %183 = getelementptr inbounds %fmt.Info, %fmt.Info* %182, i32 0, i32 23
  %184 = bitcast %runtime.Context* %100 to i8*
  %185 = call i32 @io.write_byte_to_writer(%io.Writer* %180, i8 10, i64* %183, i8* %184)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %if.done7
  %186 = load i8, i8* %13, align 1
  %187 = trunc i8 %186 to i1
  br i1 %187, label %if.then10, label %if.else49

if.then10:                                        ; preds = %if.done9
  %188 = load %fmt.Info*, %fmt.Info** %5, align 8
  %189 = getelementptr inbounds %fmt.Info, %fmt.Info* %188, i32 0, i32 10
  %190 = load i64, i64* %189, align 8
  %191 = add i64 %190, 1
  store i64 %191, i64* %189, align 8
  %192 = bitcast %..string* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %192, i8 0, i64 16, i1 false)
  br label %if.init

if.init:                                          ; preds = %if.then10
  %193 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 12
  %194 = load %runtime.Type_Info*, %runtime.Type_Info** %193, align 8
  %195 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %194, i32 0, i32 5
  %196 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %195, align 8
  %197 = bitcast { %runtime.Type_Info_Named, i8 }* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %197, i8 0, i64 88, i1 false)
  %198 = getelementptr inbounds { %runtime.Type_Info_Named, i8 }, { %runtime.Type_Info_Named, i8 }* %21, i32 0, i32 0
  %199 = getelementptr inbounds { %runtime.Type_Info_Named, i8 }, { %runtime.Type_Info_Named, i8 }* %21, i32 0, i32 1
  %200 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %195, i32 0, i32 1
  %201 = load i64, i64* %200, align 8
  %202 = icmp eq i64 %201, 1
  br i1 %202, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.init
  %203 = bitcast { [15 x i64], i64 }* %195 to %runtime.Type_Info_Named*
  %204 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %203, align 8
  %205 = bitcast %runtime.Type_Info_Named* %198 to i8*
  %206 = bitcast %runtime.Type_Info_Named* %203 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %205, i8* align 1 %206, i64 80, i1 false)
  store i8 1, i8* %199, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.init
  %207 = load { %runtime.Type_Info_Named, i8 }, { %runtime.Type_Info_Named, i8 }* %21, align 8
  %208 = getelementptr inbounds { %runtime.Type_Info_Named, i8 }, { %runtime.Type_Info_Named, i8 }* %21, i32 0, i32 0
  %209 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %208, align 8
  %210 = getelementptr inbounds { %runtime.Type_Info_Named, i8 }, { %runtime.Type_Info_Named, i8 }* %21, i32 0, i32 1
  %211 = load i8, i8* %210, align 1
  %212 = bitcast %runtime.Type_Info_Named* %19 to i8*
  %213 = bitcast %runtime.Type_Info_Named* %208 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %212, i8* align 1 %213, i64 80, i1 false)
  store i8 %211, i8* %20, align 1
  %214 = load i8, i8* %20, align 1
  %215 = trunc i8 %214 to i1
  br i1 %215, label %if.then11, label %if.done12

if.then11:                                        ; preds = %union_cast.end
  %216 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %19, i32 0, i32 0
  %217 = load %..string, %..string* %216, align 8
  store %..string %217, %..string* %18, align 8
  br label %if.done12

if.done12:                                        ; preds = %if.then11, %union_cast.end
  %218 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 1
  %219 = load { %..string*, i64 }, { %..string*, i64 }* %218, align 8
  %220 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %218, i32 0, i32 1
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %22, align 8
  %222 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 13
  %223 = load i64, i64* %222, align 8
  store i64 %223, i64* %23, align 8
  %224 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 10
  %225 = load i8, i8* %224, align 1
  %226 = icmp eq i8 %225, 2
  %227 = zext i1 %226 to i8
  %228 = trunc i8 %227 to i1
  br i1 %228, label %if.then13, label %if.else14

if.then13:                                        ; preds = %if.done12
  %229 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 1
  %230 = load { %..string*, i64 }, { %..string*, i64 }* %229, align 8
  %231 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %229, i32 0, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %232, 1
  store i64 %233, i64* %22, align 8
  %234 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %235 = load i8*, i8** %234, align 8
  %236 = ptrtoint i8* %235 to i64
  %237 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 2
  %238 = load { i64*, i64 }, { i64*, i64 }* %237, align 8
  %239 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %237, i32 0, i32 0
  %240 = load i64*, i64** %239, align 8
  %241 = load i64, i64* %22, align 8
  %242 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %237, i32 0, i32 1
  %243 = load i64, i64* %242, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %24, align 8
  call void @runtime.bounds_check_error(%..string* %24, i32 1386, i32 54, i64 %241, i64 %243)
  %244 = getelementptr i64, i64* %240, i64 %241
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %236, %245
  %247 = inttoptr i64 %246 to i64*
  %248 = load i64, i64* %247, align 8
  store i64 %248, i64* %23, align 8
  br label %if.done17

if.else14:                                        ; preds = %if.done12
  %249 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 10
  %250 = load i8, i8* %249, align 1
  %251 = icmp eq i8 %250, 3
  %252 = zext i1 %251 to i8
  %253 = trunc i8 %252 to i1
  br i1 %253, label %if.then15, label %if.done16

if.then15:                                        ; preds = %if.else14
  %254 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 1
  %255 = load { %..string*, i64 }, { %..string*, i64 }* %254, align 8
  %256 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %254, i32 0, i32 1
  %257 = load i64, i64* %256, align 8
  %258 = sub i64 %257, 3
  store i64 %258, i64* %22, align 8
  %259 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %260 = load i8*, i8** %259, align 8
  %261 = ptrtoint i8* %260 to i64
  %262 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 2
  %263 = load { i64*, i64 }, { i64*, i64 }* %262, align 8
  %264 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %262, i32 0, i32 0
  %265 = load i64*, i64** %264, align 8
  %266 = load i64, i64* %22, align 8
  %267 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %262, i32 0, i32 1
  %268 = load i64, i64* %267, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %25, align 8
  call void @runtime.bounds_check_error(%..string* %25, i32 1391, i32 54, i64 %266, i64 %268)
  %269 = getelementptr i64, i64* %265, i64 %266
  %270 = load i64, i64* %269, align 8
  %271 = add i64 %261, %270
  %272 = inttoptr i64 %271 to i64*
  %273 = load i64, i64* %272, align 8
  store i64 %273, i64* %23, align 8
  br label %if.done16

if.done16:                                        ; preds = %if.then15, %if.else14
  br label %if.done17

if.done17:                                        ; preds = %if.done16, %if.then13
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post46, %if.done17
  %274 = load i64, i64* %23, align 8
  %275 = load i64, i64* %26, align 8
  %276 = icmp ult i64 %275, %274
  br i1 %276, label %for.interval.body, label %for.interval.done47

for.interval.body:                                ; preds = %for.interval.loop
  %277 = load i64, i64* %26, align 8
  %278 = load i64, i64* %27, align 8
  store i64 %277, i64* %28, align 8
  %279 = load i8, i8* %15, align 1
  %280 = trunc i8 %279 to i1
  br i1 %280, label %if.done19, label %cmp.and

cmp.and:                                          ; preds = %for.interval.body
  %281 = load i64, i64* %28, align 8
  %282 = icmp ugt i64 %281, 0
  %283 = zext i1 %282 to i8
  %284 = trunc i8 %283 to i1
  br i1 %284, label %if.then18, label %if.done19

if.then18:                                        ; preds = %cmp.and
  %285 = load %fmt.Info*, %fmt.Info** %5, align 8
  %286 = getelementptr inbounds %fmt.Info, %fmt.Info* %285, i32 0, i32 16
  %287 = load %io.Writer, %io.Writer* %286, align 8
  %288 = load %fmt.Info*, %fmt.Info** %5, align 8
  %289 = getelementptr inbounds %fmt.Info, %fmt.Info* %288, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %29, align 8
  %290 = bitcast { i64, i32 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %290, i8 0, i64 16, i1 false)
  %291 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %30, %io.Writer* %286, %..string* %29, i64* %289, i8* %291)
  %292 = load { i64, i32 }, { i64, i32 }* %30, align 8
  br label %if.done19

if.done19:                                        ; preds = %if.then18, %cmp.and, %for.interval.body
  store i64 -1, i64* %31, align 8
  %293 = load i8, i8* %15, align 1
  %294 = trunc i8 %293 to i1
  br i1 %294, label %if.done22, label %cmp.and20

cmp.and20:                                        ; preds = %if.done19
  %295 = load i64, i64* %31, align 8
  %296 = icmp sgt i64 %295, 0
  %297 = zext i1 %296 to i8
  %298 = trunc i8 %297 to i1
  br i1 %298, label %if.then21, label %if.done22

if.then21:                                        ; preds = %cmp.and20
  %299 = load %fmt.Info*, %fmt.Info** %5, align 8
  %300 = getelementptr inbounds %fmt.Info, %fmt.Info* %299, i32 0, i32 16
  %301 = load %io.Writer, %io.Writer* %300, align 8
  %302 = load %fmt.Info*, %fmt.Info** %5, align 8
  %303 = getelementptr inbounds %fmt.Info, %fmt.Info* %302, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %32, align 8
  %304 = bitcast { i64, i32 }* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %304, i8 0, i64 16, i1 false)
  %305 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %33, %io.Writer* %300, %..string* %32, i64* %303, i8* %305)
  %306 = load { i64, i32 }, { i64, i32 }* %33, align 8
  br label %if.done22

if.done22:                                        ; preds = %if.then21, %cmp.and20, %if.done19
  %307 = load %fmt.Info*, %fmt.Info** %5, align 8
  %308 = getelementptr inbounds %fmt.Info, %fmt.Info* %307, i32 0, i32 16
  %309 = load %io.Writer, %io.Writer* %308, align 8
  %310 = load %..string, %..string* %18, align 8
  %311 = load %fmt.Info*, %fmt.Info** %5, align 8
  %312 = getelementptr inbounds %fmt.Info, %fmt.Info* %311, i32 0, i32 23
  %313 = bitcast { i64, i32 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %313, i8 0, i64 16, i1 false)
  %314 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %34, %io.Writer* %308, %..string* %18, i64* %312, i8* %314)
  %315 = load { i64, i32 }, { i64, i32 }* %34, align 8
  %316 = load %fmt.Info*, %fmt.Info** %5, align 8
  %317 = getelementptr inbounds %fmt.Info, %fmt.Info* %316, i32 0, i32 16
  %318 = load %io.Writer, %io.Writer* %317, align 8
  %319 = load %fmt.Info*, %fmt.Info** %5, align 8
  %320 = getelementptr inbounds %fmt.Info, %fmt.Info* %319, i32 0, i32 23
  %321 = bitcast %runtime.Context* %100 to i8*
  %322 = call i32 @io.write_byte_to_writer(%io.Writer* %317, i8 123, i64* %320, i8* %321)
  %323 = load %fmt.Info*, %fmt.Info** %5, align 8
  %324 = getelementptr inbounds %fmt.Info, %fmt.Info* %323, i32 0, i32 19
  %325 = load i64, i64* %324, align 8
  %326 = add i64 %325, 1
  store i64 %326, i64* %324, align 8
  store i64 0, i64* %35, align 8
  store i64 0, i64* %36, align 8
  br label %for.interval.loop23

for.interval.loop23:                              ; preds = %for.interval.post, %if.done22
  %327 = load i64, i64* %22, align 8
  %328 = load i64, i64* %35, align 8
  %329 = icmp slt i64 %328, %327
  br i1 %329, label %for.interval.body24, label %for.interval.done

for.interval.body24:                              ; preds = %for.interval.loop23
  %330 = load i64, i64* %35, align 8
  %331 = load i64, i64* %36, align 8
  store i64 %330, i64* %37, align 8
  store i32 118, i32* %38, align 4
  %332 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 1
  %333 = load { %..string*, i64 }, { %..string*, i64 }* %332, align 8
  %334 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %332, i32 0, i32 0
  %335 = load %..string*, %..string** %334, align 8
  %336 = load i64, i64* %37, align 8
  %337 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %332, i32 0, i32 1
  %338 = load i64, i64* %337, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %40, align 8
  call void @runtime.bounds_check_error(%..string* %40, i32 1410, i32 24, i64 %336, i64 %338)
  %339 = getelementptr %..string, %..string* %335, i64 %336
  %340 = load %..string, %..string* %339, align 8
  store %..string %340, %..string* %39, align 8
  %341 = load i64, i64* %31, align 8
  %342 = add i64 %341, 1
  store i64 %342, i64* %31, align 8
  %343 = load i8, i8* %15, align 1
  %344 = trunc i8 %343 to i1
  br i1 %344, label %if.done27, label %cmp.and25

cmp.and25:                                        ; preds = %for.interval.body24
  %345 = load i64, i64* %31, align 8
  %346 = icmp sgt i64 %345, 0
  %347 = zext i1 %346 to i8
  %348 = trunc i8 %347 to i1
  br i1 %348, label %if.then26, label %if.done27

if.then26:                                        ; preds = %cmp.and25
  %349 = load %fmt.Info*, %fmt.Info** %5, align 8
  %350 = getelementptr inbounds %fmt.Info, %fmt.Info* %349, i32 0, i32 16
  %351 = load %io.Writer, %io.Writer* %350, align 8
  %352 = load %fmt.Info*, %fmt.Info** %5, align 8
  %353 = getelementptr inbounds %fmt.Info, %fmt.Info* %352, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %41, align 8
  %354 = bitcast { i64, i32 }* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %354, i8 0, i64 16, i1 false)
  %355 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %42, %io.Writer* %350, %..string* %41, i64* %353, i8* %355)
  %356 = load { i64, i32 }, { i64, i32 }* %42, align 8
  br label %if.done27

if.done27:                                        ; preds = %if.then26, %cmp.and25, %for.interval.body24
  %357 = load i8, i8* %15, align 1
  %358 = trunc i8 %357 to i1
  br i1 %358, label %if.then28, label %if.done29

if.then28:                                        ; preds = %if.done27
  %359 = load %fmt.Info*, %fmt.Info** %5, align 8
  %360 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %359, i8* %360)
  br label %if.done29

if.done29:                                        ; preds = %if.then28, %if.done27
  %361 = load %fmt.Info*, %fmt.Info** %5, align 8
  %362 = getelementptr inbounds %fmt.Info, %fmt.Info* %361, i32 0, i32 16
  %363 = load %io.Writer, %io.Writer* %362, align 8
  %364 = load %..string, %..string* %39, align 8
  %365 = load %fmt.Info*, %fmt.Info** %5, align 8
  %366 = getelementptr inbounds %fmt.Info, %fmt.Info* %365, i32 0, i32 23
  %367 = bitcast { i64, i32 }* %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* %367, i8 0, i64 16, i1 false)
  %368 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %43, %io.Writer* %362, %..string* %39, i64* %366, i8* %368)
  %369 = load { i64, i32 }, { i64, i32 }* %43, align 8
  %370 = load %fmt.Info*, %fmt.Info** %5, align 8
  %371 = getelementptr inbounds %fmt.Info, %fmt.Info* %370, i32 0, i32 16
  %372 = load %io.Writer, %io.Writer* %371, align 8
  %373 = load %fmt.Info*, %fmt.Info** %5, align 8
  %374 = getelementptr inbounds %fmt.Info, %fmt.Info* %373, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2ab", i64 0, i64 0), i64 3 }, %..string* %44, align 8
  %375 = bitcast { i64, i32 }* %45 to i8*
  call void @llvm.memset.p0i8.i64(i8* %375, i8 0, i64 16, i1 false)
  %376 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %45, %io.Writer* %371, %..string* %44, i64* %374, i8* %376)
  %377 = load { i64, i32 }, { i64, i32 }* %45, align 8
  %378 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 10
  %379 = load i8, i8* %378, align 1
  %380 = icmp eq i8 %379, 1
  %381 = zext i1 %380 to i8
  %382 = trunc i8 %381 to i1
  br i1 %382, label %if.then30, label %if.else36

if.then30:                                        ; preds = %if.done29
  %383 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 0
  %384 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %383, align 8
  %385 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %383, i32 0, i32 0
  %386 = load %runtime.Type_Info**, %runtime.Type_Info*** %385, align 8
  %387 = load i64, i64* %37, align 8
  %388 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %383, i32 0, i32 1
  %389 = load i64, i64* %388, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %47, align 8
  call void @runtime.bounds_check_error(%..string* %47, i32 1422, i32 22, i64 %387, i64 %389)
  %390 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %386, i64 %387
  %391 = load %runtime.Type_Info*, %runtime.Type_Info** %390, align 8
  %392 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %391, i32 0, i32 5
  %393 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %392, align 8
  %394 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 0
  %395 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %394, align 8
  %396 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %394, i32 0, i32 0
  %397 = load %runtime.Type_Info**, %runtime.Type_Info*** %396, align 8
  %398 = load i64, i64* %37, align 8
  %399 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %394, i32 0, i32 1
  %400 = load i64, i64* %399, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %49, align 8
  call void @runtime.bounds_check_error(%..string* %49, i32 1422, i32 22, i64 %398, i64 %400)
  %401 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %397, i64 %398
  %402 = load %runtime.Type_Info*, %runtime.Type_Info** %401, align 8
  %403 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %402, i32 0, i32 5
  %404 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %403, align 8
  %405 = bitcast { %runtime.Type_Info_Array, i8 }* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* %405, i8 0, i64 32, i1 false)
  %406 = getelementptr inbounds { %runtime.Type_Info_Array, i8 }, { %runtime.Type_Info_Array, i8 }* %50, i32 0, i32 0
  %407 = getelementptr inbounds { %runtime.Type_Info_Array, i8 }, { %runtime.Type_Info_Array, i8 }* %50, i32 0, i32 1
  %408 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %403, i32 0, i32 1
  %409 = load i64, i64* %408, align 8
  %410 = icmp eq i64 %409, 14
  br i1 %410, label %union_cast.ok31, label %union_cast.end32

union_cast.ok31:                                  ; preds = %if.then30
  %411 = bitcast { [15 x i64], i64 }* %403 to %runtime.Type_Info_Array*
  %412 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %411, align 8
  store %runtime.Type_Info_Array %412, %runtime.Type_Info_Array* %406, align 8
  store i8 1, i8* %407, align 1
  br label %union_cast.end32

union_cast.end32:                                 ; preds = %union_cast.ok31, %if.then30
  %413 = getelementptr inbounds { %runtime.Type_Info_Array, i8 }, { %runtime.Type_Info_Array, i8 }* %50, i32 0, i32 1
  %414 = load i8, i8* %413, align 1
  %415 = bitcast { [15 x i64], i64 }* %403 to i8*
  %416 = icmp ne i8 %414, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %51, align 8
  call void @runtime.type_assertion_check2(i1 %416, %..string* %51, i32 1422, i32 25, i64 1369094286720630800, i64 3602879701896396846, i8* %415)
  %417 = getelementptr inbounds { %runtime.Type_Info_Array, i8 }, { %runtime.Type_Info_Array, i8 }* %50, i32 0, i32 0
  %418 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %417, align 8
  store %runtime.Type_Info_Array %418, %runtime.Type_Info_Array* %48, align 8
  %419 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %48, i32 0, i32 0
  %420 = load %runtime.Type_Info*, %runtime.Type_Info** %419, align 8
  store %runtime.Type_Info* %420, %runtime.Type_Info** %46, align 8
  %421 = load %runtime.Type_Info*, %runtime.Type_Info** %46, align 8
  %422 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %421, i32 0, i32 0
  %423 = load i64, i64* %422, align 8
  store i64 %423, i64* %52, align 8
  %424 = load %runtime.Type_Info*, %runtime.Type_Info** %46, align 8
  %425 = bitcast %runtime.Context* %100 to i8*
  %426 = call i8 @reflect.is_any(%runtime.Type_Info* %424, i8* %425)
  %427 = trunc i8 %426 to i1
  br i1 %427, label %if.then33, label %if.else34

if.then33:                                        ; preds = %union_cast.end32
  %428 = load %fmt.Info*, %fmt.Info** %5, align 8
  %429 = getelementptr inbounds %fmt.Info, %fmt.Info* %428, i32 0, i32 16
  %430 = load %io.Writer, %io.Writer* %429, align 8
  %431 = load %fmt.Info*, %fmt.Info** %5, align 8
  %432 = getelementptr inbounds %fmt.Info, %fmt.Info* %431, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2ac", i64 0, i64 0), i64 5 }, %..string* %53, align 8
  %433 = bitcast { i64, i32 }* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* %433, i8 0, i64 16, i1 false)
  %434 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %54, %io.Writer* %429, %..string* %53, i64* %432, i8* %434)
  %435 = load { i64, i32 }, { i64, i32 }* %54, align 8
  br label %if.done35

if.else34:                                        ; preds = %union_cast.end32
  %436 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %437 = load i8*, i8** %436, align 8
  %438 = ptrtoint i8* %437 to i64
  %439 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 2
  %440 = load { i64*, i64 }, { i64*, i64 }* %439, align 8
  %441 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %439, i32 0, i32 0
  %442 = load i64*, i64** %441, align 8
  %443 = load i64, i64* %37, align 8
  %444 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %439, i32 0, i32 1
  %445 = load i64, i64* %444, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %56, align 8
  call void @runtime.bounds_check_error(%..string* %56, i32 1427, i32 53, i64 %443, i64 %445)
  %446 = getelementptr i64, i64* %442, i64 %443
  %447 = load i64, i64* %446, align 8
  %448 = add i64 %438, %447
  %449 = load i64, i64* %28, align 8
  %450 = load i64, i64* %52, align 8
  %451 = mul i64 %449, %450
  %452 = add i64 %448, %451
  %453 = inttoptr i64 %452 to i8*
  store i8* %453, i8** %55, align 8
  %454 = load %fmt.Info*, %fmt.Info** %5, align 8
  %455 = bitcast %..any* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %455, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %57, align 8
  %456 = load i8*, i8** %55, align 8
  %457 = getelementptr inbounds %..any, %..any* %57, i32 0, i32 0
  store i8* %456, i8** %457, align 8
  %458 = load %runtime.Type_Info*, %runtime.Type_Info** %46, align 8
  %459 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %458, i32 0, i32 4
  %460 = load i64, i64* %459, align 8
  %461 = getelementptr inbounds %..any, %..any* %57, i32 0, i32 1
  store i64 %460, i64* %461, align 8
  %462 = load %..any, %..any* %57, align 8
  %463 = load i32, i32* %38, align 4
  %464 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %454, %..any* %57, i32 %463, i8* %464)
  br label %if.done35

if.done35:                                        ; preds = %if.else34, %if.then33
  br label %if.done42

if.else36:                                        ; preds = %if.done29
  %465 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 0
  %466 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %465, align 8
  %467 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %465, i32 0, i32 0
  %468 = load %runtime.Type_Info**, %runtime.Type_Info*** %467, align 8
  %469 = load i64, i64* %37, align 8
  %470 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %465, i32 0, i32 1
  %471 = load i64, i64* %470, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %59, align 8
  call void @runtime.bounds_check_error(%..string* %59, i32 1431, i32 22, i64 %469, i64 %471)
  %472 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %468, i64 %469
  %473 = load %runtime.Type_Info*, %runtime.Type_Info** %472, align 8
  %474 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %473, i32 0, i32 5
  %475 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %474, align 8
  %476 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 0
  %477 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %476, align 8
  %478 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %476, i32 0, i32 0
  %479 = load %runtime.Type_Info**, %runtime.Type_Info*** %478, align 8
  %480 = load i64, i64* %37, align 8
  %481 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %476, i32 0, i32 1
  %482 = load i64, i64* %481, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %61, align 8
  call void @runtime.bounds_check_error(%..string* %61, i32 1431, i32 22, i64 %480, i64 %482)
  %483 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %479, i64 %480
  %484 = load %runtime.Type_Info*, %runtime.Type_Info** %483, align 8
  %485 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %484, i32 0, i32 5
  %486 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %485, align 8
  %487 = bitcast { %runtime.Type_Info_Pointer, i8 }* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %487, i8 0, i64 16, i1 false)
  %488 = getelementptr inbounds { %runtime.Type_Info_Pointer, i8 }, { %runtime.Type_Info_Pointer, i8 }* %62, i32 0, i32 0
  %489 = getelementptr inbounds { %runtime.Type_Info_Pointer, i8 }, { %runtime.Type_Info_Pointer, i8 }* %62, i32 0, i32 1
  %490 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %485, i32 0, i32 1
  %491 = load i64, i64* %490, align 8
  %492 = icmp eq i64 %491, 11
  br i1 %492, label %union_cast.ok37, label %union_cast.end38

union_cast.ok37:                                  ; preds = %if.else36
  %493 = bitcast { [15 x i64], i64 }* %485 to %runtime.Type_Info_Pointer*
  %494 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %493, align 8
  store %runtime.Type_Info_Pointer %494, %runtime.Type_Info_Pointer* %488, align 8
  store i8 1, i8* %489, align 1
  br label %union_cast.end38

union_cast.end38:                                 ; preds = %union_cast.ok37, %if.else36
  %495 = getelementptr inbounds { %runtime.Type_Info_Pointer, i8 }, { %runtime.Type_Info_Pointer, i8 }* %62, i32 0, i32 1
  %496 = load i8, i8* %495, align 1
  %497 = bitcast { [15 x i64], i64 }* %485 to i8*
  %498 = icmp ne i8 %496, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %63, align 8
  call void @runtime.type_assertion_check2(i1 %498, %..string* %63, i32 1431, i32 25, i64 1369094286720630800, i64 3602879701896396839, i8* %497)
  %499 = getelementptr inbounds { %runtime.Type_Info_Pointer, i8 }, { %runtime.Type_Info_Pointer, i8 }* %62, i32 0, i32 0
  %500 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %499, align 8
  store %runtime.Type_Info_Pointer %500, %runtime.Type_Info_Pointer* %60, align 8
  %501 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %60, i32 0, i32 0
  %502 = load %runtime.Type_Info*, %runtime.Type_Info** %501, align 8
  store %runtime.Type_Info* %502, %runtime.Type_Info** %58, align 8
  %503 = load %runtime.Type_Info*, %runtime.Type_Info** %58, align 8
  %504 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %503, i32 0, i32 0
  %505 = load i64, i64* %504, align 8
  store i64 %505, i64* %64, align 8
  %506 = load %runtime.Type_Info*, %runtime.Type_Info** %58, align 8
  %507 = bitcast %runtime.Context* %100 to i8*
  %508 = call i8 @reflect.is_any(%runtime.Type_Info* %506, i8* %507)
  %509 = trunc i8 %508 to i1
  br i1 %509, label %if.then39, label %if.else40

if.then39:                                        ; preds = %union_cast.end38
  %510 = load %fmt.Info*, %fmt.Info** %5, align 8
  %511 = getelementptr inbounds %fmt.Info, %fmt.Info* %510, i32 0, i32 16
  %512 = load %io.Writer, %io.Writer* %511, align 8
  %513 = load %fmt.Info*, %fmt.Info** %5, align 8
  %514 = getelementptr inbounds %fmt.Info, %fmt.Info* %513, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2ac", i64 0, i64 0), i64 5 }, %..string* %65, align 8
  %515 = bitcast { i64, i32 }* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* %515, i8 0, i64 16, i1 false)
  %516 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %66, %io.Writer* %511, %..string* %65, i64* %514, i8* %516)
  %517 = load { i64, i32 }, { i64, i32 }* %66, align 8
  br label %if.done41

if.else40:                                        ; preds = %union_cast.end38
  %518 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %519 = load i8*, i8** %518, align 8
  %520 = ptrtoint i8* %519 to i64
  %521 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 2
  %522 = load { i64*, i64 }, { i64*, i64 }* %521, align 8
  %523 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %521, i32 0, i32 0
  %524 = load i64*, i64** %523, align 8
  %525 = load i64, i64* %37, align 8
  %526 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %521, i32 0, i32 1
  %527 = load i64, i64* %526, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %68, align 8
  call void @runtime.bounds_check_error(%..string* %68, i32 1436, i32 60, i64 %525, i64 %527)
  %528 = getelementptr i64, i64* %524, i64 %525
  %529 = load i64, i64* %528, align 8
  %530 = add i64 %520, %529
  %531 = inttoptr i64 %530 to i8**
  %532 = load i8*, i8** %531, align 8
  store i8* %532, i8** %67, align 8
  %533 = load i8*, i8** %67, align 8
  %534 = ptrtoint i8* %533 to i64
  %535 = load i64, i64* %28, align 8
  %536 = load i64, i64* %64, align 8
  %537 = mul i64 %535, %536
  %538 = add i64 %534, %537
  %539 = inttoptr i64 %538 to i8*
  store i8* %539, i8** %69, align 8
  %540 = load %fmt.Info*, %fmt.Info** %5, align 8
  %541 = bitcast %..any* %70 to i8*
  call void @llvm.memset.p0i8.i64(i8* %541, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %70, align 8
  %542 = load i8*, i8** %69, align 8
  %543 = getelementptr inbounds %..any, %..any* %70, i32 0, i32 0
  store i8* %542, i8** %543, align 8
  %544 = load %runtime.Type_Info*, %runtime.Type_Info** %58, align 8
  %545 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %544, i32 0, i32 4
  %546 = load i64, i64* %545, align 8
  %547 = getelementptr inbounds %..any, %..any* %70, i32 0, i32 1
  store i64 %546, i64* %547, align 8
  %548 = load %..any, %..any* %70, align 8
  %549 = load i32, i32* %38, align 4
  %550 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %540, %..any* %70, i32 %549, i8* %550)
  br label %if.done41

if.done41:                                        ; preds = %if.else40, %if.then39
  br label %if.done42

if.done42:                                        ; preds = %if.done41, %if.done35
  %551 = load i8, i8* %15, align 1
  %552 = trunc i8 %551 to i1
  br i1 %552, label %if.then43, label %if.done44

if.then43:                                        ; preds = %if.done42
  %553 = load %fmt.Info*, %fmt.Info** %5, align 8
  %554 = getelementptr inbounds %fmt.Info, %fmt.Info* %553, i32 0, i32 16
  %555 = load %io.Writer, %io.Writer* %554, align 8
  %556 = load %fmt.Info*, %fmt.Info** %5, align 8
  %557 = getelementptr inbounds %fmt.Info, %fmt.Info* %556, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2a5", i64 0, i64 0), i64 2 }, %..string* %71, align 8
  %558 = bitcast { i64, i32 }* %72 to i8*
  call void @llvm.memset.p0i8.i64(i8* %558, i8 0, i64 16, i1 false)
  %559 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %72, %io.Writer* %554, %..string* %71, i64* %557, i8* %559)
  %560 = load { i64, i32 }, { i64, i32 }* %72, align 8
  br label %if.done44

if.done44:                                        ; preds = %if.then43, %if.done42
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done44
  %561 = load i64, i64* %35, align 8
  %562 = add i64 %561, 1
  store i64 %562, i64* %35, align 8
  %563 = load i64, i64* %36, align 8
  %564 = add i64 %563, 1
  store i64 %564, i64* %36, align 8
  br label %for.interval.loop23

for.interval.done:                                ; preds = %for.interval.loop23
  br label %defer

defer:                                            ; preds = %for.interval.done
  %565 = load %fmt.Info*, %fmt.Info** %5, align 8
  %566 = getelementptr inbounds %fmt.Info, %fmt.Info* %565, i32 0, i32 19
  %567 = load i64, i64* %566, align 8
  %568 = sub i64 %567, 1
  store i64 %568, i64* %566, align 8
  br label %defer45

defer45:                                          ; preds = %defer
  %569 = load %fmt.Info*, %fmt.Info** %5, align 8
  %570 = getelementptr inbounds %fmt.Info, %fmt.Info* %569, i32 0, i32 16
  %571 = load %io.Writer, %io.Writer* %570, align 8
  %572 = load %fmt.Info*, %fmt.Info** %5, align 8
  %573 = getelementptr inbounds %fmt.Info, %fmt.Info* %572, i32 0, i32 23
  %574 = bitcast %runtime.Context* %100 to i8*
  %575 = call i32 @io.write_byte_to_writer(%io.Writer* %570, i8 125, i64* %573, i8* %574)
  br label %for.interval.post46

for.interval.post46:                              ; preds = %defer45
  %576 = load i64, i64* %26, align 8
  %577 = add i64 %576, 1
  store i64 %577, i64* %26, align 8
  %578 = load i64, i64* %27, align 8
  %579 = add i64 %578, 1
  store i64 %579, i64* %27, align 8
  br label %for.interval.loop

for.interval.done47:                              ; preds = %for.interval.loop
  br label %defer48

defer48:                                          ; preds = %for.interval.done47
  %580 = load %fmt.Info*, %fmt.Info** %5, align 8
  %581 = getelementptr inbounds %fmt.Info, %fmt.Info* %580, i32 0, i32 10
  %582 = load i64, i64* %581, align 8
  %583 = sub i64 %582, 1
  store i64 %583, i64* %581, align 8
  br label %if.done69

if.else49:                                        ; preds = %if.done9
  store i64 -1, i64* %73, align 8
  %584 = bitcast %..string* %74 to i8*
  call void @llvm.memset.p0i8.i64(i8* %584, i8 0, i64 16, i1 false)
  store i64 0, i64* %75, align 8
  %585 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 1
  %586 = load { %..string*, i64 }, { %..string*, i64 }* %585, align 8
  %587 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %585, i32 0, i32 1
  %588 = load i64, i64* %587, align 8
  store i64 %588, i64* %76, align 8
  store i64 -1, i64* %77, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done68, %if.then50, %if.else49
  %589 = load i64, i64* %77, align 8
  %590 = add i64 %589, 1
  store i64 %590, i64* %77, align 8
  %591 = load i64, i64* %76, align 8
  %592 = icmp slt i64 %590, %591
  br i1 %592, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %593 = load i64, i64* %77, align 8
  %594 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %585, i32 0, i32 0
  %595 = load %..string*, %..string** %594, align 8
  %596 = getelementptr %..string, %..string* %595, i64 %593
  %597 = load %..string, %..string* %596, align 8
  store %..string %597, %..string* %78, align 8
  store i64 %593, i64* %79, align 8
  store i64 -1, i64* %80, align 8
  store i8 0, i8* %81, align 1
  store i32 118, i32* %82, align 4
  %598 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %599 = load i8*, i8** %598, align 8
  %600 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, align 8
  %601 = load i64, i64* %79, align 8
  %602 = bitcast %runtime.Context* %100 to i8*
  %603 = call i8 @fmt.handle_tag-830(i8* %599, %runtime.Type_Info_Struct* %3, i64 %601, i32* %82, i64* %80, i8* %81, i8* %602)
  %604 = trunc i8 %603 to i1
  br i1 %604, label %if.then50, label %if.done51

if.then50:                                        ; preds = %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done51

if.done51:                                        ; preds = %unreachable, %for.index.body
  %605 = load i64, i64* %73, align 8
  %606 = add i64 %605, 1
  store i64 %606, i64* %73, align 8
  %607 = load i64, i64* %80, align 8
  %608 = icmp sge i64 %607, 0
  %609 = zext i1 %608 to i8
  %610 = trunc i8 %609 to i1
  br i1 %610, label %if.then52, label %if.done53

if.then52:                                        ; preds = %if.done51
  %611 = load %fmt.Info*, %fmt.Info** %5, align 8
  %612 = getelementptr inbounds %fmt.Info, %fmt.Info* %611, i32 0, i32 20
  %613 = load i64, i64* %80, align 8
  %614 = bitcast %"runtime.Maybe(int)-16164"* %83 to i8*
  call void @llvm.memset.p0i8.i64(i8* %614, i8 0, i64 16, i1 false)
  %615 = bitcast %"runtime.Maybe(int)-16164"* %83 to i64*
  store i64 %613, i64* %615, align 8
  %616 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %83, i32 0, i32 1
  store i64 1, i64* %616, align 8
  %617 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %83, align 8
  store %"runtime.Maybe(int)-16164" %617, %"runtime.Maybe(int)-16164"* %612, align 8
  br label %if.done53

if.done53:                                        ; preds = %if.then52, %if.done51
  %618 = load %fmt.Info*, %fmt.Info** %5, align 8
  %619 = getelementptr inbounds %fmt.Info, %fmt.Info* %618, i32 0, i32 21
  %620 = load i8, i8* %81, align 1
  store i8 %620, i8* %619, align 1
  %621 = load i8, i8* %17, align 1
  %622 = trunc i8 %621 to i1
  br i1 %622, label %if.done56, label %cmp.and54

cmp.and54:                                        ; preds = %if.done53
  %623 = load i64, i64* %73, align 8
  %624 = icmp sgt i64 %623, 0
  %625 = zext i1 %624 to i8
  %626 = trunc i8 %625 to i1
  br i1 %626, label %if.then55, label %if.done56

if.then55:                                        ; preds = %cmp.and54
  %627 = load %fmt.Info*, %fmt.Info** %5, align 8
  %628 = getelementptr inbounds %fmt.Info, %fmt.Info* %627, i32 0, i32 16
  %629 = load %io.Writer, %io.Writer* %628, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %84, align 8
  %630 = bitcast { i64, i32 }* %85 to i8*
  call void @llvm.memset.p0i8.i64(i8* %630, i8 0, i64 16, i1 false)
  %631 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %85, %io.Writer* %628, %..string* %84, i64* null, i8* %631)
  %632 = load { i64, i32 }, { i64, i32 }* %85, align 8
  br label %if.done56

if.done56:                                        ; preds = %if.then55, %cmp.and54, %if.done53
  %633 = load i8, i8* %15, align 1
  %634 = trunc i8 %633 to i1
  br i1 %634, label %if.then57, label %if.done58

if.then57:                                        ; preds = %if.done56
  %635 = load %fmt.Info*, %fmt.Info** %5, align 8
  %636 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %635, i8* %636)
  br label %if.done58

if.done58:                                        ; preds = %if.then57, %if.done56
  %637 = load %fmt.Info*, %fmt.Info** %5, align 8
  %638 = getelementptr inbounds %fmt.Info, %fmt.Info* %637, i32 0, i32 16
  %639 = load %io.Writer, %io.Writer* %638, align 8
  %640 = load %..string, %..string* %78, align 8
  %641 = load %fmt.Info*, %fmt.Info** %5, align 8
  %642 = getelementptr inbounds %fmt.Info, %fmt.Info* %641, i32 0, i32 23
  %643 = bitcast { i64, i32 }* %86 to i8*
  call void @llvm.memset.p0i8.i64(i8* %643, i8 0, i64 16, i1 false)
  %644 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %86, %io.Writer* %638, %..string* %78, i64* %642, i8* %644)
  %645 = load { i64, i32 }, { i64, i32 }* %86, align 8
  %646 = load %fmt.Info*, %fmt.Info** %5, align 8
  %647 = getelementptr inbounds %fmt.Info, %fmt.Info* %646, i32 0, i32 16
  %648 = load %io.Writer, %io.Writer* %647, align 8
  %649 = load %fmt.Info*, %fmt.Info** %5, align 8
  %650 = getelementptr inbounds %fmt.Info, %fmt.Info* %649, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2ab", i64 0, i64 0), i64 3 }, %..string* %87, align 8
  %651 = bitcast { i64, i32 }* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* %651, i8 0, i64 16, i1 false)
  %652 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %88, %io.Writer* %647, %..string* %87, i64* %650, i8* %652)
  %653 = load { i64, i32 }, { i64, i32 }* %88, align 8
  br label %if.init59

if.init59:                                        ; preds = %if.done58
  %654 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 0
  %655 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %654, align 8
  %656 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %654, i32 0, i32 0
  %657 = load %runtime.Type_Info**, %runtime.Type_Info*** %656, align 8
  %658 = load i64, i64* %79, align 8
  %659 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %654, i32 0, i32 1
  %660 = load i64, i64* %659, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %90, align 8
  call void @runtime.bounds_check_error(%..string* %90, i32 1473, i32 23, i64 %658, i64 %660)
  %661 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %657, i64 %658
  %662 = load %runtime.Type_Info*, %runtime.Type_Info** %661, align 8
  store %runtime.Type_Info* %662, %runtime.Type_Info** %89, align 8
  %663 = load %runtime.Type_Info*, %runtime.Type_Info** %89, align 8
  %664 = bitcast %runtime.Context* %100 to i8*
  %665 = call i8 @reflect.is_any(%runtime.Type_Info* %663, i8* %664)
  %666 = trunc i8 %665 to i1
  br i1 %666, label %if.then60, label %if.else61

if.then60:                                        ; preds = %if.init59
  %667 = load %fmt.Info*, %fmt.Info** %5, align 8
  %668 = getelementptr inbounds %fmt.Info, %fmt.Info* %667, i32 0, i32 16
  %669 = load %io.Writer, %io.Writer* %668, align 8
  %670 = load %fmt.Info*, %fmt.Info** %5, align 8
  %671 = getelementptr inbounds %fmt.Info, %fmt.Info* %670, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$2ac", i64 0, i64 0), i64 5 }, %..string* %91, align 8
  %672 = bitcast { i64, i32 }* %92 to i8*
  call void @llvm.memset.p0i8.i64(i8* %672, i8 0, i64 16, i1 false)
  %673 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %92, %io.Writer* %668, %..string* %91, i64* %671, i8* %673)
  %674 = load { i64, i32 }, { i64, i32 }* %92, align 8
  br label %if.done62

if.else61:                                        ; preds = %if.init59
  %675 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %676 = load i8*, i8** %675, align 8
  %677 = ptrtoint i8* %676 to i64
  %678 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %3, i32 0, i32 2
  %679 = load { i64*, i64 }, { i64*, i64 }* %678, align 8
  %680 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %678, i32 0, i32 0
  %681 = load i64*, i64** %680, align 8
  %682 = load i64, i64* %79, align 8
  %683 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %678, i32 0, i32 1
  %684 = load i64, i64* %683, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %94, align 8
  call void @runtime.bounds_check_error(%..string* %94, i32 1476, i32 51, i64 %682, i64 %684)
  %685 = getelementptr i64, i64* %681, i64 %682
  %686 = load i64, i64* %685, align 8
  %687 = add i64 %677, %686
  %688 = inttoptr i64 %687 to i8*
  store i8* %688, i8** %93, align 8
  %689 = load %fmt.Info*, %fmt.Info** %5, align 8
  %690 = bitcast %..any* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* %690, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %95, align 8
  %691 = load i8*, i8** %93, align 8
  %692 = getelementptr inbounds %..any, %..any* %95, i32 0, i32 0
  store i8* %691, i8** %692, align 8
  %693 = load %runtime.Type_Info*, %runtime.Type_Info** %89, align 8
  %694 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %693, i32 0, i32 4
  %695 = load i64, i64* %694, align 8
  %696 = getelementptr inbounds %..any, %..any* %95, i32 0, i32 1
  store i64 %695, i64* %696, align 8
  %697 = load %..any, %..any* %95, align 8
  %698 = load i32, i32* %82, align 4
  %699 = bitcast %runtime.Context* %100 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %689, %..any* %95, i32 %698, i8* %699)
  br label %if.done62

if.done62:                                        ; preds = %if.else61, %if.then60
  %700 = load i8, i8* %17, align 1
  %701 = trunc i8 %700 to i1
  br i1 %701, label %if.then63, label %if.done64

if.then63:                                        ; preds = %if.done62
  %702 = load %fmt.Info*, %fmt.Info** %5, align 8
  %703 = getelementptr inbounds %fmt.Info, %fmt.Info* %702, i32 0, i32 16
  %704 = load %io.Writer, %io.Writer* %703, align 8
  %705 = load %fmt.Info*, %fmt.Info** %5, align 8
  %706 = getelementptr inbounds %fmt.Info, %fmt.Info* %705, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2a5", i64 0, i64 0), i64 2 }, %..string* %96, align 8
  %707 = bitcast { i64, i32 }* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* %707, i8 0, i64 16, i1 false)
  %708 = bitcast %runtime.Context* %100 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %97, %io.Writer* %703, %..string* %96, i64* %706, i8* %708)
  %709 = load { i64, i32 }, { i64, i32 }* %97, align 8
  br label %if.done64

if.done64:                                        ; preds = %if.then63, %if.done62
  br label %defer65

defer65:                                          ; preds = %if.done64
  %710 = load %fmt.Info*, %fmt.Info** %5, align 8
  %711 = getelementptr inbounds %fmt.Info, %fmt.Info* %710, i32 0, i32 21
  store i8 0, i8* %711, align 1
  br label %defer66

defer66:                                          ; preds = %defer65
  %712 = load i64, i64* %80, align 8
  %713 = icmp sge i64 %712, 0
  %714 = zext i1 %713 to i8
  %715 = trunc i8 %714 to i1
  br i1 %715, label %if.then67, label %if.done68

if.then67:                                        ; preds = %defer66
  %716 = load %fmt.Info*, %fmt.Info** %5, align 8
  %717 = getelementptr inbounds %fmt.Info, %fmt.Info* %716, i32 0, i32 20
  store %"runtime.Maybe(int)-16164" zeroinitializer, %"runtime.Maybe(int)-16164"* %717, align 8
  br label %if.done68

if.done68:                                        ; preds = %if.then67, %defer66
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  br label %if.done69

if.done69:                                        ; preds = %for.index.done, %defer48
  br label %defer70

defer70:                                          ; preds = %if.done69
  %718 = load i8, i8* %15, align 1
  %719 = trunc i8 %718 to i1
  br i1 %719, label %if.then71, label %if.done76

if.then71:                                        ; preds = %defer70
  store i64 0, i64* %98, align 8
  store i64 0, i64* %99, align 8
  br label %for.interval.loop72

for.interval.loop72:                              ; preds = %for.interval.post74, %if.then71
  %720 = load i64, i64* %16, align 8
  %721 = load i64, i64* %98, align 8
  %722 = icmp slt i64 %721, %720
  br i1 %722, label %for.interval.body73, label %for.interval.done75

for.interval.body73:                              ; preds = %for.interval.loop72
  %723 = load i64, i64* %98, align 8
  %724 = load i64, i64* %99, align 8
  %725 = load %fmt.Info*, %fmt.Info** %5, align 8
  %726 = getelementptr inbounds %fmt.Info, %fmt.Info* %725, i32 0, i32 16
  %727 = load %io.Writer, %io.Writer* %726, align 8
  %728 = load %fmt.Info*, %fmt.Info** %5, align 8
  %729 = getelementptr inbounds %fmt.Info, %fmt.Info* %728, i32 0, i32 23
  %730 = bitcast %runtime.Context* %100 to i8*
  %731 = call i32 @io.write_byte_to_writer(%io.Writer* %726, i8 9, i64* %729, i8* %730)
  br label %for.interval.post74

for.interval.post74:                              ; preds = %for.interval.body73
  %732 = load i64, i64* %98, align 8
  %733 = add i64 %732, 1
  store i64 %733, i64* %98, align 8
  %734 = load i64, i64* %99, align 8
  %735 = add i64 %734, 1
  store i64 %735, i64* %99, align 8
  br label %for.interval.loop72

for.interval.done75:                              ; preds = %for.interval.loop72
  br label %if.done76

if.done76:                                        ; preds = %for.interval.done75, %defer70
  %736 = load %fmt.Info*, %fmt.Info** %5, align 8
  %737 = getelementptr inbounds %fmt.Info, %fmt.Info* %736, i32 0, i32 16
  %738 = load %io.Writer, %io.Writer* %737, align 8
  %739 = load i8, i8* %13, align 1
  %740 = trunc i8 %739 to i1
  br i1 %740, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.done76
  br label %if.done79

if.else78:                                        ; preds = %if.done76
  br label %if.done79

if.done79:                                        ; preds = %if.else78, %if.then77
  %741 = phi i8 [ 93, %if.then77 ], [ 125, %if.else78 ]
  %742 = load %fmt.Info*, %fmt.Info** %5, align 8
  %743 = getelementptr inbounds %fmt.Info, %fmt.Info* %742, i32 0, i32 23
  %744 = bitcast %runtime.Context* %100 to i8*
  %745 = call i32 @io.write_byte_to_writer(%io.Writer* %737, i8 %741, i64* %743, i8* %744)
  br label %defer80

defer80:                                          ; preds = %if.done79
  %746 = load %fmt.Info*, %fmt.Info** %5, align 8
  %747 = getelementptr inbounds %fmt.Info, %fmt.Info* %746, i32 0, i32 10
  %748 = load i64, i64* %747, align 8
  %749 = sub i64 %748, 1
  store i64 %749, i64* %747, align 8
  br label %defer81

defer81:                                          ; preds = %defer80
  %750 = load %fmt.Info*, %fmt.Info** %5, align 8
  %751 = getelementptr inbounds %fmt.Info, %fmt.Info* %750, i32 0, i32 4
  %752 = load i8, i8* %15, align 1
  store i8 %752, i8* %751, align 1
  br label %defer82

defer82:                                          ; preds = %defer81
  %753 = load %fmt.Info*, %fmt.Info** %5, align 8
  %754 = getelementptr inbounds %fmt.Info, %fmt.Info* %753, i32 0, i32 19
  %755 = load i64, i64* %754, align 8
  %756 = sub i64 %755, 1
  store i64 %756, i64* %754, align 8
  ret void
}

define internal i64 @fmt.search_nul_termination-832(i8* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  store i64 0, i64* %6, align 8
  %8 = bitcast i8* %__.context_ptr to %runtime.Context*
  br label %for.init

for.init:                                         ; preds = %entry
  %9 = load i8*, i8** %3, align 8
  %10 = ptrtoint i8* %9 to i64
  store i64 %10, i64* %7, align 8
  br label %for.loop

for.loop:                                         ; preds = %for.post, %for.init
  %11 = load i64, i64* %5, align 8
  %12 = icmp slt i64 %11, 0
  %13 = zext i1 %12 to i8
  %14 = trunc i8 %13 to i1
  br i1 %14, label %for.body, label %cmp.or

cmp.or:                                           ; preds = %for.loop
  %15 = load i64, i64* %6, align 8
  %16 = load i64, i64* %5, align 8
  %17 = icmp slt i64 %15, %16
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %for.body, label %for.done

for.body:                                         ; preds = %cmp.or, %for.loop
  %20 = load i64, i64* %7, align 8
  %21 = inttoptr i64 %20 to i8*
  %22 = load i64, i64* %4, align 8
  %23 = bitcast %runtime.Context* %8 to i8*
  %24 = call i8 @mem.check_zero_ptr(i8* %21, i64 %22, i8* %23)
  %25 = trunc i8 %24 to i1
  br i1 %25, label %if.then, label %if.done

if.then:                                          ; preds = %for.body
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done

if.done:                                          ; preds = %unreachable, %for.body
  %26 = load i64, i64* %6, align 8
  %27 = add i64 %26, 1
  store i64 %27, i64* %6, align 8
  br label %for.post

for.post:                                         ; preds = %if.done
  %28 = load i64, i64* %4, align 8
  %29 = load i64, i64* %7, align 8
  %30 = add i64 %29, %28
  store i64 %30, i64* %7, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then, %cmp.or
  %31 = load i64, i64* %6, align 8
  store i64 %31, i64* %6, align 8
  ret i64 %31
}

define internal void @fmt.fmt_array_nul_terminated(%fmt.Info* %0, i8* %1, i64 %2, i64 %3, %runtime.Type_Info* %4, i32 %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %fmt.Info*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %runtime.Type_Info*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %..string, align 8
  %13 = alloca { i64, i32 }, align 8
  %14 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store %runtime.Type_Info* %4, %runtime.Type_Info** %10, align 8
  store i32 %5, i32* %11, align 4
  %15 = bitcast i8* %__.context_ptr to %runtime.Context*
  %16 = load i8*, i8** %7, align 8
  %17 = icmp eq i8* %16, null
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %20 = load %fmt.Info*, %fmt.Info** %6, align 8
  %21 = getelementptr inbounds %fmt.Info, %fmt.Info* %20, i32 0, i32 16
  %22 = load %io.Writer, %io.Writer* %21, align 8
  %23 = load %fmt.Info*, %fmt.Info** %6, align 8
  %24 = getelementptr inbounds %fmt.Info, %fmt.Info* %23, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %12, align 8
  %25 = bitcast { i64, i32 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 16, i1 false)
  %26 = bitcast %runtime.Context* %15 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %13, %io.Writer* %21, %..string* %12, i64* %24, i8* %26)
  %27 = load { i64, i32 }, { i64, i32 }* %13, align 8
  ret void

if.done:                                          ; preds = %entry
  %28 = load i8*, i8** %7, align 8
  %29 = load i64, i64* %9, align 8
  %30 = load i64, i64* %8, align 8
  %31 = bitcast %runtime.Context* %15 to i8*
  %32 = call i64 @fmt.search_nul_termination-832(i8* %28, i64 %29, i64 %30, i8* %31)
  store i64 %32, i64* %14, align 8
  %33 = load %fmt.Info*, %fmt.Info** %6, align 8
  %34 = load i8*, i8** %7, align 8
  %35 = load i64, i64* %14, align 8
  %36 = load i64, i64* %9, align 8
  %37 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %38 = load i32, i32* %11, align 4
  %39 = bitcast %runtime.Context* %15 to i8*
  call void @fmt.fmt_array(%fmt.Info* %33, i8* %34, i64 %35, i64 %36, %runtime.Type_Info* %37, i32 %38, i8* %39)
  ret void
}

define internal void @fmt.fmt_array(%fmt.Info* %0, i8* %1, i64 %2, i64 %3, %runtime.Type_Info* %4, i32 %5, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %6 = alloca %fmt.Info*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca %runtime.Type_Info*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %..string, align 8
  %13 = alloca { i64, i32 }, align 8
  %14 = alloca %runtime.Type_Info*, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca %..string, align 8
  %17 = alloca i16*, align 8
  %18 = alloca { i16*, i64 }, align 8
  %19 = alloca %..string, align 8
  %20 = alloca i16*, align 8
  %21 = alloca { i16*, i64 }, align 8
  %22 = alloca %..string, align 8
  %23 = alloca i16*, align 8
  %24 = alloca { i16*, i64 }, align 8
  %25 = alloca %..string, align 8
  %26 = alloca i32*, align 8
  %27 = alloca { i32*, i64 }, align 8
  %28 = alloca %..string, align 8
  %29 = alloca i32*, align 8
  %30 = alloca { i32*, i64 }, align 8
  %31 = alloca %..string, align 8
  %32 = alloca i32*, align 8
  %33 = alloca { i32*, i64 }, align 8
  %34 = alloca %..string, align 8
  %35 = alloca i32*, align 8
  %36 = alloca { i32*, i64 }, align 8
  %37 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %6, align 8
  store i8* %1, i8** %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store %runtime.Type_Info* %4, %runtime.Type_Info** %10, align 8
  store i32 %5, i32* %11, align 4
  %38 = bitcast i8* %__.context_ptr to %runtime.Context*
  %39 = load i8*, i8** %7, align 8
  %40 = icmp eq i8* %39, null
  %41 = zext i1 %40 to i8
  %42 = trunc i8 %41 to i1
  br i1 %42, label %cmp.and, label %if.done

cmp.and:                                          ; preds = %entry
  %43 = load i64, i64* %8, align 8
  %44 = icmp sgt i64 %43, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %47 = load %fmt.Info*, %fmt.Info** %6, align 8
  %48 = getelementptr inbounds %fmt.Info, %fmt.Info* %47, i32 0, i32 16
  %49 = load %io.Writer, %io.Writer* %48, align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %12, align 8
  %50 = bitcast { i64, i32 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %50, i8 0, i64 16, i1 false)
  %51 = bitcast %runtime.Context* %38 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %13, %io.Writer* %48, %..string* %12, i64* null, i8* %51)
  %52 = load { i64, i32 }, { i64, i32 }* %13, align 8
  ret void

if.done:                                          ; preds = %cmp.and, %entry
  %53 = load i32, i32* %11, align 4
  %54 = icmp eq i32 %53, 115
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %if.done
  %57 = load i32, i32* %11, align 4
  %58 = icmp eq i32 %57, 113
  %59 = zext i1 %58 to i8
  %60 = trunc i8 %59 to i1
  br i1 %60, label %if.then1, label %if.done9

if.then1:                                         ; preds = %cmp.or, %if.done
  %61 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %62 = bitcast %runtime.Context* %38 to i8*
  %63 = call %runtime.Type_Info* @reflect.type_info_base(%runtime.Type_Info* %61, i8* %62)
  store %runtime.Type_Info* %63, %runtime.Type_Info** %14, align 8
  %64 = load %runtime.Type_Info*, %runtime.Type_Info** %14, align 8
  %65 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %64, i32 0, i32 4
  %66 = load i64, i64* %65, align 8
  switch i64 %66, label %switch.done [
    i64 72057594037927939, label %switch.case.body
    i64 72057594037928040, label %switch.case.body2
    i64 72057594037928043, label %switch.case.body3
    i64 72057594037928051, label %switch.case.body4
    i64 72057594037927951, label %switch.case.body5
    i64 72057594037928044, label %switch.case.body6
    i64 72057594037928052, label %switch.case.body7
    i64 4755801206503243899, label %switch.case.body8
  ]

switch.case.body:                                 ; preds = %if.then1
  %67 = load %fmt.Info*, %fmt.Info** %6, align 8
  %68 = load i64, i64* %8, align 8
  %69 = load i8*, i8** %7, align 8
  %70 = load i8*, i8** %7, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %16, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %16, i32 1543, i32 52, i64 0, i64 %68)
  %71 = getelementptr i8, i8* %70, i64 0
  %72 = sub i64 %68, 0
  %73 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %74 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  store i8* %71, i8** %73, align 8
  store i64 %72, i64* %74, align 8
  %75 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %76 = bitcast { i8*, i64 }* %15 to %..string*
  %77 = load %..string, %..string* %76, align 8
  %78 = load i32, i32* %11, align 4
  %79 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_string(%fmt.Info* %67, %..string* %76, i32 %78, i8* %79)
  ret void

switch.case.body2:                                ; preds = %if.then1
  %80 = load %fmt.Info*, %fmt.Info** %6, align 8
  %81 = load i64, i64* %8, align 8
  %82 = load i8*, i8** %7, align 8
  %83 = bitcast i8* %82 to i16*
  store i16* %83, i16** %17, align 8
  %84 = load i16*, i16** %17, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %19, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %19, i32 1544, i32 45, i64 0, i64 %81)
  %85 = getelementptr i16, i16* %84, i64 0
  %86 = sub i64 %81, 0
  %87 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %18, i32 0, i32 0
  %88 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %18, i32 0, i32 1
  store i16* %85, i16** %87, align 8
  store i64 %86, i64* %88, align 8
  %89 = load { i16*, i64 }, { i16*, i64 }* %18, align 8
  %90 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf16-0(%fmt.Info* %80, { i16*, i64 }* %18, i8* %90)
  ret void

switch.case.body3:                                ; preds = %if.then1
  %91 = load %fmt.Info*, %fmt.Info** %6, align 8
  %92 = load i64, i64* %8, align 8
  %93 = load i8*, i8** %7, align 8
  %94 = bitcast i8* %93 to i16*
  store i16* %94, i16** %20, align 8
  %95 = load i16*, i16** %20, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %22, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %22, i32 1545, i32 47, i64 0, i64 %92)
  %96 = getelementptr i16, i16* %95, i64 0
  %97 = sub i64 %92, 0
  %98 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %21, i32 0, i32 0
  %99 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %21, i32 0, i32 1
  store i16* %96, i16** %98, align 8
  store i64 %97, i64* %99, align 8
  %100 = load { i16*, i64 }, { i16*, i64 }* %21, align 8
  %101 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf16-1(%fmt.Info* %91, { i16*, i64 }* %21, i8* %101)
  ret void

switch.case.body4:                                ; preds = %if.then1
  %102 = load %fmt.Info*, %fmt.Info** %6, align 8
  %103 = load i64, i64* %8, align 8
  %104 = load i8*, i8** %7, align 8
  %105 = bitcast i8* %104 to i16*
  store i16* %105, i16** %23, align 8
  %106 = load i16*, i16** %23, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %25, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %25, i32 1546, i32 47, i64 0, i64 %103)
  %107 = getelementptr i16, i16* %106, i64 0
  %108 = sub i64 %103, 0
  %109 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %24, i32 0, i32 0
  %110 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %24, i32 0, i32 1
  store i16* %107, i16** %109, align 8
  store i64 %108, i64* %110, align 8
  %111 = load { i16*, i64 }, { i16*, i64 }* %24, align 8
  %112 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf16-2(%fmt.Info* %102, { i16*, i64 }* %24, i8* %112)
  ret void

switch.case.body5:                                ; preds = %if.then1
  %113 = load %fmt.Info*, %fmt.Info** %6, align 8
  %114 = load i64, i64* %8, align 8
  %115 = load i8*, i8** %7, align 8
  %116 = bitcast i8* %115 to i32*
  store i32* %116, i32** %26, align 8
  %117 = load i32*, i32** %26, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %28, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %28, i32 1547, i32 45, i64 0, i64 %114)
  %118 = getelementptr i32, i32* %117, i64 0
  %119 = sub i64 %114, 0
  %120 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %27, i32 0, i32 0
  %121 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %27, i32 0, i32 1
  store i32* %118, i32** %120, align 8
  store i64 %119, i64* %121, align 8
  %122 = load { i32*, i64 }, { i32*, i64 }* %27, align 8
  %123 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf32-3(%fmt.Info* %113, { i32*, i64 }* %27, i8* %123)
  ret void

switch.case.body6:                                ; preds = %if.then1
  %124 = load %fmt.Info*, %fmt.Info** %6, align 8
  %125 = load i64, i64* %8, align 8
  %126 = load i8*, i8** %7, align 8
  %127 = bitcast i8* %126 to i32*
  store i32* %127, i32** %29, align 8
  %128 = load i32*, i32** %29, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %31, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %31, i32 1548, i32 47, i64 0, i64 %125)
  %129 = getelementptr i32, i32* %128, i64 0
  %130 = sub i64 %125, 0
  %131 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %30, i32 0, i32 0
  %132 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %30, i32 0, i32 1
  store i32* %129, i32** %131, align 8
  store i64 %130, i64* %132, align 8
  %133 = load { i32*, i64 }, { i32*, i64 }* %30, align 8
  %134 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf32-4(%fmt.Info* %124, { i32*, i64 }* %30, i8* %134)
  ret void

switch.case.body7:                                ; preds = %if.then1
  %135 = load %fmt.Info*, %fmt.Info** %6, align 8
  %136 = load i64, i64* %8, align 8
  %137 = load i8*, i8** %7, align 8
  %138 = bitcast i8* %137 to i32*
  store i32* %138, i32** %32, align 8
  %139 = load i32*, i32** %32, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %34, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %34, i32 1549, i32 47, i64 0, i64 %136)
  %140 = getelementptr i32, i32* %139, i64 0
  %141 = sub i64 %136, 0
  %142 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %33, i32 0, i32 0
  %143 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %33, i32 0, i32 1
  store i32* %140, i32** %142, align 8
  store i64 %141, i64* %143, align 8
  %144 = load { i32*, i64 }, { i32*, i64 }* %33, align 8
  %145 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf32-5(%fmt.Info* %135, { i32*, i64 }* %33, i8* %145)
  ret void

switch.case.body8:                                ; preds = %if.then1
  %146 = load %fmt.Info*, %fmt.Info** %6, align 8
  %147 = load i64, i64* %8, align 8
  %148 = load i8*, i8** %7, align 8
  %149 = bitcast i8* %148 to i32*
  store i32* %149, i32** %35, align 8
  %150 = load i32*, i32** %35, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %37, align 8
  call void @runtime.multi_pointer_slice_expr_error(%..string* %37, i32 1550, i32 46, i64 0, i64 %147)
  %151 = getelementptr i32, i32* %150, i64 0
  %152 = sub i64 %147, 0
  %153 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %36, i32 0, i32 0
  %154 = getelementptr inbounds { i32*, i64 }, { i32*, i64 }* %36, i32 0, i32 1
  store i32* %151, i32** %153, align 8
  store i64 %152, i64* %154, align 8
  %155 = load { i32*, i64 }, { i32*, i64 }* %36, align 8
  %156 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_array.print_utf32-6(%fmt.Info* %146, { i32*, i64 }* %36, i8* %156)
  ret void

switch.done:                                      ; preds = %if.then1
  br label %if.done9

if.done9:                                         ; preds = %switch.done, %cmp.or
  %157 = load i32, i32* %11, align 4
  %158 = icmp eq i32 %157, 112
  %159 = zext i1 %158 to i8
  %160 = trunc i8 %159 to i1
  br i1 %160, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.done9
  %161 = load %fmt.Info*, %fmt.Info** %6, align 8
  %162 = load i8*, i8** %7, align 8
  %163 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_pointer(%fmt.Info* %161, i8* %162, i32 112, i8* %163)
  br label %if.done11

if.else:                                          ; preds = %if.done9
  %164 = load %fmt.Info*, %fmt.Info** %6, align 8
  %165 = load i8*, i8** %7, align 8
  %166 = load i64, i64* %8, align 8
  %167 = load i64, i64* %9, align 8
  %168 = load %runtime.Type_Info*, %runtime.Type_Info** %10, align 8
  %169 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %168, i32 0, i32 4
  %170 = load i64, i64* %169, align 8
  %171 = load i32, i32* %11, align 4
  %172 = bitcast %runtime.Context* %38 to i8*
  call void @fmt.fmt_write_array(%fmt.Info* %164, i8* %165, i64 %166, i64 %167, i64 %170, i32 %171, i8* %172)
  br label %if.done11

if.done11:                                        ; preds = %if.else, %if.then10
  ret void
}

define internal void @fmt.fmt_named(%fmt.Info* %0, %..any* %1, i32 %2, %runtime.Type_Info_Named* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %fmt.Info*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca { i64, i32 }, align 8
  %8 = alloca { i64, i32 }, align 8
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca [32 x i8], align 1
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca i64, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { i64, i32 }, align 8
  %19 = alloca %..string, align 8
  %20 = alloca %..string, align 8
  %21 = alloca { i8*, i64 }, align 8
  %22 = alloca %..string, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca { i8*, i64 }, align 8
  %26 = alloca { i64, i64 }, align 8
  %27 = alloca %..string, align 8
  %28 = alloca { i8*, i64 }, align 8
  %29 = alloca %..string, align 8
  %30 = alloca %..string, align 8
  %31 = alloca { i8*, i64 }, align 8
  %32 = alloca { i64, i64 }, align 8
  %33 = alloca %..string, align 8
  %34 = alloca { i8*, i64 }, align 8
  %35 = alloca %..string, align 8
  %36 = alloca %..string, align 8
  %37 = alloca { i8*, i64 }, align 8
  %38 = alloca %..string, align 8
  %39 = alloca %..string, align 8
  %40 = alloca { i8*, i64 }, align 8
  %41 = alloca %..string, align 8
  %42 = alloca %..string, align 8
  %43 = alloca { i8*, i64 }, align 8
  %44 = alloca { i64, i32 }, align 8
  %45 = alloca %time.Time, align 8
  %46 = alloca %time.Time, align 8
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca { i64, i64, i64 }, align 8
  %51 = alloca i64, align 8
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca { i64, i64, i64 }, align 8
  %55 = alloca i64, align 8
  %56 = alloca %..string, align 8
  %57 = alloca { i64, i32 }, align 8
  %58 = alloca %runtime.Type_Info_Struct, align 8
  %59 = alloca %runtime.Type_Info_Bit_Set, align 8
  %60 = alloca %..string, align 8
  %61 = alloca { [15 x i64], i64 }, align 8
  %62 = alloca %..any, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %4, align 8
  store i32 %2, i32* %5, align 4
  %63 = bitcast i8* %__.context_ptr to %runtime.Context*
  %64 = load %..any, %..any* %1, align 8
  %65 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  switch i64 %66, label %typeswitch.done [
    i64 3602879701896396820, label %typeswitch.body
    i64 6989586621679009938, label %typeswitch.body1
    i64 3602879701896396947, label %typeswitch.body14
  ]

typeswitch.body:                                  ; preds = %entry
  %67 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = bitcast i8* %68 to %runtime.Source_Code_Location*
  %70 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %69, align 8
  store %runtime.Source_Code_Location %70, %runtime.Source_Code_Location* %6, align 8
  %71 = load %fmt.Info*, %fmt.Info** %4, align 8
  %72 = getelementptr inbounds %fmt.Info, %fmt.Info* %71, i32 0, i32 16
  %73 = load %io.Writer, %io.Writer* %72, align 8
  %74 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i32 0, i32 0
  %75 = load %..string, %..string* %74, align 8
  %76 = load %fmt.Info*, %fmt.Info** %4, align 8
  %77 = getelementptr inbounds %fmt.Info, %fmt.Info* %76, i32 0, i32 23
  %78 = bitcast { i64, i32 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %78, i8 0, i64 16, i1 false)
  %79 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %7, %io.Writer* %72, %..string* %74, i64* %77, i8* %79)
  %80 = load { i64, i32 }, { i64, i32 }* %7, align 8
  %81 = load %fmt.Info*, %fmt.Info** %4, align 8
  %82 = getelementptr inbounds %fmt.Info, %fmt.Info* %81, i32 0, i32 16
  %83 = load %io.Writer, %io.Writer* %82, align 8
  %84 = load %fmt.Info*, %fmt.Info** %4, align 8
  %85 = getelementptr inbounds %fmt.Info, %fmt.Info* %84, i32 0, i32 23
  %86 = bitcast %runtime.Context* %63 to i8*
  %87 = call i32 @io.write_byte_to_writer(%io.Writer* %82, i8 40, i64* %85, i8* %86)
  %88 = load %fmt.Info*, %fmt.Info** %4, align 8
  %89 = getelementptr inbounds %fmt.Info, %fmt.Info* %88, i32 0, i32 16
  %90 = load %io.Writer, %io.Writer* %89, align 8
  %91 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = sext i32 %92 to i64
  %94 = load %fmt.Info*, %fmt.Info** %4, align 8
  %95 = getelementptr inbounds %fmt.Info, %fmt.Info* %94, i32 0, i32 23
  %96 = bitcast { i64, i32 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 16, i1 false)
  %97 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_int({ i64, i32 }* sret({ i64, i32 }*) %8, %io.Writer* %89, i64 %93, i64 10, i64* %95, i8* %97)
  %98 = load { i64, i32 }, { i64, i32 }* %8, align 8
  %99 = load %fmt.Info*, %fmt.Info** %4, align 8
  %100 = getelementptr inbounds %fmt.Info, %fmt.Info* %99, i32 0, i32 16
  %101 = load %io.Writer, %io.Writer* %100, align 8
  %102 = load %fmt.Info*, %fmt.Info** %4, align 8
  %103 = getelementptr inbounds %fmt.Info, %fmt.Info* %102, i32 0, i32 23
  %104 = bitcast %runtime.Context* %63 to i8*
  %105 = call i32 @io.write_byte_to_writer(%io.Writer* %100, i8 58, i64* %103, i8* %104)
  %106 = load %fmt.Info*, %fmt.Info** %4, align 8
  %107 = getelementptr inbounds %fmt.Info, %fmt.Info* %106, i32 0, i32 16
  %108 = load %io.Writer, %io.Writer* %107, align 8
  %109 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %6, i32 0, i32 2
  %110 = load i32, i32* %109, align 4
  %111 = sext i32 %110 to i64
  %112 = load %fmt.Info*, %fmt.Info** %4, align 8
  %113 = getelementptr inbounds %fmt.Info, %fmt.Info* %112, i32 0, i32 23
  %114 = bitcast { i64, i32 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %114, i8 0, i64 16, i1 false)
  %115 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_int({ i64, i32 }* sret({ i64, i32 }*) %9, %io.Writer* %107, i64 %111, i64 10, i64* %113, i8* %115)
  %116 = load { i64, i32 }, { i64, i32 }* %9, align 8
  %117 = load %fmt.Info*, %fmt.Info** %4, align 8
  %118 = getelementptr inbounds %fmt.Info, %fmt.Info* %117, i32 0, i32 16
  %119 = load %io.Writer, %io.Writer* %118, align 8
  %120 = load %fmt.Info*, %fmt.Info** %4, align 8
  %121 = getelementptr inbounds %fmt.Info, %fmt.Info* %120, i32 0, i32 23
  %122 = bitcast %runtime.Context* %63 to i8*
  %123 = call i32 @io.write_byte_to_writer(%io.Writer* %118, i8 41, i64* %121, i8* %122)
  ret void

typeswitch.body1:                                 ; preds = %entry
  %124 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = bitcast i8* %125 to i64*
  %127 = load i64, i64* %126, align 8
  store i64 %127, i64* %10, align 8
  %128 = bitcast [32 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %128, i8 0, i64 32, i1 false)
  store i64 32, i64* %12, align 8
  %129 = load i64, i64* %10, align 8
  store i64 %129, i64* %13, align 8
  %130 = load i64, i64* %10, align 8
  %131 = icmp slt i64 %130, 0
  %132 = zext i1 %131 to i8
  store i8 %132, i8* %14, align 1
  %133 = load i8, i8* %14, align 1
  %134 = trunc i8 %133 to i1
  br i1 %134, label %if.then, label %if.done

if.then:                                          ; preds = %typeswitch.body1
  %135 = load i64, i64* %13, align 8
  %136 = sub i64 0, %135
  store i64 %136, i64* %13, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %typeswitch.body1
  %137 = load i64, i64* %13, align 8
  %138 = icmp ult i64 %137, 1000000000
  %139 = zext i1 %138 to i8
  %140 = trunc i8 %139 to i1
  br i1 %140, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.done
  store i64 0, i64* %15, align 8
  %141 = load i64, i64* %12, align 8
  %142 = sub i64 %141, 1
  store i64 %142, i64* %12, align 8
  %143 = load i64, i64* %12, align 8
  %144 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %143
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %16, align 8
  call void @runtime.bounds_check_error(%..string* %16, i32 1630, i32 8, i64 %143, i64 32)
  store i8 115, i8* %144, align 1
  %145 = load i64, i64* %12, align 8
  %146 = sub i64 %145, 1
  store i64 %146, i64* %12, align 8
  %147 = load i64, i64* %13, align 8
  %148 = icmp eq i64 %147, 0
  %149 = zext i1 %148 to i8
  %150 = icmp eq i8 1, %149
  br i1 %150, label %switch.case.body, label %switch.case.next

switch.case.next:                                 ; preds = %if.then2
  %151 = load i64, i64* %13, align 8
  %152 = icmp ult i64 %151, 1000
  %153 = zext i1 %152 to i8
  %154 = icmp eq i8 1, %153
  br i1 %154, label %switch.case.body4, label %switch.case.next3

switch.case.body:                                 ; preds = %if.then2
  %155 = load %fmt.Info*, %fmt.Info** %4, align 8
  %156 = getelementptr inbounds %fmt.Info, %fmt.Info* %155, i32 0, i32 16
  %157 = load %io.Writer, %io.Writer* %156, align 8
  %158 = load %fmt.Info*, %fmt.Info** %4, align 8
  %159 = getelementptr inbounds %fmt.Info, %fmt.Info* %158, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ad", i64 0, i64 0), i64 2 }, %..string* %17, align 8
  %160 = bitcast { i64, i32 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %160, i8 0, i64 16, i1 false)
  %161 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %18, %io.Writer* %156, %..string* %17, i64* %159, i8* %161)
  %162 = load { i64, i32 }, { i64, i32 }* %18, align 8
  ret void

switch.case.next3:                                ; preds = %switch.case.next
  %163 = load i64, i64* %13, align 8
  %164 = icmp ult i64 %163, 1000000
  %165 = zext i1 %164 to i8
  %166 = icmp eq i8 1, %165
  br i1 %166, label %switch.case.body6, label %switch.case.next5

switch.case.body4:                                ; preds = %switch.case.next
  store i64 0, i64* %15, align 8
  %167 = load i64, i64* %12, align 8
  %168 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %167
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %19, align 8
  call void @runtime.bounds_check_error(%..string* %19, i32 1638, i32 9, i64 %167, i64 32)
  store i8 110, i8* %168, align 1
  br label %switch.done

switch.case.next5:                                ; preds = %switch.case.next3
  br label %switch.default.body

switch.case.body6:                                ; preds = %switch.case.next3
  store i64 3, i64* %15, align 8
  %169 = load i64, i64* %12, align 8
  %170 = sub i64 %169, 1
  store i64 %170, i64* %12, align 8
  %171 = load i64, i64* %12, align 8
  %172 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %20, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %20, i32 1643, i32 13, i64 %171, i64 32, i64 32)
  %173 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %174 = getelementptr i8, i8* %173, i64 %171
  %175 = sub i64 32, %171
  %176 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 0
  store i8* %174, i8** %176, align 8
  %177 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %21, i32 0, i32 1
  store i64 %175, i64* %177, align 8
  %178 = load { i8*, i64 }, { i8*, i64 }* %21, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2ae", i64 0, i64 0), i64 2 }, %..string* %22, align 8
  %179 = call i64 @runtime.copy_from_string-49546({ i8*, i64 }* %21, %..string* %22)
  br label %switch.done

switch.default.body:                              ; preds = %switch.case.next5
  store i64 6, i64* %15, align 8
  %180 = load i64, i64* %12, align 8
  %181 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %180
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %23, align 8
  call void @runtime.bounds_check_error(%..string* %23, i32 1646, i32 9, i64 %180, i64 32)
  store i8 109, i8* %181, align 1
  br label %switch.done

switch.done:                                      ; preds = %switch.default.body, %switch.case.body6, %switch.case.body4
  %182 = load i64, i64* %12, align 8
  %183 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %24, align 8
  call void @runtime.slice_expr_error_hi(%..string* %24, i32 1648, i32 20, i64 %182, i64 32)
  %184 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %185 = getelementptr i8, i8* %184, i64 0
  %186 = sub i64 %182, 0
  %187 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  store i8* %185, i8** %187, align 8
  %188 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  store i64 %186, i64* %188, align 8
  %189 = load { i8*, i64 }, { i8*, i64 }* %25, align 8
  %190 = load i64, i64* %13, align 8
  %191 = load i64, i64* %15, align 8
  %192 = bitcast { i64, i64 }* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %192, i8 0, i64 16, i1 false)
  %193 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.ffrac-1({ i64, i64 }* sret({ i64, i64 }*) %26, { i8*, i64 }* %25, i64 %190, i64 %191, i8* %193)
  %194 = load { i64, i64 }, { i64, i64 }* %26, align 8
  %195 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 0
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %26, i32 0, i32 1
  %198 = load i64, i64* %197, align 8
  store i64 %196, i64* %12, align 8
  store i64 %198, i64* %13, align 8
  %199 = load i64, i64* %12, align 8
  %200 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %27, align 8
  call void @runtime.slice_expr_error_hi(%..string* %27, i32 1649, i32 16, i64 %199, i64 32)
  %201 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %202 = getelementptr i8, i8* %201, i64 0
  %203 = sub i64 %199, 0
  %204 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 0
  store i8* %202, i8** %204, align 8
  %205 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %28, i32 0, i32 1
  store i64 %203, i64* %205, align 8
  %206 = load { i8*, i64 }, { i8*, i64 }* %28, align 8
  %207 = load i64, i64* %13, align 8
  %208 = bitcast %runtime.Context* %63 to i8*
  %209 = call i64 @fmt.fmt_named.fint-2({ i8*, i64 }* %28, i64 %207, i8* %208)
  store i64 %209, i64* %12, align 8
  br label %if.done11

if.else:                                          ; preds = %if.done
  %210 = load i64, i64* %12, align 8
  %211 = sub i64 %210, 1
  store i64 %211, i64* %12, align 8
  %212 = load i64, i64* %12, align 8
  %213 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %212
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %29, align 8
  call void @runtime.bounds_check_error(%..string* %29, i32 1652, i32 8, i64 %212, i64 32)
  store i8 115, i8* %213, align 1
  %214 = load i64, i64* %12, align 8
  %215 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %30, align 8
  call void @runtime.slice_expr_error_hi(%..string* %30, i32 1653, i32 20, i64 %214, i64 32)
  %216 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %217 = getelementptr i8, i8* %216, i64 0
  %218 = sub i64 %214, 0
  %219 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 0
  store i8* %217, i8** %219, align 8
  %220 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %31, i32 0, i32 1
  store i64 %218, i64* %220, align 8
  %221 = load { i8*, i64 }, { i8*, i64 }* %31, align 8
  %222 = load i64, i64* %13, align 8
  %223 = bitcast { i64, i64 }* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %223, i8 0, i64 16, i1 false)
  %224 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.ffrac-1({ i64, i64 }* sret({ i64, i64 }*) %32, { i8*, i64 }* %31, i64 %222, i64 9, i8* %224)
  %225 = load { i64, i64 }, { i64, i64 }* %32, align 8
  %226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 0
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %32, i32 0, i32 1
  %229 = load i64, i64* %228, align 8
  store i64 %227, i64* %12, align 8
  store i64 %229, i64* %13, align 8
  %230 = load i64, i64* %12, align 8
  %231 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %33, align 8
  call void @runtime.slice_expr_error_hi(%..string* %33, i32 1654, i32 16, i64 %230, i64 32)
  %232 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %233 = getelementptr i8, i8* %232, i64 0
  %234 = sub i64 %230, 0
  %235 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 0
  store i8* %233, i8** %235, align 8
  %236 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %34, i32 0, i32 1
  store i64 %234, i64* %236, align 8
  %237 = load { i8*, i64 }, { i8*, i64 }* %34, align 8
  %238 = load i64, i64* %13, align 8
  %239 = urem i64 %238, 60
  %240 = bitcast %runtime.Context* %63 to i8*
  %241 = call i64 @fmt.fmt_named.fint-2({ i8*, i64 }* %34, i64 %239, i8* %240)
  store i64 %241, i64* %12, align 8
  %242 = load i64, i64* %13, align 8
  %243 = udiv i64 %242, 60
  store i64 %243, i64* %13, align 8
  %244 = load i64, i64* %13, align 8
  %245 = icmp ugt i64 %244, 0
  %246 = zext i1 %245 to i8
  %247 = trunc i8 %246 to i1
  br i1 %247, label %if.then7, label %if.done10

if.then7:                                         ; preds = %if.else
  %248 = load i64, i64* %12, align 8
  %249 = sub i64 %248, 1
  store i64 %249, i64* %12, align 8
  %250 = load i64, i64* %12, align 8
  %251 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %250
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %35, align 8
  call void @runtime.bounds_check_error(%..string* %35, i32 1658, i32 9, i64 %250, i64 32)
  store i8 109, i8* %251, align 1
  %252 = load i64, i64* %12, align 8
  %253 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %36, align 8
  call void @runtime.slice_expr_error_hi(%..string* %36, i32 1659, i32 17, i64 %252, i64 32)
  %254 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %255 = getelementptr i8, i8* %254, i64 0
  %256 = sub i64 %252, 0
  %257 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 0
  store i8* %255, i8** %257, align 8
  %258 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %37, i32 0, i32 1
  store i64 %256, i64* %258, align 8
  %259 = load { i8*, i64 }, { i8*, i64 }* %37, align 8
  %260 = load i64, i64* %13, align 8
  %261 = urem i64 %260, 60
  %262 = bitcast %runtime.Context* %63 to i8*
  %263 = call i64 @fmt.fmt_named.fint-2({ i8*, i64 }* %37, i64 %261, i8* %262)
  store i64 %263, i64* %12, align 8
  %264 = load i64, i64* %13, align 8
  %265 = udiv i64 %264, 60
  store i64 %265, i64* %13, align 8
  %266 = load i64, i64* %13, align 8
  %267 = icmp ugt i64 %266, 0
  %268 = zext i1 %267 to i8
  %269 = trunc i8 %268 to i1
  br i1 %269, label %if.then8, label %if.done9

if.then8:                                         ; preds = %if.then7
  %270 = load i64, i64* %12, align 8
  %271 = sub i64 %270, 1
  store i64 %271, i64* %12, align 8
  %272 = load i64, i64* %12, align 8
  %273 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %272
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %38, align 8
  call void @runtime.bounds_check_error(%..string* %38, i32 1663, i32 10, i64 %272, i64 32)
  store i8 104, i8* %273, align 1
  %274 = load i64, i64* %12, align 8
  %275 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %39, align 8
  call void @runtime.slice_expr_error_hi(%..string* %39, i32 1664, i32 18, i64 %274, i64 32)
  %276 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %277 = getelementptr i8, i8* %276, i64 0
  %278 = sub i64 %274, 0
  %279 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 0
  store i8* %277, i8** %279, align 8
  %280 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %40, i32 0, i32 1
  store i64 %278, i64* %280, align 8
  %281 = load { i8*, i64 }, { i8*, i64 }* %40, align 8
  %282 = load i64, i64* %13, align 8
  %283 = bitcast %runtime.Context* %63 to i8*
  %284 = call i64 @fmt.fmt_named.fint-2({ i8*, i64 }* %40, i64 %282, i8* %283)
  store i64 %284, i64* %12, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %if.then7
  br label %if.done10

if.done10:                                        ; preds = %if.done9, %if.else
  br label %if.done11

if.done11:                                        ; preds = %if.done10, %switch.done
  %285 = load i8, i8* %14, align 1
  %286 = trunc i8 %285 to i1
  br i1 %286, label %if.then12, label %if.done13

if.then12:                                        ; preds = %if.done11
  %287 = load i64, i64* %12, align 8
  %288 = sub i64 %287, 1
  store i64 %288, i64* %12, align 8
  %289 = load i64, i64* %12, align 8
  %290 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 %289
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %41, align 8
  call void @runtime.bounds_check_error(%..string* %41, i32 1671, i32 8, i64 %289, i64 32)
  store i8 45, i8* %290, align 1
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %if.done11
  %291 = load %fmt.Info*, %fmt.Info** %4, align 8
  %292 = getelementptr inbounds %fmt.Info, %fmt.Info* %291, i32 0, i32 16
  %293 = load %io.Writer, %io.Writer* %292, align 8
  %294 = load i64, i64* %12, align 8
  %295 = load [32 x i8], [32 x i8]* %11, align 1
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %42, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %42, i32 1673, i32 40, i64 %294, i64 32, i64 32)
  %296 = getelementptr [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %297 = getelementptr i8, i8* %296, i64 %294
  %298 = sub i64 32, %294
  %299 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  store i8* %297, i8** %299, align 8
  %300 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  store i64 %298, i64* %300, align 8
  %301 = load { i8*, i64 }, { i8*, i64 }* %43, align 8
  %302 = bitcast { i8*, i64 }* %43 to %..string*
  %303 = load %..string, %..string* %302, align 8
  %304 = load %fmt.Info*, %fmt.Info** %4, align 8
  %305 = getelementptr inbounds %fmt.Info, %fmt.Info* %304, i32 0, i32 23
  %306 = bitcast { i64, i32 }* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* %306, i8 0, i64 16, i1 false)
  %307 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %44, %io.Writer* %292, %..string* %302, i64* %305, i8* %307)
  %308 = load { i64, i32 }, { i64, i32 }* %44, align 8
  ret void

typeswitch.body14:                                ; preds = %entry
  %309 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  %311 = bitcast i8* %310 to %time.Time*
  %312 = load %time.Time, %time.Time* %311, align 8
  store %time.Time %312, %time.Time* %45, align 8
  %313 = load %time.Time, %time.Time* %45, align 8
  store %time.Time %313, %time.Time* %46, align 8
  %314 = load %time.Time, %time.Time* %46, align 8
  %315 = bitcast %time.Time* %46 to i64*
  %316 = load i64, i64* %315, align 8
  %317 = bitcast { i64, i64, i64 }* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* %317, i8 0, i64 24, i1 false)
  %318 = bitcast %runtime.Context* %63 to i8*
  call void @time.date({ i64, i64, i64 }* sret({ i64, i64, i64 }*) %50, i64 %316, i8* %318)
  %319 = load { i64, i64, i64 }, { i64, i64, i64 }* %50, align 8
  %320 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %50, i32 0, i32 0
  %321 = load i64, i64* %320, align 8
  %322 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %50, i32 0, i32 1
  %323 = load i64, i64* %322, align 8
  %324 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %50, i32 0, i32 2
  %325 = load i64, i64* %324, align 8
  store i64 %321, i64* %47, align 8
  store i64 %323, i64* %48, align 8
  store i64 %325, i64* %49, align 8
  %326 = load %time.Time, %time.Time* %46, align 8
  %327 = bitcast %time.Time* %46 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = bitcast { i64, i64, i64 }* %54 to i8*
  call void @llvm.memset.p0i8.i64(i8* %329, i8 0, i64 24, i1 false)
  %330 = bitcast %runtime.Context* %63 to i8*
  call void @time.clock_from_time({ i64, i64, i64 }* sret({ i64, i64, i64 }*) %54, i64 %328, i8* %330)
  %331 = load { i64, i64, i64 }, { i64, i64, i64 }* %54, align 8
  %332 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %54, i32 0, i32 0
  %333 = load i64, i64* %332, align 8
  %334 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %54, i32 0, i32 1
  %335 = load i64, i64* %334, align 8
  %336 = getelementptr inbounds { i64, i64, i64 }, { i64, i64, i64 }* %54, i32 0, i32 2
  %337 = load i64, i64* %336, align 8
  store i64 %333, i64* %51, align 8
  store i64 %335, i64* %52, align 8
  store i64 %337, i64* %53, align 8
  %338 = getelementptr inbounds %time.Time, %time.Time* %46, i32 0, i32 0
  %339 = load i64, i64* %338, align 8
  %340 = getelementptr inbounds %time.Time, %time.Time* %46, i32 0, i32 0
  %341 = load i64, i64* %340, align 8
  %342 = sdiv i64 %341, 1000000000
  %343 = add i64 %342, 9223372028715321600
  %344 = mul i64 %343, 1000000000
  %345 = sub i64 %339, %344
  %346 = srem i64 %345, 1000000000
  store i64 %346, i64* %55, align 8
  %347 = load %fmt.Info*, %fmt.Info** %4, align 8
  %348 = load i64, i64* %47, align 8
  %349 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %347, i64 %348, i64 4, i8* %349)
  %350 = load %fmt.Info*, %fmt.Info** %4, align 8
  %351 = getelementptr inbounds %fmt.Info, %fmt.Info* %350, i32 0, i32 16
  %352 = load %io.Writer, %io.Writer* %351, align 8
  %353 = load %fmt.Info*, %fmt.Info** %4, align 8
  %354 = getelementptr inbounds %fmt.Info, %fmt.Info* %353, i32 0, i32 23
  %355 = bitcast %runtime.Context* %63 to i8*
  %356 = call i32 @io.write_byte_to_writer(%io.Writer* %351, i8 45, i64* %354, i8* %355)
  %357 = load %fmt.Info*, %fmt.Info** %4, align 8
  %358 = load i64, i64* %48, align 8
  %359 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %357, i64 %358, i64 2, i8* %359)
  %360 = load %fmt.Info*, %fmt.Info** %4, align 8
  %361 = getelementptr inbounds %fmt.Info, %fmt.Info* %360, i32 0, i32 16
  %362 = load %io.Writer, %io.Writer* %361, align 8
  %363 = load %fmt.Info*, %fmt.Info** %4, align 8
  %364 = getelementptr inbounds %fmt.Info, %fmt.Info* %363, i32 0, i32 23
  %365 = bitcast %runtime.Context* %63 to i8*
  %366 = call i32 @io.write_byte_to_writer(%io.Writer* %361, i8 45, i64* %364, i8* %365)
  %367 = load %fmt.Info*, %fmt.Info** %4, align 8
  %368 = load i64, i64* %49, align 8
  %369 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %367, i64 %368, i64 2, i8* %369)
  %370 = load %fmt.Info*, %fmt.Info** %4, align 8
  %371 = getelementptr inbounds %fmt.Info, %fmt.Info* %370, i32 0, i32 16
  %372 = load %io.Writer, %io.Writer* %371, align 8
  %373 = load %fmt.Info*, %fmt.Info** %4, align 8
  %374 = getelementptr inbounds %fmt.Info, %fmt.Info* %373, i32 0, i32 23
  %375 = bitcast %runtime.Context* %63 to i8*
  %376 = call i32 @io.write_byte_to_writer(%io.Writer* %371, i8 32, i64* %374, i8* %375)
  %377 = load %fmt.Info*, %fmt.Info** %4, align 8
  %378 = load i64, i64* %51, align 8
  %379 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %377, i64 %378, i64 2, i8* %379)
  %380 = load %fmt.Info*, %fmt.Info** %4, align 8
  %381 = getelementptr inbounds %fmt.Info, %fmt.Info* %380, i32 0, i32 16
  %382 = load %io.Writer, %io.Writer* %381, align 8
  %383 = load %fmt.Info*, %fmt.Info** %4, align 8
  %384 = getelementptr inbounds %fmt.Info, %fmt.Info* %383, i32 0, i32 23
  %385 = bitcast %runtime.Context* %63 to i8*
  %386 = call i32 @io.write_byte_to_writer(%io.Writer* %381, i8 58, i64* %384, i8* %385)
  %387 = load %fmt.Info*, %fmt.Info** %4, align 8
  %388 = load i64, i64* %52, align 8
  %389 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %387, i64 %388, i64 2, i8* %389)
  %390 = load %fmt.Info*, %fmt.Info** %4, align 8
  %391 = getelementptr inbounds %fmt.Info, %fmt.Info* %390, i32 0, i32 16
  %392 = load %io.Writer, %io.Writer* %391, align 8
  %393 = load %fmt.Info*, %fmt.Info** %4, align 8
  %394 = getelementptr inbounds %fmt.Info, %fmt.Info* %393, i32 0, i32 23
  %395 = bitcast %runtime.Context* %63 to i8*
  %396 = call i32 @io.write_byte_to_writer(%io.Writer* %391, i8 58, i64* %394, i8* %395)
  %397 = load %fmt.Info*, %fmt.Info** %4, align 8
  %398 = load i64, i64* %53, align 8
  %399 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %397, i64 %398, i64 2, i8* %399)
  %400 = load %fmt.Info*, %fmt.Info** %4, align 8
  %401 = getelementptr inbounds %fmt.Info, %fmt.Info* %400, i32 0, i32 16
  %402 = load %io.Writer, %io.Writer* %401, align 8
  %403 = load %fmt.Info*, %fmt.Info** %4, align 8
  %404 = getelementptr inbounds %fmt.Info, %fmt.Info* %403, i32 0, i32 23
  %405 = bitcast %runtime.Context* %63 to i8*
  %406 = call i32 @io.write_byte_to_writer(%io.Writer* %401, i8 46, i64* %404, i8* %405)
  %407 = load %fmt.Info*, %fmt.Info** %4, align 8
  %408 = load i64, i64* %55, align 8
  %409 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_named.write_padded_number-0(%fmt.Info* %407, i64 %408, i64 9, i8* %409)
  %410 = load %fmt.Info*, %fmt.Info** %4, align 8
  %411 = getelementptr inbounds %fmt.Info, %fmt.Info* %410, i32 0, i32 16
  %412 = load %io.Writer, %io.Writer* %411, align 8
  %413 = load %fmt.Info*, %fmt.Info** %4, align 8
  %414 = getelementptr inbounds %fmt.Info, %fmt.Info* %413, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2af", i64 0, i64 0), i64 10 }, %..string* %56, align 8
  %415 = bitcast { i64, i32 }* %57 to i8*
  call void @llvm.memset.p0i8.i64(i8* %415, i8 0, i64 16, i1 false)
  %416 = bitcast %runtime.Context* %63 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %57, %io.Writer* %411, %..string* %56, i64* %414, i8* %416)
  %417 = load { i64, i32 }, { i64, i32 }* %57, align 8
  ret void

typeswitch.done:                                  ; preds = %entry
  %418 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %419 = load %runtime.Type_Info*, %runtime.Type_Info** %418, align 8
  %420 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %419, i32 0, i32 5
  %421 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %420, align 8
  %422 = bitcast { [15 x i64], i64 }* %420 to i8*
  %423 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %420, i32 0, i32 1
  %424 = load i64, i64* %423, align 8
  switch i64 %424, label %typeswitch.default.body [
    i64 19, label %typeswitch.body15
    i64 23, label %typeswitch.body16
  ]

typeswitch.body15:                                ; preds = %typeswitch.done
  %425 = bitcast i8* %422 to %runtime.Type_Info_Struct*
  %426 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %425, align 8
  %427 = bitcast %runtime.Type_Info_Struct* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* %427, i8 0, i64 120, i1 false)
  %428 = bitcast %runtime.Type_Info_Struct* %58 to i8*
  %429 = bitcast %runtime.Type_Info_Struct* %425 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %428, i8* align 1 %429, i64 120, i1 false)
  %430 = load %fmt.Info*, %fmt.Info** %4, align 8
  %431 = load %..any, %..any* %1, align 8
  %432 = load i32, i32* %5, align 4
  %433 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %58, align 8
  %434 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 0
  %435 = load %..string, %..string* %434, align 8
  %436 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_struct(%fmt.Info* %430, %..any* %1, i32 %432, %runtime.Type_Info_Struct* %58, %..string* %434, i8* %436)
  br label %typeswitch.done17

typeswitch.body16:                                ; preds = %typeswitch.done
  %437 = bitcast i8* %422 to %runtime.Type_Info_Bit_Set*
  %438 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %437, align 8
  store %runtime.Type_Info_Bit_Set %438, %runtime.Type_Info_Bit_Set* %59, align 8
  %439 = load %fmt.Info*, %fmt.Info** %4, align 8
  %440 = load %..any, %..any* %1, align 8
  store %..string zeroinitializer, %..string* %60, align 8
  %441 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_bit_set(%fmt.Info* %439, %..any* %1, %..string* %60, i8* %441)
  br label %typeswitch.done17

typeswitch.default.body:                          ; preds = %typeswitch.done
  %442 = bitcast { [15 x i64], i64 }* %61 to i8*
  %443 = bitcast { [15 x i64], i64 }* %420 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %442, i8* align 1 %443, i64 128, i1 false)
  %444 = load %fmt.Info*, %fmt.Info** %4, align 8
  %445 = bitcast %..any* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %445, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %62, align 8
  %446 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %447 = load i8*, i8** %446, align 8
  %448 = getelementptr inbounds %..any, %..any* %62, i32 0, i32 0
  store i8* %447, i8** %448, align 8
  %449 = getelementptr inbounds %runtime.Type_Info_Named, %runtime.Type_Info_Named* %3, i32 0, i32 1
  %450 = load %runtime.Type_Info*, %runtime.Type_Info** %449, align 8
  %451 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %450, i32 0, i32 4
  %452 = load i64, i64* %451, align 8
  %453 = getelementptr inbounds %..any, %..any* %62, i32 0, i32 1
  store i64 %452, i64* %453, align 8
  %454 = load %..any, %..any* %62, align 8
  %455 = load i32, i32* %5, align 4
  %456 = bitcast %runtime.Context* %63 to i8*
  call void @fmt.fmt_value(%fmt.Info* %444, %..any* %62, i32 %455, i8* %456)
  br label %typeswitch.done17

typeswitch.done17:                                ; preds = %typeswitch.default.body, %typeswitch.body16, %typeswitch.body15
  ret void
}

define internal void @fmt.fmt_union(%fmt.Info* %0, %..any* %1, i32 %2, %runtime.Type_Info_Union* %3, i64 %4, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %5 = alloca %fmt.Info*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca %..string, align 8
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca %..string, align 8
  %11 = alloca { i64, i32 }, align 8
  %12 = alloca i64, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %..any, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %..any, align 8
  %18 = alloca %..any, align 8
  %19 = alloca i8, align 1
  %20 = alloca i8, align 1
  %21 = alloca i16, align 2
  %22 = alloca i16, align 2
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca %..any, align 8
  %28 = alloca %..string, align 8
  %29 = alloca %runtime.Source_Code_Location, align 8
  %30 = alloca %..string, align 8
  %31 = alloca %runtime.Source_Code_Location, align 8
  %32 = alloca %..string, align 8
  %33 = alloca { i64, i32 }, align 8
  %34 = alloca i64, align 8
  %35 = alloca %..string, align 8
  %36 = alloca %..any, align 8
  %37 = alloca %..string, align 8
  %38 = alloca { i64, i32 }, align 8
  %39 = alloca i64, align 8
  %40 = alloca %..string, align 8
  %41 = alloca %..any, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %5, align 8
  store i32 %2, i32* %6, align 4
  store i64 %4, i64* %7, align 8
  %42 = bitcast i8* %__.context_ptr to %runtime.Context*
  %43 = load i64, i64* %7, align 8
  %44 = icmp eq i64 %43, 0
  %45 = zext i1 %44 to i8
  %46 = trunc i8 %45 to i1
  br i1 %46, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %47 = load %fmt.Info*, %fmt.Info** %5, align 8
  %48 = getelementptr inbounds %fmt.Info, %fmt.Info* %47, i32 0, i32 16
  %49 = load %io.Writer, %io.Writer* %48, align 8
  %50 = load %fmt.Info*, %fmt.Info** %5, align 8
  %51 = getelementptr inbounds %fmt.Info, %fmt.Info* %50, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %8, align 8
  %52 = bitcast { i64, i32 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 16, i1 false)
  %53 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %9, %io.Writer* %48, %..string* %8, i64* %51, i8* %53)
  %54 = load { i64, i32 }, { i64, i32 }* %9, align 8
  ret void

if.done:                                          ; preds = %entry
  %55 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, align 8
  %56 = bitcast %runtime.Context* %42 to i8*
  %57 = call i8 @reflect.type_info_union_is_pure_maybe(%runtime.Type_Info_Union* %3, i8* %56)
  %58 = trunc i8 %57 to i1
  br i1 %58, label %if.then1, label %if.done4

if.then1:                                         ; preds = %if.done
  %59 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %60, null
  %62 = zext i1 %61 to i8
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then1
  %64 = load %fmt.Info*, %fmt.Info** %5, align 8
  %65 = getelementptr inbounds %fmt.Info, %fmt.Info* %64, i32 0, i32 16
  %66 = load %io.Writer, %io.Writer* %65, align 8
  %67 = load %fmt.Info*, %fmt.Info** %5, align 8
  %68 = getelementptr inbounds %fmt.Info, %fmt.Info* %67, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %10, align 8
  %69 = bitcast { i64, i32 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %69, i8 0, i64 16, i1 false)
  %70 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %11, %io.Writer* %65, %..string* %10, i64* %68, i8* %70)
  %71 = load { i64, i32 }, { i64, i32 }* %11, align 8
  br label %if.done3

if.else:                                          ; preds = %if.then1
  %72 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 0
  %73 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %72, align 8
  %74 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %72, i32 0, i32 0
  %75 = load %runtime.Type_Info**, %runtime.Type_Info*** %74, align 8
  %76 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %72, i32 0, i32 1
  %77 = load i64, i64* %76, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %13, align 8
  call void @runtime.bounds_check_error(%..string* %13, i32 1719, i32 24, i64 0, i64 %77)
  %78 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %75, i64 0
  %79 = load %runtime.Type_Info*, %runtime.Type_Info** %78, align 8
  %80 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %79, i32 0, i32 4
  %81 = load i64, i64* %80, align 8
  store i64 %81, i64* %12, align 8
  %82 = load %fmt.Info*, %fmt.Info** %5, align 8
  %83 = bitcast %..any* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %83, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %14, align 8
  %84 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %..any, %..any* %14, i32 0, i32 0
  store i8* %85, i8** %86, align 8
  %87 = load i64, i64* %12, align 8
  %88 = getelementptr inbounds %..any, %..any* %14, i32 0, i32 1
  store i64 %87, i64* %88, align 8
  %89 = load %..any, %..any* %14, align 8
  %90 = load i32, i32* %6, align 4
  %91 = bitcast %runtime.Context* %42 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %82, %..any* %14, i32 %90, i8* %91)
  br label %if.done3

if.done3:                                         ; preds = %if.else, %if.then2
  ret void

if.done4:                                         ; preds = %if.done
  store i64 -1, i64* %15, align 8
  %92 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %93 = load i8*, i8** %92, align 8
  %94 = ptrtoint i8* %93 to i64
  %95 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %94, %96
  store i64 %97, i64* %16, align 8
  %98 = bitcast %..any* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %18, align 8
  %99 = load i64, i64* %16, align 8
  %100 = inttoptr i64 %99 to i8*
  %101 = getelementptr inbounds %..any, %..any* %18, i32 0, i32 0
  store i8* %100, i8** %101, align 8
  %102 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 2
  %103 = load %runtime.Type_Info*, %runtime.Type_Info** %102, align 8
  %104 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %103, i32 0, i32 4
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %..any, %..any* %18, i32 0, i32 1
  store i64 %105, i64* %106, align 8
  %107 = load %..any, %..any* %18, align 8
  store %..any %107, %..any* %17, align 8
  %108 = load %..any, %..any* %17, align 8
  %109 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  switch i64 %110, label %typeswitch.default.body [
    i64 72057594037927939, label %typeswitch.body
    i64 4683743612465315941, label %typeswitch.body5
    i64 72057594037928040, label %typeswitch.body6
    i64 4683743612465315942, label %typeswitch.body7
    i64 72057594037927951, label %typeswitch.body8
    i64 4683743612465315862, label %typeswitch.body9
    i64 72057594037927953, label %typeswitch.body10
    i64 4683743612465315891, label %typeswitch.body11
  ]

typeswitch.body:                                  ; preds = %if.done4
  %111 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = load i8, i8* %112, align 1
  store i8 %113, i8* %19, align 1
  %114 = load i8, i8* %19, align 1
  %115 = zext i8 %114 to i64
  store i64 %115, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body5:                                 ; preds = %if.done4
  %116 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = load i8, i8* %117, align 1
  store i8 %118, i8* %20, align 1
  %119 = load i8, i8* %20, align 1
  %120 = sext i8 %119 to i64
  store i64 %120, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body6:                                 ; preds = %if.done4
  %121 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = bitcast i8* %122 to i16*
  %124 = load i16, i16* %123, align 2
  store i16 %124, i16* %21, align 2
  %125 = load i16, i16* %21, align 2
  %126 = zext i16 %125 to i64
  store i64 %126, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body7:                                 ; preds = %if.done4
  %127 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = bitcast i8* %128 to i16*
  %130 = load i16, i16* %129, align 2
  store i16 %130, i16* %22, align 2
  %131 = load i16, i16* %22, align 2
  %132 = sext i16 %131 to i64
  store i64 %132, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body8:                                 ; preds = %if.done4
  %133 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = bitcast i8* %134 to i32*
  %136 = load i32, i32* %135, align 4
  store i32 %136, i32* %23, align 4
  %137 = load i32, i32* %23, align 4
  %138 = zext i32 %137 to i64
  store i64 %138, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body9:                                 ; preds = %if.done4
  %139 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %140 = load i8*, i8** %139, align 8
  %141 = bitcast i8* %140 to i32*
  %142 = load i32, i32* %141, align 4
  store i32 %142, i32* %24, align 4
  %143 = load i32, i32* %24, align 4
  %144 = sext i32 %143 to i64
  store i64 %144, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body10:                                ; preds = %if.done4
  %145 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %146 = load i8*, i8** %145, align 8
  %147 = bitcast i8* %146 to i64*
  %148 = load i64, i64* %147, align 8
  store i64 %148, i64* %25, align 8
  %149 = load i64, i64* %25, align 8
  store i64 %149, i64* %15, align 8
  br label %typeswitch.done

typeswitch.body11:                                ; preds = %if.done4
  %150 = getelementptr inbounds %..any, %..any* %17, i32 0, i32 0
  %151 = load i8*, i8** %150, align 8
  %152 = bitcast i8* %151 to i64*
  %153 = load i64, i64* %152, align 8
  store i64 %153, i64* %26, align 8
  %154 = load i64, i64* %26, align 8
  store i64 %154, i64* %15, align 8
  br label %typeswitch.done

typeswitch.default.body:                          ; preds = %if.done4
  store %..any %108, %..any* %27, align 8
  store %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$2b0", i64 0, i64 0), i64 22 }, %..string* %28, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 1738, i32 8, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2b1", i64 0, i64 0), i64 9 } }, %runtime.Source_Code_Location* %29, align 8
  %155 = bitcast %runtime.Context* %42 to i8*
  call void @runtime.panic(%..string* %28, %runtime.Source_Code_Location* %29, i8* %155)
  unreachable

typeswitch.done:                                  ; preds = %typeswitch.body11, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body6, %typeswitch.body5, %typeswitch.body
  %156 = load i64, i64* %15, align 8
  %157 = icmp sge i64 %156, 0
  %158 = zext i1 %157 to i8
  %159 = icmp ne i8 %158, 0
  store %..string zeroinitializer, %..string* %30, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, i32 1740, i32 2, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2b1", i64 0, i64 0), i64 9 } }, %runtime.Source_Code_Location* %31, align 8
  %160 = bitcast %runtime.Context* %42 to i8*
  call void @runtime.assert(i1 %159, %..string* %30, %runtime.Source_Code_Location* %31, i8* %160)
  %161 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %162 = load i8*, i8** %161, align 8
  %163 = icmp eq i8* %162, null
  %164 = zext i1 %163 to i8
  %165 = trunc i8 %164 to i1
  br i1 %165, label %if.then12, label %if.else13

if.then12:                                        ; preds = %typeswitch.done
  %166 = load %fmt.Info*, %fmt.Info** %5, align 8
  %167 = getelementptr inbounds %fmt.Info, %fmt.Info* %166, i32 0, i32 16
  %168 = load %io.Writer, %io.Writer* %167, align 8
  %169 = load %fmt.Info*, %fmt.Info** %5, align 8
  %170 = getelementptr inbounds %fmt.Info, %fmt.Info* %169, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %32, align 8
  %171 = bitcast { i64, i32 }* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %171, i8 0, i64 16, i1 false)
  %172 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %33, %io.Writer* %167, %..string* %32, i64* %170, i8* %172)
  %173 = load { i64, i32 }, { i64, i32 }* %33, align 8
  br label %if.done20

if.else13:                                        ; preds = %typeswitch.done
  %174 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 5
  %175 = load i8, i8* %174, align 1
  %176 = trunc i8 %175 to i1
  br i1 %176, label %if.then14, label %if.else15

if.then14:                                        ; preds = %if.else13
  %177 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 0
  %178 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %177, align 8
  %179 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %177, i32 0, i32 0
  %180 = load %runtime.Type_Info**, %runtime.Type_Info*** %179, align 8
  %181 = load i64, i64* %15, align 8
  %182 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %177, i32 0, i32 1
  %183 = load i64, i64* %182, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %35, align 8
  call void @runtime.bounds_check_error(%..string* %35, i32 1745, i32 23, i64 %181, i64 %183)
  %184 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %180, i64 %181
  %185 = load %runtime.Type_Info*, %runtime.Type_Info** %184, align 8
  %186 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %185, i32 0, i32 4
  %187 = load i64, i64* %186, align 8
  store i64 %187, i64* %34, align 8
  %188 = load %fmt.Info*, %fmt.Info** %5, align 8
  %189 = bitcast %..any* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* %189, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %36, align 8
  %190 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %191 = load i8*, i8** %190, align 8
  %192 = getelementptr inbounds %..any, %..any* %36, i32 0, i32 0
  store i8* %191, i8** %192, align 8
  %193 = load i64, i64* %34, align 8
  %194 = getelementptr inbounds %..any, %..any* %36, i32 0, i32 1
  store i64 %193, i64* %194, align 8
  %195 = load %..any, %..any* %36, align 8
  %196 = load i32, i32* %6, align 4
  %197 = bitcast %runtime.Context* %42 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %188, %..any* %36, i32 %196, i8* %197)
  br label %if.done19

if.else15:                                        ; preds = %if.else13
  %198 = load i64, i64* %15, align 8
  %199 = icmp eq i64 %198, 0
  %200 = zext i1 %199 to i8
  %201 = trunc i8 %200 to i1
  br i1 %201, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.else15
  %202 = load %fmt.Info*, %fmt.Info** %5, align 8
  %203 = getelementptr inbounds %fmt.Info, %fmt.Info* %202, i32 0, i32 16
  %204 = load %io.Writer, %io.Writer* %203, align 8
  %205 = load %fmt.Info*, %fmt.Info** %5, align 8
  %206 = getelementptr inbounds %fmt.Info, %fmt.Info* %205, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %37, align 8
  %207 = bitcast { i64, i32 }* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* %207, i8 0, i64 16, i1 false)
  %208 = bitcast %runtime.Context* %42 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %38, %io.Writer* %203, %..string* %37, i64* %206, i8* %208)
  %209 = load { i64, i32 }, { i64, i32 }* %38, align 8
  br label %if.done18

if.else17:                                        ; preds = %if.else15
  %210 = getelementptr inbounds %runtime.Type_Info_Union, %runtime.Type_Info_Union* %3, i32 0, i32 0
  %211 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %210, align 8
  %212 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %210, i32 0, i32 0
  %213 = load %runtime.Type_Info**, %runtime.Type_Info*** %212, align 8
  %214 = load i64, i64* %15, align 8
  %215 = sub i64 %214, 1
  %216 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %210, i32 0, i32 1
  %217 = load i64, i64* %216, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %40, align 8
  call void @runtime.bounds_check_error(%..string* %40, i32 1750, i32 23, i64 %215, i64 %217)
  %218 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %213, i64 %215
  %219 = load %runtime.Type_Info*, %runtime.Type_Info** %218, align 8
  %220 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %219, i32 0, i32 4
  %221 = load i64, i64* %220, align 8
  store i64 %221, i64* %39, align 8
  %222 = load %fmt.Info*, %fmt.Info** %5, align 8
  %223 = bitcast %..any* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %223, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %41, align 8
  %224 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %225 = load i8*, i8** %224, align 8
  %226 = getelementptr inbounds %..any, %..any* %41, i32 0, i32 0
  store i8* %225, i8** %226, align 8
  %227 = load i64, i64* %39, align 8
  %228 = getelementptr inbounds %..any, %..any* %41, i32 0, i32 1
  store i64 %227, i64* %228, align 8
  %229 = load %..any, %..any* %41, align 8
  %230 = load i32, i32* %6, align 4
  %231 = bitcast %runtime.Context* %42 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %222, %..any* %41, i32 %230, i8* %231)
  br label %if.done18

if.done18:                                        ; preds = %if.else17, %if.then16
  br label %if.done19

if.done19:                                        ; preds = %if.done18, %if.then14
  br label %if.done20

if.done20:                                        ; preds = %if.done19, %if.then12
  ret void
}

define internal void @fmt.fmt_matrix(%fmt.Info* %0, %..any* %1, i32 %2, %runtime.Type_Info_Matrix* %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %fmt.Info*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %..string, align 8
  %7 = alloca { i64, i32 }, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca %..string, align 8
  %15 = alloca { i64, i32 }, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca %..any, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { i64, i32 }, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca %..string, align 8
  %25 = alloca { i64, i32 }, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca %..string, align 8
  %30 = alloca { i64, i32 }, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca %..any, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %4, align 8
  store i32 %2, i32* %5, align 4
  %34 = bitcast i8* %__.context_ptr to %runtime.Context*
  %35 = load %fmt.Info*, %fmt.Info** %4, align 8
  %36 = getelementptr inbounds %fmt.Info, %fmt.Info* %35, i32 0, i32 16
  %37 = load %io.Writer, %io.Writer* %36, align 8
  %38 = load %fmt.Info*, %fmt.Info** %4, align 8
  %39 = getelementptr inbounds %fmt.Info, %fmt.Info* %38, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"csbs$264", i64 0, i64 0), i64 7 }, %..string* %6, align 8
  %40 = bitcast { i64, i32 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 16, i1 false)
  %41 = bitcast %runtime.Context* %34 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %7, %io.Writer* %36, %..string* %6, i64* %39, i8* %41)
  %42 = load { i64, i32 }, { i64, i32 }* %7, align 8
  %43 = load %fmt.Info*, %fmt.Info** %4, align 8
  %44 = getelementptr inbounds %fmt.Info, %fmt.Info* %43, i32 0, i32 10
  %45 = load i64, i64* %44, align 8
  %46 = add i64 %45, 1
  store i64 %46, i64* %44, align 8
  %47 = load %fmt.Info*, %fmt.Info** %4, align 8
  %48 = getelementptr inbounds %fmt.Info, %fmt.Info* %47, i32 0, i32 4
  %49 = load i8, i8* %48, align 1
  %50 = trunc i8 %49 to i1
  br i1 %50, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %51 = load %fmt.Info*, %fmt.Info** %4, align 8
  %52 = getelementptr inbounds %fmt.Info, %fmt.Info* %51, i32 0, i32 16
  %53 = load %io.Writer, %io.Writer* %52, align 8
  %54 = load %fmt.Info*, %fmt.Info** %4, align 8
  %55 = getelementptr inbounds %fmt.Info, %fmt.Info* %54, i32 0, i32 23
  %56 = bitcast %runtime.Context* %34 to i8*
  %57 = call i32 @io.write_byte_to_writer(%io.Writer* %52, i8 10, i64* %55, i8* %56)
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post4, %if.then
  %58 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 3
  %59 = load i64, i64* %58, align 8
  %60 = load i64, i64* %8, align 8
  %61 = icmp slt i64 %60, %59
  br i1 %61, label %for.interval.body, label %for.interval.done5

for.interval.body:                                ; preds = %for.interval.loop
  %62 = load i64, i64* %8, align 8
  %63 = load i64, i64* %9, align 8
  store i64 %62, i64* %10, align 8
  %64 = load %fmt.Info*, %fmt.Info** %4, align 8
  %65 = bitcast %runtime.Context* %34 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %64, i8* %65)
  store i64 0, i64* %11, align 8
  store i64 0, i64* %12, align 8
  br label %for.interval.loop1

for.interval.loop1:                               ; preds = %for.interval.post, %for.interval.body
  %66 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 4
  %67 = load i64, i64* %66, align 8
  %68 = load i64, i64* %11, align 8
  %69 = icmp slt i64 %68, %67
  br i1 %69, label %for.interval.body2, label %for.interval.done

for.interval.body2:                               ; preds = %for.interval.loop1
  %70 = load i64, i64* %11, align 8
  %71 = load i64, i64* %12, align 8
  store i64 %70, i64* %13, align 8
  %72 = load i64, i64* %13, align 8
  %73 = icmp sgt i64 %72, 0
  %74 = zext i1 %73 to i8
  %75 = trunc i8 %74 to i1
  br i1 %75, label %if.then3, label %if.done

if.then3:                                         ; preds = %for.interval.body2
  %76 = load %fmt.Info*, %fmt.Info** %4, align 8
  %77 = getelementptr inbounds %fmt.Info, %fmt.Info* %76, i32 0, i32 16
  %78 = load %io.Writer, %io.Writer* %77, align 8
  %79 = load %fmt.Info*, %fmt.Info** %4, align 8
  %80 = getelementptr inbounds %fmt.Info, %fmt.Info* %79, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %14, align 8
  %81 = bitcast { i64, i32 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %81, i8 0, i64 16, i1 false)
  %82 = bitcast %runtime.Context* %34 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %15, %io.Writer* %77, %..string* %14, i64* %80, i8* %82)
  %83 = load { i64, i32 }, { i64, i32 }* %15, align 8
  br label %if.done

if.done:                                          ; preds = %if.then3, %for.interval.body2
  %84 = load i64, i64* %10, align 8
  %85 = load i64, i64* %13, align 8
  %86 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 2
  %87 = load i64, i64* %86, align 8
  %88 = mul i64 %85, %87
  %89 = add i64 %84, %88
  %90 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = mul i64 %89, %91
  store i64 %92, i64* %16, align 8
  %93 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %94 = load i8*, i8** %93, align 8
  %95 = ptrtoint i8* %94 to i64
  %96 = load i64, i64* %16, align 8
  %97 = add i64 %95, %96
  store i64 %97, i64* %17, align 8
  %98 = load %fmt.Info*, %fmt.Info** %4, align 8
  %99 = bitcast %..any* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %99, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %18, align 8
  %100 = load i64, i64* %17, align 8
  %101 = inttoptr i64 %100 to i8*
  %102 = getelementptr inbounds %..any, %..any* %18, i32 0, i32 0
  store i8* %101, i8** %102, align 8
  %103 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 0
  %104 = load %runtime.Type_Info*, %runtime.Type_Info** %103, align 8
  %105 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %104, i32 0, i32 4
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %..any, %..any* %18, i32 0, i32 1
  store i64 %106, i64* %107, align 8
  %108 = load %..any, %..any* %18, align 8
  %109 = load i32, i32* %5, align 4
  %110 = bitcast %runtime.Context* %34 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %98, %..any* %18, i32 %109, i8* %110)
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done
  %111 = load i64, i64* %11, align 8
  %112 = add i64 %111, 1
  store i64 %112, i64* %11, align 8
  %113 = load i64, i64* %12, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %12, align 8
  br label %for.interval.loop1

for.interval.done:                                ; preds = %for.interval.loop1
  %115 = load %fmt.Info*, %fmt.Info** %4, align 8
  %116 = getelementptr inbounds %fmt.Info, %fmt.Info* %115, i32 0, i32 16
  %117 = load %io.Writer, %io.Writer* %116, align 8
  %118 = load %fmt.Info*, %fmt.Info** %4, align 8
  %119 = getelementptr inbounds %fmt.Info, %fmt.Info* %118, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2a5", i64 0, i64 0), i64 2 }, %..string* %19, align 8
  %120 = bitcast { i64, i32 }* %20 to i8*
  call void @llvm.memset.p0i8.i64(i8* %120, i8 0, i64 16, i1 false)
  %121 = bitcast %runtime.Context* %34 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %20, %io.Writer* %116, %..string* %19, i64* %119, i8* %121)
  %122 = load { i64, i32 }, { i64, i32 }* %20, align 8
  br label %for.interval.post4

for.interval.post4:                               ; preds = %for.interval.done
  %123 = load i64, i64* %8, align 8
  %124 = add i64 %123, 1
  store i64 %124, i64* %8, align 8
  %125 = load i64, i64* %9, align 8
  %126 = add i64 %125, 1
  store i64 %126, i64* %9, align 8
  br label %for.interval.loop

for.interval.done5:                               ; preds = %for.interval.loop
  br label %if.done18

if.else:                                          ; preds = %entry
  store i64 0, i64* %21, align 8
  store i64 0, i64* %22, align 8
  br label %for.interval.loop6

for.interval.loop6:                               ; preds = %for.interval.post16, %if.else
  %127 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 3
  %128 = load i64, i64* %127, align 8
  %129 = load i64, i64* %21, align 8
  %130 = icmp slt i64 %129, %128
  br i1 %130, label %for.interval.body7, label %for.interval.done17

for.interval.body7:                               ; preds = %for.interval.loop6
  %131 = load i64, i64* %21, align 8
  %132 = load i64, i64* %22, align 8
  store i64 %131, i64* %23, align 8
  %133 = load i64, i64* %23, align 8
  %134 = icmp sgt i64 %133, 0
  %135 = zext i1 %134 to i8
  %136 = trunc i8 %135 to i1
  br i1 %136, label %if.then8, label %if.done9

if.then8:                                         ; preds = %for.interval.body7
  %137 = load %fmt.Info*, %fmt.Info** %4, align 8
  %138 = getelementptr inbounds %fmt.Info, %fmt.Info* %137, i32 0, i32 16
  %139 = load %io.Writer, %io.Writer* %138, align 8
  %140 = load %fmt.Info*, %fmt.Info** %4, align 8
  %141 = getelementptr inbounds %fmt.Info, %fmt.Info* %140, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$260", i64 0, i64 0), i64 2 }, %..string* %24, align 8
  %142 = bitcast { i64, i32 }* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %142, i8 0, i64 16, i1 false)
  %143 = bitcast %runtime.Context* %34 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %25, %io.Writer* %138, %..string* %24, i64* %141, i8* %143)
  %144 = load { i64, i32 }, { i64, i32 }* %25, align 8
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %for.interval.body7
  store i64 0, i64* %26, align 8
  store i64 0, i64* %27, align 8
  br label %for.interval.loop10

for.interval.loop10:                              ; preds = %for.interval.post14, %if.done9
  %145 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 4
  %146 = load i64, i64* %145, align 8
  %147 = load i64, i64* %26, align 8
  %148 = icmp slt i64 %147, %146
  br i1 %148, label %for.interval.body11, label %for.interval.done15

for.interval.body11:                              ; preds = %for.interval.loop10
  %149 = load i64, i64* %26, align 8
  %150 = load i64, i64* %27, align 8
  store i64 %149, i64* %28, align 8
  %151 = load i64, i64* %28, align 8
  %152 = icmp sgt i64 %151, 0
  %153 = zext i1 %152 to i8
  %154 = trunc i8 %153 to i1
  br i1 %154, label %if.then12, label %if.done13

if.then12:                                        ; preds = %for.interval.body11
  %155 = load %fmt.Info*, %fmt.Info** %4, align 8
  %156 = getelementptr inbounds %fmt.Info, %fmt.Info* %155, i32 0, i32 16
  %157 = load %io.Writer, %io.Writer* %156, align 8
  %158 = load %fmt.Info*, %fmt.Info** %4, align 8
  %159 = getelementptr inbounds %fmt.Info, %fmt.Info* %158, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %29, align 8
  %160 = bitcast { i64, i32 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %160, i8 0, i64 16, i1 false)
  %161 = bitcast %runtime.Context* %34 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %30, %io.Writer* %156, %..string* %29, i64* %159, i8* %161)
  %162 = load { i64, i32 }, { i64, i32 }* %30, align 8
  br label %if.done13

if.done13:                                        ; preds = %if.then12, %for.interval.body11
  %163 = load i64, i64* %23, align 8
  %164 = load i64, i64* %28, align 8
  %165 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 2
  %166 = load i64, i64* %165, align 8
  %167 = mul i64 %164, %166
  %168 = add i64 %163, %167
  %169 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = mul i64 %168, %170
  store i64 %171, i64* %31, align 8
  %172 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %173 = load i8*, i8** %172, align 8
  %174 = ptrtoint i8* %173 to i64
  %175 = load i64, i64* %31, align 8
  %176 = add i64 %174, %175
  store i64 %176, i64* %32, align 8
  %177 = load %fmt.Info*, %fmt.Info** %4, align 8
  %178 = bitcast %..any* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %178, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %33, align 8
  %179 = load i64, i64* %32, align 8
  %180 = inttoptr i64 %179 to i8*
  %181 = getelementptr inbounds %..any, %..any* %33, i32 0, i32 0
  store i8* %180, i8** %181, align 8
  %182 = getelementptr inbounds %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %3, i32 0, i32 0
  %183 = load %runtime.Type_Info*, %runtime.Type_Info** %182, align 8
  %184 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %183, i32 0, i32 4
  %185 = load i64, i64* %184, align 8
  %186 = getelementptr inbounds %..any, %..any* %33, i32 0, i32 1
  store i64 %185, i64* %186, align 8
  %187 = load %..any, %..any* %33, align 8
  %188 = load i32, i32* %5, align 4
  %189 = bitcast %runtime.Context* %34 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %177, %..any* %33, i32 %188, i8* %189)
  br label %for.interval.post14

for.interval.post14:                              ; preds = %if.done13
  %190 = load i64, i64* %26, align 8
  %191 = add i64 %190, 1
  store i64 %191, i64* %26, align 8
  %192 = load i64, i64* %27, align 8
  %193 = add i64 %192, 1
  store i64 %193, i64* %27, align 8
  br label %for.interval.loop10

for.interval.done15:                              ; preds = %for.interval.loop10
  br label %for.interval.post16

for.interval.post16:                              ; preds = %for.interval.done15
  %194 = load i64, i64* %21, align 8
  %195 = add i64 %194, 1
  store i64 %195, i64* %21, align 8
  %196 = load i64, i64* %22, align 8
  %197 = add i64 %196, 1
  store i64 %197, i64* %22, align 8
  br label %for.interval.loop6

for.interval.done17:                              ; preds = %for.interval.loop6
  br label %if.done18

if.done18:                                        ; preds = %for.interval.done17, %for.interval.done5
  %198 = load %fmt.Info*, %fmt.Info** %4, align 8
  %199 = getelementptr inbounds %fmt.Info, %fmt.Info* %198, i32 0, i32 10
  %200 = load i64, i64* %199, align 8
  %201 = sub i64 %200, 1
  store i64 %201, i64* %199, align 8
  %202 = load %fmt.Info*, %fmt.Info** %4, align 8
  %203 = getelementptr inbounds %fmt.Info, %fmt.Info* %202, i32 0, i32 4
  %204 = load i8, i8* %203, align 1
  %205 = trunc i8 %204 to i1
  br i1 %205, label %if.then19, label %if.done20

if.then19:                                        ; preds = %if.done18
  %206 = load %fmt.Info*, %fmt.Info** %4, align 8
  %207 = bitcast %runtime.Context* %34 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %206, i8* %207)
  br label %if.done20

if.done20:                                        ; preds = %if.then19, %if.done18
  br label %defer

defer:                                            ; preds = %if.done20
  %208 = load %fmt.Info*, %fmt.Info** %4, align 8
  %209 = getelementptr inbounds %fmt.Info, %fmt.Info* %208, i32 0, i32 16
  %210 = load %io.Writer, %io.Writer* %209, align 8
  %211 = load %fmt.Info*, %fmt.Info** %4, align 8
  %212 = getelementptr inbounds %fmt.Info, %fmt.Info* %211, i32 0, i32 23
  %213 = bitcast %runtime.Context* %34 to i8*
  %214 = call i32 @io.write_byte_to_writer(%io.Writer* %209, i8 93, i64* %212, i8* %213)
  ret void
}

define internal void @fmt.fmt_value(%fmt.Info* %0, %..any* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca i8 (%fmt.Info*, %..any*, i32, i8*)*, align 8
  %8 = alloca { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, align 8
  %9 = alloca %runtime.Map_Header, align 8
  %10 = alloca %runtime.Map_Hash, align 8
  %11 = alloca i8, align 1
  %12 = alloca %runtime.Type_Info*, align 8
  %13 = alloca %runtime.Type_Info_Any, align 1
  %14 = alloca %runtime.Type_Info_Tuple, align 8
  %15 = alloca %runtime.Type_Info_Named, align 8
  %16 = alloca %runtime.Type_Info_Boolean, align 1
  %17 = alloca %runtime.Type_Info_Integer, align 1
  %18 = alloca %runtime.Type_Info_Rune, align 1
  %19 = alloca %runtime.Type_Info_Float, align 1
  %20 = alloca %runtime.Type_Info_Complex, align 1
  %21 = alloca %runtime.Type_Info_Quaternion, align 1
  %22 = alloca %runtime.Type_Info_String, align 1
  %23 = alloca %runtime.Type_Info_Pointer, align 8
  %24 = alloca { i64, i32 }, align 8
  %25 = alloca i8*, align 8
  %26 = alloca %..any, align 8
  %27 = alloca %..any, align 8
  %28 = alloca %runtime.Type_Info*, align 8
  %29 = alloca { [15 x i64], i64 }, align 8
  %30 = alloca %..string, align 8
  %31 = alloca { i64, i32 }, align 8
  %32 = alloca { [15 x i64], i64 }, align 8
  %33 = alloca %..string, align 8
  %34 = alloca { i64, i32 }, align 8
  %35 = alloca %runtime.Type_Info_Soa_Pointer, align 8
  %36 = alloca %runtime.Raw_Soa_Pointer, align 8
  %37 = alloca %runtime.Type_Info_Multi_Pointer, align 8
  %38 = alloca i8*, align 8
  %39 = alloca %..string, align 8
  %40 = alloca { i64, i32 }, align 8
  %41 = alloca %..any, align 8
  %42 = alloca %..any, align 8
  %43 = alloca %runtime.Type_Info*, align 8
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca { i64, i8 }, align 8
  %47 = alloca %runtime.Type_Info_Integer, align 1
  %48 = alloca i64, align 8
  %49 = alloca { [15 x i64], i64 }, align 8
  %50 = alloca { [15 x i64], i64 }, align 8
  %51 = alloca %runtime.Type_Info_Enumerated_Array, align 8
  %52 = alloca %..string, align 8
  %53 = alloca { i64, i32 }, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca i64, align 8
  %58 = alloca %..string, align 8
  %59 = alloca i8, align 1
  %60 = alloca { %..string, i8 }, align 8
  %61 = alloca { i64, i32 }, align 8
  %62 = alloca { i64, i32 }, align 8
  %63 = alloca %..string, align 8
  %64 = alloca { i64, i32 }, align 8
  %65 = alloca i64, align 8
  %66 = alloca %..any, align 8
  %67 = alloca %..string, align 8
  %68 = alloca { i64, i32 }, align 8
  %69 = alloca i64, align 8
  %70 = alloca i64, align 8
  %71 = alloca i64, align 8
  %72 = alloca %..string, align 8
  %73 = alloca { i64, i32 }, align 8
  %74 = alloca %..string, align 8
  %75 = alloca i8, align 1
  %76 = alloca { %..string, i8 }, align 8
  %77 = alloca { i64, i32 }, align 8
  %78 = alloca { i64, i32 }, align 8
  %79 = alloca %..string, align 8
  %80 = alloca { i64, i32 }, align 8
  %81 = alloca i64, align 8
  %82 = alloca %..any, align 8
  %83 = alloca %runtime.Type_Info_Array, align 8
  %84 = alloca i64, align 8
  %85 = alloca i8*, align 8
  %86 = alloca i64, align 8
  %87 = alloca i8, align 1
  %88 = alloca { i64, i8 }, align 8
  %89 = alloca %runtime.Type_Info_Slice, align 8
  %90 = alloca %runtime.Raw_Slice*, align 8
  %91 = alloca i64, align 8
  %92 = alloca i8*, align 8
  %93 = alloca i64, align 8
  %94 = alloca i8, align 1
  %95 = alloca { i64, i8 }, align 8
  %96 = alloca %runtime.Type_Info_Dynamic_Array, align 8
  %97 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %98 = alloca i64, align 8
  %99 = alloca i8*, align 8
  %100 = alloca i64, align 8
  %101 = alloca i8, align 1
  %102 = alloca { i64, i8 }, align 8
  %103 = alloca %runtime.Type_Info_Simd_Vector, align 8
  %104 = alloca i64, align 8
  %105 = alloca i64, align 8
  %106 = alloca i64, align 8
  %107 = alloca %..string, align 8
  %108 = alloca { i64, i32 }, align 8
  %109 = alloca i64, align 8
  %110 = alloca %..any, align 8
  %111 = alloca %runtime.Type_Info_Map, align 8
  %112 = alloca %..string, align 8
  %113 = alloca { i64, i32 }, align 8
  %114 = alloca %runtime.Raw_Map*, align 8
  %115 = alloca %runtime.Raw_Dynamic_Array*, align 8
  %116 = alloca %runtime.Type_Info_Struct, align 8
  %117 = alloca %runtime.Type_Info*, align 8
  %118 = alloca { %runtime.Type_Info_Struct, i8 }, align 8
  %119 = alloca %..string, align 8
  %120 = alloca %runtime.Type_Info_Dynamic_Array, align 8
  %121 = alloca %..string, align 8
  %122 = alloca %runtime.Type_Info*, align 8
  %123 = alloca { %runtime.Type_Info_Dynamic_Array, i8 }, align 8
  %124 = alloca %..string, align 8
  %125 = alloca %runtime.Type_Info_Struct, align 8
  %126 = alloca { %runtime.Type_Info_Struct, i8 }, align 8
  %127 = alloca %..string, align 8
  %128 = alloca i64, align 8
  %129 = alloca i64, align 8
  %130 = alloca i64, align 8
  %131 = alloca i64, align 8
  %132 = alloca %..string, align 8
  %133 = alloca { i64, i32 }, align 8
  %134 = alloca i64, align 8
  %135 = alloca i64, align 8
  %136 = alloca %..string, align 8
  %137 = alloca %fmt.Info, align 8
  %138 = alloca %fmt.Info, align 8
  %139 = alloca %..any, align 8
  %140 = alloca %..string, align 8
  %141 = alloca { i64, i32 }, align 8
  %142 = alloca i64, align 8
  %143 = alloca %..string, align 8
  %144 = alloca %..any, align 8
  %145 = alloca %runtime.Type_Info_Struct, align 8
  %146 = alloca %..string, align 8
  %147 = alloca %runtime.Type_Info_Union, align 8
  %148 = alloca %runtime.Type_Info_Enum, align 8
  %149 = alloca %runtime.Type_Info_Procedure, align 8
  %150 = alloca i8*, align 8
  %151 = alloca %..string, align 8
  %152 = alloca { i64, i32 }, align 8
  %153 = alloca { i64, i32 }, align 8
  %154 = alloca %..string, align 8
  %155 = alloca { i64, i32 }, align 8
  %156 = alloca %runtime.Type_Info_Type_Id, align 1
  %157 = alloca i64, align 8
  %158 = alloca { i64, i32 }, align 8
  %159 = alloca %runtime.Type_Info_Bit_Set, align 8
  %160 = alloca %..string, align 8
  %161 = alloca %runtime.Type_Info_Relative_Pointer, align 8
  %162 = alloca i8*, align 8
  %163 = alloca %..any, align 8
  %164 = alloca %..any, align 8
  %165 = alloca %runtime.Type_Info_Relative_Slice, align 8
  %166 = alloca i8*, align 8
  %167 = alloca %..string, align 8
  %168 = alloca { i64, i32 }, align 8
  %169 = alloca i64, align 8
  %170 = alloca %..any, align 8
  %171 = alloca %..any, align 8
  %172 = alloca i64, align 8
  %173 = alloca { i64, i8 }, align 8
  %174 = alloca %runtime.Type_Info_Slice, align 8
  %175 = alloca %runtime.Type_Info*, align 8
  %176 = alloca { %runtime.Type_Info_Slice, i8 }, align 8
  %177 = alloca %..string, align 8
  %178 = alloca i64, align 8
  %179 = alloca i64, align 8
  %180 = alloca i64, align 8
  %181 = alloca %..string, align 8
  %182 = alloca { i64, i32 }, align 8
  %183 = alloca i64, align 8
  %184 = alloca %..any, align 8
  %185 = alloca %runtime.Type_Info_Matrix, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %2, i32* %4, align 4
  %186 = bitcast i8* %__.context_ptr to %runtime.Context*
  %187 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  %189 = icmp eq i8* %188, null
  %190 = zext i1 %189 to i8
  %191 = trunc i8 %190 to i1
  br i1 %191, label %if.then, label %cmp.or

cmp.or:                                           ; preds = %entry
  %192 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %193 = load i64, i64* %192, align 8
  %194 = icmp eq i64 %193, 0
  %195 = zext i1 %194 to i8
  %196 = trunc i8 %195 to i1
  br i1 %196, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.or, %entry
  %197 = load %fmt.Info*, %fmt.Info** %3, align 8
  %198 = getelementptr inbounds %fmt.Info, %fmt.Info* %197, i32 0, i32 16
  %199 = load %io.Writer, %io.Writer* %198, align 8
  %200 = load %fmt.Info*, %fmt.Info** %3, align 8
  %201 = getelementptr inbounds %fmt.Info, %fmt.Info* %200, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %5, align 8
  %202 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %202, i8 0, i64 16, i1 false)
  %203 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %198, %..string* %5, i64* %201, i8* %203)
  %204 = load { i64, i32 }, { i64, i32 }* %6, align 8
  ret void

if.done:                                          ; preds = %cmp.or
  %205 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }** @fmt._user_formatters, align 8
  %206 = icmp ne { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %205, null
  %207 = zext i1 %206 to i8
  %208 = trunc i8 %207 to i1
  br i1 %208, label %cmp.and, label %if.done6

cmp.and:                                          ; preds = %if.done
  %209 = load %fmt.Info*, %fmt.Info** %3, align 8
  %210 = getelementptr inbounds %fmt.Info, %fmt.Info* %209, i32 0, i32 13
  %211 = load i8, i8* %210, align 1
  %212 = trunc i8 %211 to i1
  br i1 %212, label %if.done6, label %if.then1

if.then1:                                         ; preds = %cmp.and
  %213 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }** @fmt._user_formatters, align 8
  %214 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %213, align 8
  %215 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %216 = load i64, i64* %215, align 8
  %217 = bitcast { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %217, i8 0, i64 16, i1 false)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8 (i8*, i8*)* @"__$equal3", i64 32, i64 8, i64 16, i64 8, i64 24, i64 8 }, %runtime.Map_Header* %9, align 8
  %218 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %9, i32 0, i32 0
  %219 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %213 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %219, %runtime.Raw_Map** %218, align 8
  %220 = load %runtime.Map_Header, %runtime.Map_Header* %9, align 8
  %221 = bitcast %runtime.Map_Hash* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %221, i8 0, i64 16, i1 false)
  %222 = bitcast i64* %215 to i8*
  %223 = call i64 @"__$hasher1"(i8* %222, i64 0)
  %224 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %10, i32 0, i32 0
  store i64 %223, i64* %224, align 8
  %225 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %10, i32 0, i32 1
  store i8* %222, i8** %225, align 8
  %226 = load %runtime.Map_Hash, %runtime.Map_Hash* %10, align 8
  %227 = bitcast %runtime.Context* %186 to i8*
  %228 = call i8* @runtime.__dynamic_map_get(%runtime.Map_Header* %9, %runtime.Map_Hash* %10, i8* %227)
  %229 = icmp ne i8* %228, null
  %230 = zext i1 %229 to i8
  %231 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %8, i32 0, i32 1
  store i8 %230, i8* %231, align 1
  %232 = trunc i8 %230 to i1
  br i1 %232, label %map.get.then, label %map.get.done

map.get.then:                                     ; preds = %if.then1
  %233 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %8, i32 0, i32 0
  %234 = bitcast i8* %228 to i8 (%fmt.Info*, %..any*, i32, i8*)**
  %235 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %234, align 8
  %236 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)** %233 to i8**
  %237 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)* %235 to i8*
  store i8* %237, i8** %236, align 8
  br label %map.get.done

map.get.done:                                     ; preds = %map.get.then, %if.then1
  %238 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %8, i32 0, i32 0
  %239 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %238, align 8
  %240 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)** %7 to i8**
  %241 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)* %239 to i8*
  store i8* %241, i8** %240, align 8
  %242 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %7, align 8
  %243 = icmp ne i8 (%fmt.Info*, %..any*, i32, i8*)* %242, null
  %244 = zext i1 %243 to i8
  %245 = trunc i8 %244 to i1
  br i1 %245, label %if.then2, label %if.done5

if.then2:                                         ; preds = %map.get.done
  %246 = load %fmt.Info*, %fmt.Info** %3, align 8
  %247 = getelementptr inbounds %fmt.Info, %fmt.Info* %246, i32 0, i32 13
  store i8 0, i8* %247, align 1
  br label %if.init

if.init:                                          ; preds = %if.then2
  %248 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %7, align 8
  %249 = load %fmt.Info*, %fmt.Info** %3, align 8
  %250 = load %..any, %..any* %1, align 8
  %251 = load i32, i32* %4, align 4
  %252 = bitcast %runtime.Context* %186 to i8*
  %253 = call i8 %248(%fmt.Info* %249, %..any* %1, i32 %251, i8* %252)
  store i8 %253, i8* %11, align 1
  %254 = load i8, i8* %11, align 1
  %255 = trunc i8 %254 to i1
  br i1 %255, label %if.done4, label %if.then3

if.then3:                                         ; preds = %if.init
  %256 = load %fmt.Info*, %fmt.Info** %3, align 8
  %257 = getelementptr inbounds %fmt.Info, %fmt.Info* %256, i32 0, i32 13
  store i8 1, i8* %257, align 1
  %258 = load %fmt.Info*, %fmt.Info** %3, align 8
  %259 = load i32, i32* %4, align 4
  %260 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %258, i32 %259, i8* %260)
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.init
  ret void

if.done5:                                         ; preds = %map.get.done
  br label %if.done6

if.done6:                                         ; preds = %if.done5, %cmp.and, %if.done
  %261 = load %fmt.Info*, %fmt.Info** %3, align 8
  %262 = getelementptr inbounds %fmt.Info, %fmt.Info* %261, i32 0, i32 13
  store i8 0, i8* %262, align 1
  %263 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %264 = load i64, i64* %263, align 8
  %265 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %264)
  store %runtime.Type_Info* %265, %runtime.Type_Info** %12, align 8
  %266 = load %runtime.Type_Info*, %runtime.Type_Info** %12, align 8
  %267 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %266, i32 0, i32 5
  %268 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %267, align 8
  %269 = bitcast { [15 x i64], i64 }* %267 to i8*
  %270 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %267, i32 0, i32 1
  %271 = load i64, i64* %270, align 8
  switch i64 %271, label %typeswitch.done169 [
    i64 9, label %typeswitch.body
    i64 18, label %typeswitch.body7
    i64 1, label %typeswitch.body8
    i64 8, label %typeswitch.body9
    i64 2, label %typeswitch.body10
    i64 3, label %typeswitch.body11
    i64 4, label %typeswitch.body12
    i64 5, label %typeswitch.body13
    i64 6, label %typeswitch.body14
    i64 7, label %typeswitch.body15
    i64 11, label %typeswitch.body16
    i64 28, label %typeswitch.body35
    i64 12, label %typeswitch.body36
    i64 15, label %typeswitch.body63
    i64 14, label %typeswitch.body83
    i64 17, label %typeswitch.body92
    i64 16, label %typeswitch.body101
    i64 24, label %typeswitch.body110
    i64 22, label %typeswitch.body118
    i64 19, label %typeswitch.body141
    i64 20, label %typeswitch.body142
    i64 21, label %typeswitch.body143
    i64 13, label %typeswitch.body144
    i64 10, label %typeswitch.body148
    i64 23, label %typeswitch.body149
    i64 25, label %typeswitch.body150
    i64 26, label %typeswitch.body151
    i64 27, label %typeswitch.body168
  ]

typeswitch.body:                                  ; preds = %if.done6
  %272 = bitcast i8* %269 to %runtime.Type_Info_Any*
  %273 = load %runtime.Type_Info_Any, %runtime.Type_Info_Any* %272, align 1
  store %runtime.Type_Info_Any %273, %runtime.Type_Info_Any* %13, align 1
  br label %typeswitch.done169

typeswitch.body7:                                 ; preds = %if.done6
  %274 = bitcast i8* %269 to %runtime.Type_Info_Tuple*
  %275 = load %runtime.Type_Info_Tuple, %runtime.Type_Info_Tuple* %274, align 8
  store %runtime.Type_Info_Tuple %275, %runtime.Type_Info_Tuple* %14, align 8
  br label %typeswitch.done169

typeswitch.body8:                                 ; preds = %if.done6
  %276 = bitcast i8* %269 to %runtime.Type_Info_Named*
  %277 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %276, align 8
  %278 = bitcast %runtime.Type_Info_Named* %15 to i8*
  %279 = bitcast %runtime.Type_Info_Named* %276 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %278, i8* align 1 %279, i64 80, i1 false)
  %280 = load %fmt.Info*, %fmt.Info** %3, align 8
  %281 = load %..any, %..any* %1, align 8
  %282 = load i32, i32* %4, align 4
  %283 = load %runtime.Type_Info_Named, %runtime.Type_Info_Named* %15, align 8
  %284 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_named(%fmt.Info* %280, %..any* %1, i32 %282, %runtime.Type_Info_Named* %15, i8* %284)
  br label %typeswitch.done169

typeswitch.body9:                                 ; preds = %if.done6
  %285 = bitcast i8* %269 to %runtime.Type_Info_Boolean*
  %286 = load %runtime.Type_Info_Boolean, %runtime.Type_Info_Boolean* %285, align 1
  store %runtime.Type_Info_Boolean %286, %runtime.Type_Info_Boolean* %16, align 1
  %287 = load %fmt.Info*, %fmt.Info** %3, align 8
  %288 = load %..any, %..any* %1, align 8
  %289 = load i32, i32* %4, align 4
  %290 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %287, %..any* %1, i32 %289, i8* %290)
  br label %typeswitch.done169

typeswitch.body10:                                ; preds = %if.done6
  %291 = bitcast i8* %269 to %runtime.Type_Info_Integer*
  %292 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %291, align 1
  store %runtime.Type_Info_Integer %292, %runtime.Type_Info_Integer* %17, align 1
  %293 = load %fmt.Info*, %fmt.Info** %3, align 8
  %294 = load %..any, %..any* %1, align 8
  %295 = load i32, i32* %4, align 4
  %296 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %293, %..any* %1, i32 %295, i8* %296)
  br label %typeswitch.done169

typeswitch.body11:                                ; preds = %if.done6
  %297 = bitcast i8* %269 to %runtime.Type_Info_Rune*
  %298 = load %runtime.Type_Info_Rune, %runtime.Type_Info_Rune* %297, align 1
  store %runtime.Type_Info_Rune %298, %runtime.Type_Info_Rune* %18, align 1
  %299 = load %fmt.Info*, %fmt.Info** %3, align 8
  %300 = load %..any, %..any* %1, align 8
  %301 = load i32, i32* %4, align 4
  %302 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %299, %..any* %1, i32 %301, i8* %302)
  br label %typeswitch.done169

typeswitch.body12:                                ; preds = %if.done6
  %303 = bitcast i8* %269 to %runtime.Type_Info_Float*
  %304 = load %runtime.Type_Info_Float, %runtime.Type_Info_Float* %303, align 1
  store %runtime.Type_Info_Float %304, %runtime.Type_Info_Float* %19, align 1
  %305 = load %fmt.Info*, %fmt.Info** %3, align 8
  %306 = load %..any, %..any* %1, align 8
  %307 = load i32, i32* %4, align 4
  %308 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %305, %..any* %1, i32 %307, i8* %308)
  br label %typeswitch.done169

typeswitch.body13:                                ; preds = %if.done6
  %309 = bitcast i8* %269 to %runtime.Type_Info_Complex*
  %310 = load %runtime.Type_Info_Complex, %runtime.Type_Info_Complex* %309, align 1
  store %runtime.Type_Info_Complex %310, %runtime.Type_Info_Complex* %20, align 1
  %311 = load %fmt.Info*, %fmt.Info** %3, align 8
  %312 = load %..any, %..any* %1, align 8
  %313 = load i32, i32* %4, align 4
  %314 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %311, %..any* %1, i32 %313, i8* %314)
  br label %typeswitch.done169

typeswitch.body14:                                ; preds = %if.done6
  %315 = bitcast i8* %269 to %runtime.Type_Info_Quaternion*
  %316 = load %runtime.Type_Info_Quaternion, %runtime.Type_Info_Quaternion* %315, align 1
  store %runtime.Type_Info_Quaternion %316, %runtime.Type_Info_Quaternion* %21, align 1
  %317 = load %fmt.Info*, %fmt.Info** %3, align 8
  %318 = load %..any, %..any* %1, align 8
  %319 = load i32, i32* %4, align 4
  %320 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %317, %..any* %1, i32 %319, i8* %320)
  br label %typeswitch.done169

typeswitch.body15:                                ; preds = %if.done6
  %321 = bitcast i8* %269 to %runtime.Type_Info_String*
  %322 = load %runtime.Type_Info_String, %runtime.Type_Info_String* %321, align 1
  store %runtime.Type_Info_String %322, %runtime.Type_Info_String* %22, align 1
  %323 = load %fmt.Info*, %fmt.Info** %3, align 8
  %324 = load %..any, %..any* %1, align 8
  %325 = load i32, i32* %4, align 4
  %326 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %323, %..any* %1, i32 %325, i8* %326)
  br label %typeswitch.done169

typeswitch.body16:                                ; preds = %if.done6
  %327 = bitcast i8* %269 to %runtime.Type_Info_Pointer*
  %328 = load %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %327, align 8
  store %runtime.Type_Info_Pointer %328, %runtime.Type_Info_Pointer* %23, align 8
  %329 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %330 = load i64, i64* %329, align 8
  %331 = icmp eq i64 %330, 720575940379279368
  %332 = zext i1 %331 to i8
  %333 = trunc i8 %332 to i1
  br i1 %333, label %if.then17, label %if.else

if.then17:                                        ; preds = %typeswitch.body16
  %334 = load %fmt.Info*, %fmt.Info** %3, align 8
  %335 = getelementptr inbounds %fmt.Info, %fmt.Info* %334, i32 0, i32 16
  %336 = load %io.Writer, %io.Writer* %335, align 8
  %337 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %338 = load i8*, i8** %337, align 8
  %339 = bitcast i8* %338 to %runtime.Type_Info**
  %340 = load %runtime.Type_Info*, %runtime.Type_Info** %339, align 8
  %341 = load %fmt.Info*, %fmt.Info** %3, align 8
  %342 = getelementptr inbounds %fmt.Info, %fmt.Info* %341, i32 0, i32 23
  %343 = bitcast { i64, i32 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %343, i8 0, i64 16, i1 false)
  %344 = bitcast %runtime.Context* %186 to i8*
  call void @reflect.write_type_writer({ i64, i32 }* sret({ i64, i32 }*) %24, %io.Writer* %335, %runtime.Type_Info* %340, i64* %342, i8* %344)
  %345 = load { i64, i32 }, { i64, i32 }* %24, align 8
  br label %if.done34

if.else:                                          ; preds = %typeswitch.body16
  %346 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %347 = load i8*, i8** %346, align 8
  %348 = bitcast i8* %347 to i8**
  %349 = load i8*, i8** %348, align 8
  store i8* %349, i8** %25, align 8
  %350 = load i32, i32* %4, align 4
  %351 = icmp ne i32 %350, 112
  %352 = zext i1 %351 to i8
  %353 = trunc i8 %352 to i1
  br i1 %353, label %cmp.and18, label %if.done33

cmp.and18:                                        ; preds = %if.else
  %354 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %23, i32 0, i32 0
  %355 = load %runtime.Type_Info*, %runtime.Type_Info** %354, align 8
  %356 = icmp ne %runtime.Type_Info* %355, null
  %357 = zext i1 %356 to i8
  %358 = trunc i8 %357 to i1
  br i1 %358, label %if.then19, label %if.done33

if.then19:                                        ; preds = %cmp.and18
  %359 = bitcast %..any* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %359, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %27, align 8
  %360 = load i8*, i8** %25, align 8
  %361 = getelementptr inbounds %..any, %..any* %27, i32 0, i32 0
  store i8* %360, i8** %361, align 8
  %362 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %23, i32 0, i32 0
  %363 = load %runtime.Type_Info*, %runtime.Type_Info** %362, align 8
  %364 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %363, i32 0, i32 4
  %365 = load i64, i64* %364, align 8
  %366 = getelementptr inbounds %..any, %..any* %27, i32 0, i32 1
  store i64 %365, i64* %366, align 8
  %367 = load %..any, %..any* %27, align 8
  store %..any %367, %..any* %26, align 8
  %368 = getelementptr inbounds %runtime.Type_Info_Pointer, %runtime.Type_Info_Pointer* %23, i32 0, i32 0
  %369 = load %runtime.Type_Info*, %runtime.Type_Info** %368, align 8
  %370 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %369)
  store %runtime.Type_Info* %370, %runtime.Type_Info** %28, align 8
  %371 = load %runtime.Type_Info*, %runtime.Type_Info** %28, align 8
  %372 = icmp ne %runtime.Type_Info* %371, null
  %373 = zext i1 %372 to i8
  %374 = trunc i8 %373 to i1
  br i1 %374, label %if.then20, label %if.done32

if.then20:                                        ; preds = %if.then19
  %375 = load %runtime.Type_Info*, %runtime.Type_Info** %28, align 8
  %376 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %375, i32 0, i32 5
  %377 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %376, align 8
  %378 = bitcast { [15 x i64], i64 }* %376 to i8*
  %379 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %376, i32 0, i32 1
  %380 = load i64, i64* %379, align 8
  switch i64 %380, label %typeswitch.done [
    i64 14, label %typeswitch.body21
    i64 17, label %typeswitch.body21
    i64 16, label %typeswitch.body21
    i64 22, label %typeswitch.body21
    i64 19, label %typeswitch.body26
    i64 20, label %typeswitch.body26
  ]

typeswitch.body21:                                ; preds = %if.then20, %if.then20, %if.then20, %if.then20
  %381 = bitcast { [15 x i64], i64 }* %29 to i8*
  %382 = bitcast { [15 x i64], i64 }* %376 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %381, i8* align 1 %382, i64 128, i1 false)
  %383 = load i8*, i8** %25, align 8
  %384 = icmp eq i8* %383, null
  %385 = zext i1 %384 to i8
  %386 = trunc i8 %385 to i1
  br i1 %386, label %if.then22, label %if.done23

if.then22:                                        ; preds = %typeswitch.body21
  %387 = load %fmt.Info*, %fmt.Info** %3, align 8
  %388 = getelementptr inbounds %fmt.Info, %fmt.Info* %387, i32 0, i32 16
  %389 = load %io.Writer, %io.Writer* %388, align 8
  %390 = load %fmt.Info*, %fmt.Info** %3, align 8
  %391 = getelementptr inbounds %fmt.Info, %fmt.Info* %390, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %30, align 8
  %392 = bitcast { i64, i32 }* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %392, i8 0, i64 16, i1 false)
  %393 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %31, %io.Writer* %388, %..string* %30, i64* %391, i8* %393)
  %394 = load { i64, i32 }, { i64, i32 }* %31, align 8
  ret void

if.done23:                                        ; preds = %typeswitch.body21
  %395 = load %fmt.Info*, %fmt.Info** %3, align 8
  %396 = getelementptr inbounds %fmt.Info, %fmt.Info* %395, i32 0, i32 18
  %397 = load i64, i64* %396, align 8
  %398 = icmp slt i64 %397, 1
  %399 = zext i1 %398 to i8
  %400 = trunc i8 %399 to i1
  br i1 %400, label %if.then24, label %if.done25

if.then24:                                        ; preds = %if.done23
  %401 = load %fmt.Info*, %fmt.Info** %3, align 8
  %402 = getelementptr inbounds %fmt.Info, %fmt.Info* %401, i32 0, i32 18
  %403 = load i64, i64* %402, align 8
  %404 = add i64 %403, 1
  store i64 %404, i64* %402, align 8
  %405 = load %fmt.Info*, %fmt.Info** %3, align 8
  %406 = getelementptr inbounds %fmt.Info, %fmt.Info* %405, i32 0, i32 16
  %407 = load %io.Writer, %io.Writer* %406, align 8
  %408 = bitcast %runtime.Context* %186 to i8*
  %409 = call i32 @io.write_byte_to_writer(%io.Writer* %406, i8 38, i64* null, i8* %408)
  %410 = load %fmt.Info*, %fmt.Info** %3, align 8
  %411 = load %..any, %..any* %26, align 8
  %412 = load i32, i32* %4, align 4
  %413 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_value(%fmt.Info* %410, %..any* %26, i32 %412, i8* %413)
  br label %defer

defer:                                            ; preds = %if.then24
  %414 = load %fmt.Info*, %fmt.Info** %3, align 8
  %415 = getelementptr inbounds %fmt.Info, %fmt.Info* %414, i32 0, i32 18
  %416 = load i64, i64* %415, align 8
  %417 = sub i64 %416, 1
  store i64 %417, i64* %415, align 8
  ret void

if.done25:                                        ; preds = %if.done23
  br label %typeswitch.done

typeswitch.body26:                                ; preds = %if.then20, %if.then20
  %418 = bitcast { [15 x i64], i64 }* %32 to i8*
  %419 = bitcast { [15 x i64], i64 }* %376 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %418, i8* align 1 %419, i64 128, i1 false)
  %420 = load i8*, i8** %25, align 8
  %421 = icmp eq i8* %420, null
  %422 = zext i1 %421 to i8
  %423 = trunc i8 %422 to i1
  br i1 %423, label %if.then27, label %if.done28

if.then27:                                        ; preds = %typeswitch.body26
  %424 = load %fmt.Info*, %fmt.Info** %3, align 8
  %425 = getelementptr inbounds %fmt.Info, %fmt.Info* %424, i32 0, i32 16
  %426 = load %io.Writer, %io.Writer* %425, align 8
  %427 = load %fmt.Info*, %fmt.Info** %3, align 8
  %428 = getelementptr inbounds %fmt.Info, %fmt.Info* %427, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %33, align 8
  %429 = bitcast { i64, i32 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %429, i8 0, i64 16, i1 false)
  %430 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %34, %io.Writer* %425, %..string* %33, i64* %428, i8* %430)
  %431 = load { i64, i32 }, { i64, i32 }* %34, align 8
  ret void

if.done28:                                        ; preds = %typeswitch.body26
  %432 = load %fmt.Info*, %fmt.Info** %3, align 8
  %433 = getelementptr inbounds %fmt.Info, %fmt.Info* %432, i32 0, i32 18
  %434 = load i64, i64* %433, align 8
  %435 = icmp slt i64 %434, 1
  %436 = zext i1 %435 to i8
  %437 = trunc i8 %436 to i1
  br i1 %437, label %if.then29, label %if.done31

if.then29:                                        ; preds = %if.done28
  %438 = load %fmt.Info*, %fmt.Info** %3, align 8
  %439 = getelementptr inbounds %fmt.Info, %fmt.Info* %438, i32 0, i32 18
  %440 = load i64, i64* %439, align 8
  %441 = add i64 %440, 1
  store i64 %441, i64* %439, align 8
  %442 = load %fmt.Info*, %fmt.Info** %3, align 8
  %443 = getelementptr inbounds %fmt.Info, %fmt.Info* %442, i32 0, i32 16
  %444 = load %io.Writer, %io.Writer* %443, align 8
  %445 = load %fmt.Info*, %fmt.Info** %3, align 8
  %446 = getelementptr inbounds %fmt.Info, %fmt.Info* %445, i32 0, i32 23
  %447 = bitcast %runtime.Context* %186 to i8*
  %448 = call i32 @io.write_byte_to_writer(%io.Writer* %443, i8 38, i64* %446, i8* %447)
  %449 = load %fmt.Info*, %fmt.Info** %3, align 8
  %450 = load %..any, %..any* %26, align 8
  %451 = load i32, i32* %4, align 4
  %452 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_value(%fmt.Info* %449, %..any* %26, i32 %451, i8* %452)
  br label %defer30

defer30:                                          ; preds = %if.then29
  %453 = load %fmt.Info*, %fmt.Info** %3, align 8
  %454 = getelementptr inbounds %fmt.Info, %fmt.Info* %453, i32 0, i32 18
  %455 = load i64, i64* %454, align 8
  %456 = sub i64 %455, 1
  store i64 %456, i64* %454, align 8
  ret void

if.done31:                                        ; preds = %if.done28
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %if.done31, %if.done25, %if.then20
  br label %if.done32

if.done32:                                        ; preds = %typeswitch.done, %if.then19
  br label %if.done33

if.done33:                                        ; preds = %if.done32, %cmp.and18, %if.else
  %457 = load %fmt.Info*, %fmt.Info** %3, align 8
  %458 = load i8*, i8** %25, align 8
  %459 = load i32, i32* %4, align 4
  %460 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_pointer(%fmt.Info* %457, i8* %458, i32 %459, i8* %460)
  br label %if.done34

if.done34:                                        ; preds = %if.done33, %if.then17
  br label %typeswitch.done169

typeswitch.body35:                                ; preds = %if.done6
  %461 = bitcast i8* %269 to %runtime.Type_Info_Soa_Pointer*
  %462 = load %runtime.Type_Info_Soa_Pointer, %runtime.Type_Info_Soa_Pointer* %461, align 8
  store %runtime.Type_Info_Soa_Pointer %462, %runtime.Type_Info_Soa_Pointer* %35, align 8
  %463 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %464 = load i8*, i8** %463, align 8
  %465 = bitcast i8* %464 to %runtime.Raw_Soa_Pointer*
  %466 = load %runtime.Raw_Soa_Pointer, %runtime.Raw_Soa_Pointer* %465, align 8
  store %runtime.Raw_Soa_Pointer %466, %runtime.Raw_Soa_Pointer* %36, align 8
  %467 = load %fmt.Info*, %fmt.Info** %3, align 8
  %468 = load %runtime.Raw_Soa_Pointer, %runtime.Raw_Soa_Pointer* %36, align 8
  %469 = load i32, i32* %4, align 4
  %470 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_soa_pointer(%fmt.Info* %467, %runtime.Raw_Soa_Pointer* %36, i32 %469, i8* %470)
  br label %typeswitch.done169

typeswitch.body36:                                ; preds = %if.done6
  %471 = bitcast i8* %269 to %runtime.Type_Info_Multi_Pointer*
  %472 = load %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %471, align 8
  store %runtime.Type_Info_Multi_Pointer %472, %runtime.Type_Info_Multi_Pointer* %37, align 8
  %473 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %474 = load i8*, i8** %473, align 8
  %475 = bitcast i8* %474 to i8**
  %476 = load i8*, i8** %475, align 8
  store i8* %476, i8** %38, align 8
  %477 = load i8*, i8** %38, align 8
  %478 = icmp eq i8* %477, null
  %479 = zext i1 %478 to i8
  %480 = trunc i8 %479 to i1
  br i1 %480, label %if.then37, label %if.done38

if.then37:                                        ; preds = %typeswitch.body36
  %481 = load %fmt.Info*, %fmt.Info** %3, align 8
  %482 = getelementptr inbounds %fmt.Info, %fmt.Info* %481, i32 0, i32 16
  %483 = load %io.Writer, %io.Writer* %482, align 8
  %484 = load %fmt.Info*, %fmt.Info** %3, align 8
  %485 = getelementptr inbounds %fmt.Info, %fmt.Info* %484, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %39, align 8
  %486 = bitcast { i64, i32 }* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %486, i8 0, i64 16, i1 false)
  %487 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %40, %io.Writer* %482, %..string* %39, i64* %485, i8* %487)
  %488 = load { i64, i32 }, { i64, i32 }* %40, align 8
  ret void

if.done38:                                        ; preds = %typeswitch.body36
  %489 = load i32, i32* %4, align 4
  %490 = icmp ne i32 %489, 112
  %491 = zext i1 %490 to i8
  %492 = trunc i8 %491 to i1
  br i1 %492, label %cmp.and39, label %if.done62

cmp.and39:                                        ; preds = %if.done38
  %493 = getelementptr inbounds %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %37, i32 0, i32 0
  %494 = load %runtime.Type_Info*, %runtime.Type_Info** %493, align 8
  %495 = icmp ne %runtime.Type_Info* %494, null
  %496 = zext i1 %495 to i8
  %497 = trunc i8 %496 to i1
  br i1 %497, label %if.then40, label %if.done62

if.then40:                                        ; preds = %cmp.and39
  %498 = bitcast %..any* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %498, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %42, align 8
  %499 = load i8*, i8** %38, align 8
  %500 = getelementptr inbounds %..any, %..any* %42, i32 0, i32 0
  store i8* %499, i8** %500, align 8
  %501 = getelementptr inbounds %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %37, i32 0, i32 0
  %502 = load %runtime.Type_Info*, %runtime.Type_Info** %501, align 8
  %503 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %502, i32 0, i32 4
  %504 = load i64, i64* %503, align 8
  %505 = getelementptr inbounds %..any, %..any* %42, i32 0, i32 1
  store i64 %504, i64* %505, align 8
  %506 = load %..any, %..any* %42, align 8
  store %..any %506, %..any* %41, align 8
  %507 = getelementptr inbounds %runtime.Type_Info_Multi_Pointer, %runtime.Type_Info_Multi_Pointer* %37, i32 0, i32 0
  %508 = load %runtime.Type_Info*, %runtime.Type_Info** %507, align 8
  %509 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %508)
  store %runtime.Type_Info* %509, %runtime.Type_Info** %43, align 8
  %510 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %511 = icmp ne %runtime.Type_Info* %510, null
  %512 = zext i1 %511 to i8
  %513 = trunc i8 %512 to i1
  br i1 %513, label %if.then41, label %if.done61

if.then41:                                        ; preds = %if.then40
  br label %if.init42

if.init42:                                        ; preds = %if.then41
  %514 = load %fmt.Info*, %fmt.Info** %3, align 8
  %515 = getelementptr inbounds %fmt.Info, %fmt.Info* %514, i32 0, i32 20
  %516 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %515, align 8
  %517 = bitcast { i64, i8 }* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* %517, i8 0, i64 16, i1 false)
  %518 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %46, i32 0, i32 0
  %519 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %46, i32 0, i32 1
  %520 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %515, i32 0, i32 1
  %521 = load i64, i64* %520, align 8
  %522 = icmp eq i64 %521, 1
  br i1 %522, label %union_cast.ok, label %union_cast.end

union_cast.ok:                                    ; preds = %if.init42
  %523 = bitcast %"runtime.Maybe(int)-16164"* %515 to i64*
  %524 = load i64, i64* %523, align 8
  store i64 %524, i64* %518, align 8
  store i8 1, i8* %519, align 1
  br label %union_cast.end

union_cast.end:                                   ; preds = %union_cast.ok, %if.init42
  %525 = load { i64, i8 }, { i64, i8 }* %46, align 8
  %526 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %46, i32 0, i32 0
  %527 = load i64, i64* %526, align 8
  %528 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %46, i32 0, i32 1
  %529 = load i8, i8* %528, align 1
  store i64 %527, i64* %44, align 8
  store i8 %529, i8* %45, align 1
  %530 = load i8, i8* %45, align 1
  %531 = trunc i8 %530 to i1
  br i1 %531, label %if.then43, label %if.else44

if.then43:                                        ; preds = %union_cast.end
  %532 = load %fmt.Info*, %fmt.Info** %3, align 8
  %533 = load i8*, i8** %38, align 8
  %534 = load i64, i64* %44, align 8
  %535 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %536 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %535, i32 0, i32 0
  %537 = load i64, i64* %536, align 8
  %538 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %539 = load i32, i32* %4, align 4
  %540 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array(%fmt.Info* %532, i8* %533, i64 %534, i64 %537, %runtime.Type_Info* %538, i32 %539, i8* %540)
  ret void

if.else44:                                        ; preds = %union_cast.end
  %541 = load %fmt.Info*, %fmt.Info** %3, align 8
  %542 = getelementptr inbounds %fmt.Info, %fmt.Info* %541, i32 0, i32 21
  %543 = load i8, i8* %542, align 1
  %544 = trunc i8 %543 to i1
  br i1 %544, label %if.then45, label %if.done46

if.then45:                                        ; preds = %if.else44
  %545 = load %fmt.Info*, %fmt.Info** %3, align 8
  %546 = load i8*, i8** %38, align 8
  %547 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %548 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %547, i32 0, i32 0
  %549 = load i64, i64* %548, align 8
  %550 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %551 = load i32, i32* %4, align 4
  %552 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array_nul_terminated(%fmt.Info* %545, i8* %546, i64 -1, i64 %549, %runtime.Type_Info* %550, i32 %551, i8* %552)
  ret void

if.done46:                                        ; preds = %if.else44
  br label %if.done47

if.done47:                                        ; preds = %if.done46
  %553 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %554 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %553, i32 0, i32 5
  %555 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %554, align 8
  %556 = bitcast { [15 x i64], i64 }* %554 to i8*
  %557 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %554, i32 0, i32 1
  %558 = load i64, i64* %557, align 8
  switch i64 %558, label %typeswitch.done60 [
    i64 2, label %typeswitch.body48
    i64 14, label %typeswitch.body52
    i64 17, label %typeswitch.body52
    i64 16, label %typeswitch.body52
    i64 22, label %typeswitch.body52
    i64 19, label %typeswitch.body56
    i64 20, label %typeswitch.body56
  ]

typeswitch.body48:                                ; preds = %if.done47
  %559 = bitcast i8* %556 to %runtime.Type_Info_Integer*
  %560 = load %runtime.Type_Info_Integer, %runtime.Type_Info_Integer* %559, align 1
  store %runtime.Type_Info_Integer %560, %runtime.Type_Info_Integer* %47, align 1
  %561 = load i32, i32* %4, align 4
  switch i32 %561, label %switch.done51 [
    i32 115, label %switch.case.body
    i32 113, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %typeswitch.body48, %typeswitch.body48
  %562 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %563 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %562, i32 0, i32 4
  %564 = load i64, i64* %563, align 8
  switch i64 %564, label %switch.done [
    i64 72057594037927939, label %switch.case.body49
    i64 72057594037928040, label %switch.case.body50
    i64 72057594037927951, label %switch.case.body50
    i64 4755801206503243899, label %switch.case.body50
  ]

switch.case.body49:                               ; preds = %switch.case.body
  %565 = load %fmt.Info*, %fmt.Info** %3, align 8
  %566 = load i8*, i8** %38, align 8
  %567 = load i32, i32* %4, align 4
  %568 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_cstring(%fmt.Info* %565, i8* %566, i32 %567, i8* %568)
  ret void

switch.case.body50:                               ; preds = %switch.case.body, %switch.case.body, %switch.case.body
  %569 = load i8*, i8** %38, align 8
  %570 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %571 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %570, i32 0, i32 0
  %572 = load i64, i64* %571, align 8
  %573 = bitcast %runtime.Context* %186 to i8*
  %574 = call i64 @fmt.search_nul_termination-832(i8* %569, i64 %572, i64 -1, i8* %573)
  store i64 %574, i64* %48, align 8
  %575 = load %fmt.Info*, %fmt.Info** %3, align 8
  %576 = load i8*, i8** %38, align 8
  %577 = load i64, i64* %48, align 8
  %578 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %579 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %578, i32 0, i32 0
  %580 = load i64, i64* %579, align 8
  %581 = load %runtime.Type_Info*, %runtime.Type_Info** %43, align 8
  %582 = load i32, i32* %4, align 4
  %583 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array(%fmt.Info* %575, i8* %576, i64 %577, i64 %580, %runtime.Type_Info* %581, i32 %582, i8* %583)
  ret void

switch.done:                                      ; preds = %switch.case.body
  br label %switch.done51

switch.done51:                                    ; preds = %switch.done, %typeswitch.body48
  br label %typeswitch.done60

typeswitch.body52:                                ; preds = %if.done47, %if.done47, %if.done47, %if.done47
  %584 = bitcast { [15 x i64], i64 }* %49 to i8*
  %585 = bitcast { [15 x i64], i64 }* %554 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %584, i8* align 1 %585, i64 128, i1 false)
  %586 = load %fmt.Info*, %fmt.Info** %3, align 8
  %587 = getelementptr inbounds %fmt.Info, %fmt.Info* %586, i32 0, i32 18
  %588 = load i64, i64* %587, align 8
  %589 = icmp slt i64 %588, 1
  %590 = zext i1 %589 to i8
  %591 = trunc i8 %590 to i1
  br i1 %591, label %if.then53, label %if.done55

if.then53:                                        ; preds = %typeswitch.body52
  %592 = load %fmt.Info*, %fmt.Info** %3, align 8
  %593 = getelementptr inbounds %fmt.Info, %fmt.Info* %592, i32 0, i32 18
  %594 = load i64, i64* %593, align 8
  %595 = add i64 %594, 1
  store i64 %595, i64* %593, align 8
  %596 = load %fmt.Info*, %fmt.Info** %3, align 8
  %597 = getelementptr inbounds %fmt.Info, %fmt.Info* %596, i32 0, i32 16
  %598 = load %io.Writer, %io.Writer* %597, align 8
  %599 = load %fmt.Info*, %fmt.Info** %3, align 8
  %600 = getelementptr inbounds %fmt.Info, %fmt.Info* %599, i32 0, i32 23
  %601 = bitcast %runtime.Context* %186 to i8*
  %602 = call i32 @io.write_byte_to_writer(%io.Writer* %597, i8 38, i64* %600, i8* %601)
  %603 = load %fmt.Info*, %fmt.Info** %3, align 8
  %604 = load %..any, %..any* %41, align 8
  %605 = load i32, i32* %4, align 4
  %606 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_value(%fmt.Info* %603, %..any* %41, i32 %605, i8* %606)
  br label %defer54

defer54:                                          ; preds = %if.then53
  %607 = load %fmt.Info*, %fmt.Info** %3, align 8
  %608 = getelementptr inbounds %fmt.Info, %fmt.Info* %607, i32 0, i32 18
  %609 = load i64, i64* %608, align 8
  %610 = sub i64 %609, 1
  store i64 %610, i64* %608, align 8
  ret void

if.done55:                                        ; preds = %typeswitch.body52
  br label %typeswitch.done60

typeswitch.body56:                                ; preds = %if.done47, %if.done47
  %611 = bitcast { [15 x i64], i64 }* %50 to i8*
  %612 = bitcast { [15 x i64], i64 }* %554 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %611, i8* align 1 %612, i64 128, i1 false)
  %613 = load %fmt.Info*, %fmt.Info** %3, align 8
  %614 = getelementptr inbounds %fmt.Info, %fmt.Info* %613, i32 0, i32 18
  %615 = load i64, i64* %614, align 8
  %616 = icmp slt i64 %615, 1
  %617 = zext i1 %616 to i8
  %618 = trunc i8 %617 to i1
  br i1 %618, label %if.then57, label %if.done59

if.then57:                                        ; preds = %typeswitch.body56
  %619 = load %fmt.Info*, %fmt.Info** %3, align 8
  %620 = getelementptr inbounds %fmt.Info, %fmt.Info* %619, i32 0, i32 18
  %621 = load i64, i64* %620, align 8
  %622 = add i64 %621, 1
  store i64 %622, i64* %620, align 8
  %623 = load %fmt.Info*, %fmt.Info** %3, align 8
  %624 = getelementptr inbounds %fmt.Info, %fmt.Info* %623, i32 0, i32 16
  %625 = load %io.Writer, %io.Writer* %624, align 8
  %626 = load %fmt.Info*, %fmt.Info** %3, align 8
  %627 = getelementptr inbounds %fmt.Info, %fmt.Info* %626, i32 0, i32 23
  %628 = bitcast %runtime.Context* %186 to i8*
  %629 = call i32 @io.write_byte_to_writer(%io.Writer* %624, i8 38, i64* %627, i8* %628)
  %630 = load %fmt.Info*, %fmt.Info** %3, align 8
  %631 = load %..any, %..any* %41, align 8
  %632 = load i32, i32* %4, align 4
  %633 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_value(%fmt.Info* %630, %..any* %41, i32 %632, i8* %633)
  br label %defer58

defer58:                                          ; preds = %if.then57
  %634 = load %fmt.Info*, %fmt.Info** %3, align 8
  %635 = getelementptr inbounds %fmt.Info, %fmt.Info* %634, i32 0, i32 18
  %636 = load i64, i64* %635, align 8
  %637 = sub i64 %636, 1
  store i64 %637, i64* %635, align 8
  ret void

if.done59:                                        ; preds = %typeswitch.body56
  br label %typeswitch.done60

typeswitch.done60:                                ; preds = %if.done59, %if.done55, %switch.done51, %if.done47
  br label %if.done61

if.done61:                                        ; preds = %typeswitch.done60, %if.then40
  br label %if.done62

if.done62:                                        ; preds = %if.done61, %cmp.and39, %if.done38
  %638 = load %fmt.Info*, %fmt.Info** %3, align 8
  %639 = load i8*, i8** %38, align 8
  %640 = load i32, i32* %4, align 4
  %641 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_pointer(%fmt.Info* %638, i8* %639, i32 %640, i8* %641)
  br label %typeswitch.done169

typeswitch.body63:                                ; preds = %if.done6
  %642 = bitcast i8* %269 to %runtime.Type_Info_Enumerated_Array*
  %643 = load %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %642, align 8
  %644 = bitcast %runtime.Type_Info_Enumerated_Array* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* %644, i8 0, i64 56, i1 false)
  store %runtime.Type_Info_Enumerated_Array %643, %runtime.Type_Info_Enumerated_Array* %51, align 8
  %645 = load %fmt.Info*, %fmt.Info** %3, align 8
  %646 = getelementptr inbounds %fmt.Info, %fmt.Info* %645, i32 0, i32 19
  %647 = load i64, i64* %646, align 8
  %648 = add i64 %647, 1
  store i64 %648, i64* %646, align 8
  %649 = load %fmt.Info*, %fmt.Info** %3, align 8
  %650 = getelementptr inbounds %fmt.Info, %fmt.Info* %649, i32 0, i32 4
  %651 = load i8, i8* %650, align 1
  %652 = trunc i8 %651 to i1
  br i1 %652, label %if.then64, label %if.else70

if.then64:                                        ; preds = %typeswitch.body63
  %653 = load %fmt.Info*, %fmt.Info** %3, align 8
  %654 = getelementptr inbounds %fmt.Info, %fmt.Info* %653, i32 0, i32 16
  %655 = load %io.Writer, %io.Writer* %654, align 8
  %656 = load %fmt.Info*, %fmt.Info** %3, align 8
  %657 = getelementptr inbounds %fmt.Info, %fmt.Info* %656, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2b2", i64 0, i64 0), i64 2 }, %..string* %52, align 8
  %658 = bitcast { i64, i32 }* %53 to i8*
  call void @llvm.memset.p0i8.i64(i8* %658, i8 0, i64 16, i1 false)
  %659 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %53, %io.Writer* %654, %..string* %52, i64* %657, i8* %659)
  %660 = load { i64, i32 }, { i64, i32 }* %53, align 8
  %661 = load %fmt.Info*, %fmt.Info** %3, align 8
  %662 = getelementptr inbounds %fmt.Info, %fmt.Info* %661, i32 0, i32 10
  %663 = load i64, i64* %662, align 8
  store i64 %663, i64* %54, align 8
  %664 = load %fmt.Info*, %fmt.Info** %3, align 8
  %665 = getelementptr inbounds %fmt.Info, %fmt.Info* %664, i32 0, i32 10
  %666 = load i64, i64* %665, align 8
  %667 = add i64 %666, 1
  store i64 %667, i64* %665, align 8
  store i64 0, i64* %55, align 8
  store i64 0, i64* %56, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %if.then64
  %668 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 3
  %669 = load i64, i64* %668, align 8
  %670 = load i64, i64* %55, align 8
  %671 = icmp slt i64 %670, %669
  br i1 %671, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %672 = load i64, i64* %55, align 8
  %673 = load i64, i64* %56, align 8
  store i64 %672, i64* %57, align 8
  %674 = load %fmt.Info*, %fmt.Info** %3, align 8
  %675 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %674, i8* %675)
  %676 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 1
  %677 = load %runtime.Type_Info*, %runtime.Type_Info** %676, align 8
  %678 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 4
  %679 = load i64, i64* %678, align 8
  %680 = load i64, i64* %57, align 8
  %681 = bitcast { %..string, i8 }* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* %681, i8 0, i64 24, i1 false)
  %682 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.stored_enum_value_to_string({ %..string, i8 }* sret({ %..string, i8 }*) %60, %runtime.Type_Info* %677, i64 %679, i64 %680, i8* %682)
  %683 = load { %..string, i8 }, { %..string, i8 }* %60, align 8
  %684 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %60, i32 0, i32 0
  %685 = load %..string, %..string* %684, align 8
  %686 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %60, i32 0, i32 1
  %687 = load i8, i8* %686, align 1
  store %..string %685, %..string* %58, align 8
  store i8 %687, i8* %59, align 1
  %688 = load i8, i8* %59, align 1
  %689 = trunc i8 %688 to i1
  br i1 %689, label %if.then65, label %if.else66

if.then65:                                        ; preds = %for.interval.body
  %690 = load %fmt.Info*, %fmt.Info** %3, align 8
  %691 = getelementptr inbounds %fmt.Info, %fmt.Info* %690, i32 0, i32 16
  %692 = load %io.Writer, %io.Writer* %691, align 8
  %693 = load %fmt.Info*, %fmt.Info** %3, align 8
  %694 = getelementptr inbounds %fmt.Info, %fmt.Info* %693, i32 0, i32 23
  %695 = bitcast %runtime.Context* %186 to i8*
  %696 = call i32 @io.write_byte_to_writer(%io.Writer* %691, i8 46, i64* %694, i8* %695)
  %697 = load %fmt.Info*, %fmt.Info** %3, align 8
  %698 = getelementptr inbounds %fmt.Info, %fmt.Info* %697, i32 0, i32 16
  %699 = load %io.Writer, %io.Writer* %698, align 8
  %700 = load %..string, %..string* %58, align 8
  %701 = load %fmt.Info*, %fmt.Info** %3, align 8
  %702 = getelementptr inbounds %fmt.Info, %fmt.Info* %701, i32 0, i32 23
  %703 = bitcast { i64, i32 }* %61 to i8*
  call void @llvm.memset.p0i8.i64(i8* %703, i8 0, i64 16, i1 false)
  %704 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %61, %io.Writer* %698, %..string* %58, i64* %702, i8* %704)
  %705 = load { i64, i32 }, { i64, i32 }* %61, align 8
  br label %if.done67

if.else66:                                        ; preds = %for.interval.body
  %706 = load %fmt.Info*, %fmt.Info** %3, align 8
  %707 = getelementptr inbounds %fmt.Info, %fmt.Info* %706, i32 0, i32 16
  %708 = load %io.Writer, %io.Writer* %707, align 8
  %709 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 4
  %710 = load i64, i64* %709, align 8
  %711 = load i64, i64* %57, align 8
  %712 = add i64 %710, %711
  %713 = load %fmt.Info*, %fmt.Info** %3, align 8
  %714 = getelementptr inbounds %fmt.Info, %fmt.Info* %713, i32 0, i32 23
  %715 = bitcast { i64, i32 }* %62 to i8*
  call void @llvm.memset.p0i8.i64(i8* %715, i8 0, i64 16, i1 false)
  %716 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_i64({ i64, i32 }* sret({ i64, i32 }*) %62, %io.Writer* %707, i64 %712, i64 10, i64* %714, i8* %716)
  %717 = load { i64, i32 }, { i64, i32 }* %62, align 8
  br label %if.done67

if.done67:                                        ; preds = %if.else66, %if.then65
  %718 = load %fmt.Info*, %fmt.Info** %3, align 8
  %719 = getelementptr inbounds %fmt.Info, %fmt.Info* %718, i32 0, i32 16
  %720 = load %io.Writer, %io.Writer* %719, align 8
  %721 = load %fmt.Info*, %fmt.Info** %3, align 8
  %722 = getelementptr inbounds %fmt.Info, %fmt.Info* %721, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2ab", i64 0, i64 0), i64 3 }, %..string* %63, align 8
  %723 = bitcast { i64, i32 }* %64 to i8*
  call void @llvm.memset.p0i8.i64(i8* %723, i8 0, i64 16, i1 false)
  %724 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %64, %io.Writer* %719, %..string* %63, i64* %722, i8* %724)
  %725 = load { i64, i32 }, { i64, i32 }* %64, align 8
  %726 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %727 = load i8*, i8** %726, align 8
  %728 = ptrtoint i8* %727 to i64
  %729 = load i64, i64* %57, align 8
  %730 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 2
  %731 = load i64, i64* %730, align 8
  %732 = mul i64 %729, %731
  %733 = add i64 %728, %732
  store i64 %733, i64* %65, align 8
  %734 = load %fmt.Info*, %fmt.Info** %3, align 8
  %735 = bitcast %..any* %66 to i8*
  call void @llvm.memset.p0i8.i64(i8* %735, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %66, align 8
  %736 = load i64, i64* %65, align 8
  %737 = inttoptr i64 %736 to i8*
  %738 = getelementptr inbounds %..any, %..any* %66, i32 0, i32 0
  store i8* %737, i8** %738, align 8
  %739 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 0
  %740 = load %runtime.Type_Info*, %runtime.Type_Info** %739, align 8
  %741 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %740, i32 0, i32 4
  %742 = load i64, i64* %741, align 8
  %743 = getelementptr inbounds %..any, %..any* %66, i32 0, i32 1
  store i64 %742, i64* %743, align 8
  %744 = load %..any, %..any* %66, align 8
  %745 = load i32, i32* %4, align 4
  %746 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %734, %..any* %66, i32 %745, i8* %746)
  %747 = load %fmt.Info*, %fmt.Info** %3, align 8
  %748 = getelementptr inbounds %fmt.Info, %fmt.Info* %747, i32 0, i32 16
  %749 = load %io.Writer, %io.Writer* %748, align 8
  %750 = load %fmt.Info*, %fmt.Info** %3, align 8
  %751 = getelementptr inbounds %fmt.Info, %fmt.Info* %750, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2a5", i64 0, i64 0), i64 2 }, %..string* %67, align 8
  %752 = bitcast { i64, i32 }* %68 to i8*
  call void @llvm.memset.p0i8.i64(i8* %752, i8 0, i64 16, i1 false)
  %753 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %68, %io.Writer* %748, %..string* %67, i64* %751, i8* %753)
  %754 = load { i64, i32 }, { i64, i32 }* %68, align 8
  br label %for.interval.post

for.interval.post:                                ; preds = %if.done67
  %755 = load i64, i64* %55, align 8
  %756 = add i64 %755, 1
  store i64 %756, i64* %55, align 8
  %757 = load i64, i64* %56, align 8
  %758 = add i64 %757, 1
  store i64 %758, i64* %56, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  br label %defer68

defer68:                                          ; preds = %for.interval.done
  %759 = load %fmt.Info*, %fmt.Info** %3, align 8
  %760 = getelementptr inbounds %fmt.Info, %fmt.Info* %759, i32 0, i32 10
  %761 = load i64, i64* %54, align 8
  store i64 %761, i64* %760, align 8
  br label %defer69

defer69:                                          ; preds = %defer68
  %762 = load %fmt.Info*, %fmt.Info** %3, align 8
  %763 = getelementptr inbounds %fmt.Info, %fmt.Info* %762, i32 0, i32 16
  %764 = load %io.Writer, %io.Writer* %763, align 8
  %765 = load %fmt.Info*, %fmt.Info** %3, align 8
  %766 = getelementptr inbounds %fmt.Info, %fmt.Info* %765, i32 0, i32 23
  %767 = bitcast %runtime.Context* %186 to i8*
  %768 = call i32 @io.write_byte_to_writer(%io.Writer* %763, i8 10, i64* %766, i8* %767)
  %769 = load %fmt.Info*, %fmt.Info** %3, align 8
  %770 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_write_indent(%fmt.Info* %769, i8* %770)
  %771 = load %fmt.Info*, %fmt.Info** %3, align 8
  %772 = getelementptr inbounds %fmt.Info, %fmt.Info* %771, i32 0, i32 16
  %773 = load %io.Writer, %io.Writer* %772, align 8
  %774 = load %fmt.Info*, %fmt.Info** %3, align 8
  %775 = getelementptr inbounds %fmt.Info, %fmt.Info* %774, i32 0, i32 23
  %776 = bitcast %runtime.Context* %186 to i8*
  %777 = call i32 @io.write_byte_to_writer(%io.Writer* %772, i8 93, i64* %775, i8* %776)
  br label %if.done81

if.else70:                                        ; preds = %typeswitch.body63
  %778 = load %fmt.Info*, %fmt.Info** %3, align 8
  %779 = getelementptr inbounds %fmt.Info, %fmt.Info* %778, i32 0, i32 16
  %780 = load %io.Writer, %io.Writer* %779, align 8
  %781 = load %fmt.Info*, %fmt.Info** %3, align 8
  %782 = getelementptr inbounds %fmt.Info, %fmt.Info* %781, i32 0, i32 23
  %783 = bitcast %runtime.Context* %186 to i8*
  %784 = call i32 @io.write_byte_to_writer(%io.Writer* %779, i8 91, i64* %782, i8* %783)
  store i64 0, i64* %69, align 8
  store i64 0, i64* %70, align 8
  br label %for.interval.loop71

for.interval.loop71:                              ; preds = %for.interval.post78, %if.else70
  %785 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 3
  %786 = load i64, i64* %785, align 8
  %787 = load i64, i64* %69, align 8
  %788 = icmp slt i64 %787, %786
  br i1 %788, label %for.interval.body72, label %for.interval.done79

for.interval.body72:                              ; preds = %for.interval.loop71
  %789 = load i64, i64* %69, align 8
  %790 = load i64, i64* %70, align 8
  store i64 %789, i64* %71, align 8
  %791 = load i64, i64* %71, align 8
  %792 = icmp sgt i64 %791, 0
  %793 = zext i1 %792 to i8
  %794 = trunc i8 %793 to i1
  br i1 %794, label %if.then73, label %if.done74

if.then73:                                        ; preds = %for.interval.body72
  %795 = load %fmt.Info*, %fmt.Info** %3, align 8
  %796 = getelementptr inbounds %fmt.Info, %fmt.Info* %795, i32 0, i32 16
  %797 = load %io.Writer, %io.Writer* %796, align 8
  %798 = load %fmt.Info*, %fmt.Info** %3, align 8
  %799 = getelementptr inbounds %fmt.Info, %fmt.Info* %798, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %72, align 8
  %800 = bitcast { i64, i32 }* %73 to i8*
  call void @llvm.memset.p0i8.i64(i8* %800, i8 0, i64 16, i1 false)
  %801 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %73, %io.Writer* %796, %..string* %72, i64* %799, i8* %801)
  %802 = load { i64, i32 }, { i64, i32 }* %73, align 8
  br label %if.done74

if.done74:                                        ; preds = %if.then73, %for.interval.body72
  %803 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 1
  %804 = load %runtime.Type_Info*, %runtime.Type_Info** %803, align 8
  %805 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 4
  %806 = load i64, i64* %805, align 8
  %807 = load i64, i64* %71, align 8
  %808 = bitcast { %..string, i8 }* %76 to i8*
  call void @llvm.memset.p0i8.i64(i8* %808, i8 0, i64 24, i1 false)
  %809 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.stored_enum_value_to_string({ %..string, i8 }* sret({ %..string, i8 }*) %76, %runtime.Type_Info* %804, i64 %806, i64 %807, i8* %809)
  %810 = load { %..string, i8 }, { %..string, i8 }* %76, align 8
  %811 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %76, i32 0, i32 0
  %812 = load %..string, %..string* %811, align 8
  %813 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %76, i32 0, i32 1
  %814 = load i8, i8* %813, align 1
  store %..string %812, %..string* %74, align 8
  store i8 %814, i8* %75, align 1
  %815 = load i8, i8* %75, align 1
  %816 = trunc i8 %815 to i1
  br i1 %816, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.done74
  %817 = load %fmt.Info*, %fmt.Info** %3, align 8
  %818 = getelementptr inbounds %fmt.Info, %fmt.Info* %817, i32 0, i32 16
  %819 = load %io.Writer, %io.Writer* %818, align 8
  %820 = load %fmt.Info*, %fmt.Info** %3, align 8
  %821 = getelementptr inbounds %fmt.Info, %fmt.Info* %820, i32 0, i32 23
  %822 = bitcast %runtime.Context* %186 to i8*
  %823 = call i32 @io.write_byte_to_writer(%io.Writer* %818, i8 46, i64* %821, i8* %822)
  %824 = load %fmt.Info*, %fmt.Info** %3, align 8
  %825 = getelementptr inbounds %fmt.Info, %fmt.Info* %824, i32 0, i32 16
  %826 = load %io.Writer, %io.Writer* %825, align 8
  %827 = load %..string, %..string* %74, align 8
  %828 = load %fmt.Info*, %fmt.Info** %3, align 8
  %829 = getelementptr inbounds %fmt.Info, %fmt.Info* %828, i32 0, i32 23
  %830 = bitcast { i64, i32 }* %77 to i8*
  call void @llvm.memset.p0i8.i64(i8* %830, i8 0, i64 16, i1 false)
  %831 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %77, %io.Writer* %825, %..string* %74, i64* %829, i8* %831)
  %832 = load { i64, i32 }, { i64, i32 }* %77, align 8
  br label %if.done77

if.else76:                                        ; preds = %if.done74
  %833 = load %fmt.Info*, %fmt.Info** %3, align 8
  %834 = getelementptr inbounds %fmt.Info, %fmt.Info* %833, i32 0, i32 16
  %835 = load %io.Writer, %io.Writer* %834, align 8
  %836 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 4
  %837 = load i64, i64* %836, align 8
  %838 = load i64, i64* %71, align 8
  %839 = add i64 %837, %838
  %840 = load %fmt.Info*, %fmt.Info** %3, align 8
  %841 = getelementptr inbounds %fmt.Info, %fmt.Info* %840, i32 0, i32 23
  %842 = bitcast { i64, i32 }* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* %842, i8 0, i64 16, i1 false)
  %843 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_i64({ i64, i32 }* sret({ i64, i32 }*) %78, %io.Writer* %834, i64 %839, i64 10, i64* %841, i8* %843)
  %844 = load { i64, i32 }, { i64, i32 }* %78, align 8
  br label %if.done77

if.done77:                                        ; preds = %if.else76, %if.then75
  %845 = load %fmt.Info*, %fmt.Info** %3, align 8
  %846 = getelementptr inbounds %fmt.Info, %fmt.Info* %845, i32 0, i32 16
  %847 = load %io.Writer, %io.Writer* %846, align 8
  %848 = load %fmt.Info*, %fmt.Info** %3, align 8
  %849 = getelementptr inbounds %fmt.Info, %fmt.Info* %848, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2ab", i64 0, i64 0), i64 3 }, %..string* %79, align 8
  %850 = bitcast { i64, i32 }* %80 to i8*
  call void @llvm.memset.p0i8.i64(i8* %850, i8 0, i64 16, i1 false)
  %851 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %80, %io.Writer* %846, %..string* %79, i64* %849, i8* %851)
  %852 = load { i64, i32 }, { i64, i32 }* %80, align 8
  %853 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %854 = load i8*, i8** %853, align 8
  %855 = ptrtoint i8* %854 to i64
  %856 = load i64, i64* %71, align 8
  %857 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 2
  %858 = load i64, i64* %857, align 8
  %859 = mul i64 %856, %858
  %860 = add i64 %855, %859
  store i64 %860, i64* %81, align 8
  %861 = load %fmt.Info*, %fmt.Info** %3, align 8
  %862 = bitcast %..any* %82 to i8*
  call void @llvm.memset.p0i8.i64(i8* %862, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %82, align 8
  %863 = load i64, i64* %81, align 8
  %864 = inttoptr i64 %863 to i8*
  %865 = getelementptr inbounds %..any, %..any* %82, i32 0, i32 0
  store i8* %864, i8** %865, align 8
  %866 = getelementptr inbounds %runtime.Type_Info_Enumerated_Array, %runtime.Type_Info_Enumerated_Array* %51, i32 0, i32 0
  %867 = load %runtime.Type_Info*, %runtime.Type_Info** %866, align 8
  %868 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %867, i32 0, i32 4
  %869 = load i64, i64* %868, align 8
  %870 = getelementptr inbounds %..any, %..any* %82, i32 0, i32 1
  store i64 %869, i64* %870, align 8
  %871 = load %..any, %..any* %82, align 8
  %872 = load i32, i32* %4, align 4
  %873 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %861, %..any* %82, i32 %872, i8* %873)
  br label %for.interval.post78

for.interval.post78:                              ; preds = %if.done77
  %874 = load i64, i64* %69, align 8
  %875 = add i64 %874, 1
  store i64 %875, i64* %69, align 8
  %876 = load i64, i64* %70, align 8
  %877 = add i64 %876, 1
  store i64 %877, i64* %70, align 8
  br label %for.interval.loop71

for.interval.done79:                              ; preds = %for.interval.loop71
  br label %defer80

defer80:                                          ; preds = %for.interval.done79
  %878 = load %fmt.Info*, %fmt.Info** %3, align 8
  %879 = getelementptr inbounds %fmt.Info, %fmt.Info* %878, i32 0, i32 16
  %880 = load %io.Writer, %io.Writer* %879, align 8
  %881 = load %fmt.Info*, %fmt.Info** %3, align 8
  %882 = getelementptr inbounds %fmt.Info, %fmt.Info* %881, i32 0, i32 23
  %883 = bitcast %runtime.Context* %186 to i8*
  %884 = call i32 @io.write_byte_to_writer(%io.Writer* %879, i8 93, i64* %882, i8* %883)
  br label %if.done81

if.done81:                                        ; preds = %defer80, %defer69
  br label %defer82

defer82:                                          ; preds = %if.done81
  %885 = load %fmt.Info*, %fmt.Info** %3, align 8
  %886 = getelementptr inbounds %fmt.Info, %fmt.Info* %885, i32 0, i32 19
  %887 = load i64, i64* %886, align 8
  %888 = sub i64 %887, 1
  store i64 %888, i64* %886, align 8
  br label %typeswitch.done169

typeswitch.body83:                                ; preds = %if.done6
  %889 = bitcast i8* %269 to %runtime.Type_Info_Array*
  %890 = load %runtime.Type_Info_Array, %runtime.Type_Info_Array* %889, align 8
  store %runtime.Type_Info_Array %890, %runtime.Type_Info_Array* %83, align 8
  %891 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %83, i32 0, i32 2
  %892 = load i64, i64* %891, align 8
  store i64 %892, i64* %84, align 8
  %893 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %894 = load i8*, i8** %893, align 8
  store i8* %894, i8** %85, align 8
  br label %if.init84

if.init84:                                        ; preds = %typeswitch.body83
  %895 = load %fmt.Info*, %fmt.Info** %3, align 8
  %896 = getelementptr inbounds %fmt.Info, %fmt.Info* %895, i32 0, i32 20
  %897 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %896, align 8
  %898 = bitcast { i64, i8 }* %88 to i8*
  call void @llvm.memset.p0i8.i64(i8* %898, i8 0, i64 16, i1 false)
  %899 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %88, i32 0, i32 0
  %900 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %88, i32 0, i32 1
  %901 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %896, i32 0, i32 1
  %902 = load i64, i64* %901, align 8
  %903 = icmp eq i64 %902, 1
  br i1 %903, label %union_cast.ok85, label %union_cast.end86

union_cast.ok85:                                  ; preds = %if.init84
  %904 = bitcast %"runtime.Maybe(int)-16164"* %896 to i64*
  %905 = load i64, i64* %904, align 8
  store i64 %905, i64* %899, align 8
  store i8 1, i8* %900, align 1
  br label %union_cast.end86

union_cast.end86:                                 ; preds = %union_cast.ok85, %if.init84
  %906 = load { i64, i8 }, { i64, i8 }* %88, align 8
  %907 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %88, i32 0, i32 0
  %908 = load i64, i64* %907, align 8
  %909 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %88, i32 0, i32 1
  %910 = load i8, i8* %909, align 1
  store i64 %908, i64* %86, align 8
  store i8 %910, i8* %87, align 1
  %911 = load i8, i8* %87, align 1
  %912 = trunc i8 %911 to i1
  br i1 %912, label %if.then87, label %if.else88

if.then87:                                        ; preds = %union_cast.end86
  %913 = load i64, i64* %86, align 8
  %914 = load i64, i64* %84, align 8
  %915 = icmp slt i64 %914, %913
  %916 = select i1 %915, i64 %914, i64 %913
  store i64 %916, i64* %84, align 8
  br label %if.done91

if.else88:                                        ; preds = %union_cast.end86
  %917 = load %fmt.Info*, %fmt.Info** %3, align 8
  %918 = getelementptr inbounds %fmt.Info, %fmt.Info* %917, i32 0, i32 21
  %919 = load i8, i8* %918, align 1
  %920 = trunc i8 %919 to i1
  br i1 %920, label %if.then89, label %if.done90

if.then89:                                        ; preds = %if.else88
  %921 = load %fmt.Info*, %fmt.Info** %3, align 8
  %922 = load i8*, i8** %85, align 8
  %923 = load i64, i64* %84, align 8
  %924 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %83, i32 0, i32 1
  %925 = load i64, i64* %924, align 8
  %926 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %83, i32 0, i32 0
  %927 = load %runtime.Type_Info*, %runtime.Type_Info** %926, align 8
  %928 = load i32, i32* %4, align 4
  %929 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array_nul_terminated(%fmt.Info* %921, i8* %922, i64 %923, i64 %925, %runtime.Type_Info* %927, i32 %928, i8* %929)
  ret void

if.done90:                                        ; preds = %if.else88
  br label %if.done91

if.done91:                                        ; preds = %if.done90, %if.then87
  %930 = load %fmt.Info*, %fmt.Info** %3, align 8
  %931 = load i8*, i8** %85, align 8
  %932 = load i64, i64* %84, align 8
  %933 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %83, i32 0, i32 1
  %934 = load i64, i64* %933, align 8
  %935 = getelementptr inbounds %runtime.Type_Info_Array, %runtime.Type_Info_Array* %83, i32 0, i32 0
  %936 = load %runtime.Type_Info*, %runtime.Type_Info** %935, align 8
  %937 = load i32, i32* %4, align 4
  %938 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array(%fmt.Info* %930, i8* %931, i64 %932, i64 %934, %runtime.Type_Info* %936, i32 %937, i8* %938)
  br label %typeswitch.done169

typeswitch.body92:                                ; preds = %if.done6
  %939 = bitcast i8* %269 to %runtime.Type_Info_Slice*
  %940 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %939, align 8
  store %runtime.Type_Info_Slice %940, %runtime.Type_Info_Slice* %89, align 8
  %941 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %942 = load i8*, i8** %941, align 8
  %943 = bitcast i8* %942 to %runtime.Raw_Slice*
  store %runtime.Raw_Slice* %943, %runtime.Raw_Slice** %90, align 8
  %944 = load %runtime.Raw_Slice*, %runtime.Raw_Slice** %90, align 8
  %945 = getelementptr inbounds %runtime.Raw_Slice, %runtime.Raw_Slice* %944, i32 0, i32 1
  %946 = load i64, i64* %945, align 8
  store i64 %946, i64* %91, align 8
  %947 = load %runtime.Raw_Slice*, %runtime.Raw_Slice** %90, align 8
  %948 = getelementptr inbounds %runtime.Raw_Slice, %runtime.Raw_Slice* %947, i32 0, i32 0
  %949 = load i8*, i8** %948, align 8
  store i8* %949, i8** %92, align 8
  br label %if.init93

if.init93:                                        ; preds = %typeswitch.body92
  %950 = load %fmt.Info*, %fmt.Info** %3, align 8
  %951 = getelementptr inbounds %fmt.Info, %fmt.Info* %950, i32 0, i32 20
  %952 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %951, align 8
  %953 = bitcast { i64, i8 }* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* %953, i8 0, i64 16, i1 false)
  %954 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %95, i32 0, i32 0
  %955 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %95, i32 0, i32 1
  %956 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %951, i32 0, i32 1
  %957 = load i64, i64* %956, align 8
  %958 = icmp eq i64 %957, 1
  br i1 %958, label %union_cast.ok94, label %union_cast.end95

union_cast.ok94:                                  ; preds = %if.init93
  %959 = bitcast %"runtime.Maybe(int)-16164"* %951 to i64*
  %960 = load i64, i64* %959, align 8
  store i64 %960, i64* %954, align 8
  store i8 1, i8* %955, align 1
  br label %union_cast.end95

union_cast.end95:                                 ; preds = %union_cast.ok94, %if.init93
  %961 = load { i64, i8 }, { i64, i8 }* %95, align 8
  %962 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %95, i32 0, i32 0
  %963 = load i64, i64* %962, align 8
  %964 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %95, i32 0, i32 1
  %965 = load i8, i8* %964, align 1
  store i64 %963, i64* %93, align 8
  store i8 %965, i8* %94, align 1
  %966 = load i8, i8* %94, align 1
  %967 = trunc i8 %966 to i1
  br i1 %967, label %if.then96, label %if.else97

if.then96:                                        ; preds = %union_cast.end95
  %968 = load i64, i64* %93, align 8
  %969 = load i64, i64* %91, align 8
  %970 = icmp slt i64 %969, %968
  %971 = select i1 %970, i64 %969, i64 %968
  store i64 %971, i64* %91, align 8
  br label %if.done100

if.else97:                                        ; preds = %union_cast.end95
  %972 = load %fmt.Info*, %fmt.Info** %3, align 8
  %973 = getelementptr inbounds %fmt.Info, %fmt.Info* %972, i32 0, i32 21
  %974 = load i8, i8* %973, align 1
  %975 = trunc i8 %974 to i1
  br i1 %975, label %if.then98, label %if.done99

if.then98:                                        ; preds = %if.else97
  %976 = load %fmt.Info*, %fmt.Info** %3, align 8
  %977 = load i8*, i8** %92, align 8
  %978 = load i64, i64* %91, align 8
  %979 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %89, i32 0, i32 1
  %980 = load i64, i64* %979, align 8
  %981 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %89, i32 0, i32 0
  %982 = load %runtime.Type_Info*, %runtime.Type_Info** %981, align 8
  %983 = load i32, i32* %4, align 4
  %984 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array_nul_terminated(%fmt.Info* %976, i8* %977, i64 %978, i64 %980, %runtime.Type_Info* %982, i32 %983, i8* %984)
  ret void

if.done99:                                        ; preds = %if.else97
  br label %if.done100

if.done100:                                       ; preds = %if.done99, %if.then96
  %985 = load %fmt.Info*, %fmt.Info** %3, align 8
  %986 = load i8*, i8** %92, align 8
  %987 = load i64, i64* %91, align 8
  %988 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %89, i32 0, i32 1
  %989 = load i64, i64* %988, align 8
  %990 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %89, i32 0, i32 0
  %991 = load %runtime.Type_Info*, %runtime.Type_Info** %990, align 8
  %992 = load i32, i32* %4, align 4
  %993 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array(%fmt.Info* %985, i8* %986, i64 %987, i64 %989, %runtime.Type_Info* %991, i32 %992, i8* %993)
  br label %typeswitch.done169

typeswitch.body101:                               ; preds = %if.done6
  %994 = bitcast i8* %269 to %runtime.Type_Info_Dynamic_Array*
  %995 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %994, align 8
  store %runtime.Type_Info_Dynamic_Array %995, %runtime.Type_Info_Dynamic_Array* %96, align 8
  %996 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %997 = load i8*, i8** %996, align 8
  %998 = bitcast i8* %997 to %runtime.Raw_Dynamic_Array*
  store %runtime.Raw_Dynamic_Array* %998, %runtime.Raw_Dynamic_Array** %97, align 8
  %999 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %97, align 8
  %1000 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %999, i32 0, i32 1
  %1001 = load i64, i64* %1000, align 8
  store i64 %1001, i64* %98, align 8
  %1002 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %97, align 8
  %1003 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %1002, i32 0, i32 0
  %1004 = load i8*, i8** %1003, align 8
  store i8* %1004, i8** %99, align 8
  br label %if.init102

if.init102:                                       ; preds = %typeswitch.body101
  %1005 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1006 = getelementptr inbounds %fmt.Info, %fmt.Info* %1005, i32 0, i32 20
  %1007 = load %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %1006, align 8
  %1008 = bitcast { i64, i8 }* %102 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1008, i8 0, i64 16, i1 false)
  %1009 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %102, i32 0, i32 0
  %1010 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %102, i32 0, i32 1
  %1011 = getelementptr inbounds %"runtime.Maybe(int)-16164", %"runtime.Maybe(int)-16164"* %1006, i32 0, i32 1
  %1012 = load i64, i64* %1011, align 8
  %1013 = icmp eq i64 %1012, 1
  br i1 %1013, label %union_cast.ok103, label %union_cast.end104

union_cast.ok103:                                 ; preds = %if.init102
  %1014 = bitcast %"runtime.Maybe(int)-16164"* %1006 to i64*
  %1015 = load i64, i64* %1014, align 8
  store i64 %1015, i64* %1009, align 8
  store i8 1, i8* %1010, align 1
  br label %union_cast.end104

union_cast.end104:                                ; preds = %union_cast.ok103, %if.init102
  %1016 = load { i64, i8 }, { i64, i8 }* %102, align 8
  %1017 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %102, i32 0, i32 0
  %1018 = load i64, i64* %1017, align 8
  %1019 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %102, i32 0, i32 1
  %1020 = load i8, i8* %1019, align 1
  store i64 %1018, i64* %100, align 8
  store i8 %1020, i8* %101, align 1
  %1021 = load i8, i8* %101, align 1
  %1022 = trunc i8 %1021 to i1
  br i1 %1022, label %if.then105, label %if.else106

if.then105:                                       ; preds = %union_cast.end104
  %1023 = load i64, i64* %100, align 8
  %1024 = load i64, i64* %98, align 8
  %1025 = icmp slt i64 %1024, %1023
  %1026 = select i1 %1025, i64 %1024, i64 %1023
  store i64 %1026, i64* %98, align 8
  br label %if.done109

if.else106:                                       ; preds = %union_cast.end104
  %1027 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1028 = getelementptr inbounds %fmt.Info, %fmt.Info* %1027, i32 0, i32 21
  %1029 = load i8, i8* %1028, align 1
  %1030 = trunc i8 %1029 to i1
  br i1 %1030, label %if.then107, label %if.done108

if.then107:                                       ; preds = %if.else106
  %1031 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1032 = load i8*, i8** %99, align 8
  %1033 = load i64, i64* %98, align 8
  %1034 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %96, i32 0, i32 1
  %1035 = load i64, i64* %1034, align 8
  %1036 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %96, i32 0, i32 0
  %1037 = load %runtime.Type_Info*, %runtime.Type_Info** %1036, align 8
  %1038 = load i32, i32* %4, align 4
  %1039 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array_nul_terminated(%fmt.Info* %1031, i8* %1032, i64 %1033, i64 %1035, %runtime.Type_Info* %1037, i32 %1038, i8* %1039)
  ret void

if.done108:                                       ; preds = %if.else106
  br label %if.done109

if.done109:                                       ; preds = %if.done108, %if.then105
  %1040 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1041 = load i8*, i8** %99, align 8
  %1042 = load i64, i64* %98, align 8
  %1043 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %96, i32 0, i32 1
  %1044 = load i64, i64* %1043, align 8
  %1045 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %96, i32 0, i32 0
  %1046 = load %runtime.Type_Info*, %runtime.Type_Info** %1045, align 8
  %1047 = load i32, i32* %4, align 4
  %1048 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_array(%fmt.Info* %1040, i8* %1041, i64 %1042, i64 %1044, %runtime.Type_Info* %1046, i32 %1047, i8* %1048)
  br label %typeswitch.done169

typeswitch.body110:                               ; preds = %if.done6
  %1049 = bitcast i8* %269 to %runtime.Type_Info_Simd_Vector*
  %1050 = load %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %1049, align 8
  store %runtime.Type_Info_Simd_Vector %1050, %runtime.Type_Info_Simd_Vector* %103, align 8
  %1051 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1052 = getelementptr inbounds %fmt.Info, %fmt.Info* %1051, i32 0, i32 16
  %1053 = load %io.Writer, %io.Writer* %1052, align 8
  %1054 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1055 = getelementptr inbounds %fmt.Info, %fmt.Info* %1054, i32 0, i32 23
  %1056 = bitcast %runtime.Context* %186 to i8*
  %1057 = call i32 @io.write_byte_to_writer(%io.Writer* %1052, i8 60, i64* %1055, i8* %1056)
  store i64 0, i64* %104, align 8
  store i64 0, i64* %105, align 8
  br label %for.interval.loop111

for.interval.loop111:                             ; preds = %for.interval.post115, %typeswitch.body110
  %1058 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %103, i32 0, i32 2
  %1059 = load i64, i64* %1058, align 8
  %1060 = load i64, i64* %104, align 8
  %1061 = icmp slt i64 %1060, %1059
  br i1 %1061, label %for.interval.body112, label %for.interval.done116

for.interval.body112:                             ; preds = %for.interval.loop111
  %1062 = load i64, i64* %104, align 8
  %1063 = load i64, i64* %105, align 8
  store i64 %1062, i64* %106, align 8
  %1064 = load i64, i64* %106, align 8
  %1065 = icmp sgt i64 %1064, 0
  %1066 = zext i1 %1065 to i8
  %1067 = trunc i8 %1066 to i1
  br i1 %1067, label %if.then113, label %if.done114

if.then113:                                       ; preds = %for.interval.body112
  %1068 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1069 = getelementptr inbounds %fmt.Info, %fmt.Info* %1068, i32 0, i32 16
  %1070 = load %io.Writer, %io.Writer* %1069, align 8
  %1071 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1072 = getelementptr inbounds %fmt.Info, %fmt.Info* %1071, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %107, align 8
  %1073 = bitcast { i64, i32 }* %108 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1073, i8 0, i64 16, i1 false)
  %1074 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %108, %io.Writer* %1069, %..string* %107, i64* %1072, i8* %1074)
  %1075 = load { i64, i32 }, { i64, i32 }* %108, align 8
  br label %if.done114

if.done114:                                       ; preds = %if.then113, %for.interval.body112
  %1076 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1077 = load i8*, i8** %1076, align 8
  %1078 = ptrtoint i8* %1077 to i64
  %1079 = load i64, i64* %106, align 8
  %1080 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %103, i32 0, i32 1
  %1081 = load i64, i64* %1080, align 8
  %1082 = mul i64 %1079, %1081
  %1083 = add i64 %1078, %1082
  store i64 %1083, i64* %109, align 8
  %1084 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1085 = bitcast %..any* %110 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1085, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %110, align 8
  %1086 = load i64, i64* %109, align 8
  %1087 = inttoptr i64 %1086 to i8*
  %1088 = getelementptr inbounds %..any, %..any* %110, i32 0, i32 0
  store i8* %1087, i8** %1088, align 8
  %1089 = getelementptr inbounds %runtime.Type_Info_Simd_Vector, %runtime.Type_Info_Simd_Vector* %103, i32 0, i32 0
  %1090 = load %runtime.Type_Info*, %runtime.Type_Info** %1089, align 8
  %1091 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1090, i32 0, i32 4
  %1092 = load i64, i64* %1091, align 8
  %1093 = getelementptr inbounds %..any, %..any* %110, i32 0, i32 1
  store i64 %1092, i64* %1093, align 8
  %1094 = load %..any, %..any* %110, align 8
  %1095 = load i32, i32* %4, align 4
  %1096 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %1084, %..any* %110, i32 %1095, i8* %1096)
  br label %for.interval.post115

for.interval.post115:                             ; preds = %if.done114
  %1097 = load i64, i64* %104, align 8
  %1098 = add i64 %1097, 1
  store i64 %1098, i64* %104, align 8
  %1099 = load i64, i64* %105, align 8
  %1100 = add i64 %1099, 1
  store i64 %1100, i64* %105, align 8
  br label %for.interval.loop111

for.interval.done116:                             ; preds = %for.interval.loop111
  br label %defer117

defer117:                                         ; preds = %for.interval.done116
  %1101 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1102 = getelementptr inbounds %fmt.Info, %fmt.Info* %1101, i32 0, i32 16
  %1103 = load %io.Writer, %io.Writer* %1102, align 8
  %1104 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1105 = getelementptr inbounds %fmt.Info, %fmt.Info* %1104, i32 0, i32 23
  %1106 = bitcast %runtime.Context* %186 to i8*
  %1107 = call i32 @io.write_byte_to_writer(%io.Writer* %1102, i8 62, i64* %1105, i8* %1106)
  br label %typeswitch.done169

typeswitch.body118:                               ; preds = %if.done6
  %1108 = bitcast i8* %269 to %runtime.Type_Info_Map*
  %1109 = load %runtime.Type_Info_Map, %runtime.Type_Info_Map* %1108, align 8
  store %runtime.Type_Info_Map %1109, %runtime.Type_Info_Map* %111, align 8
  %1110 = load i32, i32* %4, align 4
  %1111 = icmp ne i32 %1110, 118
  %1112 = zext i1 %1111 to i8
  %1113 = trunc i8 %1112 to i1
  br i1 %1113, label %if.then119, label %if.done120

if.then119:                                       ; preds = %typeswitch.body118
  %1114 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1115 = load i32, i32* %4, align 4
  %1116 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %1114, i32 %1115, i8* %1116)
  ret void

if.done120:                                       ; preds = %typeswitch.body118
  %1117 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1118 = getelementptr inbounds %fmt.Info, %fmt.Info* %1117, i32 0, i32 16
  %1119 = load %io.Writer, %io.Writer* %1118, align 8
  %1120 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1121 = getelementptr inbounds %fmt.Info, %fmt.Info* %1120, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$251", i64 0, i64 0), i64 4 }, %..string* %112, align 8
  %1122 = bitcast { i64, i32 }* %113 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1122, i8 0, i64 16, i1 false)
  %1123 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %113, %io.Writer* %1118, %..string* %112, i64* %1121, i8* %1123)
  %1124 = load { i64, i32 }, { i64, i32 }* %113, align 8
  %1125 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1126 = getelementptr inbounds %fmt.Info, %fmt.Info* %1125, i32 0, i32 19
  %1127 = load i64, i64* %1126, align 8
  %1128 = add i64 %1127, 1
  store i64 %1128, i64* %1126, align 8
  %1129 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1130 = load i8*, i8** %1129, align 8
  %1131 = bitcast i8* %1130 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %1131, %runtime.Raw_Map** %114, align 8
  %1132 = load %runtime.Raw_Map*, %runtime.Raw_Map** %114, align 8
  %1133 = icmp ne %runtime.Raw_Map* %1132, null
  %1134 = zext i1 %1133 to i8
  %1135 = trunc i8 %1134 to i1
  br i1 %1135, label %if.then121, label %if.done138

if.then121:                                       ; preds = %if.done120
  %1136 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %111, i32 0, i32 2
  %1137 = load %runtime.Type_Info*, %runtime.Type_Info** %1136, align 8
  %1138 = icmp eq %runtime.Type_Info* %1137, null
  %1139 = zext i1 %1138 to i8
  %1140 = trunc i8 %1139 to i1
  br i1 %1140, label %if.then122, label %if.done125

if.then122:                                       ; preds = %if.then121
  br label %defer123

defer123:                                         ; preds = %if.then122
  %1141 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1142 = getelementptr inbounds %fmt.Info, %fmt.Info* %1141, i32 0, i32 19
  %1143 = load i64, i64* %1142, align 8
  %1144 = sub i64 %1143, 1
  store i64 %1144, i64* %1142, align 8
  br label %defer124

defer124:                                         ; preds = %defer123
  %1145 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1146 = getelementptr inbounds %fmt.Info, %fmt.Info* %1145, i32 0, i32 16
  %1147 = load %io.Writer, %io.Writer* %1146, align 8
  %1148 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1149 = getelementptr inbounds %fmt.Info, %fmt.Info* %1148, i32 0, i32 23
  %1150 = bitcast %runtime.Context* %186 to i8*
  %1151 = call i32 @io.write_byte_to_writer(%io.Writer* %1146, i8 93, i64* %1149, i8* %1150)
  ret void

if.done125:                                       ; preds = %if.then121
  %1152 = load %runtime.Raw_Map*, %runtime.Raw_Map** %114, align 8
  %1153 = getelementptr inbounds %runtime.Raw_Map, %runtime.Raw_Map* %1152, i32 0, i32 1
  store %runtime.Raw_Dynamic_Array* %1153, %runtime.Raw_Dynamic_Array** %115, align 8
  %1154 = bitcast %runtime.Type_Info_Struct* %116 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1154, i8 0, i64 120, i1 false)
  %1155 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %111, i32 0, i32 2
  %1156 = load %runtime.Type_Info*, %runtime.Type_Info** %1155, align 8
  %1157 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %1156)
  store %runtime.Type_Info* %1157, %runtime.Type_Info** %117, align 8
  %1158 = load %runtime.Type_Info*, %runtime.Type_Info** %117, align 8
  %1159 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1158, i32 0, i32 5
  %1160 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %1159, align 8
  %1161 = bitcast { %runtime.Type_Info_Struct, i8 }* %118 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1161, i8 0, i64 128, i1 false)
  %1162 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %118, i32 0, i32 0
  %1163 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %118, i32 0, i32 1
  %1164 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %1159, i32 0, i32 1
  %1165 = load i64, i64* %1164, align 8
  %1166 = icmp eq i64 %1165, 19
  br i1 %1166, label %union_cast.ok126, label %union_cast.end127

union_cast.ok126:                                 ; preds = %if.done125
  %1167 = bitcast { [15 x i64], i64 }* %1159 to %runtime.Type_Info_Struct*
  %1168 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1167, align 8
  %1169 = bitcast %runtime.Type_Info_Struct* %1162 to i8*
  %1170 = bitcast %runtime.Type_Info_Struct* %1167 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1169, i8* align 1 %1170, i64 120, i1 false)
  store i8 1, i8* %1163, align 1
  br label %union_cast.end127

union_cast.end127:                                ; preds = %union_cast.ok126, %if.done125
  %1171 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %118, i32 0, i32 1
  %1172 = load i8, i8* %1171, align 1
  %1173 = bitcast { [15 x i64], i64 }* %1159 to i8*
  %1174 = icmp ne i8 %1172, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %119, align 8
  call void @runtime.type_assertion_check2(i1 %1174, %..string* %119, i32 2058, i32 64, i64 1369094286720630800, i64 3602879701896396861, i8* %1173)
  %1175 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %118, i32 0, i32 0
  %1176 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1175, align 8
  %1177 = bitcast %runtime.Type_Info_Struct* %116 to i8*
  %1178 = bitcast %runtime.Type_Info_Struct* %1175 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %1177, i8* align 1 %1178, i64 120, i1 false)
  %1179 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %116, i32 0, i32 0
  %1180 = load { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %1179, align 8
  %1181 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %1179, i32 0, i32 0
  %1182 = load %runtime.Type_Info**, %runtime.Type_Info*** %1181, align 8
  %1183 = getelementptr inbounds { %runtime.Type_Info**, i64 }, { %runtime.Type_Info**, i64 }* %1179, i32 0, i32 1
  %1184 = load i64, i64* %1183, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %121, align 8
  call void @runtime.bounds_check_error(%..string* %121, i32 2059, i32 50, i64 1, i64 %1184)
  %1185 = getelementptr %runtime.Type_Info*, %runtime.Type_Info** %1182, i64 1
  %1186 = load %runtime.Type_Info*, %runtime.Type_Info** %1185, align 8
  %1187 = call %runtime.Type_Info* @runtime.type_info_base(%runtime.Type_Info* %1186)
  store %runtime.Type_Info* %1187, %runtime.Type_Info** %122, align 8
  %1188 = load %runtime.Type_Info*, %runtime.Type_Info** %122, align 8
  %1189 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1188, i32 0, i32 5
  %1190 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %1189, align 8
  %1191 = bitcast { %runtime.Type_Info_Dynamic_Array, i8 }* %123 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1191, i8 0, i64 24, i1 false)
  %1192 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %123, i32 0, i32 0
  %1193 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %123, i32 0, i32 1
  %1194 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %1189, i32 0, i32 1
  %1195 = load i64, i64* %1194, align 8
  %1196 = icmp eq i64 %1195, 16
  br i1 %1196, label %union_cast.ok128, label %union_cast.end129

union_cast.ok128:                                 ; preds = %union_cast.end127
  %1197 = bitcast { [15 x i64], i64 }* %1189 to %runtime.Type_Info_Dynamic_Array*
  %1198 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %1197, align 8
  store %runtime.Type_Info_Dynamic_Array %1198, %runtime.Type_Info_Dynamic_Array* %1192, align 8
  store i8 1, i8* %1193, align 1
  br label %union_cast.end129

union_cast.end129:                                ; preds = %union_cast.ok128, %union_cast.end127
  %1199 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %123, i32 0, i32 1
  %1200 = load i8, i8* %1199, align 1
  %1201 = bitcast { [15 x i64], i64 }* %1189 to i8*
  %1202 = icmp ne i8 %1200, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %124, align 8
  call void @runtime.type_assertion_check2(i1 %1202, %..string* %124, i32 2059, i32 54, i64 1369094286720630800, i64 3602879701896396852, i8* %1201)
  %1203 = getelementptr inbounds { %runtime.Type_Info_Dynamic_Array, i8 }, { %runtime.Type_Info_Dynamic_Array, i8 }* %123, i32 0, i32 0
  %1204 = load %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %1203, align 8
  store %runtime.Type_Info_Dynamic_Array %1204, %runtime.Type_Info_Dynamic_Array* %120, align 8
  %1205 = bitcast %runtime.Type_Info_Struct* %125 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1205, i8 0, i64 120, i1 false)
  %1206 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %120, i32 0, i32 0
  %1207 = load %runtime.Type_Info*, %runtime.Type_Info** %1206, align 8
  %1208 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1207, i32 0, i32 5
  %1209 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %1208, align 8
  %1210 = bitcast { %runtime.Type_Info_Struct, i8 }* %126 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1210, i8 0, i64 128, i1 false)
  %1211 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %126, i32 0, i32 0
  %1212 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %126, i32 0, i32 1
  %1213 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %1208, i32 0, i32 1
  %1214 = load i64, i64* %1213, align 8
  %1215 = icmp eq i64 %1214, 19
  br i1 %1215, label %union_cast.ok130, label %union_cast.end131

union_cast.ok130:                                 ; preds = %union_cast.end129
  %1216 = bitcast { [15 x i64], i64 }* %1208 to %runtime.Type_Info_Struct*
  %1217 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1216, align 8
  %1218 = bitcast %runtime.Type_Info_Struct* %1211 to i8*
  %1219 = bitcast %runtime.Type_Info_Struct* %1216 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1218, i8* align 1 %1219, i64 120, i1 false)
  store i8 1, i8* %1212, align 1
  br label %union_cast.end131

union_cast.end131:                                ; preds = %union_cast.ok130, %union_cast.end129
  %1220 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %126, i32 0, i32 1
  %1221 = load i8, i8* %1220, align 1
  %1222 = bitcast { [15 x i64], i64 }* %1208 to i8*
  %1223 = icmp ne i8 %1221, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %127, align 8
  call void @runtime.type_assertion_check2(i1 %1223, %..string* %127, i32 2060, i32 26, i64 1369094286720630800, i64 3602879701896396861, i8* %1222)
  %1224 = getelementptr inbounds { %runtime.Type_Info_Struct, i8 }, { %runtime.Type_Info_Struct, i8 }* %126, i32 0, i32 0
  %1225 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1224, align 8
  %1226 = bitcast %runtime.Type_Info_Struct* %125 to i8*
  %1227 = bitcast %runtime.Type_Info_Struct* %1224 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %1226, i8* align 1 %1227, i64 120, i1 false)
  %1228 = getelementptr inbounds %runtime.Type_Info_Dynamic_Array, %runtime.Type_Info_Dynamic_Array* %120, i32 0, i32 1
  %1229 = load i64, i64* %1228, align 8
  store i64 %1229, i64* %128, align 8
  store i64 0, i64* %129, align 8
  store i64 0, i64* %130, align 8
  br label %for.interval.loop132

for.interval.loop132:                             ; preds = %for.interval.post136, %union_cast.end131
  %1230 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %115, align 8
  %1231 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %1230, i32 0, i32 1
  %1232 = load i64, i64* %1231, align 8
  %1233 = load i64, i64* %129, align 8
  %1234 = icmp slt i64 %1233, %1232
  br i1 %1234, label %for.interval.body133, label %for.interval.done137

for.interval.body133:                             ; preds = %for.interval.loop132
  %1235 = load i64, i64* %129, align 8
  %1236 = load i64, i64* %130, align 8
  store i64 %1235, i64* %131, align 8
  %1237 = load i64, i64* %131, align 8
  %1238 = icmp sgt i64 %1237, 0
  %1239 = zext i1 %1238 to i8
  %1240 = trunc i8 %1239 to i1
  br i1 %1240, label %if.then134, label %if.done135

if.then134:                                       ; preds = %for.interval.body133
  %1241 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1242 = getelementptr inbounds %fmt.Info, %fmt.Info* %1241, i32 0, i32 16
  %1243 = load %io.Writer, %io.Writer* %1242, align 8
  %1244 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1245 = getelementptr inbounds %fmt.Info, %fmt.Info* %1244, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %132, align 8
  %1246 = bitcast { i64, i32 }* %133 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1246, i8 0, i64 16, i1 false)
  %1247 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %133, %io.Writer* %1242, %..string* %132, i64* %1245, i8* %1247)
  %1248 = load { i64, i32 }, { i64, i32 }* %133, align 8
  br label %if.done135

if.done135:                                       ; preds = %if.then134, %for.interval.body133
  %1249 = load %runtime.Raw_Dynamic_Array*, %runtime.Raw_Dynamic_Array** %115, align 8
  %1250 = getelementptr inbounds %runtime.Raw_Dynamic_Array, %runtime.Raw_Dynamic_Array* %1249, i32 0, i32 0
  %1251 = load i8*, i8** %1250, align 8
  %1252 = ptrtoint i8* %1251 to i64
  %1253 = load i64, i64* %131, align 8
  %1254 = load i64, i64* %128, align 8
  %1255 = mul i64 %1253, %1254
  %1256 = add i64 %1252, %1255
  store i64 %1256, i64* %134, align 8
  %1257 = load i64, i64* %134, align 8
  %1258 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %125, i32 0, i32 2
  %1259 = load { i64*, i64 }, { i64*, i64 }* %1258, align 8
  %1260 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %1258, i32 0, i32 0
  %1261 = load i64*, i64** %1260, align 8
  %1262 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %1258, i32 0, i32 1
  %1263 = load i64, i64* %1262, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %136, align 8
  call void @runtime.bounds_check_error(%..string* %136, i32 2083, i32 38, i64 2, i64 %1263)
  %1264 = getelementptr i64, i64* %1261, i64 2
  %1265 = load i64, i64* %1264, align 8
  %1266 = add i64 %1257, %1265
  store i64 %1266, i64* %135, align 8
  %1267 = bitcast %fmt.Info* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1267, i8 0, i64 120, i1 false)
  %1268 = bitcast %fmt.Info* %137 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1268, i8 0, i64 120, i1 false)
  %1269 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1270 = getelementptr inbounds %fmt.Info, %fmt.Info* %1269, i32 0, i32 16
  %1271 = load %io.Writer, %io.Writer* %1270, align 8
  %1272 = getelementptr inbounds %fmt.Info, %fmt.Info* %137, i32 0, i32 16
  store %io.Writer %1271, %io.Writer* %1272, align 8
  %1273 = load %fmt.Info, %fmt.Info* %137, align 8
  %1274 = bitcast %fmt.Info* %138 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1274, i8 0, i64 120, i1 false)
  %1275 = bitcast %fmt.Info* %138 to i8*
  %1276 = bitcast %fmt.Info* %137 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %1275, i8* align 8 %1276, i64 120, i1 false)
  %1277 = bitcast %..any* %139 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1277, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %139, align 8
  %1278 = load i64, i64* %135, align 8
  %1279 = inttoptr i64 %1278 to i8*
  %1280 = getelementptr inbounds %..any, %..any* %139, i32 0, i32 0
  store i8* %1279, i8** %1280, align 8
  %1281 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %111, i32 0, i32 0
  %1282 = load %runtime.Type_Info*, %runtime.Type_Info** %1281, align 8
  %1283 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1282, i32 0, i32 4
  %1284 = load i64, i64* %1283, align 8
  %1285 = getelementptr inbounds %..any, %..any* %139, i32 0, i32 1
  store i64 %1284, i64* %1285, align 8
  %1286 = load %..any, %..any* %139, align 8
  %1287 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %138, %..any* %139, i32 118, i8* %1287)
  %1288 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1289 = getelementptr inbounds %fmt.Info, %fmt.Info* %1288, i32 0, i32 16
  %1290 = load %io.Writer, %io.Writer* %1289, align 8
  %1291 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1292 = getelementptr inbounds %fmt.Info, %fmt.Info* %1291, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2b3", i64 0, i64 0), i64 1 }, %..string* %140, align 8
  %1293 = bitcast { i64, i32 }* %141 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1293, i8 0, i64 16, i1 false)
  %1294 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %141, %io.Writer* %1289, %..string* %140, i64* %1292, i8* %1294)
  %1295 = load { i64, i32 }, { i64, i32 }* %141, align 8
  %1296 = load i64, i64* %134, align 8
  %1297 = getelementptr inbounds %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %125, i32 0, i32 2
  %1298 = load { i64*, i64 }, { i64*, i64 }* %1297, align 8
  %1299 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %1297, i32 0, i32 0
  %1300 = load i64*, i64** %1299, align 8
  %1301 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %1297, i32 0, i32 1
  %1302 = load i64, i64* %1301, align 8
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %143, align 8
  call void @runtime.bounds_check_error(%..string* %143, i32 2088, i32 40, i64 3, i64 %1302)
  %1303 = getelementptr i64, i64* %1300, i64 3
  %1304 = load i64, i64* %1303, align 8
  %1305 = add i64 %1296, %1304
  store i64 %1305, i64* %142, align 8
  %1306 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1307 = bitcast %..any* %144 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1307, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %144, align 8
  %1308 = load i64, i64* %142, align 8
  %1309 = inttoptr i64 %1308 to i8*
  %1310 = getelementptr inbounds %..any, %..any* %144, i32 0, i32 0
  store i8* %1309, i8** %1310, align 8
  %1311 = getelementptr inbounds %runtime.Type_Info_Map, %runtime.Type_Info_Map* %111, i32 0, i32 1
  %1312 = load %runtime.Type_Info*, %runtime.Type_Info** %1311, align 8
  %1313 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1312, i32 0, i32 4
  %1314 = load i64, i64* %1313, align 8
  %1315 = getelementptr inbounds %..any, %..any* %144, i32 0, i32 1
  store i64 %1314, i64* %1315, align 8
  %1316 = load %..any, %..any* %144, align 8
  %1317 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %1306, %..any* %144, i32 118, i8* %1317)
  br label %for.interval.post136

for.interval.post136:                             ; preds = %if.done135
  %1318 = load i64, i64* %129, align 8
  %1319 = add i64 %1318, 1
  store i64 %1319, i64* %129, align 8
  %1320 = load i64, i64* %130, align 8
  %1321 = add i64 %1320, 1
  store i64 %1321, i64* %130, align 8
  br label %for.interval.loop132

for.interval.done137:                             ; preds = %for.interval.loop132
  br label %if.done138

if.done138:                                       ; preds = %for.interval.done137, %if.done120
  br label %defer139

defer139:                                         ; preds = %if.done138
  %1322 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1323 = getelementptr inbounds %fmt.Info, %fmt.Info* %1322, i32 0, i32 19
  %1324 = load i64, i64* %1323, align 8
  %1325 = sub i64 %1324, 1
  store i64 %1325, i64* %1323, align 8
  br label %defer140

defer140:                                         ; preds = %defer139
  %1326 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1327 = getelementptr inbounds %fmt.Info, %fmt.Info* %1326, i32 0, i32 16
  %1328 = load %io.Writer, %io.Writer* %1327, align 8
  %1329 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1330 = getelementptr inbounds %fmt.Info, %fmt.Info* %1329, i32 0, i32 23
  %1331 = bitcast %runtime.Context* %186 to i8*
  %1332 = call i32 @io.write_byte_to_writer(%io.Writer* %1327, i8 93, i64* %1330, i8* %1331)
  br label %typeswitch.done169

typeswitch.body141:                               ; preds = %if.done6
  %1333 = bitcast i8* %269 to %runtime.Type_Info_Struct*
  %1334 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %1333, align 8
  %1335 = bitcast %runtime.Type_Info_Struct* %145 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1335, i8 0, i64 120, i1 false)
  %1336 = bitcast %runtime.Type_Info_Struct* %145 to i8*
  %1337 = bitcast %runtime.Type_Info_Struct* %1333 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %1336, i8* align 1 %1337, i64 120, i1 false)
  %1338 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1339 = load %..any, %..any* %1, align 8
  %1340 = load i32, i32* %4, align 4
  %1341 = load %runtime.Type_Info_Struct, %runtime.Type_Info_Struct* %145, align 8
  store %..string zeroinitializer, %..string* %146, align 8
  %1342 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_struct(%fmt.Info* %1338, %..any* %1, i32 %1340, %runtime.Type_Info_Struct* %145, %..string* %146, i8* %1342)
  br label %typeswitch.done169

typeswitch.body142:                               ; preds = %if.done6
  %1343 = bitcast i8* %269 to %runtime.Type_Info_Union*
  %1344 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %1343, align 8
  %1345 = bitcast %runtime.Type_Info_Union* %147 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1345, i8 0, i64 48, i1 false)
  store %runtime.Type_Info_Union %1344, %runtime.Type_Info_Union* %147, align 8
  %1346 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1347 = load %..any, %..any* %1, align 8
  %1348 = load i32, i32* %4, align 4
  %1349 = load %runtime.Type_Info_Union, %runtime.Type_Info_Union* %147, align 8
  %1350 = load %runtime.Type_Info*, %runtime.Type_Info** %12, align 8
  %1351 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1350, i32 0, i32 0
  %1352 = load i64, i64* %1351, align 8
  %1353 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_union(%fmt.Info* %1346, %..any* %1, i32 %1348, %runtime.Type_Info_Union* %147, i64 %1352, i8* %1353)
  br label %typeswitch.done169

typeswitch.body143:                               ; preds = %if.done6
  %1354 = bitcast i8* %269 to %runtime.Type_Info_Enum*
  %1355 = load %runtime.Type_Info_Enum, %runtime.Type_Info_Enum* %1354, align 8
  store %runtime.Type_Info_Enum %1355, %runtime.Type_Info_Enum* %148, align 8
  %1356 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1357 = load %..any, %..any* %1, align 8
  %1358 = load i32, i32* %4, align 4
  %1359 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_enum(%fmt.Info* %1356, %..any* %1, i32 %1358, i8* %1359)
  br label %typeswitch.done169

typeswitch.body144:                               ; preds = %if.done6
  %1360 = bitcast i8* %269 to %runtime.Type_Info_Procedure*
  %1361 = load %runtime.Type_Info_Procedure, %runtime.Type_Info_Procedure* %1360, align 8
  %1362 = bitcast %runtime.Type_Info_Procedure* %149 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1362, i8 0, i64 24, i1 false)
  store %runtime.Type_Info_Procedure %1361, %runtime.Type_Info_Procedure* %149, align 8
  %1363 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1364 = load i8*, i8** %1363, align 8
  %1365 = bitcast i8* %1364 to i8**
  %1366 = load i8*, i8** %1365, align 8
  store i8* %1366, i8** %150, align 8
  %1367 = load i8*, i8** %150, align 8
  %1368 = icmp eq i8* %1367, null
  %1369 = zext i1 %1368 to i8
  %1370 = trunc i8 %1369 to i1
  br i1 %1370, label %if.then145, label %if.else146

if.then145:                                       ; preds = %typeswitch.body144
  %1371 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1372 = getelementptr inbounds %fmt.Info, %fmt.Info* %1371, i32 0, i32 16
  %1373 = load %io.Writer, %io.Writer* %1372, align 8
  %1374 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1375 = getelementptr inbounds %fmt.Info, %fmt.Info* %1374, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$23a", i64 0, i64 0), i64 3 }, %..string* %151, align 8
  %1376 = bitcast { i64, i32 }* %152 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1376, i8 0, i64 16, i1 false)
  %1377 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %152, %io.Writer* %1372, %..string* %151, i64* %1375, i8* %1377)
  %1378 = load { i64, i32 }, { i64, i32 }* %152, align 8
  br label %if.done147

if.else146:                                       ; preds = %typeswitch.body144
  %1379 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1380 = getelementptr inbounds %fmt.Info, %fmt.Info* %1379, i32 0, i32 16
  %1381 = load %io.Writer, %io.Writer* %1380, align 8
  %1382 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %1383 = load i64, i64* %1382, align 8
  %1384 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1385 = getelementptr inbounds %fmt.Info, %fmt.Info* %1384, i32 0, i32 23
  %1386 = bitcast { i64, i32 }* %153 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1386, i8 0, i64 16, i1 false)
  %1387 = bitcast %runtime.Context* %186 to i8*
  call void @reflect.write_typeid_writer({ i64, i32 }* sret({ i64, i32 }*) %153, %io.Writer* %1380, i64 %1383, i64* %1385, i8* %1387)
  %1388 = load { i64, i32 }, { i64, i32 }* %153, align 8
  %1389 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1390 = getelementptr inbounds %fmt.Info, %fmt.Info* %1389, i32 0, i32 16
  %1391 = load %io.Writer, %io.Writer* %1390, align 8
  %1392 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1393 = getelementptr inbounds %fmt.Info, %fmt.Info* %1392, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2b4", i64 0, i64 0), i64 3 }, %..string* %154, align 8
  %1394 = bitcast { i64, i32 }* %155 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1394, i8 0, i64 16, i1 false)
  %1395 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %155, %io.Writer* %1390, %..string* %154, i64* %1393, i8* %1395)
  %1396 = load { i64, i32 }, { i64, i32 }* %155, align 8
  %1397 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1398 = load i8*, i8** %150, align 8
  %1399 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_pointer(%fmt.Info* %1397, i8* %1398, i32 112, i8* %1399)
  br label %if.done147

if.done147:                                       ; preds = %if.else146, %if.then145
  br label %typeswitch.done169

typeswitch.body148:                               ; preds = %if.done6
  %1400 = bitcast i8* %269 to %runtime.Type_Info_Type_Id*
  %1401 = load %runtime.Type_Info_Type_Id, %runtime.Type_Info_Type_Id* %1400, align 1
  store %runtime.Type_Info_Type_Id %1401, %runtime.Type_Info_Type_Id* %156, align 1
  %1402 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1403 = load i8*, i8** %1402, align 8
  %1404 = bitcast i8* %1403 to i64*
  %1405 = load i64, i64* %1404, align 8
  store i64 %1405, i64* %157, align 8
  %1406 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1407 = getelementptr inbounds %fmt.Info, %fmt.Info* %1406, i32 0, i32 16
  %1408 = load %io.Writer, %io.Writer* %1407, align 8
  %1409 = load i64, i64* %157, align 8
  %1410 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1411 = getelementptr inbounds %fmt.Info, %fmt.Info* %1410, i32 0, i32 23
  %1412 = bitcast { i64, i32 }* %158 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1412, i8 0, i64 16, i1 false)
  %1413 = bitcast %runtime.Context* %186 to i8*
  call void @reflect.write_typeid_writer({ i64, i32 }* sret({ i64, i32 }*) %158, %io.Writer* %1407, i64 %1409, i64* %1411, i8* %1413)
  %1414 = load { i64, i32 }, { i64, i32 }* %158, align 8
  br label %typeswitch.done169

typeswitch.body149:                               ; preds = %if.done6
  %1415 = bitcast i8* %269 to %runtime.Type_Info_Bit_Set*
  %1416 = load %runtime.Type_Info_Bit_Set, %runtime.Type_Info_Bit_Set* %1415, align 8
  store %runtime.Type_Info_Bit_Set %1416, %runtime.Type_Info_Bit_Set* %159, align 8
  %1417 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1418 = load %..any, %..any* %1, align 8
  store %..string zeroinitializer, %..string* %160, align 8
  %1419 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_bit_set(%fmt.Info* %1417, %..any* %1, %..string* %160, i8* %1419)
  br label %typeswitch.done169

typeswitch.body150:                               ; preds = %if.done6
  %1420 = bitcast i8* %269 to %runtime.Type_Info_Relative_Pointer*
  %1421 = load %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %1420, align 8
  store %runtime.Type_Info_Relative_Pointer %1421, %runtime.Type_Info_Relative_Pointer* %161, align 8
  %1422 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1423 = load i8*, i8** %1422, align 8
  %1424 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %161, i32 0, i32 1
  %1425 = load %runtime.Type_Info*, %runtime.Type_Info** %1424, align 8
  %1426 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1425, i32 0, i32 4
  %1427 = load i64, i64* %1426, align 8
  %1428 = bitcast %runtime.Context* %186 to i8*
  %1429 = call i8* @reflect.relative_pointer_to_absolute_raw(i8* %1423, i64 %1427, i8* %1428)
  store i8* %1429, i8** %162, align 8
  %1430 = bitcast %..any* %164 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1430, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %164, align 8
  %1431 = load i8*, i8** %162, align 8
  %1432 = getelementptr inbounds %..any, %..any* %164, i32 0, i32 0
  store i8* %1431, i8** %1432, align 8
  %1433 = getelementptr inbounds %runtime.Type_Info_Relative_Pointer, %runtime.Type_Info_Relative_Pointer* %161, i32 0, i32 0
  %1434 = load %runtime.Type_Info*, %runtime.Type_Info** %1433, align 8
  %1435 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1434, i32 0, i32 4
  %1436 = load i64, i64* %1435, align 8
  %1437 = getelementptr inbounds %..any, %..any* %164, i32 0, i32 1
  store i64 %1436, i64* %1437, align 8
  %1438 = load %..any, %..any* %164, align 8
  store %..any %1438, %..any* %163, align 8
  %1439 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1440 = load %..any, %..any* %163, align 8
  %1441 = load i32, i32* %4, align 4
  %1442 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_value(%fmt.Info* %1439, %..any* %163, i32 %1441, i8* %1442)
  br label %typeswitch.done169

typeswitch.body151:                               ; preds = %if.done6
  %1443 = bitcast i8* %269 to %runtime.Type_Info_Relative_Slice*
  %1444 = load %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %1443, align 8
  store %runtime.Type_Info_Relative_Slice %1444, %runtime.Type_Info_Relative_Slice* %165, align 8
  %1445 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1446 = load i8*, i8** %1445, align 8
  %1447 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %165, i32 0, i32 1
  %1448 = load %runtime.Type_Info*, %runtime.Type_Info** %1447, align 8
  %1449 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1448, i32 0, i32 4
  %1450 = load i64, i64* %1449, align 8
  %1451 = bitcast %runtime.Context* %186 to i8*
  %1452 = call i8* @reflect.relative_pointer_to_absolute_raw(i8* %1446, i64 %1450, i8* %1451)
  store i8* %1452, i8** %166, align 8
  %1453 = load i32, i32* %4, align 4
  %1454 = icmp eq i32 %1453, 112
  %1455 = zext i1 %1454 to i8
  %1456 = trunc i8 %1455 to i1
  br i1 %1456, label %if.then152, label %if.else153

if.then152:                                       ; preds = %typeswitch.body151
  %1457 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1458 = load i8*, i8** %166, align 8
  %1459 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_pointer(%fmt.Info* %1457, i8* %1458, i32 112, i8* %1459)
  br label %if.done167

if.else153:                                       ; preds = %typeswitch.body151
  %1460 = load i8*, i8** %166, align 8
  %1461 = icmp eq i8* %1460, null
  %1462 = zext i1 %1461 to i8
  %1463 = trunc i8 %1462 to i1
  br i1 %1463, label %if.then154, label %if.else155

if.then154:                                       ; preds = %if.else153
  %1464 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1465 = getelementptr inbounds %fmt.Info, %fmt.Info* %1464, i32 0, i32 16
  %1466 = load %io.Writer, %io.Writer* %1465, align 8
  %1467 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1468 = getelementptr inbounds %fmt.Info, %fmt.Info* %1467, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$250", i64 0, i64 0), i64 2 }, %..string* %167, align 8
  %1469 = bitcast { i64, i32 }* %168 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1469, i8 0, i64 16, i1 false)
  %1470 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %168, %io.Writer* %1465, %..string* %167, i64* %1468, i8* %1470)
  %1471 = load { i64, i32 }, { i64, i32 }* %168, align 8
  br label %if.done166

if.else155:                                       ; preds = %if.else153
  %1472 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %1473 = load i8*, i8** %1472, align 8
  %1474 = ptrtoint i8* %1473 to i64
  %1475 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %165, i32 0, i32 1
  %1476 = load %runtime.Type_Info*, %runtime.Type_Info** %1475, align 8
  %1477 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1476, i32 0, i32 0
  %1478 = load i64, i64* %1477, align 8
  %1479 = add i64 %1474, %1478
  store i64 %1479, i64* %169, align 8
  %1480 = bitcast %..any* %171 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1480, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %171, align 8
  %1481 = load i64, i64* %169, align 8
  %1482 = inttoptr i64 %1481 to i8*
  %1483 = getelementptr inbounds %..any, %..any* %171, i32 0, i32 0
  store i8* %1482, i8** %1483, align 8
  %1484 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %165, i32 0, i32 1
  %1485 = load %runtime.Type_Info*, %runtime.Type_Info** %1484, align 8
  %1486 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1485, i32 0, i32 4
  %1487 = load i64, i64* %1486, align 8
  %1488 = getelementptr inbounds %..any, %..any* %171, i32 0, i32 1
  store i64 %1487, i64* %1488, align 8
  %1489 = load %..any, %..any* %171, align 8
  store %..any %1489, %..any* %170, align 8
  %1490 = load %..any, %..any* %170, align 8
  %1491 = bitcast { i64, i8 }* %173 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1491, i8 0, i64 16, i1 false)
  %1492 = bitcast %runtime.Context* %186 to i8*
  call void @reflect.as_int({ i64, i8 }* sret({ i64, i8 }*) %173, %..any* %170, i8* %1492)
  %1493 = load { i64, i8 }, { i64, i8 }* %173, align 8
  %1494 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %173, i32 0, i32 0
  %1495 = load i64, i64* %1494, align 8
  %1496 = getelementptr inbounds { i64, i8 }, { i64, i8 }* %173, i32 0, i32 1
  %1497 = load i8, i8* %1496, align 1
  store i64 %1495, i64* %172, align 8
  %1498 = getelementptr inbounds %runtime.Type_Info_Relative_Slice, %runtime.Type_Info_Relative_Slice* %165, i32 0, i32 0
  %1499 = load %runtime.Type_Info*, %runtime.Type_Info** %1498, align 8
  %1500 = bitcast %runtime.Context* %186 to i8*
  %1501 = call %runtime.Type_Info* @reflect.type_info_base(%runtime.Type_Info* %1499, i8* %1500)
  store %runtime.Type_Info* %1501, %runtime.Type_Info** %175, align 8
  %1502 = load %runtime.Type_Info*, %runtime.Type_Info** %175, align 8
  %1503 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1502, i32 0, i32 5
  %1504 = load { [15 x i64], i64 }, { [15 x i64], i64 }* %1503, align 8
  %1505 = bitcast { %runtime.Type_Info_Slice, i8 }* %176 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1505, i8 0, i64 24, i1 false)
  %1506 = getelementptr inbounds { %runtime.Type_Info_Slice, i8 }, { %runtime.Type_Info_Slice, i8 }* %176, i32 0, i32 0
  %1507 = getelementptr inbounds { %runtime.Type_Info_Slice, i8 }, { %runtime.Type_Info_Slice, i8 }* %176, i32 0, i32 1
  %1508 = getelementptr inbounds { [15 x i64], i64 }, { [15 x i64], i64 }* %1503, i32 0, i32 1
  %1509 = load i64, i64* %1508, align 8
  %1510 = icmp eq i64 %1509, 17
  br i1 %1510, label %union_cast.ok156, label %union_cast.end157

union_cast.ok156:                                 ; preds = %if.else155
  %1511 = bitcast { [15 x i64], i64 }* %1503 to %runtime.Type_Info_Slice*
  %1512 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1511, align 8
  store %runtime.Type_Info_Slice %1512, %runtime.Type_Info_Slice* %1506, align 8
  store i8 1, i8* %1507, align 1
  br label %union_cast.end157

union_cast.end157:                                ; preds = %union_cast.ok156, %if.else155
  %1513 = getelementptr inbounds { %runtime.Type_Info_Slice, i8 }, { %runtime.Type_Info_Slice, i8 }* %176, i32 0, i32 1
  %1514 = load i8, i8* %1513, align 1
  %1515 = bitcast { [15 x i64], i64 }* %1503 to i8*
  %1516 = icmp ne i8 %1514, 0
  store %..string { i8* getelementptr inbounds ([65 x i8], [65 x i8]* @"csbs$28a", i64 0, i64 0), i64 64 }, %..string* %177, align 8
  call void @runtime.type_assertion_check2(i1 %1516, %..string* %177, i32 2136, i32 53, i64 1369094286720630800, i64 3602879701896396854, i8* %1515)
  %1517 = getelementptr inbounds { %runtime.Type_Info_Slice, i8 }, { %runtime.Type_Info_Slice, i8 }* %176, i32 0, i32 0
  %1518 = load %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %1517, align 8
  store %runtime.Type_Info_Slice %1518, %runtime.Type_Info_Slice* %174, align 8
  %1519 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1520 = getelementptr inbounds %fmt.Info, %fmt.Info* %1519, i32 0, i32 19
  %1521 = load i64, i64* %1520, align 8
  %1522 = add i64 %1521, 1
  store i64 %1522, i64* %1520, align 8
  %1523 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1524 = getelementptr inbounds %fmt.Info, %fmt.Info* %1523, i32 0, i32 16
  %1525 = load %io.Writer, %io.Writer* %1524, align 8
  %1526 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1527 = getelementptr inbounds %fmt.Info, %fmt.Info* %1526, i32 0, i32 23
  %1528 = bitcast %runtime.Context* %186 to i8*
  %1529 = call i32 @io.write_byte_to_writer(%io.Writer* %1524, i8 91, i64* %1527, i8* %1528)
  store i64 0, i64* %178, align 8
  store i64 0, i64* %179, align 8
  br label %for.interval.loop158

for.interval.loop158:                             ; preds = %for.interval.post162, %union_cast.end157
  %1530 = load i64, i64* %172, align 8
  %1531 = load i64, i64* %178, align 8
  %1532 = icmp slt i64 %1531, %1530
  br i1 %1532, label %for.interval.body159, label %for.interval.done163

for.interval.body159:                             ; preds = %for.interval.loop158
  %1533 = load i64, i64* %178, align 8
  %1534 = load i64, i64* %179, align 8
  store i64 %1533, i64* %180, align 8
  %1535 = load i64, i64* %180, align 8
  %1536 = icmp sgt i64 %1535, 0
  %1537 = zext i1 %1536 to i8
  %1538 = trunc i8 %1537 to i1
  br i1 %1538, label %if.then160, label %if.done161

if.then160:                                       ; preds = %for.interval.body159
  %1539 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1540 = getelementptr inbounds %fmt.Info, %fmt.Info* %1539, i32 0, i32 16
  %1541 = load %io.Writer, %io.Writer* %1540, align 8
  %1542 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1543 = getelementptr inbounds %fmt.Info, %fmt.Info* %1542, i32 0, i32 23
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$24b", i64 0, i64 0), i64 2 }, %..string* %181, align 8
  %1544 = bitcast { i64, i32 }* %182 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1544, i8 0, i64 16, i1 false)
  %1545 = bitcast %runtime.Context* %186 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %182, %io.Writer* %1540, %..string* %181, i64* %1543, i8* %1545)
  %1546 = load { i64, i32 }, { i64, i32 }* %182, align 8
  br label %if.done161

if.done161:                                       ; preds = %if.then160, %for.interval.body159
  %1547 = load i8*, i8** %166, align 8
  %1548 = ptrtoint i8* %1547 to i64
  %1549 = load i64, i64* %180, align 8
  %1550 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %174, i32 0, i32 1
  %1551 = load i64, i64* %1550, align 8
  %1552 = mul i64 %1549, %1551
  %1553 = add i64 %1548, %1552
  store i64 %1553, i64* %183, align 8
  %1554 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1555 = bitcast %..any* %184 to i8*
  call void @llvm.memset.p0i8.i64(i8* %1555, i8 0, i64 16, i1 false)
  store %..any zeroinitializer, %..any* %184, align 8
  %1556 = load i64, i64* %183, align 8
  %1557 = inttoptr i64 %1556 to i8*
  %1558 = getelementptr inbounds %..any, %..any* %184, i32 0, i32 0
  store i8* %1557, i8** %1558, align 8
  %1559 = getelementptr inbounds %runtime.Type_Info_Slice, %runtime.Type_Info_Slice* %174, i32 0, i32 0
  %1560 = load %runtime.Type_Info*, %runtime.Type_Info** %1559, align 8
  %1561 = getelementptr inbounds %runtime.Type_Info, %runtime.Type_Info* %1560, i32 0, i32 4
  %1562 = load i64, i64* %1561, align 8
  %1563 = getelementptr inbounds %..any, %..any* %184, i32 0, i32 1
  store i64 %1562, i64* %1563, align 8
  %1564 = load %..any, %..any* %184, align 8
  %1565 = load i32, i32* %4, align 4
  %1566 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %1554, %..any* %184, i32 %1565, i8* %1566)
  br label %for.interval.post162

for.interval.post162:                             ; preds = %if.done161
  %1567 = load i64, i64* %178, align 8
  %1568 = add i64 %1567, 1
  store i64 %1568, i64* %178, align 8
  %1569 = load i64, i64* %179, align 8
  %1570 = add i64 %1569, 1
  store i64 %1570, i64* %179, align 8
  br label %for.interval.loop158

for.interval.done163:                             ; preds = %for.interval.loop158
  br label %defer164

defer164:                                         ; preds = %for.interval.done163
  %1571 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1572 = getelementptr inbounds %fmt.Info, %fmt.Info* %1571, i32 0, i32 16
  %1573 = load %io.Writer, %io.Writer* %1572, align 8
  %1574 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1575 = getelementptr inbounds %fmt.Info, %fmt.Info* %1574, i32 0, i32 23
  %1576 = bitcast %runtime.Context* %186 to i8*
  %1577 = call i32 @io.write_byte_to_writer(%io.Writer* %1572, i8 93, i64* %1575, i8* %1576)
  br label %defer165

defer165:                                         ; preds = %defer164
  %1578 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1579 = getelementptr inbounds %fmt.Info, %fmt.Info* %1578, i32 0, i32 19
  %1580 = load i64, i64* %1579, align 8
  %1581 = sub i64 %1580, 1
  store i64 %1581, i64* %1579, align 8
  br label %if.done166

if.done166:                                       ; preds = %defer165, %if.then154
  br label %if.done167

if.done167:                                       ; preds = %if.done166, %if.then152
  br label %typeswitch.done169

typeswitch.body168:                               ; preds = %if.done6
  %1582 = bitcast i8* %269 to %runtime.Type_Info_Matrix*
  %1583 = load %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %1582, align 8
  store %runtime.Type_Info_Matrix %1583, %runtime.Type_Info_Matrix* %185, align 8
  %1584 = load %fmt.Info*, %fmt.Info** %3, align 8
  %1585 = load %..any, %..any* %1, align 8
  %1586 = load i32, i32* %4, align 4
  %1587 = load %runtime.Type_Info_Matrix, %runtime.Type_Info_Matrix* %185, align 8
  %1588 = bitcast %runtime.Context* %186 to i8*
  call void @fmt.fmt_matrix(%fmt.Info* %1584, %..any* %1, i32 %1586, %runtime.Type_Info_Matrix* %185, i8* %1588)
  br label %typeswitch.done169

typeswitch.done169:                               ; preds = %typeswitch.body168, %if.done167, %typeswitch.body150, %typeswitch.body149, %typeswitch.body148, %if.done147, %typeswitch.body143, %typeswitch.body142, %typeswitch.body141, %defer140, %defer117, %if.done109, %if.done100, %if.done91, %defer82, %if.done62, %typeswitch.body35, %if.done34, %typeswitch.body15, %typeswitch.body14, %typeswitch.body13, %typeswitch.body12, %typeswitch.body11, %typeswitch.body10, %typeswitch.body9, %typeswitch.body8, %typeswitch.body7, %typeswitch.body, %if.done6
  ret void
}

define internal void @fmt.fmt_complex(%fmt.Info* %0, %..complex128* %1, i64 %2, i32 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %fmt.Info*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %4, align 8
  store i64 %2, i64* %5, align 8
  store i32 %3, i32* %6, align 4
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load i32, i32* %6, align 4
  switch i32 %12, label %switch.default.body [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 118, label %switch.case.body
    i32 104, label %switch.case.body
    i32 72, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %entry, %entry, %entry, %entry, %entry
  %13 = load %..complex128, %..complex128* %1, align 8
  %14 = getelementptr inbounds %..complex128, %..complex128* %1, i32 0, i32 0
  %15 = load double, double* %14, align 8
  %16 = load %..complex128, %..complex128* %1, align 8
  %17 = getelementptr inbounds %..complex128, %..complex128* %1, i32 0, i32 1
  %18 = load double, double* %17, align 8
  store double %15, double* %7, align 8
  store double %18, double* %8, align 8
  %19 = load %fmt.Info*, %fmt.Info** %4, align 8
  %20 = load double, double* %7, align 8
  %21 = load i64, i64* %5, align 8
  %22 = sdiv i64 %21, 2
  %23 = load i32, i32* %6, align 4
  %24 = bitcast %runtime.Context* %11 to i8*
  call void @fmt.fmt_float(%fmt.Info* %19, double %20, i64 %22, i32 %23, i8* %24)
  %25 = load %fmt.Info*, %fmt.Info** %4, align 8
  %26 = getelementptr inbounds %fmt.Info, %fmt.Info* %25, i32 0, i32 1
  %27 = load i8, i8* %26, align 1
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.done, label %cmp.and

cmp.and:                                          ; preds = %switch.case.body
  %29 = load double, double* %8, align 8
  %30 = fcmp oge double %29, 0.000000e+00
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %33 = load %fmt.Info*, %fmt.Info** %4, align 8
  %34 = getelementptr inbounds %fmt.Info, %fmt.Info* %33, i32 0, i32 16
  %35 = load %io.Writer, %io.Writer* %34, align 8
  %36 = load %fmt.Info*, %fmt.Info** %4, align 8
  %37 = getelementptr inbounds %fmt.Info, %fmt.Info* %36, i32 0, i32 23
  %38 = bitcast { i64, i32 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %38, i8 0, i64 16, i1 false)
  %39 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %9, %io.Writer* %34, i32 43, i64* %37, i8* %39)
  %40 = load { i64, i32 }, { i64, i32 }* %9, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %switch.case.body
  %41 = load %fmt.Info*, %fmt.Info** %4, align 8
  %42 = load double, double* %8, align 8
  %43 = load i64, i64* %5, align 8
  %44 = sdiv i64 %43, 2
  %45 = load i32, i32* %6, align 4
  %46 = bitcast %runtime.Context* %11 to i8*
  call void @fmt.fmt_float(%fmt.Info* %41, double %42, i64 %44, i32 %45, i8* %46)
  %47 = load %fmt.Info*, %fmt.Info** %4, align 8
  %48 = getelementptr inbounds %fmt.Info, %fmt.Info* %47, i32 0, i32 16
  %49 = load %io.Writer, %io.Writer* %48, align 8
  %50 = load %fmt.Info*, %fmt.Info** %4, align 8
  %51 = getelementptr inbounds %fmt.Info, %fmt.Info* %50, i32 0, i32 23
  %52 = bitcast { i64, i32 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %52, i8 0, i64 16, i1 false)
  %53 = bitcast %runtime.Context* %11 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %10, %io.Writer* %48, i32 105, i64* %51, i8* %53)
  %54 = load { i64, i32 }, { i64, i32 }* %10, align 8
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %55 = load %fmt.Info*, %fmt.Info** %4, align 8
  %56 = load i32, i32* %6, align 4
  %57 = bitcast %runtime.Context* %11 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %55, i32 %56, i8* %57)
  ret void

switch.done:                                      ; preds = %if.done
  ret void
}

define internal void @fmt.fmt_quaternion(%fmt.Info* %0, %..quaternion256* %1, i64 %2, i32 %3, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %4 = alloca %fmt.Info*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca { i64, i32 }, align 8
  %12 = alloca { i64, i32 }, align 8
  %13 = alloca { i64, i32 }, align 8
  %14 = alloca { i64, i32 }, align 8
  %15 = alloca { i64, i32 }, align 8
  %16 = alloca { i64, i32 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %4, align 8
  store i64 %2, i64* %5, align 8
  store i32 %3, i32* %6, align 4
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load i32, i32* %6, align 4
  switch i32 %18, label %switch.default.body [
    i32 102, label %switch.case.body
    i32 70, label %switch.case.body
    i32 118, label %switch.case.body
    i32 104, label %switch.case.body
    i32 72, label %switch.case.body
  ]

switch.case.body:                                 ; preds = %entry, %entry, %entry, %entry, %entry
  %19 = load %..quaternion256, %..quaternion256* %1, align 8
  %20 = getelementptr inbounds %..quaternion256, %..quaternion256* %1, i32 0, i32 3
  %21 = load double, double* %20, align 8
  %22 = load %..quaternion256, %..quaternion256* %1, align 8
  %23 = getelementptr inbounds %..quaternion256, %..quaternion256* %1, i32 0, i32 0
  %24 = load double, double* %23, align 8
  %25 = load %..quaternion256, %..quaternion256* %1, align 8
  %26 = getelementptr inbounds %..quaternion256, %..quaternion256* %1, i32 0, i32 1
  %27 = load double, double* %26, align 8
  %28 = load %..quaternion256, %..quaternion256* %1, align 8
  %29 = getelementptr inbounds %..quaternion256, %..quaternion256* %1, i32 0, i32 2
  %30 = load double, double* %29, align 8
  store double %21, double* %7, align 8
  store double %24, double* %8, align 8
  store double %27, double* %9, align 8
  store double %30, double* %10, align 8
  %31 = load %fmt.Info*, %fmt.Info** %4, align 8
  %32 = load double, double* %7, align 8
  %33 = load i64, i64* %5, align 8
  %34 = sdiv i64 %33, 4
  %35 = load i32, i32* %6, align 4
  %36 = bitcast %runtime.Context* %17 to i8*
  call void @fmt.fmt_float(%fmt.Info* %31, double %32, i64 %34, i32 %35, i8* %36)
  %37 = load %fmt.Info*, %fmt.Info** %4, align 8
  %38 = getelementptr inbounds %fmt.Info, %fmt.Info* %37, i32 0, i32 1
  %39 = load i8, i8* %38, align 1
  %40 = trunc i8 %39 to i1
  br i1 %40, label %if.done, label %cmp.and

cmp.and:                                          ; preds = %switch.case.body
  %41 = load double, double* %8, align 8
  %42 = fcmp oge double %41, 0.000000e+00
  %43 = zext i1 %42 to i8
  %44 = trunc i8 %43 to i1
  br i1 %44, label %if.then, label %if.done

if.then:                                          ; preds = %cmp.and
  %45 = load %fmt.Info*, %fmt.Info** %4, align 8
  %46 = getelementptr inbounds %fmt.Info, %fmt.Info* %45, i32 0, i32 16
  %47 = load %io.Writer, %io.Writer* %46, align 8
  %48 = load %fmt.Info*, %fmt.Info** %4, align 8
  %49 = getelementptr inbounds %fmt.Info, %fmt.Info* %48, i32 0, i32 23
  %50 = bitcast { i64, i32 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %50, i8 0, i64 16, i1 false)
  %51 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %11, %io.Writer* %46, i32 43, i64* %49, i8* %51)
  %52 = load { i64, i32 }, { i64, i32 }* %11, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %cmp.and, %switch.case.body
  %53 = load %fmt.Info*, %fmt.Info** %4, align 8
  %54 = load double, double* %8, align 8
  %55 = load i64, i64* %5, align 8
  %56 = sdiv i64 %55, 4
  %57 = load i32, i32* %6, align 4
  %58 = bitcast %runtime.Context* %17 to i8*
  call void @fmt.fmt_float(%fmt.Info* %53, double %54, i64 %56, i32 %57, i8* %58)
  %59 = load %fmt.Info*, %fmt.Info** %4, align 8
  %60 = getelementptr inbounds %fmt.Info, %fmt.Info* %59, i32 0, i32 16
  %61 = load %io.Writer, %io.Writer* %60, align 8
  %62 = load %fmt.Info*, %fmt.Info** %4, align 8
  %63 = getelementptr inbounds %fmt.Info, %fmt.Info* %62, i32 0, i32 23
  %64 = bitcast { i64, i32 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %64, i8 0, i64 16, i1 false)
  %65 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %12, %io.Writer* %60, i32 105, i64* %63, i8* %65)
  %66 = load { i64, i32 }, { i64, i32 }* %12, align 8
  %67 = load %fmt.Info*, %fmt.Info** %4, align 8
  %68 = getelementptr inbounds %fmt.Info, %fmt.Info* %67, i32 0, i32 1
  %69 = load i8, i8* %68, align 1
  %70 = trunc i8 %69 to i1
  br i1 %70, label %if.done3, label %cmp.and1

cmp.and1:                                         ; preds = %if.done
  %71 = load double, double* %9, align 8
  %72 = fcmp oge double %71, 0.000000e+00
  %73 = zext i1 %72 to i8
  %74 = trunc i8 %73 to i1
  br i1 %74, label %if.then2, label %if.done3

if.then2:                                         ; preds = %cmp.and1
  %75 = load %fmt.Info*, %fmt.Info** %4, align 8
  %76 = getelementptr inbounds %fmt.Info, %fmt.Info* %75, i32 0, i32 16
  %77 = load %io.Writer, %io.Writer* %76, align 8
  %78 = load %fmt.Info*, %fmt.Info** %4, align 8
  %79 = getelementptr inbounds %fmt.Info, %fmt.Info* %78, i32 0, i32 23
  %80 = bitcast { i64, i32 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %80, i8 0, i64 16, i1 false)
  %81 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %13, %io.Writer* %76, i32 43, i64* %79, i8* %81)
  %82 = load { i64, i32 }, { i64, i32 }* %13, align 8
  br label %if.done3

if.done3:                                         ; preds = %if.then2, %cmp.and1, %if.done
  %83 = load %fmt.Info*, %fmt.Info** %4, align 8
  %84 = load double, double* %9, align 8
  %85 = load i64, i64* %5, align 8
  %86 = sdiv i64 %85, 4
  %87 = load i32, i32* %6, align 4
  %88 = bitcast %runtime.Context* %17 to i8*
  call void @fmt.fmt_float(%fmt.Info* %83, double %84, i64 %86, i32 %87, i8* %88)
  %89 = load %fmt.Info*, %fmt.Info** %4, align 8
  %90 = getelementptr inbounds %fmt.Info, %fmt.Info* %89, i32 0, i32 16
  %91 = load %io.Writer, %io.Writer* %90, align 8
  %92 = load %fmt.Info*, %fmt.Info** %4, align 8
  %93 = getelementptr inbounds %fmt.Info, %fmt.Info* %92, i32 0, i32 23
  %94 = bitcast { i64, i32 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %94, i8 0, i64 16, i1 false)
  %95 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %14, %io.Writer* %90, i32 106, i64* %93, i8* %95)
  %96 = load { i64, i32 }, { i64, i32 }* %14, align 8
  %97 = load %fmt.Info*, %fmt.Info** %4, align 8
  %98 = getelementptr inbounds %fmt.Info, %fmt.Info* %97, i32 0, i32 1
  %99 = load i8, i8* %98, align 1
  %100 = trunc i8 %99 to i1
  br i1 %100, label %if.done6, label %cmp.and4

cmp.and4:                                         ; preds = %if.done3
  %101 = load double, double* %10, align 8
  %102 = fcmp oge double %101, 0.000000e+00
  %103 = zext i1 %102 to i8
  %104 = trunc i8 %103 to i1
  br i1 %104, label %if.then5, label %if.done6

if.then5:                                         ; preds = %cmp.and4
  %105 = load %fmt.Info*, %fmt.Info** %4, align 8
  %106 = getelementptr inbounds %fmt.Info, %fmt.Info* %105, i32 0, i32 16
  %107 = load %io.Writer, %io.Writer* %106, align 8
  %108 = load %fmt.Info*, %fmt.Info** %4, align 8
  %109 = getelementptr inbounds %fmt.Info, %fmt.Info* %108, i32 0, i32 23
  %110 = bitcast { i64, i32 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %110, i8 0, i64 16, i1 false)
  %111 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %15, %io.Writer* %106, i32 43, i64* %109, i8* %111)
  %112 = load { i64, i32 }, { i64, i32 }* %15, align 8
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %cmp.and4, %if.done3
  %113 = load %fmt.Info*, %fmt.Info** %4, align 8
  %114 = load double, double* %10, align 8
  %115 = load i64, i64* %5, align 8
  %116 = sdiv i64 %115, 4
  %117 = load i32, i32* %6, align 4
  %118 = bitcast %runtime.Context* %17 to i8*
  call void @fmt.fmt_float(%fmt.Info* %113, double %114, i64 %116, i32 %117, i8* %118)
  %119 = load %fmt.Info*, %fmt.Info** %4, align 8
  %120 = getelementptr inbounds %fmt.Info, %fmt.Info* %119, i32 0, i32 16
  %121 = load %io.Writer, %io.Writer* %120, align 8
  %122 = load %fmt.Info*, %fmt.Info** %4, align 8
  %123 = getelementptr inbounds %fmt.Info, %fmt.Info* %122, i32 0, i32 23
  %124 = bitcast { i64, i32 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %124, i8 0, i64 16, i1 false)
  %125 = bitcast %runtime.Context* %17 to i8*
  call void @io.write_rune({ i64, i32 }* sret({ i64, i32 }*) %16, %io.Writer* %120, i32 107, i64* %123, i8* %125)
  %126 = load { i64, i32 }, { i64, i32 }* %16, align 8
  br label %switch.done

switch.default.body:                              ; preds = %entry
  %127 = load %fmt.Info*, %fmt.Info** %4, align 8
  %128 = load i32, i32* %6, align 4
  %129 = bitcast %runtime.Context* %17 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %127, i32 %128, i8* %129)
  ret void

switch.done:                                      ; preds = %if.done6
  ret void
}

define internal void @fmt.fmt_arg(%fmt.Info* %0, %..any* %1, i32 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %fmt.Info*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %..string, align 8
  %6 = alloca { i64, i32 }, align 8
  %7 = alloca %runtime.Type_Info*, align 8
  %8 = alloca %runtime.Type_Info*, align 8
  %9 = alloca { i64, i32 }, align 8
  %10 = alloca i8 (%fmt.Info*, %..any*, i32, i8*)*, align 8
  %11 = alloca { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, align 8
  %12 = alloca %runtime.Map_Header, align 8
  %13 = alloca %runtime.Map_Hash, align 8
  %14 = alloca i8, align 1
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca { i64, i32 }, align 8
  %17 = alloca { i64, i32 }, align 8
  %18 = alloca { i64, i32 }, align 8
  %19 = alloca %..any, align 8
  %20 = alloca i8, align 1
  %21 = alloca i8, align 1
  %22 = alloca i16, align 2
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  %25 = alloca %..any, align 8
  %26 = alloca i32, align 4
  %27 = alloca half, align 2
  %28 = alloca float, align 4
  %29 = alloca double, align 8
  %30 = alloca half, align 2
  %31 = alloca float, align 4
  %32 = alloca double, align 8
  %33 = alloca half, align 2
  %34 = alloca float, align 4
  %35 = alloca double, align 8
  %36 = alloca %..complex32, align 2
  %37 = alloca %..complex128, align 8
  %38 = alloca %..complex64, align 4
  %39 = alloca %..complex128, align 8
  %40 = alloca %..complex128, align 8
  %41 = alloca %..quaternion64, align 2
  %42 = alloca %..quaternion256, align 8
  %43 = alloca %..quaternion128, align 4
  %44 = alloca %..quaternion256, align 8
  %45 = alloca %..quaternion256, align 8
  %46 = alloca i8, align 1
  %47 = alloca i8, align 1
  %48 = alloca i16, align 2
  %49 = alloca i16, align 2
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i64, align 8
  %53 = alloca i64, align 8
  %54 = alloca i64, align 8
  %55 = alloca i64, align 8
  %56 = alloca i64, align 8
  %57 = alloca %..string, align 8
  %58 = alloca i8*, align 8
  %59 = alloca i64, align 8
  %60 = alloca { i64, i32 }, align 8
  %61 = alloca i16, align 2
  %62 = alloca i16, align 2
  %63 = alloca i32, align 4
  %64 = alloca i32, align 4
  %65 = alloca i64, align 8
  %66 = alloca i64, align 8
  %67 = alloca i16, align 2
  %68 = alloca i16, align 2
  %69 = alloca i32, align 4
  %70 = alloca i32, align 4
  %71 = alloca i64, align 8
  %72 = alloca i64, align 8
  %73 = alloca i128, align 8
  %74 = alloca i128, align 8
  %75 = alloca i128, align 8
  %76 = alloca i128, align 8
  %77 = alloca i128, align 8
  %78 = alloca i128, align 8
  %79 = alloca i128, align 8
  %80 = alloca i128, align 8
  %81 = alloca %..any, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %fmt.Info* %0, %fmt.Info** %3, align 8
  store i32 %2, i32* %4, align 4
  %82 = bitcast i8* %__.context_ptr to %runtime.Context*
  %83 = load %..any, %..any* %1, align 8
  %84 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %85 = load i8*, i8** %84, align 8
  %86 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = icmp eq i8* %85, null
  %89 = icmp eq i64 %87, 0
  %90 = or i1 %88, %89
  %91 = zext i1 %90 to i8
  %92 = trunc i8 %91 to i1
  br i1 %92, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %93 = load %fmt.Info*, %fmt.Info** %3, align 8
  %94 = getelementptr inbounds %fmt.Info, %fmt.Info* %93, i32 0, i32 16
  %95 = load %io.Writer, %io.Writer* %94, align 8
  store %..string { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"csbs$293", i64 0, i64 0), i64 5 }, %..string* %5, align 8
  %96 = bitcast { i64, i32 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 16, i1 false)
  %97 = bitcast %runtime.Context* %82 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %6, %io.Writer* %94, %..string* %5, i64* null, i8* %97)
  %98 = load { i64, i32 }, { i64, i32 }* %6, align 8
  ret void

if.done:                                          ; preds = %entry
  %99 = load %fmt.Info*, %fmt.Info** %3, align 8
  %100 = getelementptr inbounds %fmt.Info, %fmt.Info* %99, i32 0, i32 17
  %101 = load %..any, %..any* %1, align 8
  store %..any %101, %..any* %100, align 8
  %102 = load i32, i32* %4, align 4
  %103 = icmp eq i32 %102, 84
  %104 = zext i1 %103 to i8
  %105 = trunc i8 %104 to i1
  br i1 %105, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %106 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = call %runtime.Type_Info* @runtime.__type_info_of(i64 %107)
  store %runtime.Type_Info* %108, %runtime.Type_Info** %7, align 8
  %109 = load %..any, %..any* %1, align 8
  %110 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %111 = load i64, i64* %110, align 8
  switch i64 %111, label %typeswitch.done [
    i64 720575940379279368, label %typeswitch.body
  ]

typeswitch.body:                                  ; preds = %if.then1
  %112 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = bitcast i8* %113 to %runtime.Type_Info**
  %115 = load %runtime.Type_Info*, %runtime.Type_Info** %114, align 8
  store %runtime.Type_Info* %115, %runtime.Type_Info** %8, align 8
  %116 = load %runtime.Type_Info*, %runtime.Type_Info** %8, align 8
  store %runtime.Type_Info* %116, %runtime.Type_Info** %7, align 8
  br label %typeswitch.done

typeswitch.done:                                  ; preds = %typeswitch.body, %if.then1
  %117 = load %fmt.Info*, %fmt.Info** %3, align 8
  %118 = getelementptr inbounds %fmt.Info, %fmt.Info* %117, i32 0, i32 16
  %119 = load %io.Writer, %io.Writer* %118, align 8
  %120 = load %runtime.Type_Info*, %runtime.Type_Info** %7, align 8
  %121 = load %fmt.Info*, %fmt.Info** %3, align 8
  %122 = getelementptr inbounds %fmt.Info, %fmt.Info* %121, i32 0, i32 23
  %123 = bitcast { i64, i32 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %123, i8 0, i64 16, i1 false)
  %124 = bitcast %runtime.Context* %82 to i8*
  call void @reflect.write_type_writer({ i64, i32 }* sret({ i64, i32 }*) %9, %io.Writer* %118, %runtime.Type_Info* %120, i64* %122, i8* %124)
  %125 = load { i64, i32 }, { i64, i32 }* %9, align 8
  ret void

if.done2:                                         ; preds = %if.done
  %126 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }** @fmt._user_formatters, align 8
  %127 = icmp ne { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %126, null
  %128 = zext i1 %127 to i8
  %129 = trunc i8 %128 to i1
  br i1 %129, label %if.then3, label %if.done8

if.then3:                                         ; preds = %if.done2
  %130 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }*, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }** @fmt._user_formatters, align 8
  %131 = load { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }, { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %130, align 8
  %132 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %133 = load i64, i64* %132, align 8
  %134 = bitcast { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %134, i8 0, i64 16, i1 false)
  store %runtime.Map_Header { %runtime.Raw_Map* null, i8 (i8*, i8*)* @"__$equal3", i64 32, i64 8, i64 16, i64 8, i64 24, i64 8 }, %runtime.Map_Header* %12, align 8
  %135 = getelementptr inbounds %runtime.Map_Header, %runtime.Map_Header* %12, i32 0, i32 0
  %136 = bitcast { { i64*, i64 }, { i8*, i64, i64, %runtime.Allocator } }* %130 to %runtime.Raw_Map*
  store %runtime.Raw_Map* %136, %runtime.Raw_Map** %135, align 8
  %137 = load %runtime.Map_Header, %runtime.Map_Header* %12, align 8
  %138 = bitcast %runtime.Map_Hash* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %138, i8 0, i64 16, i1 false)
  %139 = bitcast i64* %132 to i8*
  %140 = call i64 @"__$hasher1"(i8* %139, i64 0)
  %141 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %13, i32 0, i32 0
  store i64 %140, i64* %141, align 8
  %142 = getelementptr inbounds %runtime.Map_Hash, %runtime.Map_Hash* %13, i32 0, i32 1
  store i8* %139, i8** %142, align 8
  %143 = load %runtime.Map_Hash, %runtime.Map_Hash* %13, align 8
  %144 = bitcast %runtime.Context* %82 to i8*
  %145 = call i8* @runtime.__dynamic_map_get(%runtime.Map_Header* %12, %runtime.Map_Hash* %13, i8* %144)
  %146 = icmp ne i8* %145, null
  %147 = zext i1 %146 to i8
  %148 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %11, i32 0, i32 1
  store i8 %147, i8* %148, align 1
  %149 = trunc i8 %147 to i1
  br i1 %149, label %map.get.then, label %map.get.done

map.get.then:                                     ; preds = %if.then3
  %150 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %11, i32 0, i32 0
  %151 = bitcast i8* %145 to i8 (%fmt.Info*, %..any*, i32, i8*)**
  %152 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %151, align 8
  %153 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)** %150 to i8**
  %154 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)* %152 to i8*
  store i8* %154, i8** %153, align 8
  br label %map.get.done

map.get.done:                                     ; preds = %map.get.then, %if.then3
  %155 = getelementptr inbounds { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }, { i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 }* %11, i32 0, i32 0
  %156 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %155, align 8
  %157 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)** %10 to i8**
  %158 = bitcast i8 (%fmt.Info*, %..any*, i32, i8*)* %156 to i8*
  store i8* %158, i8** %157, align 8
  %159 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %10, align 8
  %160 = icmp ne i8 (%fmt.Info*, %..any*, i32, i8*)* %159, null
  %161 = zext i1 %160 to i8
  %162 = trunc i8 %161 to i1
  br i1 %162, label %if.then4, label %if.done7

if.then4:                                         ; preds = %map.get.done
  br label %if.init

if.init:                                          ; preds = %if.then4
  %163 = load i8 (%fmt.Info*, %..any*, i32, i8*)*, i8 (%fmt.Info*, %..any*, i32, i8*)** %10, align 8
  %164 = load %fmt.Info*, %fmt.Info** %3, align 8
  %165 = load %..any, %..any* %1, align 8
  %166 = load i32, i32* %4, align 4
  %167 = bitcast %runtime.Context* %82 to i8*
  %168 = call i8 %163(%fmt.Info* %164, %..any* %1, i32 %166, i8* %167)
  store i8 %168, i8* %14, align 1
  %169 = load i8, i8* %14, align 1
  %170 = trunc i8 %169 to i1
  br i1 %170, label %if.done6, label %if.then5

if.then5:                                         ; preds = %if.init
  %171 = load %fmt.Info*, %fmt.Info** %3, align 8
  %172 = load i32, i32* %4, align 4
  %173 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bad_verb(%fmt.Info* %171, i32 %172, i8* %173)
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.init
  ret void

if.done7:                                         ; preds = %map.get.done
  br label %if.done8

if.done8:                                         ; preds = %if.done7, %if.done2
  %174 = load %..any, %..any* %1, align 8
  %175 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 1
  %176 = load i64, i64* %175, align 8
  switch i64 %176, label %typeswitch.done12 [
    i64 3602879701896396820, label %typeswitch.body9
  ]

typeswitch.body9:                                 ; preds = %if.done8
  %177 = getelementptr inbounds %..any, %..any* %1, i32 0, i32 0
  %178 = load i8*, i8** %177, align 8
  %179 = bitcast i8* %178 to %runtime.Source_Code_Location*
  %180 = load %runtime.Source_Code_Location, %runtime.Source_Code_Location* %179, align 8
  store %runtime.Source_Code_Location %180, %runtime.Source_Code_Location* %15, align 8
  %181 = load %fmt.Info*, %fmt.Info** %3, align 8
  %182 = getelementptr inbounds %fmt.Info, %fmt.Info* %181, i32 0, i32 4
  %183 = load i8, i8* %182, align 1
  %184 = trunc i8 %183 to i1
  br i1 %184, label %cmp.and, label %if.done11

cmp.and:                                          ; preds = %typeswitch.body9
  %185 = load i32, i32* %4, align 4
  %186 = icmp eq i32 %185, 118
  %187 = zext i1 %186 to i8
  %188 = trunc i8 %187 to i1
  br i1 %188, label %if.then10, label %if.done11

if.then10:                                        ; preds = %cmp.and
  %189 = load %fmt.Info*, %fmt.Info** %3, align 8
  %190 = getelementptr inbounds %fmt.Info, %fmt.Info* %189, i32 0, i32 16
  %191 = load %io.Writer, %io.Writer* %190, align 8
  %192 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %15, i32 0, i32 0
  %193 = load %..string, %..string* %192, align 8
  %194 = load %fmt.Info*, %fmt.Info** %3, align 8
  %195 = getelementptr inbounds %fmt.Info, %fmt.Info* %194, i32 0, i32 23
  %196 = bitcast { i64, i32 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %196, i8 0, i64 16, i1 false)
  %197 = bitcast %runtime.Context* %82 to i8*
  call void @io.write_string({ i64, i32 }* sret({ i64, i32 }*) %16, %io.Writer* %190, %..string* %192, i64* %195, i8* %197)
  %198 = load { i64, i32 }, { i64, i32 }* %16, align 8
  %199 = load %fmt.Info*, %fmt.Info** %3, align 8
  %200 = getelementptr inbounds %fmt.Info, %fmt.Info* %199, i32 0, i32 16
  %201 = load %io.Writer, %io.Writer* %200, align 8
  %202 = load %fmt.Info*, %fmt.Info** %3, align 8
  %203 = getelementptr inbounds %fmt.Info, %fmt.Info* %202, i32 0, i32 23
  %204 = bitcast %runtime.Context* %82 to i8*
  %205 = call i32 @io.write_byte_to_writer(%io.Writer* %200, i8 40, i64* %203, i8* %204)
  %206 = load %fmt.Info*, %fmt.Info** %3, align 8
  %207 = getelementptr inbounds %fmt.Info, %fmt.Info* %206, i32 0, i32 16
  %208 = load %io.Writer, %io.Writer* %207, align 8
  %209 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %15, i32 0, i32 1
  %210 = load i32, i32* %209, align 4
  %211 = sext i32 %210 to i64
  %212 = load %fmt.Info*, %fmt.Info** %3, align 8
  %213 = getelementptr inbounds %fmt.Info, %fmt.Info* %212, i32 0, i32 23
  %214 = bitcast { i64, i32 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %214, i8 0, i64 16, i1 false)
  %215 = bitcast %runtime.Context* %82 to i8*
  call void @io.write_i64({ i64, i32 }* sret({ i64, i32 }*) %17, %io.Writer* %207, i64 %211, i64 10, i64* %213, i8* %215)
  %216 = load { i64, i32 }, { i64, i32 }* %17, align 8
  %217 = load %fmt.Info*, %fmt.Info** %3, align 8
  %218 = getelementptr inbounds %fmt.Info, %fmt.Info* %217, i32 0, i32 16
  %219 = load %io.Writer, %io.Writer* %218, align 8
  %220 = load %fmt.Info*, %fmt.Info** %3, align 8
  %221 = getelementptr inbounds %fmt.Info, %fmt.Info* %220, i32 0, i32 23
  %222 = bitcast %runtime.Context* %82 to i8*
  %223 = call i32 @io.write_byte_to_writer(%io.Writer* %218, i8 58, i64* %221, i8* %222)
  %224 = load %fmt.Info*, %fmt.Info** %3, align 8
  %225 = getelementptr inbounds %fmt.Info, %fmt.Info* %224, i32 0, i32 16
  %226 = load %io.Writer, %io.Writer* %225, align 8
  %227 = getelementptr inbounds %runtime.Source_Code_Location, %runtime.Source_Code_Location* %15, i32 0, i32 2
  %228 = load i32, i32* %227, align 4
  %229 = sext i32 %228 to i64
  %230 = load %fmt.Info*, %fmt.Info** %3, align 8
  %231 = getelementptr inbounds %fmt.Info, %fmt.Info* %230, i32 0, i32 23
  %232 = bitcast { i64, i32 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %232, i8 0, i64 16, i1 false)
  %233 = bitcast %runtime.Context* %82 to i8*
  call void @io.write_i64({ i64, i32 }* sret({ i64, i32 }*) %18, %io.Writer* %225, i64 %229, i64 10, i64* %231, i8* %233)
  %234 = load { i64, i32 }, { i64, i32 }* %18, align 8
  %235 = load %fmt.Info*, %fmt.Info** %3, align 8
  %236 = getelementptr inbounds %fmt.Info, %fmt.Info* %235, i32 0, i32 16
  %237 = load %io.Writer, %io.Writer* %236, align 8
  %238 = load %fmt.Info*, %fmt.Info** %3, align 8
  %239 = getelementptr inbounds %fmt.Info, %fmt.Info* %238, i32 0, i32 23
  %240 = bitcast %runtime.Context* %82 to i8*
  %241 = call i32 @io.write_byte_to_writer(%io.Writer* %236, i8 41, i64* %239, i8* %240)
  ret void

if.done11:                                        ; preds = %cmp.and, %typeswitch.body9
  br label %typeswitch.done12

typeswitch.done12:                                ; preds = %if.done11, %if.done8
  %242 = load %..any, %..any* %1, align 8
  store %..any %242, %..any* %19, align 8
  %243 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 1
  %244 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 1
  %245 = load i64, i64* %244, align 8
  %246 = call i64 @runtime.typeid_base(i64 %245)
  store i64 %246, i64* %243, align 8
  %247 = load %..any, %..any* %19, align 8
  %248 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 1
  %249 = load i64, i64* %248, align 8
  switch i64 %249, label %typeswitch.default.body [
    i64 504403158265495577, label %typeswitch.body13
    i64 504403158265495682, label %typeswitch.body14
    i64 504403158265495683, label %typeswitch.body15
    i64 504403158265495684, label %typeswitch.body16
    i64 504403158265495685, label %typeswitch.body17
    i64 5, label %typeswitch.body18
    i64 4755801206503243899, label %typeswitch.body19
    i64 216172782113783946, label %typeswitch.body20
    i64 216172782113783932, label %typeswitch.body21
    i64 216172782113783933, label %typeswitch.body22
    i64 216172782113783947, label %typeswitch.body23
    i64 216172782113783934, label %typeswitch.body24
    i64 216172782113783935, label %typeswitch.body25
    i64 216172782113783948, label %typeswitch.body26
    i64 216172782113783936, label %typeswitch.body27
    i64 216172782113783937, label %typeswitch.body28
    i64 288230376151711885, label %typeswitch.body29
    i64 288230376151711878, label %typeswitch.body30
    i64 288230376151711879, label %typeswitch.body31
    i64 142, label %typeswitch.body32
    i64 136, label %typeswitch.body33
    i64 137, label %typeswitch.body34
    i64 4683743612465315941, label %typeswitch.body35
    i64 72057594037927939, label %typeswitch.body36
    i64 4683743612465315942, label %typeswitch.body37
    i64 72057594037928040, label %typeswitch.body38
    i64 4683743612465315862, label %typeswitch.body39
    i64 72057594037927951, label %typeswitch.body40
    i64 4683743612465315891, label %typeswitch.body41
    i64 72057594037927953, label %typeswitch.body42
    i64 4683743612465315844, label %typeswitch.body43
    i64 72057594037928042, label %typeswitch.body44
    i64 72057594037928000, label %typeswitch.body45
    i64 432345564227567617, label %typeswitch.body46
    i64 5044031582654955616, label %typeswitch.body47
    i64 7, label %typeswitch.body48
    i64 4683743612465315951, label %typeswitch.body49
    i64 72057594037928043, label %typeswitch.body50
    i64 4683743612465315952, label %typeswitch.body51
    i64 72057594037928044, label %typeswitch.body52
    i64 4683743612465315953, label %typeswitch.body53
    i64 72057594037928045, label %typeswitch.body54
    i64 4683743612465315959, label %typeswitch.body55
    i64 72057594037928051, label %typeswitch.body56
    i64 4683743612465315960, label %typeswitch.body57
    i64 72057594037928052, label %typeswitch.body58
    i64 4683743612465315961, label %typeswitch.body59
    i64 72057594037928053, label %typeswitch.body60
    i64 4683743612465315943, label %typeswitch.body61
    i64 72057594037928041, label %typeswitch.body62
    i64 4683743612465315954, label %typeswitch.body63
    i64 72057594037928046, label %typeswitch.body64
    i64 4683743612465315962, label %typeswitch.body65
    i64 72057594037928054, label %typeswitch.body66
  ]

typeswitch.body13:                                ; preds = %typeswitch.done12
  %250 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %251 = load i8*, i8** %250, align 8
  %252 = load i8, i8* %251, align 1
  store i8 %252, i8* %20, align 1
  %253 = load %fmt.Info*, %fmt.Info** %3, align 8
  %254 = load i8, i8* %20, align 1
  %255 = load i32, i32* %4, align 4
  %256 = icmp ne i8 %254, 0
  %257 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bool(%fmt.Info* %253, i1 %256, i32 %255, i8* %257)
  br label %typeswitch.done67

typeswitch.body14:                                ; preds = %typeswitch.done12
  %258 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %259 = load i8*, i8** %258, align 8
  %260 = load i8, i8* %259, align 1
  store i8 %260, i8* %21, align 1
  %261 = load %fmt.Info*, %fmt.Info** %3, align 8
  %262 = load i8, i8* %21, align 1
  %263 = icmp ne i8 %262, 0
  %264 = zext i1 %263 to i8
  %265 = load i32, i32* %4, align 4
  %266 = icmp ne i8 %264, 0
  %267 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bool(%fmt.Info* %261, i1 %266, i32 %265, i8* %267)
  br label %typeswitch.done67

typeswitch.body15:                                ; preds = %typeswitch.done12
  %268 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %269 = load i8*, i8** %268, align 8
  %270 = bitcast i8* %269 to i16*
  %271 = load i16, i16* %270, align 2
  store i16 %271, i16* %22, align 2
  %272 = load %fmt.Info*, %fmt.Info** %3, align 8
  %273 = load i16, i16* %22, align 2
  %274 = icmp ne i16 %273, 0
  %275 = zext i1 %274 to i8
  %276 = load i32, i32* %4, align 4
  %277 = icmp ne i8 %275, 0
  %278 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bool(%fmt.Info* %272, i1 %277, i32 %276, i8* %278)
  br label %typeswitch.done67

typeswitch.body16:                                ; preds = %typeswitch.done12
  %279 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %280 = load i8*, i8** %279, align 8
  %281 = bitcast i8* %280 to i32*
  %282 = load i32, i32* %281, align 4
  store i32 %282, i32* %23, align 4
  %283 = load %fmt.Info*, %fmt.Info** %3, align 8
  %284 = load i32, i32* %23, align 4
  %285 = icmp ne i32 %284, 0
  %286 = zext i1 %285 to i8
  %287 = load i32, i32* %4, align 4
  %288 = icmp ne i8 %286, 0
  %289 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bool(%fmt.Info* %283, i1 %288, i32 %287, i8* %289)
  br label %typeswitch.done67

typeswitch.body17:                                ; preds = %typeswitch.done12
  %290 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %291 = load i8*, i8** %290, align 8
  %292 = bitcast i8* %291 to i64*
  %293 = load i64, i64* %292, align 8
  store i64 %293, i64* %24, align 8
  %294 = load %fmt.Info*, %fmt.Info** %3, align 8
  %295 = load i64, i64* %24, align 8
  %296 = icmp ne i64 %295, 0
  %297 = zext i1 %296 to i8
  %298 = load i32, i32* %4, align 4
  %299 = icmp ne i8 %297, 0
  %300 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_bool(%fmt.Info* %294, i1 %299, i32 %298, i8* %300)
  br label %typeswitch.done67

typeswitch.body18:                                ; preds = %typeswitch.done12
  %301 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %302 = load i8*, i8** %301, align 8
  %303 = bitcast i8* %302 to %..any*
  %304 = load %..any, %..any* %303, align 8
  store %..any %304, %..any* %25, align 8
  %305 = load %fmt.Info*, %fmt.Info** %3, align 8
  %306 = load %..any, %..any* %25, align 8
  %307 = load i32, i32* %4, align 4
  %308 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_arg(%fmt.Info* %305, %..any* %25, i32 %307, i8* %308)
  br label %typeswitch.done67

typeswitch.body19:                                ; preds = %typeswitch.done12
  %309 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %310 = load i8*, i8** %309, align 8
  %311 = bitcast i8* %310 to i32*
  %312 = load i32, i32* %311, align 4
  store i32 %312, i32* %26, align 4
  %313 = load %fmt.Info*, %fmt.Info** %3, align 8
  %314 = load i32, i32* %26, align 4
  %315 = load i32, i32* %4, align 4
  %316 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_rune(%fmt.Info* %313, i32 %314, i32 %315, i8* %316)
  br label %typeswitch.done67

typeswitch.body20:                                ; preds = %typeswitch.done12
  %317 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %318 = load i8*, i8** %317, align 8
  %319 = bitcast i8* %318 to half*
  %320 = load half, half* %319, align 2
  store half %320, half* %27, align 2
  %321 = load %fmt.Info*, %fmt.Info** %3, align 8
  %322 = load half, half* %27, align 2
  %323 = fpext half %322 to double
  %324 = load i32, i32* %4, align 4
  %325 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %321, double %323, i64 16, i32 %324, i8* %325)
  br label %typeswitch.done67

typeswitch.body21:                                ; preds = %typeswitch.done12
  %326 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %327 = load i8*, i8** %326, align 8
  %328 = bitcast i8* %327 to float*
  %329 = load float, float* %328, align 4
  store float %329, float* %28, align 4
  %330 = load %fmt.Info*, %fmt.Info** %3, align 8
  %331 = load float, float* %28, align 4
  %332 = fpext float %331 to double
  %333 = load i32, i32* %4, align 4
  %334 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %330, double %332, i64 32, i32 %333, i8* %334)
  br label %typeswitch.done67

typeswitch.body22:                                ; preds = %typeswitch.done12
  %335 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %336 = load i8*, i8** %335, align 8
  %337 = bitcast i8* %336 to double*
  %338 = load double, double* %337, align 8
  store double %338, double* %29, align 8
  %339 = load %fmt.Info*, %fmt.Info** %3, align 8
  %340 = load double, double* %29, align 8
  %341 = load i32, i32* %4, align 4
  %342 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %339, double %340, i64 64, i32 %341, i8* %342)
  br label %typeswitch.done67

typeswitch.body23:                                ; preds = %typeswitch.done12
  %343 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %344 = load i8*, i8** %343, align 8
  %345 = bitcast i8* %344 to half*
  %346 = load half, half* %345, align 2
  store half %346, half* %30, align 2
  %347 = load %fmt.Info*, %fmt.Info** %3, align 8
  %348 = load half, half* %30, align 2
  %349 = fpext half %348 to double
  %350 = load i32, i32* %4, align 4
  %351 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %347, double %349, i64 16, i32 %350, i8* %351)
  br label %typeswitch.done67

typeswitch.body24:                                ; preds = %typeswitch.done12
  %352 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %353 = load i8*, i8** %352, align 8
  %354 = bitcast i8* %353 to float*
  %355 = load float, float* %354, align 4
  store float %355, float* %31, align 4
  %356 = load %fmt.Info*, %fmt.Info** %3, align 8
  %357 = load float, float* %31, align 4
  %358 = fpext float %357 to double
  %359 = load i32, i32* %4, align 4
  %360 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %356, double %358, i64 32, i32 %359, i8* %360)
  br label %typeswitch.done67

typeswitch.body25:                                ; preds = %typeswitch.done12
  %361 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %362 = load i8*, i8** %361, align 8
  %363 = bitcast i8* %362 to double*
  %364 = load double, double* %363, align 8
  store double %364, double* %32, align 8
  %365 = load %fmt.Info*, %fmt.Info** %3, align 8
  %366 = load double, double* %32, align 8
  %367 = load i32, i32* %4, align 4
  %368 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %365, double %366, i64 64, i32 %367, i8* %368)
  br label %typeswitch.done67

typeswitch.body26:                                ; preds = %typeswitch.done12
  %369 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %370 = load i8*, i8** %369, align 8
  %371 = bitcast i8* %370 to half*
  %372 = load half, half* %371, align 2
  store half %372, half* %33, align 2
  %373 = load %fmt.Info*, %fmt.Info** %3, align 8
  %374 = load half, half* %33, align 2
  %375 = bitcast half %374 to i16
  %376 = call i16 @llvm.bswap.i16(i16 %375)
  %377 = bitcast i16 %376 to half
  %378 = fpext half %377 to double
  %379 = load i32, i32* %4, align 4
  %380 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %373, double %378, i64 16, i32 %379, i8* %380)
  br label %typeswitch.done67

typeswitch.body27:                                ; preds = %typeswitch.done12
  %381 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %382 = load i8*, i8** %381, align 8
  %383 = bitcast i8* %382 to float*
  %384 = load float, float* %383, align 4
  store float %384, float* %34, align 4
  %385 = load %fmt.Info*, %fmt.Info** %3, align 8
  %386 = load float, float* %34, align 4
  %387 = bitcast float %386 to i32
  %388 = call i32 @llvm.bswap.i32(i32 %387)
  %389 = bitcast i32 %388 to float
  %390 = fpext float %389 to double
  %391 = load i32, i32* %4, align 4
  %392 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %385, double %390, i64 32, i32 %391, i8* %392)
  br label %typeswitch.done67

typeswitch.body28:                                ; preds = %typeswitch.done12
  %393 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %394 = load i8*, i8** %393, align 8
  %395 = bitcast i8* %394 to double*
  %396 = load double, double* %395, align 8
  store double %396, double* %35, align 8
  %397 = load %fmt.Info*, %fmt.Info** %3, align 8
  %398 = load double, double* %35, align 8
  %399 = bitcast double %398 to i64
  %400 = call i64 @llvm.bswap.i64(i64 %399)
  %401 = bitcast i64 %400 to double
  %402 = load i32, i32* %4, align 4
  %403 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_float(%fmt.Info* %397, double %401, i64 64, i32 %402, i8* %403)
  br label %typeswitch.done67

typeswitch.body29:                                ; preds = %typeswitch.done12
  %404 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %405 = load i8*, i8** %404, align 8
  %406 = bitcast i8* %405 to %..complex32*
  %407 = load %..complex32, %..complex32* %406, align 2
  store %..complex32 %407, %..complex32* %36, align 2
  %408 = load %fmt.Info*, %fmt.Info** %3, align 8
  %409 = load %..complex32, %..complex32* %36, align 2
  %410 = getelementptr inbounds %..complex32, %..complex32* %36, i32 0, i32 0
  %411 = load half, half* %410, align 2
  %412 = fpext half %411 to double
  %413 = getelementptr inbounds %..complex32, %..complex32* %36, i32 0, i32 1
  %414 = load half, half* %413, align 2
  %415 = fpext half %414 to double
  %416 = getelementptr inbounds %..complex128, %..complex128* %37, i32 0, i32 0
  store double %412, double* %416, align 8
  %417 = getelementptr inbounds %..complex128, %..complex128* %37, i32 0, i32 1
  store double %415, double* %417, align 8
  %418 = load %..complex128, %..complex128* %37, align 8
  %419 = load i32, i32* %4, align 4
  %420 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_complex(%fmt.Info* %408, %..complex128* %37, i64 32, i32 %419, i8* %420)
  br label %typeswitch.done67

typeswitch.body30:                                ; preds = %typeswitch.done12
  %421 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %422 = load i8*, i8** %421, align 8
  %423 = bitcast i8* %422 to %..complex64*
  %424 = load %..complex64, %..complex64* %423, align 4
  store %..complex64 %424, %..complex64* %38, align 4
  %425 = load %fmt.Info*, %fmt.Info** %3, align 8
  %426 = load %..complex64, %..complex64* %38, align 4
  %427 = getelementptr inbounds %..complex64, %..complex64* %38, i32 0, i32 0
  %428 = load float, float* %427, align 4
  %429 = fpext float %428 to double
  %430 = getelementptr inbounds %..complex64, %..complex64* %38, i32 0, i32 1
  %431 = load float, float* %430, align 4
  %432 = fpext float %431 to double
  %433 = getelementptr inbounds %..complex128, %..complex128* %39, i32 0, i32 0
  store double %429, double* %433, align 8
  %434 = getelementptr inbounds %..complex128, %..complex128* %39, i32 0, i32 1
  store double %432, double* %434, align 8
  %435 = load %..complex128, %..complex128* %39, align 8
  %436 = load i32, i32* %4, align 4
  %437 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_complex(%fmt.Info* %425, %..complex128* %39, i64 64, i32 %436, i8* %437)
  br label %typeswitch.done67

typeswitch.body31:                                ; preds = %typeswitch.done12
  %438 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %439 = load i8*, i8** %438, align 8
  %440 = bitcast i8* %439 to %..complex128*
  %441 = load %..complex128, %..complex128* %440, align 8
  store %..complex128 %441, %..complex128* %40, align 8
  %442 = load %fmt.Info*, %fmt.Info** %3, align 8
  %443 = load %..complex128, %..complex128* %40, align 8
  %444 = load i32, i32* %4, align 4
  %445 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_complex(%fmt.Info* %442, %..complex128* %40, i64 128, i32 %444, i8* %445)
  br label %typeswitch.done67

typeswitch.body32:                                ; preds = %typeswitch.done12
  %446 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %447 = load i8*, i8** %446, align 8
  %448 = bitcast i8* %447 to %..quaternion64*
  %449 = load %..quaternion64, %..quaternion64* %448, align 2
  store %..quaternion64 %449, %..quaternion64* %41, align 2
  %450 = load %fmt.Info*, %fmt.Info** %3, align 8
  %451 = load %..quaternion64, %..quaternion64* %41, align 2
  %452 = getelementptr inbounds %..quaternion64, %..quaternion64* %41, i32 0, i32 0
  %453 = load half, half* %452, align 2
  %454 = fpext half %453 to double
  %455 = getelementptr inbounds %..quaternion64, %..quaternion64* %41, i32 0, i32 1
  %456 = load half, half* %455, align 2
  %457 = fpext half %456 to double
  %458 = getelementptr inbounds %..quaternion64, %..quaternion64* %41, i32 0, i32 2
  %459 = load half, half* %458, align 2
  %460 = fpext half %459 to double
  %461 = getelementptr inbounds %..quaternion64, %..quaternion64* %41, i32 0, i32 3
  %462 = load half, half* %461, align 2
  %463 = fpext half %462 to double
  %464 = getelementptr inbounds %..quaternion256, %..quaternion256* %42, i32 0, i32 0
  store double %454, double* %464, align 8
  %465 = getelementptr inbounds %..quaternion256, %..quaternion256* %42, i32 0, i32 1
  store double %457, double* %465, align 8
  %466 = getelementptr inbounds %..quaternion256, %..quaternion256* %42, i32 0, i32 2
  store double %460, double* %466, align 8
  %467 = getelementptr inbounds %..quaternion256, %..quaternion256* %42, i32 0, i32 3
  store double %463, double* %467, align 8
  %468 = load %..quaternion256, %..quaternion256* %42, align 8
  %469 = load i32, i32* %4, align 4
  %470 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_quaternion(%fmt.Info* %450, %..quaternion256* %42, i64 64, i32 %469, i8* %470)
  br label %typeswitch.done67

typeswitch.body33:                                ; preds = %typeswitch.done12
  %471 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %472 = load i8*, i8** %471, align 8
  %473 = bitcast i8* %472 to %..quaternion128*
  %474 = load %..quaternion128, %..quaternion128* %473, align 4
  store %..quaternion128 %474, %..quaternion128* %43, align 4
  %475 = load %fmt.Info*, %fmt.Info** %3, align 8
  %476 = load %..quaternion128, %..quaternion128* %43, align 4
  %477 = getelementptr inbounds %..quaternion128, %..quaternion128* %43, i32 0, i32 0
  %478 = load float, float* %477, align 4
  %479 = fpext float %478 to double
  %480 = getelementptr inbounds %..quaternion128, %..quaternion128* %43, i32 0, i32 1
  %481 = load float, float* %480, align 4
  %482 = fpext float %481 to double
  %483 = getelementptr inbounds %..quaternion128, %..quaternion128* %43, i32 0, i32 2
  %484 = load float, float* %483, align 4
  %485 = fpext float %484 to double
  %486 = getelementptr inbounds %..quaternion128, %..quaternion128* %43, i32 0, i32 3
  %487 = load float, float* %486, align 4
  %488 = fpext float %487 to double
  %489 = getelementptr inbounds %..quaternion256, %..quaternion256* %44, i32 0, i32 0
  store double %479, double* %489, align 8
  %490 = getelementptr inbounds %..quaternion256, %..quaternion256* %44, i32 0, i32 1
  store double %482, double* %490, align 8
  %491 = getelementptr inbounds %..quaternion256, %..quaternion256* %44, i32 0, i32 2
  store double %485, double* %491, align 8
  %492 = getelementptr inbounds %..quaternion256, %..quaternion256* %44, i32 0, i32 3
  store double %488, double* %492, align 8
  %493 = load %..quaternion256, %..quaternion256* %44, align 8
  %494 = load i32, i32* %4, align 4
  %495 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_quaternion(%fmt.Info* %475, %..quaternion256* %44, i64 128, i32 %494, i8* %495)
  br label %typeswitch.done67

typeswitch.body34:                                ; preds = %typeswitch.done12
  %496 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %497 = load i8*, i8** %496, align 8
  %498 = bitcast i8* %497 to %..quaternion256*
  %499 = load %..quaternion256, %..quaternion256* %498, align 8
  store %..quaternion256 %499, %..quaternion256* %45, align 8
  %500 = load %fmt.Info*, %fmt.Info** %3, align 8
  %501 = load %..quaternion256, %..quaternion256* %45, align 8
  %502 = load i32, i32* %4, align 4
  %503 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_quaternion(%fmt.Info* %500, %..quaternion256* %45, i64 256, i32 %502, i8* %503)
  br label %typeswitch.done67

typeswitch.body35:                                ; preds = %typeswitch.done12
  %504 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %505 = load i8*, i8** %504, align 8
  %506 = load i8, i8* %505, align 1
  store i8 %506, i8* %46, align 1
  %507 = load %fmt.Info*, %fmt.Info** %3, align 8
  %508 = load i8, i8* %46, align 1
  %509 = sext i8 %508 to i64
  %510 = load i32, i32* %4, align 4
  %511 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %507, i64 %509, i1 true, i64 8, i32 %510, i8* %511)
  br label %typeswitch.done67

typeswitch.body36:                                ; preds = %typeswitch.done12
  %512 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %513 = load i8*, i8** %512, align 8
  %514 = load i8, i8* %513, align 1
  store i8 %514, i8* %47, align 1
  %515 = load %fmt.Info*, %fmt.Info** %3, align 8
  %516 = load i8, i8* %47, align 1
  %517 = zext i8 %516 to i64
  %518 = load i32, i32* %4, align 4
  %519 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %515, i64 %517, i1 false, i64 8, i32 %518, i8* %519)
  br label %typeswitch.done67

typeswitch.body37:                                ; preds = %typeswitch.done12
  %520 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %521 = load i8*, i8** %520, align 8
  %522 = bitcast i8* %521 to i16*
  %523 = load i16, i16* %522, align 2
  store i16 %523, i16* %48, align 2
  %524 = load %fmt.Info*, %fmt.Info** %3, align 8
  %525 = load i16, i16* %48, align 2
  %526 = sext i16 %525 to i64
  %527 = load i32, i32* %4, align 4
  %528 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %524, i64 %526, i1 true, i64 16, i32 %527, i8* %528)
  br label %typeswitch.done67

typeswitch.body38:                                ; preds = %typeswitch.done12
  %529 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %530 = load i8*, i8** %529, align 8
  %531 = bitcast i8* %530 to i16*
  %532 = load i16, i16* %531, align 2
  store i16 %532, i16* %49, align 2
  %533 = load %fmt.Info*, %fmt.Info** %3, align 8
  %534 = load i16, i16* %49, align 2
  %535 = zext i16 %534 to i64
  %536 = load i32, i32* %4, align 4
  %537 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %533, i64 %535, i1 false, i64 16, i32 %536, i8* %537)
  br label %typeswitch.done67

typeswitch.body39:                                ; preds = %typeswitch.done12
  %538 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %539 = load i8*, i8** %538, align 8
  %540 = bitcast i8* %539 to i32*
  %541 = load i32, i32* %540, align 4
  store i32 %541, i32* %50, align 4
  %542 = load %fmt.Info*, %fmt.Info** %3, align 8
  %543 = load i32, i32* %50, align 4
  %544 = sext i32 %543 to i64
  %545 = load i32, i32* %4, align 4
  %546 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %542, i64 %544, i1 true, i64 32, i32 %545, i8* %546)
  br label %typeswitch.done67

typeswitch.body40:                                ; preds = %typeswitch.done12
  %547 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %548 = load i8*, i8** %547, align 8
  %549 = bitcast i8* %548 to i32*
  %550 = load i32, i32* %549, align 4
  store i32 %550, i32* %51, align 4
  %551 = load %fmt.Info*, %fmt.Info** %3, align 8
  %552 = load i32, i32* %51, align 4
  %553 = zext i32 %552 to i64
  %554 = load i32, i32* %4, align 4
  %555 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %551, i64 %553, i1 false, i64 32, i32 %554, i8* %555)
  br label %typeswitch.done67

typeswitch.body41:                                ; preds = %typeswitch.done12
  %556 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %557 = load i8*, i8** %556, align 8
  %558 = bitcast i8* %557 to i64*
  %559 = load i64, i64* %558, align 8
  store i64 %559, i64* %52, align 8
  %560 = load %fmt.Info*, %fmt.Info** %3, align 8
  %561 = load i64, i64* %52, align 8
  %562 = load i32, i32* %4, align 4
  %563 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %560, i64 %561, i1 true, i64 64, i32 %562, i8* %563)
  br label %typeswitch.done67

typeswitch.body42:                                ; preds = %typeswitch.done12
  %564 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %565 = load i8*, i8** %564, align 8
  %566 = bitcast i8* %565 to i64*
  %567 = load i64, i64* %566, align 8
  store i64 %567, i64* %53, align 8
  %568 = load %fmt.Info*, %fmt.Info** %3, align 8
  %569 = load i64, i64* %53, align 8
  %570 = load i32, i32* %4, align 4
  %571 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %568, i64 %569, i1 false, i64 64, i32 %570, i8* %571)
  br label %typeswitch.done67

typeswitch.body43:                                ; preds = %typeswitch.done12
  %572 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %573 = load i8*, i8** %572, align 8
  %574 = bitcast i8* %573 to i64*
  %575 = load i64, i64* %574, align 8
  store i64 %575, i64* %54, align 8
  %576 = load %fmt.Info*, %fmt.Info** %3, align 8
  %577 = load i64, i64* %54, align 8
  %578 = load i32, i32* %4, align 4
  %579 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %576, i64 %577, i1 true, i64 64, i32 %578, i8* %579)
  br label %typeswitch.done67

typeswitch.body44:                                ; preds = %typeswitch.done12
  %580 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %581 = load i8*, i8** %580, align 8
  %582 = bitcast i8* %581 to i64*
  %583 = load i64, i64* %582, align 8
  store i64 %583, i64* %55, align 8
  %584 = load %fmt.Info*, %fmt.Info** %3, align 8
  %585 = load i64, i64* %55, align 8
  %586 = load i32, i32* %4, align 4
  %587 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %584, i64 %585, i1 false, i64 64, i32 %586, i8* %587)
  br label %typeswitch.done67

typeswitch.body45:                                ; preds = %typeswitch.done12
  %588 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %589 = load i8*, i8** %588, align 8
  %590 = bitcast i8* %589 to i64*
  %591 = load i64, i64* %590, align 8
  store i64 %591, i64* %56, align 8
  %592 = load %fmt.Info*, %fmt.Info** %3, align 8
  %593 = load i64, i64* %56, align 8
  %594 = load i32, i32* %4, align 4
  %595 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %592, i64 %593, i1 false, i64 64, i32 %594, i8* %595)
  br label %typeswitch.done67

typeswitch.body46:                                ; preds = %typeswitch.done12
  %596 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %597 = load i8*, i8** %596, align 8
  %598 = bitcast i8* %597 to %..string*
  %599 = load %..string, %..string* %598, align 8
  store %..string %599, %..string* %57, align 8
  %600 = load %fmt.Info*, %fmt.Info** %3, align 8
  %601 = load %..string, %..string* %57, align 8
  %602 = load i32, i32* %4, align 4
  %603 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_string(%fmt.Info* %600, %..string* %57, i32 %602, i8* %603)
  br label %typeswitch.done67

typeswitch.body47:                                ; preds = %typeswitch.done12
  %604 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %605 = load i8*, i8** %604, align 8
  %606 = bitcast i8* %605 to i8**
  %607 = load i8*, i8** %606, align 8
  store i8* %607, i8** %58, align 8
  %608 = load %fmt.Info*, %fmt.Info** %3, align 8
  %609 = load i8*, i8** %58, align 8
  %610 = load i32, i32* %4, align 4
  %611 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_cstring(%fmt.Info* %608, i8* %609, i32 %610, i8* %611)
  br label %typeswitch.done67

typeswitch.body48:                                ; preds = %typeswitch.done12
  %612 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %613 = load i8*, i8** %612, align 8
  %614 = bitcast i8* %613 to i64*
  %615 = load i64, i64* %614, align 8
  store i64 %615, i64* %59, align 8
  %616 = load %fmt.Info*, %fmt.Info** %3, align 8
  %617 = getelementptr inbounds %fmt.Info, %fmt.Info* %616, i32 0, i32 16
  %618 = load %io.Writer, %io.Writer* %617, align 8
  %619 = load i64, i64* %59, align 8
  %620 = load %fmt.Info*, %fmt.Info** %3, align 8
  %621 = getelementptr inbounds %fmt.Info, %fmt.Info* %620, i32 0, i32 23
  %622 = bitcast { i64, i32 }* %60 to i8*
  call void @llvm.memset.p0i8.i64(i8* %622, i8 0, i64 16, i1 false)
  %623 = bitcast %runtime.Context* %82 to i8*
  call void @reflect.write_typeid_writer({ i64, i32 }* sret({ i64, i32 }*) %60, %io.Writer* %617, i64 %619, i64* %621, i8* %623)
  %624 = load { i64, i32 }, { i64, i32 }* %60, align 8
  br label %typeswitch.done67

typeswitch.body49:                                ; preds = %typeswitch.done12
  %625 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %626 = load i8*, i8** %625, align 8
  %627 = bitcast i8* %626 to i16*
  %628 = load i16, i16* %627, align 2
  store i16 %628, i16* %61, align 2
  %629 = load %fmt.Info*, %fmt.Info** %3, align 8
  %630 = load i16, i16* %61, align 2
  %631 = sext i16 %630 to i64
  %632 = load i32, i32* %4, align 4
  %633 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %629, i64 %631, i1 true, i64 16, i32 %632, i8* %633)
  br label %typeswitch.done67

typeswitch.body50:                                ; preds = %typeswitch.done12
  %634 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %635 = load i8*, i8** %634, align 8
  %636 = bitcast i8* %635 to i16*
  %637 = load i16, i16* %636, align 2
  store i16 %637, i16* %62, align 2
  %638 = load %fmt.Info*, %fmt.Info** %3, align 8
  %639 = load i16, i16* %62, align 2
  %640 = zext i16 %639 to i64
  %641 = load i32, i32* %4, align 4
  %642 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %638, i64 %640, i1 false, i64 16, i32 %641, i8* %642)
  br label %typeswitch.done67

typeswitch.body51:                                ; preds = %typeswitch.done12
  %643 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %644 = load i8*, i8** %643, align 8
  %645 = bitcast i8* %644 to i32*
  %646 = load i32, i32* %645, align 4
  store i32 %646, i32* %63, align 4
  %647 = load %fmt.Info*, %fmt.Info** %3, align 8
  %648 = load i32, i32* %63, align 4
  %649 = sext i32 %648 to i64
  %650 = load i32, i32* %4, align 4
  %651 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %647, i64 %649, i1 true, i64 32, i32 %650, i8* %651)
  br label %typeswitch.done67

typeswitch.body52:                                ; preds = %typeswitch.done12
  %652 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %653 = load i8*, i8** %652, align 8
  %654 = bitcast i8* %653 to i32*
  %655 = load i32, i32* %654, align 4
  store i32 %655, i32* %64, align 4
  %656 = load %fmt.Info*, %fmt.Info** %3, align 8
  %657 = load i32, i32* %64, align 4
  %658 = zext i32 %657 to i64
  %659 = load i32, i32* %4, align 4
  %660 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %656, i64 %658, i1 false, i64 32, i32 %659, i8* %660)
  br label %typeswitch.done67

typeswitch.body53:                                ; preds = %typeswitch.done12
  %661 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %662 = load i8*, i8** %661, align 8
  %663 = bitcast i8* %662 to i64*
  %664 = load i64, i64* %663, align 8
  store i64 %664, i64* %65, align 8
  %665 = load %fmt.Info*, %fmt.Info** %3, align 8
  %666 = load i64, i64* %65, align 8
  %667 = load i32, i32* %4, align 4
  %668 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %665, i64 %666, i1 true, i64 64, i32 %667, i8* %668)
  br label %typeswitch.done67

typeswitch.body54:                                ; preds = %typeswitch.done12
  %669 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %670 = load i8*, i8** %669, align 8
  %671 = bitcast i8* %670 to i64*
  %672 = load i64, i64* %671, align 8
  store i64 %672, i64* %66, align 8
  %673 = load %fmt.Info*, %fmt.Info** %3, align 8
  %674 = load i64, i64* %66, align 8
  %675 = load i32, i32* %4, align 4
  %676 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %673, i64 %674, i1 false, i64 64, i32 %675, i8* %676)
  br label %typeswitch.done67

typeswitch.body55:                                ; preds = %typeswitch.done12
  %677 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %678 = load i8*, i8** %677, align 8
  %679 = bitcast i8* %678 to i16*
  %680 = load i16, i16* %679, align 2
  store i16 %680, i16* %67, align 2
  %681 = load %fmt.Info*, %fmt.Info** %3, align 8
  %682 = load i16, i16* %67, align 2
  %683 = call i16 @llvm.bswap.i16(i16 %682)
  %684 = sext i16 %683 to i64
  %685 = load i32, i32* %4, align 4
  %686 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %681, i64 %684, i1 true, i64 16, i32 %685, i8* %686)
  br label %typeswitch.done67

typeswitch.body56:                                ; preds = %typeswitch.done12
  %687 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %688 = load i8*, i8** %687, align 8
  %689 = bitcast i8* %688 to i16*
  %690 = load i16, i16* %689, align 2
  store i16 %690, i16* %68, align 2
  %691 = load %fmt.Info*, %fmt.Info** %3, align 8
  %692 = load i16, i16* %68, align 2
  %693 = call i16 @llvm.bswap.i16(i16 %692)
  %694 = zext i16 %693 to i64
  %695 = load i32, i32* %4, align 4
  %696 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %691, i64 %694, i1 false, i64 16, i32 %695, i8* %696)
  br label %typeswitch.done67

typeswitch.body57:                                ; preds = %typeswitch.done12
  %697 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %698 = load i8*, i8** %697, align 8
  %699 = bitcast i8* %698 to i32*
  %700 = load i32, i32* %699, align 4
  store i32 %700, i32* %69, align 4
  %701 = load %fmt.Info*, %fmt.Info** %3, align 8
  %702 = load i32, i32* %69, align 4
  %703 = call i32 @llvm.bswap.i32(i32 %702)
  %704 = sext i32 %703 to i64
  %705 = load i32, i32* %4, align 4
  %706 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %701, i64 %704, i1 true, i64 32, i32 %705, i8* %706)
  br label %typeswitch.done67

typeswitch.body58:                                ; preds = %typeswitch.done12
  %707 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %708 = load i8*, i8** %707, align 8
  %709 = bitcast i8* %708 to i32*
  %710 = load i32, i32* %709, align 4
  store i32 %710, i32* %70, align 4
  %711 = load %fmt.Info*, %fmt.Info** %3, align 8
  %712 = load i32, i32* %70, align 4
  %713 = call i32 @llvm.bswap.i32(i32 %712)
  %714 = zext i32 %713 to i64
  %715 = load i32, i32* %4, align 4
  %716 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %711, i64 %714, i1 false, i64 32, i32 %715, i8* %716)
  br label %typeswitch.done67

typeswitch.body59:                                ; preds = %typeswitch.done12
  %717 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %718 = load i8*, i8** %717, align 8
  %719 = bitcast i8* %718 to i64*
  %720 = load i64, i64* %719, align 8
  store i64 %720, i64* %71, align 8
  %721 = load %fmt.Info*, %fmt.Info** %3, align 8
  %722 = load i64, i64* %71, align 8
  %723 = call i64 @llvm.bswap.i64(i64 %722)
  %724 = load i32, i32* %4, align 4
  %725 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %721, i64 %723, i1 true, i64 64, i32 %724, i8* %725)
  br label %typeswitch.done67

typeswitch.body60:                                ; preds = %typeswitch.done12
  %726 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %727 = load i8*, i8** %726, align 8
  %728 = bitcast i8* %727 to i64*
  %729 = load i64, i64* %728, align 8
  store i64 %729, i64* %72, align 8
  %730 = load %fmt.Info*, %fmt.Info** %3, align 8
  %731 = load i64, i64* %72, align 8
  %732 = call i64 @llvm.bswap.i64(i64 %731)
  %733 = load i32, i32* %4, align 4
  %734 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int(%fmt.Info* %730, i64 %732, i1 false, i64 64, i32 %733, i8* %734)
  br label %typeswitch.done67

typeswitch.body61:                                ; preds = %typeswitch.done12
  %735 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %736 = load i8*, i8** %735, align 8
  %737 = bitcast i8* %736 to i128*
  %738 = load i128, i128* %737, align 8
  store i128 %738, i128* %73, align 8
  %739 = load %fmt.Info*, %fmt.Info** %3, align 8
  %740 = load i128, i128* %73, align 8
  %741 = load i32, i32* %4, align 4
  %742 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %739, i128* %73, i1 true, i64 128, i32 %741, i8* %742)
  br label %typeswitch.done67

typeswitch.body62:                                ; preds = %typeswitch.done12
  %743 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %744 = load i8*, i8** %743, align 8
  %745 = bitcast i8* %744 to i128*
  %746 = load i128, i128* %745, align 8
  store i128 %746, i128* %74, align 8
  %747 = load %fmt.Info*, %fmt.Info** %3, align 8
  %748 = load i128, i128* %74, align 8
  %749 = load i32, i32* %4, align 4
  %750 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %747, i128* %74, i1 false, i64 128, i32 %749, i8* %750)
  br label %typeswitch.done67

typeswitch.body63:                                ; preds = %typeswitch.done12
  %751 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %752 = load i8*, i8** %751, align 8
  %753 = bitcast i8* %752 to i128*
  %754 = load i128, i128* %753, align 8
  store i128 %754, i128* %75, align 8
  %755 = load %fmt.Info*, %fmt.Info** %3, align 8
  %756 = load i128, i128* %75, align 8
  %757 = load i32, i32* %4, align 4
  %758 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %755, i128* %75, i1 true, i64 128, i32 %757, i8* %758)
  br label %typeswitch.done67

typeswitch.body64:                                ; preds = %typeswitch.done12
  %759 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %760 = load i8*, i8** %759, align 8
  %761 = bitcast i8* %760 to i128*
  %762 = load i128, i128* %761, align 8
  store i128 %762, i128* %76, align 8
  %763 = load %fmt.Info*, %fmt.Info** %3, align 8
  %764 = load i128, i128* %76, align 8
  %765 = load i32, i32* %4, align 4
  %766 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %763, i128* %76, i1 false, i64 128, i32 %765, i8* %766)
  br label %typeswitch.done67

typeswitch.body65:                                ; preds = %typeswitch.done12
  %767 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %768 = load i8*, i8** %767, align 8
  %769 = bitcast i8* %768 to i128*
  %770 = load i128, i128* %769, align 8
  store i128 %770, i128* %77, align 8
  %771 = load %fmt.Info*, %fmt.Info** %3, align 8
  %772 = load i128, i128* %77, align 8
  %773 = call i128 @llvm.bswap.i128(i128 %772)
  %774 = load i32, i32* %4, align 4
  store i128 %773, i128* %78, align 8
  %775 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %771, i128* %78, i1 true, i64 128, i32 %774, i8* %775)
  br label %typeswitch.done67

typeswitch.body66:                                ; preds = %typeswitch.done12
  %776 = getelementptr inbounds %..any, %..any* %19, i32 0, i32 0
  %777 = load i8*, i8** %776, align 8
  %778 = bitcast i8* %777 to i128*
  %779 = load i128, i128* %778, align 8
  store i128 %779, i128* %79, align 8
  %780 = load %fmt.Info*, %fmt.Info** %3, align 8
  %781 = load i128, i128* %79, align 8
  %782 = call i128 @llvm.bswap.i128(i128 %781)
  %783 = load i32, i32* %4, align 4
  store i128 %782, i128* %80, align 8
  %784 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_int_128(%fmt.Info* %780, i128* %80, i1 false, i64 128, i32 %783, i8* %784)
  br label %typeswitch.done67

typeswitch.default.body:                          ; preds = %typeswitch.done12
  store %..any %247, %..any* %81, align 8
  %785 = load %fmt.Info*, %fmt.Info** %3, align 8
  %786 = load %..any, %..any* %1, align 8
  %787 = load i32, i32* %4, align 4
  %788 = bitcast %runtime.Context* %82 to i8*
  call void @fmt.fmt_value(%fmt.Info* %785, %..any* %1, i32 %787, i8* %788)
  br label %typeswitch.done67

typeswitch.done67:                                ; preds = %typeswitch.default.body, %typeswitch.body66, %typeswitch.body65, %typeswitch.body64, %typeswitch.body63, %typeswitch.body62, %typeswitch.body61, %typeswitch.body60, %typeswitch.body59, %typeswitch.body58, %typeswitch.body57, %typeswitch.body56, %typeswitch.body55, %typeswitch.body54, %typeswitch.body53, %typeswitch.body52, %typeswitch.body51, %typeswitch.body50, %typeswitch.body49, %typeswitch.body48, %typeswitch.body47, %typeswitch.body46, %typeswitch.body45, %typeswitch.body44, %typeswitch.body43, %typeswitch.body42, %typeswitch.body41, %typeswitch.body40, %typeswitch.body39, %typeswitch.body38, %typeswitch.body37, %typeswitch.body36, %typeswitch.body35, %typeswitch.body34, %typeswitch.body33, %typeswitch.body32, %typeswitch.body31, %typeswitch.body30, %typeswitch.body29, %typeswitch.body28, %typeswitch.body27, %typeswitch.body26, %typeswitch.body25, %typeswitch.body24, %typeswitch.body23, %typeswitch.body22, %typeswitch.body21, %typeswitch.body20, %typeswitch.body19, %typeswitch.body18, %typeswitch.body17, %typeswitch.body16, %typeswitch.body15, %typeswitch.body14, %typeswitch.body13
  ret void
}

define internal i64 @fmt.fprintf(i64 %0, %..string* %1, { %..any*, i64 }* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %io.Writer, align 8
  %5 = alloca %io.Stream, align 8
  %6 = alloca { %io.Writer, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  %7 = bitcast i8* %__.context_ptr to %runtime.Context*
  %8 = load i64, i64* %3, align 8
  %9 = bitcast %io.Stream* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %9, i8 0, i64 16, i1 false)
  %10 = bitcast %runtime.Context* %7 to i8*
  call void @os.stream_from_handle(%io.Stream* sret(%io.Stream*) %5, i64 %8, i8* %10)
  %11 = load %io.Stream, %io.Stream* %5, align 8
  %12 = bitcast { %io.Writer, i8 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 24, i1 false)
  %13 = bitcast %runtime.Context* %7 to i8*
  call void @io.to_writer({ %io.Writer, i8 }* sret({ %io.Writer, i8 }*) %6, %io.Stream* %5, i8* %13)
  %14 = load { %io.Writer, i8 }, { %io.Writer, i8 }* %6, align 8
  %15 = getelementptr inbounds { %io.Writer, i8 }, { %io.Writer, i8 }* %6, i32 0, i32 0
  %16 = load %io.Writer, %io.Writer* %15, align 8
  store %io.Writer %16, %io.Writer* %4, align 8
  %17 = load %io.Writer, %io.Writer* %4, align 8
  %18 = load %..string, %..string* %1, align 8
  %19 = load { %..any*, i64 }, { %..any*, i64 }* %2, align 8
  %20 = bitcast %runtime.Context* %7 to i8*
  %21 = call i64 @fmt.wprintf(%io.Writer* %4, %..string* %1, { %..any*, i64 }* %2, i8* %20)
  ret i64 %21
}

define internal i64 @fmt.printf(%..string* %0, { %..any*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* @os.stdout, align 8
  %4 = load %..string, %..string* %0, align 8
  %5 = load { %..any*, i64 }, { %..any*, i64 }* %1, align 8
  %6 = bitcast %runtime.Context* %2 to i8*
  %7 = call i64 @fmt.fprintf(i64 %3, %..string* %0, { %..any*, i64 }* %1, i8* %6)
  ret i64 %7
}

define internal void @os.open({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, %..string* %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %sys_windows.SECURITY_ATTRIBUTES*, align 8
  %8 = alloca %sys_windows.SECURITY_ATTRIBUTES, align 8
  %9 = alloca i32, align 4
  %10 = alloca i16*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  %14 = load %..string, %..string* %0, align 8
  %15 = getelementptr inbounds %..string, %..string* %0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  %18 = zext i1 %17 to i8
  %19 = trunc i8 %18 to i1
  br i1 %19, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %21 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 -1, i64* %20, align 8
  store i64 2, i64* %21, align 8
  ret void

if.done:                                          ; preds = %entry
  store i32 0, i32* %5, align 4
  %22 = load i64, i64* %3, align 8
  %23 = and i64 %22, 3
  switch i64 %23, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %if.done
  store i32 -2147483648, i32* %5, align 4
  br label %switch.done

switch.case.body1:                                ; preds = %if.done
  store i32 1179926, i32* %5, align 4
  br label %switch.done

switch.case.body2:                                ; preds = %if.done
  store i32 -2146303722, i32* %5, align 4
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body2, %switch.case.body1, %switch.case.body, %if.done
  %24 = load i64, i64* %3, align 8
  %25 = and i64 %24, 64
  %26 = icmp ne i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %if.then3, label %if.done4

if.then3:                                         ; preds = %switch.done
  %29 = load i32, i32* %5, align 4
  %30 = or i32 %29, 1179926
  store i32 %30, i32* %5, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %switch.done
  %31 = load i64, i64* %3, align 8
  %32 = and i64 %31, 1024
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %36 = load i32, i32* %5, align 4
  %37 = and i32 %36, -1179927
  store i32 %37, i32* %5, align 4
  %38 = load i32, i32* %5, align 4
  %39 = or i32 %38, 4
  store i32 %39, i32* %5, align 4
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.done4
  store i32 3, i32* %6, align 4
  store %sys_windows.SECURITY_ATTRIBUTES* null, %sys_windows.SECURITY_ATTRIBUTES** %7, align 8
  %40 = bitcast %sys_windows.SECURITY_ATTRIBUTES* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 24, i1 false)
  store %sys_windows.SECURITY_ATTRIBUTES { i32 24, [4 x i8] zeroinitializer, i8* null, i32 1, [4 x i8] zeroinitializer }, %sys_windows.SECURITY_ATTRIBUTES* %8, align 8
  %41 = load i64, i64* %3, align 8
  %42 = and i64 %41, 524288
  %43 = icmp eq i64 %42, 0
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then7, label %if.done8

if.then7:                                         ; preds = %if.done6
  store %sys_windows.SECURITY_ATTRIBUTES* %8, %sys_windows.SECURITY_ATTRIBUTES** %7, align 8
  br label %if.done8

if.done8:                                         ; preds = %if.then7, %if.done6
  store i32 0, i32* %9, align 4
  %46 = load i64, i64* %3, align 8
  %47 = and i64 %46, 192
  %48 = icmp eq i64 %47, 192
  %49 = zext i1 %48 to i8
  %50 = icmp eq i8 1, %49
  br i1 %50, label %switch.case.body9, label %switch.case.next

switch.case.next:                                 ; preds = %if.done8
  %51 = load i64, i64* %3, align 8
  %52 = and i64 %51, 576
  %53 = icmp eq i64 %52, 576
  %54 = zext i1 %53 to i8
  %55 = icmp eq i8 1, %54
  br i1 %55, label %switch.case.body11, label %switch.case.next10

switch.case.body9:                                ; preds = %if.done8
  store i32 1, i32* %9, align 4
  br label %switch.done16

switch.case.next10:                               ; preds = %switch.case.next
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, 64
  %58 = icmp eq i64 %57, 64
  %59 = zext i1 %58 to i8
  %60 = icmp eq i8 1, %59
  br i1 %60, label %switch.case.body13, label %switch.case.next12

switch.case.body11:                               ; preds = %switch.case.next
  store i32 2, i32* %9, align 4
  br label %switch.done16

switch.case.next12:                               ; preds = %switch.case.next10
  %61 = load i64, i64* %3, align 8
  %62 = and i64 %61, 512
  %63 = icmp eq i64 %62, 512
  %64 = zext i1 %63 to i8
  %65 = icmp eq i8 1, %64
  br i1 %65, label %switch.case.body15, label %switch.case.next14

switch.case.body13:                               ; preds = %switch.case.next10
  store i32 4, i32* %9, align 4
  br label %switch.done16

switch.case.next14:                               ; preds = %switch.case.next12
  br label %switch.default.body

switch.case.body15:                               ; preds = %switch.case.next12
  store i32 5, i32* %9, align 4
  br label %switch.done16

switch.default.body:                              ; preds = %switch.case.next14
  store i32 3, i32* %9, align 4
  br label %switch.done16

switch.done16:                                    ; preds = %switch.default.body, %switch.case.body15, %switch.case.body13, %switch.case.body11, %switch.case.body9
  %66 = load %..string, %..string* %0, align 8
  %67 = getelementptr inbounds %runtime.Context, %runtime.Context* %13, i32 0, i32 1
  %68 = load %runtime.Allocator, %runtime.Allocator* %67, align 8
  %69 = bitcast %runtime.Context* %13 to i8*
  %70 = call i16* @sys_windows.utf8_to_wstring(%..string* %0, %runtime.Allocator* %67, i8* %69)
  store i16* %70, i16** %10, align 8
  %71 = load i16*, i16** %10, align 8
  %72 = load i32, i32* %5, align 4
  %73 = load i32, i32* %6, align 4
  %74 = load %sys_windows.SECURITY_ATTRIBUTES*, %sys_windows.SECURITY_ATTRIBUTES** %7, align 8
  %75 = load i32, i32* %9, align 4
  %76 = call i8* @CreateFileW(i16* %71, i32 %72, i32 %73, %sys_windows.SECURITY_ATTRIBUTES* %74, i32 %75, i32 33554560, i8* null)
  %77 = ptrtoint i8* %76 to i64
  store i64 %77, i64* %11, align 8
  %78 = load i64, i64* %11, align 8
  %79 = icmp ne i64 %78, -1
  %80 = zext i1 %79 to i8
  %81 = trunc i8 %80 to i1
  br i1 %81, label %if.then17, label %if.done18

if.then17:                                        ; preds = %switch.done16
  %82 = load i64, i64* %11, align 8
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %82, i64* %83, align 8
  store i64 0, i64* %84, align 8
  ret void

if.done18:                                        ; preds = %switch.done16
  %85 = call i32 @GetLastError()
  %86 = zext i32 %85 to i64
  store i64 %86, i64* %12, align 8
  %87 = load i64, i64* %12, align 8
  %88 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 -1, i64* %88, align 8
  store i64 %87, i64* %89, align 8
  ret void
}

define internal i64 @os.close(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %2 = bitcast i8* %__.context_ptr to %runtime.Context*
  %3 = load i64, i64* %1, align 8
  %4 = inttoptr i64 %3 to i8*
  %5 = call i32 @CloseHandle(i8* %4)
  %6 = trunc i32 %5 to i1
  br i1 %6, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %7 = call i32 @GetLastError()
  %8 = zext i32 %7 to i64
  ret i64 %8

if.done:                                          ; preds = %entry
  ret i64 0
}

define internal i64 @os.flush(i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  store i64 0, i64* %2, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = load i64, i64* %1, align 8
  %5 = inttoptr i64 %4 to i8*
  %6 = call i32 @FlushFileBuffers(i8* %5)
  %7 = trunc i32 %6 to i1
  br i1 %7, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %8 = call i32 @GetLastError()
  %9 = zext i32 %8 to i64
  store i64 %9, i64* %2, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %10 = load i64, i64* %2, align 8
  store i64 %10, i64* %2, align 8
  ret i64 %10
}

define internal void @os.write({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %..string, align 8
  %10 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp eq i64 %14, 0
  %16 = zext i1 %15 to i8
  %17 = trunc i8 %16 to i1
  br i1 %17, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %18, align 8
  store i64 0, i64* %19, align 8
  ret void

if.done:                                          ; preds = %entry
  store i32 0, i32* %3, align 4
  store i64 0, i64* %4, align 8
  %20 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %21 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %5, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %23 = load i64, i64* %4, align 8
  %24 = load i64, i64* %5, align 8
  %25 = icmp slt i64 %23, %24
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %28 = load i64, i64* %5, align 8
  %29 = load i64, i64* %4, align 8
  %30 = sub i64 %28, %29
  store i64 %30, i64* %6, align 8
  %31 = load i64, i64* %6, align 8
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 1073741824
  %34 = select i1 %33, i32 %32, i32 1073741824
  store i32 %34, i32* %7, align 4
  %35 = load i64, i64* %2, align 8
  %36 = inttoptr i64 %35 to i8*
  %37 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %38 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = load i64, i64* %4, align 8
  %41 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %9, align 8
  call void @runtime.bounds_check_error(%..string* %9, i32 90, i32 48, i64 %40, i64 %42)
  %43 = getelementptr i8, i8* %39, i64 %40
  %44 = load i32, i32* %7, align 4
  %45 = call i32 @WriteFile(i8* %36, i8* %43, i32 %44, i32* %3, i8* null)
  store i32 %45, i32* %8, align 4
  %46 = load i32, i32* %3, align 4
  %47 = icmp ule i32 %46, 0
  %48 = zext i1 %47 to i32
  %49 = trunc i32 %48 to i1
  br i1 %49, label %if.then1, label %cmp.or

cmp.or:                                           ; preds = %for.body
  %50 = load i32, i32* %8, align 4
  %51 = trunc i32 %50 to i1
  br i1 %51, label %if.done2, label %if.then1

if.then1:                                         ; preds = %cmp.or, %for.body
  %52 = call i32 @GetLastError()
  %53 = zext i32 %52 to i64
  store i64 %53, i64* %10, align 8
  %54 = load i64, i64* %4, align 8
  %55 = load i64, i64* %10, align 8
  %56 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %57 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %54, i64* %56, align 8
  store i64 %55, i64* %57, align 8
  ret void

if.done2:                                         ; preds = %cmp.or
  %58 = load i32, i32* %3, align 4
  %59 = zext i32 %58 to i64
  %60 = load i64, i64* %4, align 8
  %61 = add i64 %60, %59
  store i64 %61, i64* %4, align 8
  br label %for.loop

for.done:                                         ; preds = %for.loop
  %62 = load i64, i64* %4, align 8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %62, i64* %63, align 8
  store i64 0, i64* %64, align 8
  ret void
}

define internal void @os.read_console-865({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i8* %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i8*, align 8
  %3 = alloca [386 x i16], align 2
  %4 = alloca [1544 x i8], align 1
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca { i8*, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { i16*, i64 }, align 8
  %13 = alloca { i8*, i64 }, align 8
  %14 = alloca %..string, align 8
  %15 = alloca { i8*, i64 }, align 8
  %16 = alloca i8, align 1
  %17 = alloca i64, align 8
  %18 = alloca i8, align 1
  %19 = alloca %..string, align 8
  %20 = alloca %..string, align 8
  %21 = alloca %..string, align 8
  %22 = alloca { i8*, i64 }, align 8
  %23 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i8* %0, i8** %2, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %25 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %26 = bitcast i8* %__.context_ptr to %runtime.Context*
  %27 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %28 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = icmp eq i64 %29, 0
  %31 = zext i1 %30 to i8
  %32 = trunc i8 %31 to i1
  br i1 %32, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %24, align 8
  store i64 0, i64* %25, align 8
  %33 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %34 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %33, align 8
  store i64 0, i64* %34, align 8
  ret void

if.done:                                          ; preds = %entry
  %35 = bitcast [386 x i16]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 772, i1 false)
  %36 = bitcast [1544 x i8]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %36, i8 0, i64 1544, i1 false)
  br label %for.loop

for.loop:                                         ; preds = %if.done20, %if.done
  %37 = load i64, i64* %24, align 8
  %38 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = icmp slt i64 %37, %40
  %42 = zext i1 %41 to i8
  %43 = trunc i8 %42 to i1
  br i1 %43, label %cmp.and, label %for.done21

cmp.and:                                          ; preds = %for.loop
  %44 = load i64, i64* %25, align 8
  %45 = icmp eq i64 %44, 0
  %46 = zext i1 %45 to i8
  %47 = trunc i8 %46 to i1
  br i1 %47, label %for.body, label %for.done21

for.body:                                         ; preds = %cmp.and
  %48 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp sgt i64 %50, 0
  %52 = zext i1 %51 to i8
  %53 = trunc i8 %52 to i1
  br i1 %53, label %if.then1, label %if.else

if.then1:                                         ; preds = %for.body
  br label %if.done2

if.else:                                          ; preds = %for.body
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  %54 = phi i64 [ 1, %if.then1 ], [ 0, %if.else ]
  %55 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = sdiv i64 %57, 4
  %59 = icmp sgt i64 %58, %54
  %60 = select i1 %59, i64 %58, i64 %54
  store i64 %60, i64* %5, align 8
  %61 = load i64, i64* %5, align 8
  %62 = icmp slt i64 386, %61
  %63 = select i1 %62, i64 386, i64 %61
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %6, align 4
  %65 = load i32, i32* %6, align 4
  %66 = icmp eq i32 %65, 0
  %67 = zext i1 %66 to i8
  %68 = trunc i8 %67 to i1
  br i1 %68, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  br label %for.done21

unreachable:                                      ; No predecessors!
  br label %if.done4

if.done4:                                         ; preds = %unreachable, %if.done2
  store i32 0, i32* %7, align 4
  %69 = load i8*, i8** %2, align 8
  %70 = getelementptr [386 x i16], [386 x i16]* %3, i64 0, i64 0
  %71 = load i32, i32* %6, align 4
  %72 = bitcast i16* %70 to i8*
  %73 = call i32 @ReadConsoleW(i8* %69, i8* %72, i32 %71, i32* %7, %sys_windows.CONSOLE_READCONSOLE_CONTROL* null)
  store i32 %73, i32* %8, align 4
  %74 = load i32, i32* %8, align 4
  %75 = trunc i32 %74 to i1
  br i1 %75, label %if.done6, label %if.then5

if.then5:                                         ; preds = %if.done4
  %76 = call i32 @GetLastError()
  %77 = zext i32 %76 to i64
  store i64 %77, i64* %25, align 8
  br label %if.done6

if.done6:                                         ; preds = %if.then5, %if.done4
  %78 = load [1544 x i8], [1544 x i8]* %4, align 1
  %79 = getelementptr [1544 x i8], [1544 x i8]* %4, i64 0, i64 0
  %80 = getelementptr i8, i8* %79, i64 0
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 0
  store i8* %80, i8** %81, align 8
  %82 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %10, i32 0, i32 1
  store i64 1544, i64* %82, align 8
  %83 = load { i8*, i64 }, { i8*, i64 }* %10, align 8
  %84 = load i32, i32* %7, align 4
  %85 = load [386 x i16], [386 x i16]* %3, align 2
  %86 = zext i32 %84 to i64
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %11, align 8
  call void @runtime.slice_expr_error_hi(%..string* %11, i32 123, i32 50, i64 %86, i64 386)
  %87 = getelementptr [386 x i16], [386 x i16]* %3, i64 0, i64 0
  %88 = getelementptr i16, i16* %87, i64 0
  %89 = zext i32 %84 to i64
  %90 = sub i64 %89, 0
  %91 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %12, i32 0, i32 0
  store i16* %88, i16** %91, align 8
  %92 = getelementptr inbounds { i16*, i64 }, { i16*, i64 }* %12, i32 0, i32 1
  store i64 %90, i64* %92, align 8
  %93 = load { i16*, i64 }, { i16*, i64 }* %12, align 8
  %94 = bitcast %runtime.Context* %26 to i8*
  %95 = call i64 @utf16.decode_to_utf8({ i8*, i64 }* %10, { i16*, i64 }* %12, i8* %94)
  store i64 %95, i64* %9, align 8
  %96 = load i64, i64* %9, align 8
  %97 = load [1544 x i8], [1544 x i8]* %4, align 1
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %14, align 8
  call void @runtime.slice_expr_error_hi(%..string* %14, i32 124, i32 14, i64 %96, i64 1544)
  %98 = getelementptr [1544 x i8], [1544 x i8]* %4, i64 0, i64 0
  %99 = getelementptr i8, i8* %98, i64 0
  %100 = sub i64 %96, 0
  %101 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  store i8* %99, i8** %101, align 8
  %102 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  store i64 %100, i64* %102, align 8
  %103 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  store { i8*, i64 } %103, { i8*, i64 }* %13, align 8
  store i8 0, i8* %16, align 1
  br label %for.init

for.init:                                         ; preds = %if.done6
  store i64 0, i64* %17, align 8
  br label %for.loop7

for.loop7:                                        ; preds = %for.post, %for.init
  %104 = load i64, i64* %17, align 8
  %105 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  %106 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = icmp slt i64 %104, %107
  %109 = zext i1 %108 to i8
  %110 = trunc i8 %109 to i1
  br i1 %110, label %cmp.and8, label %for.done

cmp.and8:                                         ; preds = %for.loop7
  %111 = load i64, i64* %24, align 8
  %112 = load i64, i64* %17, align 8
  %113 = add i64 %111, %112
  %114 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %115 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = icmp slt i64 %113, %116
  %118 = zext i1 %117 to i8
  %119 = trunc i8 %118 to i1
  br i1 %119, label %for.body9, label %for.done

for.body9:                                        ; preds = %cmp.and8
  %120 = load { i8*, i64 }, { i8*, i64 }* %13, align 8
  %121 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 0
  %122 = load i8*, i8** %121, align 8
  %123 = load i64, i64* %17, align 8
  %124 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %13, i32 0, i32 1
  %125 = load i64, i64* %124, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %19, align 8
  call void @runtime.bounds_check_error(%..string* %19, i32 128, i32 13, i64 %123, i64 %125)
  %126 = getelementptr i8, i8* %122, i64 %123
  %127 = load i8, i8* %126, align 1
  store i8 %127, i8* %18, align 1
  %128 = load i8, i8* %18, align 1
  %129 = icmp eq i8 %128, 26
  %130 = zext i1 %129 to i8
  %131 = trunc i8 %130 to i1
  br i1 %131, label %if.then10, label %if.done12

if.then10:                                        ; preds = %for.body9
  store i8 1, i8* %16, align 1
  br label %for.done

unreachable11:                                    ; No predecessors!
  br label %if.done12

if.done12:                                        ; preds = %unreachable11, %for.body9
  %132 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %133 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = load i64, i64* %24, align 8
  %136 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %137 = load i64, i64* %136, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %20, align 8
  call void @runtime.bounds_check_error(%..string* %20, i32 133, i32 6, i64 %135, i64 %137)
  %138 = getelementptr i8, i8* %134, i64 %135
  %139 = load i8, i8* %18, align 1
  store i8 %139, i8* %138, align 1
  %140 = load i64, i64* %24, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %24, align 8
  br label %for.post

for.post:                                         ; preds = %if.done12
  %142 = load i64, i64* %17, align 8
  %143 = add i64 %142, 1
  store i64 %143, i64* %17, align 8
  br label %for.loop7

for.done:                                         ; preds = %if.then10, %cmp.and8, %for.loop7
  %144 = load i8, i8* %16, align 1
  %145 = trunc i8 %144 to i1
  br i1 %145, label %if.then13, label %cmp.or

cmp.or:                                           ; preds = %for.done
  %146 = load i32, i32* %7, align 4
  %147 = load i32, i32* %6, align 4
  %148 = icmp ult i32 %146, %147
  %149 = zext i1 %148 to i8
  %150 = trunc i8 %149 to i1
  br i1 %150, label %if.then13, label %if.done15

if.then13:                                        ; preds = %cmp.or, %for.done
  br label %for.done21

unreachable14:                                    ; No predecessors!
  br label %if.done15

if.done15:                                        ; preds = %unreachable14, %cmp.or
  %151 = load i64, i64* %24, align 8
  %152 = icmp sge i64 %151, 2
  %153 = zext i1 %152 to i8
  %154 = trunc i8 %153 to i1
  br i1 %154, label %cmp.and16, label %if.done20

cmp.and16:                                        ; preds = %if.done15
  %155 = load i32, i32* %7, align 4
  %156 = load i32, i32* %6, align 4
  %157 = icmp eq i32 %155, %156
  %158 = zext i1 %157 to i8
  %159 = trunc i8 %158 to i1
  br i1 %159, label %cmp.and17, label %if.done20

cmp.and17:                                        ; preds = %cmp.and16
  %160 = load i64, i64* %24, align 8
  %161 = sub i64 %160, 2
  %162 = load i64, i64* %24, align 8
  %163 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %164 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %21, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %21, i32 142, i32 58, i64 %161, i64 %162, i64 %165)
  %166 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %167 = load i8*, i8** %166, align 8
  %168 = getelementptr i8, i8* %167, i64 %161
  %169 = sub i64 %162, %161
  %170 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 0
  store i8* %168, i8** %170, align 8
  %171 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %22, i32 0, i32 1
  store i64 %169, i64* %171, align 8
  %172 = load { i8*, i64 }, { i8*, i64 }* %22, align 8
  %173 = bitcast { i8*, i64 }* %22 to %..string*
  %174 = load %..string, %..string* %173, align 8
  store %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2b6", i64 0, i64 0), i64 2 }, %..string* %23, align 8
  %175 = call i8 @runtime.string_eq(%..string* %173, %..string* %23)
  %176 = trunc i8 %175 to i1
  br i1 %176, label %if.then18, label %if.done20

if.then18:                                        ; preds = %cmp.and17
  br label %for.done21

unreachable19:                                    ; No predecessors!
  br label %if.done20

if.done20:                                        ; preds = %unreachable19, %cmp.and17, %cmp.and16, %if.done15
  br label %for.loop

for.done21:                                       ; preds = %if.then18, %if.then13, %if.then3, %cmp.and, %for.loop
  %177 = load i64, i64* %24, align 8
  %178 = load i64, i64* %25, align 8
  store i64 %177, i64* %24, align 8
  store i64 %178, i64* %25, align 8
  %179 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %180 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %177, i64* %179, align 8
  store i64 %178, i64* %180, align 8
  ret void
}

define internal void @os.read({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %..string, align 8
  %14 = alloca { i8*, i64 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { i8*, i64 }, align 8
  %17 = alloca { i64, i64 }, align 8
  %18 = alloca %..string, align 8
  %19 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  %20 = bitcast i8* %__.context_ptr to %runtime.Context*
  %21 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %22 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %23, 0
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %27, align 8
  store i64 0, i64* %28, align 8
  ret void

if.done:                                          ; preds = %entry
  %29 = load i64, i64* %2, align 8
  %30 = inttoptr i64 %29 to i8*
  store i8* %30, i8** %3, align 8
  store i32 0, i32* %4, align 4
  %31 = load i8*, i8** %3, align 8
  %32 = call i32 @GetConsoleMode(i8* %31, i32* %4)
  store i32 %32, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store i64 0, i64* %7, align 8
  %33 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %34 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  store i64 %35, i64* %8, align 8
  %36 = load i64, i64* %8, align 8
  %37 = trunc i64 %36 to i32
  %38 = icmp ult i32 %37, 1073741824
  %39 = select i1 %38, i32 %37, i32 1073741824
  store i32 %39, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %40 = load i32, i32* %5, align 4
  %41 = trunc i32 %40 to i1
  br i1 %41, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  %42 = load i8*, i8** %3, align 8
  %43 = load i32, i32* %9, align 4
  %44 = load i64, i64* %7, align 8
  %45 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %46 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %13, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %13, i32 169, i32 38, i64 %44, i64 %47, i64 %47)
  %48 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %49 = load i8*, i8** %48, align 8
  %50 = getelementptr i8, i8* %49, i64 %44
  %51 = sub i64 %47, %44
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  store i8* %50, i8** %52, align 8
  %53 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  store i64 %51, i64* %53, align 8
  %54 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = zext i32 %43 to i64
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %15, align 8
  call void @runtime.slice_expr_error_hi(%..string* %15, i32 169, i32 51, i64 %57, i64 %56)
  %58 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr i8, i8* %59, i64 0
  %61 = zext i32 %43 to i64
  %62 = sub i64 %61, 0
  %63 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 0
  store i8* %60, i8** %63, align 8
  %64 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %16, i32 0, i32 1
  store i64 %62, i64* %64, align 8
  %65 = load { i8*, i64 }, { i8*, i64 }* %16, align 8
  %66 = bitcast { i64, i64 }* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %66, i8 0, i64 16, i1 false)
  %67 = bitcast %runtime.Context* %20 to i8*
  call void @os.read_console-865({ i64, i64 }* sret({ i64, i64 }*) %17, i8* %42, { i8*, i64 }* %16, i8* %67)
  %68 = load { i64, i64 }, { i64, i64 }* %17, align 8
  %69 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  store i64 %70, i64* %11, align 8
  store i64 %72, i64* %12, align 8
  %73 = load i64, i64* %11, align 8
  %74 = load i64, i64* %7, align 8
  %75 = add i64 %74, %73
  store i64 %75, i64* %7, align 8
  %76 = load i64, i64* %12, align 8
  %77 = icmp ne i64 %76, 0
  %78 = zext i1 %77 to i8
  %79 = trunc i8 %78 to i1
  br i1 %79, label %if.then2, label %if.done3

if.then2:                                         ; preds = %if.then1
  %80 = load i64, i64* %7, align 8
  %81 = load i64, i64* %12, align 8
  %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %83 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %80, i64* %82, align 8
  store i64 %81, i64* %83, align 8
  ret void

if.done3:                                         ; preds = %if.then1
  br label %if.done4

if.else:                                          ; preds = %if.done
  %84 = load i8*, i8** %3, align 8
  %85 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %86 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = load i64, i64* %7, align 8
  %89 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %18, align 8
  call void @runtime.bounds_check_error(%..string* %18, i32 175, i32 36, i64 %88, i64 %90)
  %91 = getelementptr i8, i8* %87, i64 %88
  %92 = load i32, i32* %9, align 4
  %93 = call i32 @ReadFile(i8* %84, i8* %91, i32 %92, i32* %6, %sys_windows.OVERLAPPED* null)
  store i32 %93, i32* %10, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.else, %if.done3
  %94 = load i32, i32* %6, align 4
  %95 = icmp ule i32 %94, 0
  %96 = zext i1 %95 to i32
  %97 = trunc i32 %96 to i1
  br i1 %97, label %if.then5, label %cmp.or

cmp.or:                                           ; preds = %if.done4
  %98 = load i32, i32* %10, align 4
  %99 = trunc i32 %98 to i1
  br i1 %99, label %if.done6, label %if.then5

if.then5:                                         ; preds = %cmp.or, %if.done4
  %100 = call i32 @GetLastError()
  %101 = zext i32 %100 to i64
  store i64 %101, i64* %19, align 8
  %102 = load i64, i64* %7, align 8
  %103 = load i64, i64* %19, align 8
  %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %105 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %102, i64* %104, align 8
  store i64 %103, i64* %105, align 8
  ret void

if.done6:                                         ; preds = %cmp.or
  %106 = load i32, i32* %6, align 4
  %107 = zext i32 %106 to i64
  %108 = load i64, i64* %7, align 8
  %109 = add i64 %108, %107
  store i64 %109, i64* %7, align 8
  %110 = load i64, i64* %7, align 8
  %111 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %110, i64* %111, align 8
  store i64 0, i64* %112, align 8
  ret void
}

define internal void @os.seek({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, i64 %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %1, i64* %4, align 8
  store i64 %2, i64* %5, align 8
  %12 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i32 0, i32* %6, align 4
  %13 = load i64, i64* %5, align 8
  switch i64 %13, label %switch.done [
    i64 0, label %switch.case.body
    i64 1, label %switch.case.body1
    i64 2, label %switch.case.body2
  ]

switch.case.body:                                 ; preds = %entry
  store i32 0, i32* %6, align 4
  br label %switch.done

switch.case.body1:                                ; preds = %entry
  store i32 1, i32* %6, align 4
  br label %switch.done

switch.case.body2:                                ; preds = %entry
  store i32 2, i32* %6, align 4
  br label %switch.done

switch.done:                                      ; preds = %switch.case.body2, %switch.case.body1, %switch.case.body, %entry
  %14 = load i64, i64* %4, align 8
  %15 = ashr i64 %14, 32
  %16 = select i1 true, i64 %15, i64 0
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %7, align 4
  %18 = load i64, i64* %4, align 8
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %8, align 4
  %20 = load i64, i64* %3, align 8
  %21 = inttoptr i64 %20 to i8*
  %22 = call i32 @GetFileType(i8* %21)
  store i32 %22, i32* %9, align 4
  %23 = load i32, i32* %9, align 4
  %24 = icmp eq i32 %23, 3
  %25 = zext i1 %24 to i8
  %26 = trunc i8 %25 to i1
  br i1 %26, label %if.then, label %if.done

if.then:                                          ; preds = %switch.done
  %27 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %27, align 8
  store i64 536870912, i64* %28, align 8
  ret void

if.done:                                          ; preds = %switch.done
  %29 = load i64, i64* %3, align 8
  %30 = inttoptr i64 %29 to i8*
  %31 = load i32, i32* %8, align 4
  %32 = load i32, i32* %6, align 4
  %33 = call i32 @SetFilePointer(i8* %30, i32 %31, i32* %7, i32 %32)
  store i32 %33, i32* %10, align 4
  %34 = load i32, i32* %10, align 4
  %35 = icmp eq i32 %34, -1
  %36 = zext i1 %35 to i8
  %37 = trunc i8 %36 to i1
  br i1 %37, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done
  %38 = call i32 @GetLastError()
  %39 = zext i32 %38 to i64
  store i64 %39, i64* %11, align 8
  %40 = load i64, i64* %11, align 8
  %41 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %42 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %41, align 8
  store i64 %40, i64* %42, align 8
  ret void

if.done4:                                         ; preds = %if.done
  %43 = load i32, i32* %7, align 4
  %44 = sext i32 %43 to i64
  %45 = shl i64 %44, 32
  %46 = select i1 true, i64 %45, i64 0
  %47 = load i32, i32* %10, align 4
  %48 = zext i32 %47 to i64
  %49 = add i64 %46, %48
  %50 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %51 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %49, i64* %50, align 8
  store i64 0, i64* %51, align 8
  ret void
}

define internal void @os.file_size({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %4 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 0, i64* %2, align 8
  store i64 0, i64* %3, align 8
  %5 = load i64, i64* %1, align 8
  %6 = inttoptr i64 %5 to i8*
  %7 = call i32 @GetFileSizeEx(i8* %6, i64* %2)
  %8 = trunc i32 %7 to i1
  br i1 %8, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %9 = call i32 @GetLastError()
  %10 = zext i32 %9 to i64
  store i64 %10, i64* %3, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %11 = load i64, i64* %2, align 8
  %12 = load i64, i64* %3, align 8
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %11, i64* %13, align 8
  store i64 %12, i64* %14, align 8
  ret void
}

define internal void @os.pread-870({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %sys_windows.OVERLAPPED, align 8
  %12 = alloca %sys_windows.OVERLAPPED, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  store { i8*, i64 } %17, { i8*, i64 }* %5, align 8
  %18 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp sgt i64 %20, 1073741824
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %24 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %6, align 8
  call void @runtime.slice_expr_error_hi(%..string* %6, i32 225, i32 12, i64 1073741824, i64 %26)
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr i8, i8* %28, i64 0
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 1073741824, i64* %31, align 8
  %32 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  store { i8*, i64 } %32, { i8*, i64 }* %5, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %33 = load i64, i64* %3, align 8
  %34 = load i64, i64* %4, align 8
  %35 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 16, i1 false)
  %36 = bitcast %runtime.Context* %16 to i8*
  call void @os.seek({ i64, i64 }* sret({ i64, i64 }*) %10, i64 %33, i64 %34, i64 1, i8* %36)
  %37 = load { i64, i64 }, { i64, i64 }* %10, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  store i64 %39, i64* %8, align 8
  store i64 %41, i64* %9, align 8
  %42 = load i64, i64* %9, align 8
  %43 = icmp ne i64 %42, 0
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %46 = load i64, i64* %9, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %47, align 8
  store i64 %46, i64* %48, align 8
  ret void

if.done2:                                         ; preds = %if.done
  %49 = bitcast %sys_windows.OVERLAPPED* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 32, i1 false)
  store %sys_windows.OVERLAPPED zeroinitializer, %sys_windows.OVERLAPPED* %12, align 8
  %50 = load i64, i64* %4, align 8
  %51 = ashr i64 %50, 32
  %52 = select i1 true, i64 %51, i64 0
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, i32 0, i32 3
  store i32 %53, i32* %54, align 4
  %55 = load i64, i64* %4, align 8
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, i32 0, i32 2
  store i32 %56, i32* %57, align 4
  %58 = load %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, align 8
  store %sys_windows.OVERLAPPED %58, %sys_windows.OVERLAPPED* %11, align 8
  %59 = load i64, i64* %3, align 8
  %60 = inttoptr i64 %59 to i8*
  store i8* %60, i8** %13, align 8
  store i32 0, i32* %14, align 4
  %61 = load i8*, i8** %13, align 8
  %62 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %63 = call i8* @runtime.raw_slice_data-47893({ i8*, i64 }* %5)
  %64 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = call i32 @ReadFile(i8* %61, i8* %63, i32 %67, i32* %14, %sys_windows.OVERLAPPED* %11)
  %69 = trunc i32 %68 to i1
  br i1 %69, label %if.done4, label %if.then3

if.then3:                                         ; preds = %if.done2
  %70 = call i32 @GetLastError()
  %71 = zext i32 %70 to i64
  store i64 %71, i64* %9, align 8
  store i32 0, i32* %14, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  %72 = load i32, i32* %14, align 4
  %73 = zext i32 %72 to i64
  %74 = load i64, i64* %9, align 8
  %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %73, i64* %75, align 8
  store i64 %74, i64* %76, align 8
  br label %defer

defer:                                            ; preds = %if.done4
  %77 = load i64, i64* %3, align 8
  %78 = load i64, i64* %8, align 8
  %79 = bitcast { i64, i64 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 16, i1 false)
  %80 = bitcast %runtime.Context* %16 to i8*
  call void @os.seek({ i64, i64 }* sret({ i64, i64 }*) %15, i64 %77, i64 %78, i64 0, i8* %80)
  %81 = load { i64, i64 }, { i64, i64 }* %15, align 8
  ret void
}

define internal void @os.pwrite-871({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca { i64, i64 }, align 8
  %11 = alloca %sys_windows.OVERLAPPED, align 8
  %12 = alloca %sys_windows.OVERLAPPED, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %16 = bitcast i8* %__.context_ptr to %runtime.Context*
  %17 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  store { i8*, i64 } %17, { i8*, i64 }* %5, align 8
  %18 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %19 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = icmp sgt i64 %20, 1073741824
  %22 = zext i1 %21 to i8
  %23 = trunc i8 %22 to i1
  br i1 %23, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %24 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %25 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %6, align 8
  call void @runtime.slice_expr_error_hi(%..string* %6, i32 253, i32 12, i64 1073741824, i64 %26)
  %27 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr i8, i8* %28, i64 0
  %30 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %29, i8** %30, align 8
  %31 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 1073741824, i64* %31, align 8
  %32 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  store { i8*, i64 } %32, { i8*, i64 }* %5, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  %33 = load i64, i64* %3, align 8
  %34 = load i64, i64* %4, align 8
  %35 = bitcast { i64, i64 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %35, i8 0, i64 16, i1 false)
  %36 = bitcast %runtime.Context* %16 to i8*
  call void @os.seek({ i64, i64 }* sret({ i64, i64 }*) %10, i64 %33, i64 %34, i64 1, i8* %36)
  %37 = load { i64, i64 }, { i64, i64 }* %10, align 8
  %38 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %10, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  store i64 %39, i64* %8, align 8
  store i64 %41, i64* %9, align 8
  %42 = load i64, i64* %9, align 8
  %43 = icmp ne i64 %42, 0
  %44 = zext i1 %43 to i8
  %45 = trunc i8 %44 to i1
  br i1 %45, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %46 = load i64, i64* %9, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %48 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %47, align 8
  store i64 %46, i64* %48, align 8
  ret void

if.done2:                                         ; preds = %if.done
  %49 = bitcast %sys_windows.OVERLAPPED* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %49, i8 0, i64 32, i1 false)
  store %sys_windows.OVERLAPPED zeroinitializer, %sys_windows.OVERLAPPED* %12, align 8
  %50 = load i64, i64* %4, align 8
  %51 = ashr i64 %50, 32
  %52 = select i1 true, i64 %51, i64 0
  %53 = trunc i64 %52 to i32
  %54 = getelementptr inbounds %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, i32 0, i32 3
  store i32 %53, i32* %54, align 4
  %55 = load i64, i64* %4, align 8
  %56 = trunc i64 %55 to i32
  %57 = getelementptr inbounds %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, i32 0, i32 2
  store i32 %56, i32* %57, align 4
  %58 = load %sys_windows.OVERLAPPED, %sys_windows.OVERLAPPED* %12, align 8
  store %sys_windows.OVERLAPPED %58, %sys_windows.OVERLAPPED* %11, align 8
  %59 = load i64, i64* %3, align 8
  %60 = inttoptr i64 %59 to i8*
  store i8* %60, i8** %13, align 8
  store i32 0, i32* %14, align 4
  %61 = load i8*, i8** %13, align 8
  %62 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %63 = call i8* @runtime.raw_slice_data-47893({ i8*, i64 }* %5)
  %64 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %65 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = trunc i64 %66 to i32
  %68 = bitcast %sys_windows.OVERLAPPED* %11 to i8*
  %69 = call i32 @WriteFile(i8* %61, i8* %63, i32 %67, i32* %14, i8* %68)
  %70 = trunc i32 %69 to i1
  br i1 %70, label %if.done4, label %if.then3

if.then3:                                         ; preds = %if.done2
  %71 = call i32 @GetLastError()
  %72 = zext i32 %71 to i64
  store i64 %72, i64* %9, align 8
  store i32 0, i32* %14, align 4
  br label %if.done4

if.done4:                                         ; preds = %if.then3, %if.done2
  %73 = load i32, i32* %14, align 4
  %74 = zext i32 %73 to i64
  %75 = load i64, i64* %9, align 8
  %76 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %74, i64* %76, align 8
  store i64 %75, i64* %77, align 8
  br label %defer

defer:                                            ; preds = %if.done4
  %78 = load i64, i64* %3, align 8
  %79 = load i64, i64* %8, align 8
  %80 = bitcast { i64, i64 }* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %80, i8 0, i64 16, i1 false)
  %81 = bitcast %runtime.Context* %16 to i8*
  call void @os.seek({ i64, i64 }* sret({ i64, i64 }*) %15, i64 %78, i64 %79, i64 0, i8* %81)
  %82 = load { i64, i64 }, { i64, i64 }* %15, align 8
  ret void
}

define internal void @os.read_at({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %..string, align 8
  %11 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load i64, i64* %4, align 8
  %16 = icmp slt i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %12, align 8
  store i64 536870914, i64* %13, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %19, align 8
  store i64 536870914, i64* %20, align 8
  ret void

if.done:                                          ; preds = %entry
  %21 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %22 = load i64, i64* %4, align 8
  store { i8*, i64 } %21, { i8*, i64 }* %5, align 8
  store i64 %22, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %23 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp sgt i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %29 = load i64, i64* %3, align 8
  %30 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 16, i1 false)
  %33 = bitcast %runtime.Context* %14 to i8*
  call void @os.pread-870({ i64, i64 }* sret({ i64, i64 }*) %9, i64 %29, { i8*, i64 }* %5, i64 %31, i8* %33)
  %34 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  store i64 %36, i64* %7, align 8
  store i64 %38, i64* %8, align 8
  %39 = load i64, i64* %8, align 8
  %40 = icmp ne i64 %39, 0
  %41 = zext i1 %40 to i8
  %42 = trunc i8 %41 to i1
  br i1 %42, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.body
  %43 = load i64, i64* %8, align 8
  store i64 %43, i64* %13, align 8
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done2

if.done2:                                         ; preds = %unreachable, %for.body
  %44 = load i64, i64* %7, align 8
  %45 = load i64, i64* %12, align 8
  %46 = add i64 %45, %44
  store i64 %46, i64* %12, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %10, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %10, i32 289, i32 8, i64 %47, i64 %50, i64 %50)
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr i8, i8* %52, i64 %47
  %54 = sub i64 %50, %47
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  store i64 %54, i64* %56, align 8
  %57 = load { i8*, i64 }, { i8*, i64 }* %11, align 8
  store { i8*, i64 } %57, { i8*, i64 }* %5, align 8
  %58 = load i64, i64* %7, align 8
  %59 = load i64, i64* %6, align 8
  %60 = add i64 %59, %58
  store i64 %60, i64* %6, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then1, %for.loop
  %61 = load i64, i64* %12, align 8
  %62 = load i64, i64* %13, align 8
  store i64 %61, i64* %12, align 8
  store i64 %62, i64* %13, align 8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %61, i64* %63, align 8
  store i64 %62, i64* %64, align 8
  ret void
}

define internal void @os.write_at({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i8*, i64 }, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca %..string, align 8
  %11 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load i64, i64* %4, align 8
  %16 = icmp slt i64 %15, 0
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %12, align 8
  store i64 536870914, i64* %13, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %19, align 8
  store i64 536870914, i64* %20, align 8
  ret void

if.done:                                          ; preds = %entry
  %21 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %22 = load i64, i64* %4, align 8
  store { i8*, i64 } %21, { i8*, i64 }* %5, align 8
  store i64 %22, i64* %6, align 8
  br label %for.loop

for.loop:                                         ; preds = %if.done2, %if.done
  %23 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %24 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = icmp sgt i64 %25, 0
  %27 = zext i1 %26 to i8
  %28 = trunc i8 %27 to i1
  br i1 %28, label %for.body, label %for.done

for.body:                                         ; preds = %for.loop
  %29 = load i64, i64* %3, align 8
  %30 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %31 = load i64, i64* %6, align 8
  %32 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 16, i1 false)
  %33 = bitcast %runtime.Context* %14 to i8*
  call void @os.pwrite-871({ i64, i64 }* sret({ i64, i64 }*) %9, i64 %29, { i8*, i64 }* %5, i64 %31, i8* %33)
  %34 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %35 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  store i64 %36, i64* %7, align 8
  store i64 %38, i64* %8, align 8
  %39 = load i64, i64* %8, align 8
  %40 = icmp ne i64 %39, 0
  %41 = zext i1 %40 to i8
  %42 = trunc i8 %41 to i1
  br i1 %42, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.body
  %43 = load i64, i64* %8, align 8
  store i64 %43, i64* %13, align 8
  br label %for.done

unreachable:                                      ; No predecessors!
  br label %if.done2

if.done2:                                         ; preds = %unreachable, %for.body
  %44 = load i64, i64* %7, align 8
  %45 = load i64, i64* %12, align 8
  %46 = add i64 %45, %44
  store i64 %46, i64* %12, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load { i8*, i64 }, { i8*, i64 }* %5, align 8
  %49 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  store %..string { i8* getelementptr inbounds ([73 x i8], [73 x i8]* @"csbs$2b5", i64 0, i64 0), i64 72 }, %..string* %10, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %10, i32 307, i32 8, i64 %47, i64 %50, i64 %50)
  %51 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %5, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr i8, i8* %52, i64 %47
  %54 = sub i64 %50, %47
  %55 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %11, i32 0, i32 1
  store i64 %54, i64* %56, align 8
  %57 = load { i8*, i64 }, { i8*, i64 }* %11, align 8
  store { i8*, i64 } %57, { i8*, i64 }* %5, align 8
  %58 = load i64, i64* %7, align 8
  %59 = load i64, i64* %6, align 8
  %60 = add i64 %59, %58
  store i64 %60, i64* %6, align 8
  br label %for.loop

for.done:                                         ; preds = %if.then1, %for.loop
  %61 = load i64, i64* %12, align 8
  %62 = load i64, i64* %13, align 8
  store i64 %61, i64* %12, align 8
  store i64 %62, i64* %13, align 8
  %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %61, i64* %63, align 8
  store i64 %62, i64* %64, align 8
  ret void
}

define internal void @os.read_at_least({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i64 %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %..string, align 8
  %7 = alloca { i8*, i64 }, align 8
  %8 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  store i64 %2, i64* %4, align 8
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %11 = bitcast i8* %__.context_ptr to %runtime.Context*
  %12 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %13 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = load i64, i64* %4, align 8
  %16 = icmp slt i64 %14, %15
  %17 = zext i1 %16 to i8
  %18 = trunc i8 %17 to i1
  br i1 %18, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store i64 0, i64* %9, align 8
  store i64 -1, i64* %10, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 0, i64* %19, align 8
  store i64 -1, i64* %20, align 8
  ret void

if.done:                                          ; preds = %entry
  br label %for.loop

for.loop:                                         ; preds = %for.body, %if.done
  %21 = load i64, i64* %9, align 8
  %22 = load i64, i64* %4, align 8
  %23 = icmp slt i64 %21, %22
  %24 = zext i1 %23 to i8
  %25 = trunc i8 %24 to i1
  br i1 %25, label %cmp.and, label %for.done

cmp.and:                                          ; preds = %for.loop
  %26 = load i64, i64* %10, align 8
  %27 = icmp eq i64 %26, 0
  %28 = zext i1 %27 to i8
  %29 = trunc i8 %28 to i1
  br i1 %29, label %for.body, label %for.done

for.body:                                         ; preds = %cmp.and
  store i64 0, i64* %5, align 8
  %30 = load i64, i64* %3, align 8
  %31 = load i64, i64* %9, align 8
  %32 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %33 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  store %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$2b7", i64 0, i64 0), i64 62 }, %..string* %6, align 8
  call void @runtime.slice_expr_error_lo_hi(%..string* %6, i32 68, i32 25, i64 %31, i64 %34, i64 %34)
  %35 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 0
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr i8, i8* %36, i64 %31
  %38 = sub i64 %34, %31
  %39 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 0
  store i8* %37, i8** %39, align 8
  %40 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %7, i32 0, i32 1
  store i64 %38, i64* %40, align 8
  %41 = load { i8*, i64 }, { i8*, i64 }* %7, align 8
  %42 = bitcast { i64, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %42, i8 0, i64 16, i1 false)
  %43 = bitcast %runtime.Context* %11 to i8*
  call void @os.read({ i64, i64 }* sret({ i64, i64 }*) %8, i64 %30, { i8*, i64 }* %7, i8* %43)
  %44 = load { i64, i64 }, { i64, i64 }* %8, align 8
  %45 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  store i64 %46, i64* %5, align 8
  store i64 %48, i64* %10, align 8
  %49 = load i64, i64* %5, align 8
  %50 = load i64, i64* %9, align 8
  %51 = add i64 %50, %49
  store i64 %51, i64* %9, align 8
  br label %for.loop

for.done:                                         ; preds = %cmp.and, %for.loop
  %52 = load i64, i64* %9, align 8
  %53 = load i64, i64* %4, align 8
  %54 = icmp sge i64 %52, %53
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then1, label %if.done2

if.then1:                                         ; preds = %for.done
  store i64 0, i64* %10, align 8
  br label %if.done2

if.done2:                                         ; preds = %if.then1, %for.done
  %57 = load i64, i64* %9, align 8
  %58 = load i64, i64* %10, align 8
  store i64 %57, i64* %9, align 8
  store i64 %58, i64* %10, align 8
  %59 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %60 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %57, i64* %59, align 8
  store i64 %58, i64* %60, align 8
  ret void
}

define internal void @os.read_full({ i64, i64 }* noalias sret({ i64, i64 }) %agg.result, i64 %0, { i8*, i64 }* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  %4 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load i64, i64* %2, align 8
  %8 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %9 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %10 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %1, i32 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 16, i1 false)
  %13 = bitcast %runtime.Context* %6 to i8*
  call void @os.read_at_least({ i64, i64 }* sret({ i64, i64 }*) %3, i64 %7, { i8*, i64 }* %1, i64 %11, i8* %13)
  %14 = load { i64, i64 }, { i64, i64 }* %3, align 8
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  store i64 %16, i64* %4, align 8
  store i64 %18, i64* %5, align 8
  %19 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 0
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %agg.result, i32 0, i32 1
  store i64 %16, i64* %19, align 8
  store i64 %18, i64* %20, align 8
  ret void
}

define internal void @os.read_entire_file_from_filename({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, %..string* %0, %runtime.Allocator* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %runtime.Context, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = alloca { { i8*, i64 }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %7 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %8 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  %9 = bitcast i8* %__.context_ptr to %runtime.Context*
  %10 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  %11 = load %runtime.Context, %runtime.Context* %9, align 8
  %12 = bitcast %runtime.Context* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 96, i1 false)
  %13 = bitcast %runtime.Context* %2 to i8*
  %14 = bitcast %runtime.Context* %9 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %13, i8* align 1 %14, i64 96, i1 false)
  %15 = getelementptr inbounds %runtime.Context, %runtime.Context* %2, i32 0, i32 0
  store %runtime.Allocator %10, %runtime.Allocator* %15, align 8
  %16 = load %..string, %..string* %0, align 8
  %17 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 16, i1 false)
  %18 = bitcast %runtime.Context* %2 to i8*
  call void @os.open({ i64, i64 }* sret({ i64, i64 }*) %5, %..string* %0, i64 0, i64 0, i8* %18)
  %19 = load { i64, i64 }, { i64, i64 }* %5, align 8
  %20 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 0
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  store i64 %21, i64* %3, align 8
  store i64 %23, i64* %4, align 8
  %24 = load i64, i64* %4, align 8
  %25 = icmp ne i64 %24, 0
  %26 = zext i1 %25 to i8
  %27 = trunc i8 %26 to i1
  br i1 %27, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %7, align 8
  store i8 0, i8* %8, align 1
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %29 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %28, align 8
  store i8 0, i8* %29, align 1
  ret void

if.done:                                          ; preds = %entry
  %30 = load i64, i64* %3, align 8
  %31 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  %32 = bitcast { { i8*, i64 }, i8 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 24, i1 false)
  %33 = bitcast %runtime.Context* %2 to i8*
  call void @os.read_entire_file_from_handle({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %6, i64 %30, %runtime.Allocator* %1, i8* %33)
  %34 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, align 8
  %35 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 0
  %36 = load { i8*, i64 }, { i8*, i64 }* %35, align 8
  %37 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %6, i32 0, i32 1
  %38 = load i8, i8* %37, align 1
  store { i8*, i64 } %36, { i8*, i64 }* %7, align 8
  store i8 %38, i8* %8, align 1
  %39 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %40 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %36, { i8*, i64 }* %39, align 8
  store i8 %38, i8* %40, align 1
  br label %defer

defer:                                            ; preds = %if.done
  %41 = load i64, i64* %3, align 8
  %42 = bitcast %runtime.Context* %2 to i8*
  %43 = call i64 @os.close(i64 %41, i8* %42)
  ret void
}

define internal void @os.read_entire_file_from_handle({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }) %agg.result, i64 %0, %runtime.Allocator* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca %runtime.Context, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = alloca %runtime.Source_Code_Location, align 8
  %8 = alloca { { i8*, i64 }, i8 }, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca { i64, i64 }, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca %..string, align 8
  %14 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %2, align 8
  %15 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %16 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  %19 = load %runtime.Context, %runtime.Context* %17, align 8
  %20 = bitcast %runtime.Context* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %20, i8 0, i64 96, i1 false)
  %21 = bitcast %runtime.Context* %3 to i8*
  %22 = bitcast %runtime.Context* %17 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %21, i8* align 1 %22, i64 96, i1 false)
  %23 = getelementptr inbounds %runtime.Context, %runtime.Context* %3, i32 0, i32 0
  store %runtime.Allocator %18, %runtime.Allocator* %23, align 8
  store i64 0, i64* %4, align 8
  store i64 0, i64* %5, align 8
  br label %if.init

if.init:                                          ; preds = %entry
  %24 = load i64, i64* %2, align 8
  %25 = bitcast { i64, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %25, i8 0, i64 16, i1 false)
  %26 = bitcast %runtime.Context* %3 to i8*
  call void @os.file_size({ i64, i64 }* sret({ i64, i64 }*) %6, i64 %24, i8* %26)
  %27 = load { i64, i64 }, { i64, i64 }* %6, align 8
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  store i64 %29, i64* %4, align 8
  store i64 %31, i64* %5, align 8
  %32 = load i64, i64* %5, align 8
  %33 = icmp ne i64 %32, 0
  %34 = zext i1 %33 to i8
  %35 = trunc i8 %34 to i1
  br i1 %35, label %if.then, label %if.done

if.then:                                          ; preds = %if.init
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 0, i8* %16, align 1
  %36 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %37 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %36, align 8
  store i8 0, i8* %37, align 1
  ret void

if.done:                                          ; preds = %if.init
  %38 = load i64, i64* %4, align 8
  %39 = icmp sle i64 %38, 0
  %40 = zext i1 %39 to i8
  %41 = trunc i8 %40 to i1
  br i1 %41, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 1, i8* %16, align 1
  %42 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %43 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %42, align 8
  store i8 1, i8* %43, align 1
  ret void

if.done2:                                         ; preds = %if.done
  %44 = load i64, i64* %4, align 8
  %45 = load %runtime.Allocator, %runtime.Allocator* %1, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$2b7", i64 0, i64 0), i64 62 }, i32 121, i32 9, %..string { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"csbs$2b8", i64 0, i64 0), i64 28 } }, %runtime.Source_Code_Location* %7, align 8
  %46 = bitcast { { i8*, i64 }, i8 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %46, i8 0, i64 24, i1 false)
  %47 = bitcast %runtime.Context* %3 to i8*
  call void @runtime.make_slice-50435({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %8, i64 %44, %runtime.Allocator* %1, %runtime.Source_Code_Location* %7, i8* %47)
  %48 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, align 8
  %49 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %8, i32 0, i32 0
  %50 = load { i8*, i64 }, { i8*, i64 }* %49, align 8
  store { i8*, i64 } %50, { i8*, i64 }* %15, align 8
  %51 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %52 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = icmp eq i8* %53, null
  %55 = zext i1 %54 to i8
  %56 = trunc i8 %55 to i1
  br i1 %56, label %if.then3, label %if.done4

if.then3:                                         ; preds = %if.done2
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 0, i8* %16, align 1
  %57 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %58 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %57, align 8
  store i8 0, i8* %58, align 1
  ret void

if.done4:                                         ; preds = %if.done2
  %59 = load i64, i64* %2, align 8
  %60 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %61 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %61, i8 0, i64 16, i1 false)
  %62 = bitcast %runtime.Context* %3 to i8*
  call void @os.read_full({ i64, i64 }* sret({ i64, i64 }*) %11, i64 %59, { i8*, i64 }* %15, i8* %62)
  %63 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %64 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  store i64 %65, i64* %9, align 8
  store i64 %67, i64* %10, align 8
  %68 = load i64, i64* %10, align 8
  %69 = icmp ne i64 %68, 0
  %70 = zext i1 %69 to i8
  %71 = trunc i8 %70 to i1
  br i1 %71, label %if.then5, label %if.done6

if.then5:                                         ; preds = %if.done4
  %72 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %73 = getelementptr inbounds %runtime.Context, %runtime.Context* %3, i32 0, i32 0
  %74 = load %runtime.Allocator, %runtime.Allocator* %73, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$2b7", i64 0, i64 0), i64 62 }, i32 128, i32 3, %..string { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"csbs$2b8", i64 0, i64 0), i64 28 } }, %runtime.Source_Code_Location* %12, align 8
  %75 = bitcast %runtime.Context* %3 to i8*
  %76 = call i8 @runtime.delete_slice-50594({ i8*, i64 }* %15, %runtime.Allocator* %73, %runtime.Source_Code_Location* %12, i8* %75)
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %15, align 8
  store i8 0, i8* %16, align 1
  %77 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %78 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } zeroinitializer, { i8*, i64 }* %77, align 8
  store i8 0, i8* %78, align 1
  ret void

if.done6:                                         ; preds = %if.done4
  %79 = load i64, i64* %9, align 8
  %80 = load { i8*, i64 }, { i8*, i64 }* %15, align 8
  %81 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  store %..string { i8* getelementptr inbounds ([63 x i8], [63 x i8]* @"csbs$2b7", i64 0, i64 0), i64 62 }, %..string* %13, align 8
  call void @runtime.slice_expr_error_hi(%..string* %13, i32 131, i32 13, i64 %79, i64 %82)
  %83 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %15, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr i8, i8* %84, i64 0
  %86 = sub i64 %79, 0
  %87 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 0
  store i8* %85, i8** %87, align 8
  %88 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %14, i32 0, i32 1
  store i64 %86, i64* %88, align 8
  %89 = load { i8*, i64 }, { i8*, i64 }* %14, align 8
  store { i8*, i64 } %89, { i8*, i64 }* %15, align 8
  store i8 1, i8* %16, align 1
  %90 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 0
  %91 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %agg.result, i32 0, i32 1
  store { i8*, i64 } %89, { i8*, i64 }* %90, align 8
  store i8 1, i8* %91, align 1
  ret void
}

define internal i8 @os.write_entire_file(%..string* %0, { i8*, i64 }* %1, i1 zeroext %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i8, align 1
  %4 = alloca i8, align 1
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca { i64, i64 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca { i64, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  %12 = zext i1 %2 to i8
  store i8 %12, i8* %3, align 1
  store i8 0, i8* %4, align 1
  %13 = bitcast i8* %__.context_ptr to %runtime.Context*
  store i64 65, i64* %5, align 8
  %14 = load i8, i8* %3, align 1
  %15 = trunc i8 %14 to i1
  br i1 %15, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %16 = load i64, i64* %5, align 8
  %17 = or i64 %16, 512
  store i64 %17, i64* %5, align 8
  br label %if.done

if.done:                                          ; preds = %if.then, %entry
  store i64 0, i64* %6, align 8
  %18 = load %..string, %..string* %0, align 8
  %19 = load i64, i64* %5, align 8
  %20 = load i64, i64* %6, align 8
  %21 = bitcast { i64, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %21, i8 0, i64 16, i1 false)
  %22 = bitcast %runtime.Context* %13 to i8*
  call void @os.open({ i64, i64 }* sret({ i64, i64 }*) %9, %..string* %0, i64 %19, i64 %20, i8* %22)
  %23 = load { i64, i64 }, { i64, i64 }* %9, align 8
  %24 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %9, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  store i64 %25, i64* %7, align 8
  store i64 %27, i64* %8, align 8
  %28 = load i64, i64* %8, align 8
  %29 = icmp ne i64 %28, 0
  %30 = zext i1 %29 to i8
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  store i8 0, i8* %4, align 1
  ret i8 0

if.done2:                                         ; preds = %if.done
  %32 = load i64, i64* %7, align 8
  %33 = load { i8*, i64 }, { i8*, i64 }* %1, align 8
  %34 = bitcast { i64, i64 }* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 16, i1 false)
  %35 = bitcast %runtime.Context* %13 to i8*
  call void @os.write({ i64, i64 }* sret({ i64, i64 }*) %11, i64 %32, { i8*, i64 }* %1, i8* %35)
  %36 = load { i64, i64 }, { i64, i64 }* %11, align 8
  %37 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  store i64 %40, i64* %10, align 8
  %41 = load i64, i64* %10, align 8
  %42 = icmp eq i64 %41, 0
  %43 = zext i1 %42 to i8
  store i8 %43, i8* %4, align 1
  br label %defer

defer:                                            ; preds = %if.done2
  %44 = load i64, i64* %7, align 8
  %45 = bitcast %runtime.Context* %13 to i8*
  %46 = call i64 @os.close(i64 %44, i8* %45)
  ret i8 %43
}

define internal i64 @os.current_thread_id() {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %0 = call i32 @GetCurrentThreadId()
  %1 = zext i32 %0 to i64
  ret i64 %1
}

define internal void @os.stream_from_handle(%io.Stream* noalias sret(%io.Stream) %agg.result, i64 %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca i64, align 8
  %2 = alloca %io.Stream, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %1, align 8
  %3 = bitcast i8* %__.context_ptr to %runtime.Context*
  %4 = bitcast %io.Stream* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* %4, i8 0, i64 16, i1 false)
  %5 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 1
  %6 = load i64, i64* %1, align 8
  %7 = inttoptr i64 %6 to i8*
  store i8* %7, i8** %5, align 8
  %8 = getelementptr inbounds %io.Stream, %io.Stream* %2, i32 0, i32 0
  %9 = load %io.Stream_VTable*, %io.Stream_VTable** @os._file_stream_vtable-1006, align 8
  store %io.Stream_VTable* %9, %io.Stream_VTable** %8, align 8
  %10 = load %io.Stream, %io.Stream* %2, align 8
  %11 = bitcast %io.Stream* %agg.result to i8*
  %12 = bitcast %io.Stream* %2 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i1 false)
  ret void
}

define internal void @enbench.backing_from_dtw(%enbench.Backings* %0, %enbench.DataToWrite* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %enbench.Backings*, align 8
  %3 = alloca %enbench.DataToWrite*, align 8
  %4 = alloca %..string, align 8
  %5 = alloca i64, align 8
  %6 = alloca { %..string*, i64, i64, %runtime.Allocator }*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %runtime.Source_Code_Location, align 8
  %10 = alloca { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %14 = alloca %runtime.Source_Code_Location, align 8
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %17 = alloca %runtime.Source_Code_Location, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %..string, align 8
  %20 = alloca { %..string*, i64, i64, %runtime.Allocator }*, align 8
  %21 = alloca i64, align 8
  %22 = alloca [64 x i8]*, align 8
  %23 = alloca %runtime.Source_Code_Location, align 8
  %24 = alloca { [64 x i8]*, i8 }, align 8
  %25 = alloca { i8*, i64 }, align 8
  %26 = alloca %..string, align 8
  %27 = alloca %runtime.Source_Code_Location, align 8
  %28 = alloca %..string, align 8
  %29 = alloca { i8*, i64 }, align 8
  %30 = alloca %..string, align 8
  %31 = alloca %..string, align 8
  %32 = alloca { %..string*, i64, i64, %runtime.Allocator }*, align 8
  %33 = alloca i64, align 8
  %34 = alloca { %..any*, i64 }, align 8
  %35 = alloca %..string, align 8
  %36 = alloca [128 x i8]*, align 8
  %37 = alloca %runtime.Source_Code_Location, align 8
  %38 = alloca { [128 x i8]*, i8 }, align 8
  %39 = alloca { i8*, i64 }, align 8
  %40 = alloca %..string, align 8
  %41 = alloca %runtime.Source_Code_Location, align 8
  %42 = alloca %..string, align 8
  %43 = alloca { i8*, i64 }, align 8
  %44 = alloca %..string, align 8
  %45 = alloca %..string, align 8
  %46 = alloca { %..string*, i64, i64, %runtime.Allocator }*, align 8
  %47 = alloca i64, align 8
  %48 = alloca { %..any*, i64 }, align 8
  %49 = alloca %..string, align 8
  %50 = alloca [128 x i8]*, align 8
  %51 = alloca %runtime.Source_Code_Location, align 8
  %52 = alloca { [128 x i8]*, i8 }, align 8
  %53 = alloca { i8*, i64 }, align 8
  %54 = alloca %..string, align 8
  %55 = alloca %runtime.Source_Code_Location, align 8
  %56 = alloca %..string, align 8
  %57 = alloca { i8*, i64 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.Backings* %0, %enbench.Backings** %2, align 8
  store %enbench.DataToWrite* %1, %enbench.DataToWrite** %3, align 8
  %58 = bitcast i8* %__.context_ptr to %runtime.Context*
  %59 = bitcast %..string* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %59, i8 0, i64 16, i1 false)
  store i64 0, i64* %5, align 8
  %60 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %61 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %60, i32 0, i32 0
  %62 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %61, i32 0, i32 0
  store { %..string*, i64, i64, %runtime.Allocator }* %62, { %..string*, i64, i64, %runtime.Allocator }** %6, align 8
  %63 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %6, align 8
  %64 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %63, i32 0, i32 1
  store i64 -1, i64* %7, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.done10, %entry
  %65 = load i64, i64* %7, align 8
  %66 = add i64 %65, 1
  store i64 %66, i64* %7, align 8
  %67 = load i64, i64* %64, align 8
  %68 = icmp slt i64 %66, %67
  br i1 %68, label %for.index.body, label %for.index.done11

for.index.body:                                   ; preds = %for.index.loop
  %69 = load i64, i64* %7, align 8
  %70 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %63, i32 0, i32 0
  %71 = load %..string*, %..string** %70, align 8
  %72 = getelementptr %..string, %..string* %71, i64 %69
  %73 = load %..string, %..string* %72, align 8
  store i64 %69, i64* %8, align 8
  %74 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %75 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %74, i32 0, i32 0
  %76 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %77 = load %runtime.Allocator, %runtime.Allocator* %76, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 38, i32 39, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %9, align 8
  %78 = bitcast { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %78, i8 0, i64 48, i1 false)
  %79 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.make_dynamic_array-49024({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* sret({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }*) %10, %runtime.Allocator* %76, %runtime.Source_Code_Location* %9, i8* %79)
  %80 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %10, align 8
  %81 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %10, i32 0, i32 0
  %82 = load { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %81, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 38, i32 9, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %11, align 8
  %83 = bitcast %runtime.Context* %58 to i8*
  %84 = call i64 @runtime.append_elem-49037({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, { [64 x i8]*, i64, i64, %runtime.Allocator }* %81, %runtime.Source_Code_Location* %11, i8* %83)
  %85 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %86 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %85, i32 0, i32 1
  %87 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %88 = load %runtime.Allocator, %runtime.Allocator* %87, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 39, i32 51, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %12, align 8
  %89 = bitcast { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %89, i8 0, i64 48, i1 false)
  %90 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.make_dynamic_array-51202({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* sret({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }*) %13, %runtime.Allocator* %87, %runtime.Source_Code_Location* %12, i8* %90)
  %91 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %13, align 8
  %92 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %13, i32 0, i32 0
  %93 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %92, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 39, i32 9, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %14, align 8
  %94 = bitcast %runtime.Context* %58 to i8*
  %95 = call i64 @runtime.append_elem-51215({ { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %86, { [128 x i8]*, i64, i64, %runtime.Allocator }* %92, %runtime.Source_Code_Location* %14, i8* %94)
  %96 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %97 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %96, i32 0, i32 2
  %98 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %99 = load %runtime.Allocator, %runtime.Allocator* %98, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 40, i32 44, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %15, align 8
  %100 = bitcast { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %100, i8 0, i64 48, i1 false)
  %101 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.make_dynamic_array-51202({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* sret({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }*) %16, %runtime.Allocator* %98, %runtime.Source_Code_Location* %15, i8* %101)
  %102 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %16, align 8
  %103 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }, { { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* %16, i32 0, i32 0
  %104 = load { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %103, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 40, i32 3, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %17, align 8
  %105 = bitcast %runtime.Context* %58 to i8*
  %106 = call i64 @runtime.append_elem-51215({ { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %97, { [128 x i8]*, i64, i64, %runtime.Allocator }* %103, %runtime.Source_Code_Location* %17, i8* %105)
  %107 = bitcast %..string* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %107, i8 0, i64 16, i1 false)
  %108 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %109 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %108, i32 0, i32 0
  %110 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %109, i32 0, i32 1
  %111 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %110, align 8
  %112 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %110, i32 0, i32 0
  %113 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %112, align 8
  %114 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %110, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %19, align 8
  call void @runtime.bounds_check_error(%..string* %19, i32 42, i32 34, i64 %116, i64 %115)
  %117 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %113, i64 %116
  store { %..string*, i64, i64, %runtime.Allocator }* %117, { %..string*, i64, i64, %runtime.Allocator }** %20, align 8
  %118 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %20, align 8
  %119 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %118, i32 0, i32 1
  store i64 -1, i64* %21, align 8
  br label %for.index.loop1

for.index.loop1:                                  ; preds = %for.index.body2, %for.index.body
  %120 = load i64, i64* %21, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %21, align 8
  %122 = load i64, i64* %119, align 8
  %123 = icmp slt i64 %121, %122
  br i1 %123, label %for.index.body2, label %for.index.done

for.index.body2:                                  ; preds = %for.index.loop1
  %124 = load i64, i64* %21, align 8
  %125 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %118, i32 0, i32 0
  %126 = load %..string*, %..string** %125, align 8
  %127 = getelementptr %..string, %..string* %126, i64 %124
  %128 = load %..string, %..string* %127, align 8
  %129 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %130 = load %runtime.Allocator, %runtime.Allocator* %129, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 43, i32 28, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %23, align 8
  %131 = bitcast { [64 x i8]*, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %131, i8 0, i64 16, i1 false)
  %132 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.new-48863({ [64 x i8]*, i8 }* sret({ [64 x i8]*, i8 }*) %24, %runtime.Allocator* %129, %runtime.Source_Code_Location* %23, i8* %132)
  %133 = load { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %24, align 8
  %134 = getelementptr inbounds { [64 x i8]*, i8 }, { [64 x i8]*, i8 }* %24, i32 0, i32 0
  %135 = load [64 x i8]*, [64 x i8]** %134, align 8
  store [64 x i8]* %135, [64 x i8]** %22, align 8
  %136 = load [64 x i8]*, [64 x i8]** %22, align 8
  %137 = load [64 x i8], [64 x i8]* %136, align 1
  %138 = getelementptr [64 x i8], [64 x i8]* %136, i64 0, i64 0
  %139 = getelementptr i8, i8* %138, i64 0
  %140 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 0
  store i8* %139, i8** %140, align 8
  %141 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %25, i32 0, i32 1
  store i64 64, i64* %141, align 8
  %142 = load { i8*, i64 }, { i8*, i64 }* %25, align 8
  %143 = load %..string, %..string* %127, align 8
  %144 = call i64 @runtime.copy_from_string-49546({ i8*, i64 }* %25, %..string* %127)
  %145 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %146 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %145, i32 0, i32 0
  %147 = load { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %146, align 8
  %148 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %146, i32 0, i32 0
  %149 = load { [64 x i8]*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }** %148, align 8
  %150 = getelementptr inbounds { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %146, i32 0, i32 1
  %151 = load i64, i64* %150, align 8
  %152 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %26, align 8
  call void @runtime.bounds_check_error(%..string* %26, i32 45, i32 42, i64 %152, i64 %151)
  %153 = getelementptr { [64 x i8]*, i64, i64, %runtime.Allocator }, { [64 x i8]*, i64, i64, %runtime.Allocator }* %149, i64 %152
  %154 = load [64 x i8]*, [64 x i8]** %22, align 8
  %155 = load [64 x i8], [64 x i8]* %154, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 45, i32 13, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %27, align 8
  %156 = bitcast %runtime.Context* %58 to i8*
  %157 = call i64 @runtime.append_elem-48892({ [64 x i8]*, i64, i64, %runtime.Allocator }* %153, [64 x i8]* %154, %runtime.Source_Code_Location* %27, i8* %156)
  %158 = load %..string, %..string* %127, align 8
  %159 = getelementptr inbounds %..string, %..string* %127, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = load [64 x i8]*, [64 x i8]** %22, align 8
  %162 = load [64 x i8], [64 x i8]* %161, align 1
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %28, align 8
  call void @runtime.slice_expr_error_hi(%..string* %28, i32 46, i32 40, i64 %160, i64 64)
  %163 = getelementptr [64 x i8], [64 x i8]* %161, i64 0, i64 0
  %164 = getelementptr i8, i8* %163, i64 0
  %165 = sub i64 %160, 0
  %166 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 0
  store i8* %164, i8** %166, align 8
  %167 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %29, i32 0, i32 1
  store i64 %165, i64* %167, align 8
  %168 = load { i8*, i64 }, { i8*, i64 }* %29, align 8
  %169 = bitcast { i8*, i64 }* %29 to %..string*
  %170 = load %..string, %..string* %169, align 8
  store %..string %170, %..string* %127, align 8
  br label %for.index.loop1

for.index.done:                                   ; preds = %for.index.loop1
  %171 = bitcast %..string* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %171, i8 0, i64 16, i1 false)
  %172 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %173 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %172, i32 0, i32 1
  %174 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %173, i32 0, i32 1
  %175 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, align 8
  %176 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 0
  %177 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %176, align 8
  %178 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 1
  %179 = load i64, i64* %178, align 8
  %180 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %31, align 8
  call void @runtime.bounds_check_error(%..string* %31, i32 48, i32 55, i64 %180, i64 %179)
  %181 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %177, i64 %180
  store { %..string*, i64, i64, %runtime.Allocator }* %181, { %..string*, i64, i64, %runtime.Allocator }** %32, align 8
  %182 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %32, align 8
  %183 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %182, i32 0, i32 1
  store i64 -1, i64* %33, align 8
  br label %for.index.loop3

for.index.loop3:                                  ; preds = %if.done, %for.index.done
  %184 = load i64, i64* %33, align 8
  %185 = add i64 %184, 1
  store i64 %185, i64* %33, align 8
  %186 = load i64, i64* %183, align 8
  %187 = icmp slt i64 %185, %186
  br i1 %187, label %for.index.body4, label %for.index.done5

for.index.body4:                                  ; preds = %for.index.loop3
  %188 = load i64, i64* %33, align 8
  %189 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %182, i32 0, i32 0
  %190 = load %..string*, %..string** %189, align 8
  %191 = getelementptr %..string, %..string* %190, i64 %188
  %192 = load %..string, %..string* %191, align 8
  %193 = load %..string, %..string* %191, align 8
  %194 = getelementptr inbounds %..string, %..string* %191, i32 0, i32 1
  %195 = load i64, i64* %194, align 8
  %196 = icmp sgt i64 %195, 127
  %197 = zext i1 %196 to i8
  %198 = trunc i8 %197 to i1
  br i1 %198, label %if.then, label %if.done

if.then:                                          ; preds = %for.index.body4
  %199 = bitcast { %..any*, i64 }* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* %199, i8 0, i64 16, i1 false)
  %200 = load { %..any*, i64 }, { %..any*, i64 }* %34, align 8
  store %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$2ba", i64 0, i64 0), i64 55 }, %..string* %35, align 8
  %201 = bitcast %runtime.Context* %58 to i8*
  %202 = call i64 @fmt.printf(%..string* %35, { %..any*, i64 }* %34, i8* %201)
  br label %if.done

if.done:                                          ; preds = %if.then, %for.index.body4
  %203 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %204 = load %runtime.Allocator, %runtime.Allocator* %203, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 53, i32 28, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %37, align 8
  %205 = bitcast { [128 x i8]*, i8 }* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* %205, i8 0, i64 16, i1 false)
  %206 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.new-51356({ [128 x i8]*, i8 }* sret({ [128 x i8]*, i8 }*) %38, %runtime.Allocator* %203, %runtime.Source_Code_Location* %37, i8* %206)
  %207 = load { [128 x i8]*, i8 }, { [128 x i8]*, i8 }* %38, align 8
  %208 = getelementptr inbounds { [128 x i8]*, i8 }, { [128 x i8]*, i8 }* %38, i32 0, i32 0
  %209 = load [128 x i8]*, [128 x i8]** %208, align 8
  store [128 x i8]* %209, [128 x i8]** %36, align 8
  %210 = load [128 x i8]*, [128 x i8]** %36, align 8
  %211 = load [128 x i8], [128 x i8]* %210, align 1
  %212 = getelementptr [128 x i8], [128 x i8]* %210, i64 0, i64 0
  %213 = getelementptr i8, i8* %212, i64 0
  %214 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 0
  store i8* %213, i8** %214, align 8
  %215 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %39, i32 0, i32 1
  store i64 128, i64* %215, align 8
  %216 = load { i8*, i64 }, { i8*, i64 }* %39, align 8
  %217 = load %..string, %..string* %191, align 8
  %218 = call i64 @runtime.copy_from_string-49546({ i8*, i64 }* %39, %..string* %191)
  %219 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %220 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %219, i32 0, i32 1
  %221 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %220, align 8
  %222 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %220, i32 0, i32 0
  %223 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %222, align 8
  %224 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %220, i32 0, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %40, align 8
  call void @runtime.bounds_check_error(%..string* %40, i32 55, i32 54, i64 %226, i64 %225)
  %227 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %223, i64 %226
  %228 = load [128 x i8]*, [128 x i8]** %36, align 8
  %229 = load [128 x i8], [128 x i8]* %228, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 55, i32 13, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %41, align 8
  %230 = bitcast %runtime.Context* %58 to i8*
  %231 = call i64 @runtime.append_elem-51386({ [128 x i8]*, i64, i64, %runtime.Allocator }* %227, [128 x i8]* %228, %runtime.Source_Code_Location* %41, i8* %230)
  %232 = load %..string, %..string* %191, align 8
  %233 = getelementptr inbounds %..string, %..string* %191, i32 0, i32 1
  %234 = load i64, i64* %233, align 8
  %235 = load [128 x i8]*, [128 x i8]** %36, align 8
  %236 = load [128 x i8], [128 x i8]* %235, align 1
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %42, align 8
  call void @runtime.slice_expr_error_hi(%..string* %42, i32 56, i32 40, i64 %234, i64 128)
  %237 = getelementptr [128 x i8], [128 x i8]* %235, i64 0, i64 0
  %238 = getelementptr i8, i8* %237, i64 0
  %239 = sub i64 %234, 0
  %240 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 0
  store i8* %238, i8** %240, align 8
  %241 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %43, i32 0, i32 1
  store i64 %239, i64* %241, align 8
  %242 = load { i8*, i64 }, { i8*, i64 }* %43, align 8
  %243 = bitcast { i8*, i64 }* %43 to %..string*
  %244 = load %..string, %..string* %243, align 8
  store %..string %244, %..string* %191, align 8
  br label %for.index.loop3

for.index.done5:                                  ; preds = %for.index.loop3
  %245 = bitcast %..string* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* %245, i8 0, i64 16, i1 false)
  %246 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %247 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %246, i32 0, i32 1
  %248 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %247, i32 0, i32 2
  %249 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %248, align 8
  %250 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %248, i32 0, i32 0
  %251 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %250, align 8
  %252 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %248, i32 0, i32 1
  %253 = load i64, i64* %252, align 8
  %254 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %45, align 8
  call void @runtime.bounds_check_error(%..string* %45, i32 59, i32 48, i64 %254, i64 %253)
  %255 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %251, i64 %254
  store { %..string*, i64, i64, %runtime.Allocator }* %255, { %..string*, i64, i64, %runtime.Allocator }** %46, align 8
  %256 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %46, align 8
  %257 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %256, i32 0, i32 1
  store i64 -1, i64* %47, align 8
  br label %for.index.loop6

for.index.loop6:                                  ; preds = %if.done9, %for.index.done5
  %258 = load i64, i64* %47, align 8
  %259 = add i64 %258, 1
  store i64 %259, i64* %47, align 8
  %260 = load i64, i64* %257, align 8
  %261 = icmp slt i64 %259, %260
  br i1 %261, label %for.index.body7, label %for.index.done10

for.index.body7:                                  ; preds = %for.index.loop6
  %262 = load i64, i64* %47, align 8
  %263 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %256, i32 0, i32 0
  %264 = load %..string*, %..string** %263, align 8
  %265 = getelementptr %..string, %..string* %264, i64 %262
  %266 = load %..string, %..string* %265, align 8
  %267 = load %..string, %..string* %265, align 8
  %268 = getelementptr inbounds %..string, %..string* %265, i32 0, i32 1
  %269 = load i64, i64* %268, align 8
  %270 = icmp sgt i64 %269, 127
  %271 = zext i1 %270 to i8
  %272 = trunc i8 %271 to i1
  br i1 %272, label %if.then8, label %if.done9

if.then8:                                         ; preds = %for.index.body7
  %273 = bitcast { %..any*, i64 }* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* %273, i8 0, i64 16, i1 false)
  %274 = load { %..any*, i64 }, { %..any*, i64 }* %48, align 8
  store %..string { i8* getelementptr inbounds ([56 x i8], [56 x i8]* @"csbs$2ba", i64 0, i64 0), i64 55 }, %..string* %49, align 8
  %275 = bitcast %runtime.Context* %58 to i8*
  %276 = call i64 @fmt.printf(%..string* %49, { %..any*, i64 }* %48, i8* %275)
  br label %if.done9

if.done9:                                         ; preds = %if.then8, %for.index.body7
  %277 = getelementptr inbounds %runtime.Context, %runtime.Context* %58, i32 0, i32 0
  %278 = load %runtime.Allocator, %runtime.Allocator* %277, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 64, i32 28, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %51, align 8
  %279 = bitcast { [128 x i8]*, i8 }* %52 to i8*
  call void @llvm.memset.p0i8.i64(i8* %279, i8 0, i64 16, i1 false)
  %280 = bitcast %runtime.Context* %58 to i8*
  call void @runtime.new-51356({ [128 x i8]*, i8 }* sret({ [128 x i8]*, i8 }*) %52, %runtime.Allocator* %277, %runtime.Source_Code_Location* %51, i8* %280)
  %281 = load { [128 x i8]*, i8 }, { [128 x i8]*, i8 }* %52, align 8
  %282 = getelementptr inbounds { [128 x i8]*, i8 }, { [128 x i8]*, i8 }* %52, i32 0, i32 0
  %283 = load [128 x i8]*, [128 x i8]** %282, align 8
  store [128 x i8]* %283, [128 x i8]** %50, align 8
  %284 = load [128 x i8]*, [128 x i8]** %50, align 8
  %285 = load [128 x i8], [128 x i8]* %284, align 1
  %286 = getelementptr [128 x i8], [128 x i8]* %284, i64 0, i64 0
  %287 = getelementptr i8, i8* %286, i64 0
  %288 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 0
  store i8* %287, i8** %288, align 8
  %289 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %53, i32 0, i32 1
  store i64 128, i64* %289, align 8
  %290 = load { i8*, i64 }, { i8*, i64 }* %53, align 8
  %291 = load %..string, %..string* %265, align 8
  %292 = call i64 @runtime.copy_from_string-49546({ i8*, i64 }* %53, %..string* %265)
  %293 = load %enbench.Backings*, %enbench.Backings** %2, align 8
  %294 = getelementptr inbounds %enbench.Backings, %enbench.Backings* %293, i32 0, i32 2
  %295 = load { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %294, align 8
  %296 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %294, i32 0, i32 0
  %297 = load { [128 x i8]*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }** %296, align 8
  %298 = getelementptr inbounds { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %294, i32 0, i32 1
  %299 = load i64, i64* %298, align 8
  %300 = load i64, i64* %8, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %54, align 8
  call void @runtime.bounds_check_error(%..string* %54, i32 66, i32 53, i64 %300, i64 %299)
  %301 = getelementptr { [128 x i8]*, i64, i64, %runtime.Allocator }, { [128 x i8]*, i64, i64, %runtime.Allocator }* %297, i64 %300
  %302 = load [128 x i8]*, [128 x i8]** %50, align 8
  %303 = load [128 x i8], [128 x i8]* %302, align 1
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 66, i32 13, %..string { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"csbs$2b9", i64 0, i64 0), i64 16 } }, %runtime.Source_Code_Location* %55, align 8
  %304 = bitcast %runtime.Context* %58 to i8*
  %305 = call i64 @runtime.append_elem-51386({ [128 x i8]*, i64, i64, %runtime.Allocator }* %301, [128 x i8]* %302, %runtime.Source_Code_Location* %55, i8* %304)
  %306 = load %..string, %..string* %265, align 8
  %307 = getelementptr inbounds %..string, %..string* %265, i32 0, i32 1
  %308 = load i64, i64* %307, align 8
  %309 = load [128 x i8]*, [128 x i8]** %50, align 8
  %310 = load [128 x i8], [128 x i8]* %309, align 1
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %56, align 8
  call void @runtime.slice_expr_error_hi(%..string* %56, i32 67, i32 40, i64 %308, i64 128)
  %311 = getelementptr [128 x i8], [128 x i8]* %309, i64 0, i64 0
  %312 = getelementptr i8, i8* %311, i64 0
  %313 = sub i64 %308, 0
  %314 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 0
  store i8* %312, i8** %314, align 8
  %315 = getelementptr inbounds { i8*, i64 }, { i8*, i64 }* %57, i32 0, i32 1
  store i64 %313, i64* %315, align 8
  %316 = load { i8*, i64 }, { i8*, i64 }* %57, align 8
  %317 = bitcast { i8*, i64 }* %57 to %..string*
  %318 = load %..string, %..string* %317, align 8
  store %..string %318, %..string* %265, align 8
  br label %for.index.loop6

for.index.done10:                                 ; preds = %for.index.loop6
  br label %for.index.loop

for.index.done11:                                 ; preds = %for.index.loop
  ret void
}

define internal void @enbench.init_case_relations(%enbench.DataToWrite* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %enbench.DataToWrite*, align 8
  %2 = alloca %runtime.Source_Code_Location, align 8
  %3 = alloca { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca { i64*, i64, i64, %runtime.Allocator }, align 8
  %8 = alloca %runtime.Source_Code_Location, align 8
  %9 = alloca { { i64*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %..string, align 8
  %13 = alloca i64, align 8
  %14 = alloca %runtime.Source_Code_Location, align 8
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %17 = alloca %runtime.Source_Code_Location, align 8
  %18 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca %..string, align 8
  %22 = alloca i64, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %runtime.Source_Code_Location, align 8
  %25 = alloca %runtime.Source_Code_Location, align 8
  %26 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %27 = alloca %runtime.Source_Code_Location, align 8
  %28 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca %..string, align 8
  %32 = alloca i64, align 8
  %33 = alloca %..string, align 8
  %34 = alloca %runtime.Source_Code_Location, align 8
  %35 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %1, align 8
  %36 = bitcast i8* %__.context_ptr to %runtime.Context*
  %37 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %38 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %37, i32 0, i32 1
  %39 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %38, i32 0, i32 0
  %40 = getelementptr inbounds %runtime.Context, %runtime.Context* %36, i32 0, i32 0
  %41 = load %runtime.Allocator, %runtime.Allocator* %40, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 73, i32 33, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %2, align 8
  %42 = bitcast { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %42, i8 0, i64 48, i1 false)
  %43 = bitcast %runtime.Context* %36 to i8*
  call void @runtime.make_dynamic_array-51490({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* sret({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }*) %3, %runtime.Allocator* %40, %runtime.Source_Code_Location* %2, i8* %43)
  %44 = load { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %3, align 8
  %45 = getelementptr inbounds { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %3, i32 0, i32 0
  %46 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %45, align 8
  store { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } %46, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %39, align 8
  store i64 0, i64* %4, align 8
  %47 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %48 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %47, i32 0, i32 0
  %49 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %48, i32 0, i32 0
  %50 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %49, i32 0, i32 1
  store i64 -1, i64* %5, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.interval.done8, %entry
  %51 = load i64, i64* %5, align 8
  %52 = add i64 %51, 1
  store i64 %52, i64* %5, align 8
  %53 = load i64, i64* %50, align 8
  %54 = icmp slt i64 %52, %53
  br i1 %54, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %55 = load i64, i64* %5, align 8
  store i64 %55, i64* %6, align 8
  %56 = getelementptr inbounds %runtime.Context, %runtime.Context* %36, i32 0, i32 0
  %57 = load %runtime.Allocator, %runtime.Allocator* %56, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 75, i32 21, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %8, align 8
  %58 = bitcast { { i64*, i64, i64, %runtime.Allocator }, i8 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %58, i8 0, i64 48, i1 false)
  %59 = bitcast %runtime.Context* %36 to i8*
  call void @runtime.make_dynamic_array-51521({ { i64*, i64, i64, %runtime.Allocator }, i8 }* sret({ { i64*, i64, i64, %runtime.Allocator }, i8 }*) %9, %runtime.Allocator* %56, %runtime.Source_Code_Location* %8, i8* %59)
  %60 = load { { i64*, i64, i64, %runtime.Allocator }, i8 }, { { i64*, i64, i64, %runtime.Allocator }, i8 }* %9, align 8
  %61 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }, i8 }, { { i64*, i64, i64, %runtime.Allocator }, i8 }* %9, i32 0, i32 0
  %62 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %61, align 8
  store { i64*, i64, i64, %runtime.Allocator } %62, { i64*, i64, i64, %runtime.Allocator }* %7, align 8
  store i64 0, i64* %10, align 8
  store i64 0, i64* %11, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %for.index.body
  %63 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %64 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %63, i32 0, i32 0
  %65 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %64, i32 0, i32 1
  %66 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %65, align 8
  %67 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %65, i32 0, i32 0
  %68 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %67, align 8
  %69 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %65, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = load i64, i64* %6, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %12, align 8
  call void @runtime.bounds_check_error(%..string* %12, i32 76, i32 38, i64 %71, i64 %70)
  %72 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %68, i64 %71
  %73 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %72, align 8
  %74 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %72, i32 0, i32 1
  %75 = load i64, i64* %74, align 8
  %76 = load i64, i64* %10, align 8
  %77 = icmp slt i64 %76, %75
  br i1 %77, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %78 = load i64, i64* %10, align 8
  %79 = load i64, i64* %11, align 8
  store i64 %78, i64* %13, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 76, i32 47, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %14, align 8
  %80 = bitcast %runtime.Context* %36 to i8*
  %81 = call i64 @runtime.append_elem-48958({ i64*, i64, i64, %runtime.Allocator }* %7, i64 -1, %runtime.Source_Code_Location* %14, i8* %80)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %82 = load i64, i64* %10, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %10, align 8
  %84 = load i64, i64* %11, align 8
  %85 = add i64 %84, 1
  store i64 %85, i64* %11, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  %86 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %87 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %86, i32 0, i32 1
  %88 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %87, i32 0, i32 0
  %89 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %7, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 77, i32 3, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %15, align 8
  %90 = bitcast %runtime.Context* %36 to i8*
  %91 = call i64 @runtime.append_elem-51566({ { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %88, { i64*, i64, i64, %runtime.Allocator }* %7, %runtime.Source_Code_Location* %15, i8* %90)
  %92 = getelementptr inbounds %runtime.Context, %runtime.Context* %36, i32 0, i32 0
  %93 = load %runtime.Allocator, %runtime.Allocator* %92, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 79, i32 27, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %17, align 8
  %94 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %94, i8 0, i64 48, i1 false)
  %95 = bitcast %runtime.Context* %36 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %18, %runtime.Allocator* %92, %runtime.Source_Code_Location* %17, i8* %95)
  %96 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18, align 8
  %97 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18, i32 0, i32 0
  %98 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %97, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %98, { %..string*, i64, i64, %runtime.Allocator }* %16, align 8
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  br label %for.interval.loop1

for.interval.loop1:                               ; preds = %for.interval.post3, %for.interval.done
  %99 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %100 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %99, i32 0, i32 0
  %101 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %100, i32 0, i32 1
  %102 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %101, align 8
  %103 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %101, i32 0, i32 0
  %104 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %103, align 8
  %105 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %101, i32 0, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = load i64, i64* %6, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %21, align 8
  call void @runtime.bounds_check_error(%..string* %21, i32 80, i32 38, i64 %107, i64 %106)
  %108 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %104, i64 %107
  %109 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %108, align 8
  %110 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %108, i32 0, i32 1
  %111 = load i64, i64* %110, align 8
  %112 = load i64, i64* %19, align 8
  %113 = icmp slt i64 %112, %111
  br i1 %113, label %for.interval.body2, label %for.interval.done4

for.interval.body2:                               ; preds = %for.interval.loop1
  %114 = load i64, i64* %19, align 8
  %115 = load i64, i64* %20, align 8
  store i64 %114, i64* %22, align 8
  store %..string zeroinitializer, %..string* %23, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 80, i32 47, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %24, align 8
  %116 = bitcast %runtime.Context* %36 to i8*
  %117 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %16, %..string* %23, %runtime.Source_Code_Location* %24, i8* %116)
  br label %for.interval.post3

for.interval.post3:                               ; preds = %for.interval.body2
  %118 = load i64, i64* %19, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %19, align 8
  %120 = load i64, i64* %20, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %20, align 8
  br label %for.interval.loop1

for.interval.done4:                               ; preds = %for.interval.loop1
  %122 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %123 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %122, i32 0, i32 1
  %124 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %123, i32 0, i32 1
  %125 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %16, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 81, i32 3, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %25, align 8
  %126 = bitcast %runtime.Context* %36 to i8*
  %127 = call i64 @runtime.append_elem-51660({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %124, { %..string*, i64, i64, %runtime.Allocator }* %16, %runtime.Source_Code_Location* %25, i8* %126)
  %128 = getelementptr inbounds %runtime.Context, %runtime.Context* %36, i32 0, i32 0
  %129 = load %runtime.Allocator, %runtime.Allocator* %128, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 83, i32 25, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %27, align 8
  %130 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* %130, i8 0, i64 48, i1 false)
  %131 = bitcast %runtime.Context* %36 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %28, %runtime.Allocator* %128, %runtime.Source_Code_Location* %27, i8* %131)
  %132 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %28, align 8
  %133 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %28, i32 0, i32 0
  %134 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %133, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %134, { %..string*, i64, i64, %runtime.Allocator }* %26, align 8
  store i64 0, i64* %29, align 8
  store i64 0, i64* %30, align 8
  br label %for.interval.loop5

for.interval.loop5:                               ; preds = %for.interval.post7, %for.interval.done4
  %135 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %136 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %135, i32 0, i32 0
  %137 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %136, i32 0, i32 1
  %138 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %137, align 8
  %139 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %137, i32 0, i32 0
  %140 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %139, align 8
  %141 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %137, i32 0, i32 1
  %142 = load i64, i64* %141, align 8
  %143 = load i64, i64* %6, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %31, align 8
  call void @runtime.bounds_check_error(%..string* %31, i32 84, i32 38, i64 %143, i64 %142)
  %144 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %140, i64 %143
  %145 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %144, align 8
  %146 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %144, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = load i64, i64* %29, align 8
  %149 = icmp slt i64 %148, %147
  br i1 %149, label %for.interval.body6, label %for.interval.done8

for.interval.body6:                               ; preds = %for.interval.loop5
  %150 = load i64, i64* %29, align 8
  %151 = load i64, i64* %30, align 8
  store i64 %150, i64* %32, align 8
  store %..string zeroinitializer, %..string* %33, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 84, i32 47, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %34, align 8
  %152 = bitcast %runtime.Context* %36 to i8*
  %153 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %26, %..string* %33, %runtime.Source_Code_Location* %34, i8* %152)
  br label %for.interval.post7

for.interval.post7:                               ; preds = %for.interval.body6
  %154 = load i64, i64* %29, align 8
  %155 = add i64 %154, 1
  store i64 %155, i64* %29, align 8
  %156 = load i64, i64* %30, align 8
  %157 = add i64 %156, 1
  store i64 %157, i64* %30, align 8
  br label %for.interval.loop5

for.interval.done8:                               ; preds = %for.interval.loop5
  %158 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %159 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %158, i32 0, i32 1
  %160 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %159, i32 0, i32 2
  %161 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %26, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 85, i32 3, %..string { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"csbs$2bb", i64 0, i64 0), i64 19 } }, %runtime.Source_Code_Location* %35, align 8
  %162 = bitcast %runtime.Context* %36 to i8*
  %163 = call i64 @runtime.append_elem-51660({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %160, { %..string*, i64, i64, %runtime.Allocator }* %26, %runtime.Source_Code_Location* %35, i8* %162)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  ret void
}

define internal void @enbench.init_dtw(%enbench.DataToWrite* %0, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %1 = alloca %enbench.DataToWrite*, align 8
  %2 = alloca %runtime.Source_Code_Location, align 8
  %3 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  %5 = alloca { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %1, align 8
  %6 = bitcast i8* %__.context_ptr to %runtime.Context*
  %7 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %8 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %7, i32 0, i32 0
  %9 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %8, i32 0, i32 0
  %10 = getelementptr inbounds %runtime.Context, %runtime.Context* %6, i32 0, i32 0
  %11 = load %runtime.Allocator, %runtime.Allocator* %10, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 95, i32 18, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bc", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %2, align 8
  %12 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 48, i1 false)
  %13 = bitcast %runtime.Context* %6 to i8*
  call void @runtime.make_dynamic_array-51793({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %3, %runtime.Allocator* %10, %runtime.Source_Code_Location* %2, i8* %13)
  %14 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %3, align 8
  %15 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %3, i32 0, i32 0
  %16 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %15, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %16, { %..string*, i64, i64, %runtime.Allocator }* %9, align 8
  %17 = load %enbench.DataToWrite*, %enbench.DataToWrite** %1, align 8
  %18 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %17, i32 0, i32 0
  %19 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %18, i32 0, i32 1
  %20 = getelementptr inbounds %runtime.Context, %runtime.Context* %6, i32 0, i32 0
  %21 = load %runtime.Allocator, %runtime.Allocator* %20, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 96, i32 19, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bc", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %4, align 8
  %22 = bitcast { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %22, i8 0, i64 48, i1 false)
  %23 = bitcast %runtime.Context* %6 to i8*
  call void @runtime.make_dynamic_array-51821({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* sret({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }*) %5, %runtime.Allocator* %20, %runtime.Source_Code_Location* %4, i8* %23)
  %24 = load { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5, align 8
  %25 = getelementptr inbounds { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }, { { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* %5, i32 0, i32 0
  %26 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %25, align 8
  store { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator } %26, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %19, align 8
  ret void
}

define internal void @enbench.add_enum(%enbench.DataToWrite* %0, %..string* %1, { %..string*, i64 }* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %enbench.DataToWrite*, align 8
  %4 = alloca %runtime.Source_Code_Location, align 8
  %5 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %8 = alloca %..string, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %..string, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %3, align 8
  %14 = bitcast i8* %__.context_ptr to %runtime.Context*
  %15 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %16 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %15, i32 0, i32 0
  %17 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %16, i32 0, i32 0
  %18 = load %..string, %..string* %1, align 8
  %19 = load %..string, %..string* %1, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 100, i32 2, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bd", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %4, align 8
  %20 = bitcast %runtime.Context* %14 to i8*
  %21 = call i64 @runtime.append_elem-51834({ %..string*, i64, i64, %runtime.Allocator }* %17, %..string* %1, %runtime.Source_Code_Location* %4, i8* %20)
  %22 = getelementptr inbounds %runtime.Context, %runtime.Context* %14, i32 0, i32 0
  %23 = load %runtime.Allocator, %runtime.Allocator* %22, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 101, i32 20, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bd", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %6, align 8
  %24 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %24, i8 0, i64 48, i1 false)
  %25 = bitcast %runtime.Context* %14 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %7, %runtime.Allocator* %22, %runtime.Source_Code_Location* %6, i8* %25)
  %26 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7, align 8
  %27 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7, i32 0, i32 0
  %28 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %27, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %28, { %..string*, i64, i64, %runtime.Allocator }* %5, align 8
  %29 = bitcast %..string* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %29, i8 0, i64 16, i1 false)
  %30 = load { %..string*, i64 }, { %..string*, i64 }* %2, align 8
  %31 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %2, i32 0, i32 1
  %32 = load i64, i64* %31, align 8
  store i64 %32, i64* %9, align 8
  store i64 -1, i64* %10, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %entry
  %33 = load i64, i64* %10, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %10, align 8
  %35 = load i64, i64* %9, align 8
  %36 = icmp slt i64 %34, %35
  br i1 %36, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %37 = load i64, i64* %10, align 8
  %38 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %2, i32 0, i32 0
  %39 = load %..string*, %..string** %38, align 8
  %40 = getelementptr %..string, %..string* %39, i64 %37
  %41 = load %..string, %..string* %40, align 8
  store %..string %41, %..string* %11, align 8
  %42 = load %..string, %..string* %11, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 103, i32 3, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bd", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %12, align 8
  %43 = bitcast %runtime.Context* %14 to i8*
  %44 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %11, %runtime.Source_Code_Location* %12, i8* %43)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %45 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %46 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %45, i32 0, i32 0
  %47 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %46, i32 0, i32 1
  %48 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %5, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 105, i32 2, %..string { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"csbs$2bd", i64 0, i64 0), i64 8 } }, %runtime.Source_Code_Location* %13, align 8
  %49 = bitcast %runtime.Context* %14 to i8*
  %50 = call i64 @runtime.append_elem-51660({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %47, { %..string*, i64, i64, %runtime.Allocator }* %5, %runtime.Source_Code_Location* %13, i8* %49)
  ret void
}

define internal void @enbench.ODINSOURCE_make_enum(%..string* noalias sret(%..string) %agg.result, %enbench.ENUM* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca i64, align 8
  %3 = alloca %..string, align 8
  %4 = alloca { %..string*, i64 }, align 8
  %5 = alloca [5 x %..string], align 16
  %6 = alloca { %..string*, i64 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { %..string*, i64 }, align 8
  %9 = alloca [3 x %..string], align 16
  %10 = alloca { %..string*, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { %..string*, i64 }, align 8
  %13 = alloca %..string, align 8
  %14 = alloca %..string, align 8
  %15 = alloca %..string, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { %..string*, i64 }, align 8
  %19 = alloca [3 x %..string], align 16
  %20 = alloca { %..string*, i64 }, align 8
  %21 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %1, i64* %2, align 8
  %22 = bitcast i8* %__.context_ptr to %runtime.Context*
  %23 = bitcast { %..string*, i64 }* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 16, i1 false)
  store [5 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2be", i64 0, i64 0), i64 2 }, %..string { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @"csbs$2bf", i64 0, i64 0), i64 4 }, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c0", i64 0, i64 0), i64 2 }, %..string zeroinitializer], [5 x %..string]* %5, align 8
  %24 = getelementptr inbounds [5 x %..string], [5 x %..string]* %5, i64 0, i64 0
  %25 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %6, i32 0, i32 0
  store %..string* %24, %..string** %25, align 8
  %26 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %6, i32 0, i32 1
  store i64 5, i64* %26, align 8
  %27 = load { %..string*, i64 }, { %..string*, i64 }* %6, align 8
  %28 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %6, i32 0, i32 0
  %29 = load %..string*, %..string** %28, align 8
  %30 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %0, i32 0, i32 0
  %31 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %30, align 8
  %32 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %30, i32 0, i32 0
  %33 = load %..string*, %..string** %32, align 8
  %34 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %30, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* %2, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 114, i32 41, i64 %36, i64 %35)
  %37 = getelementptr %..string, %..string* %33, i64 %36
  %38 = load %..string, %..string* %37, align 8
  %39 = load %..string, %..string* %37, align 8
  %40 = bitcast { %..string*, i64 }* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 16, i1 false)
  store [3 x %..string] [%..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c1", i64 0, i64 0), i64 1 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c2", i64 0, i64 0), i64 1 }], [3 x %..string]* %9, align 8
  %41 = getelementptr inbounds [3 x %..string], [3 x %..string]* %9, i64 0, i64 0
  %42 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %10, i32 0, i32 0
  store %..string* %41, %..string** %42, align 8
  %43 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %10, i32 0, i32 1
  store i64 3, i64* %43, align 8
  %44 = load { %..string*, i64 }, { %..string*, i64 }* %10, align 8
  %45 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %10, i32 0, i32 0
  %46 = load %..string*, %..string** %45, align 8
  %47 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %0, i32 0, i32 1
  %48 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %47, align 8
  %49 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %47, i32 0, i32 0
  %50 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %49, align 8
  %51 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %47, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = load i64, i64* %2, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %11, align 8
  call void @runtime.bounds_check_error(%..string* %11, i32 114, i32 114, i64 %53, i64 %52)
  %54 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %50, i64 %53
  %55 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %54, align 8
  %56 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %54, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %54, i32 0, i32 0
  %59 = load %..string*, %..string** %58, align 8
  %60 = getelementptr %..string, %..string* %59, i64 0
  %61 = sub i64 %57, 0
  %62 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 0
  store %..string* %60, %..string** %62, align 8
  %63 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 1
  store i64 %61, i64* %63, align 8
  %64 = load { %..string*, i64 }, { %..string*, i64 }* %12, align 8
  %65 = getelementptr inbounds %runtime.Context, %runtime.Context* %22, i32 0, i32 0
  %66 = load %runtime.Allocator, %runtime.Allocator* %65, align 8
  store %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c3", i64 0, i64 0), i64 3 }, %..string* %13, align 8
  %67 = bitcast %..string* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 16, i1 false)
  %68 = bitcast %runtime.Context* %22 to i8*
  call void @strings.join(%..string* sret(%..string*) %14, { %..string*, i64 }* %12, %..string* %13, %runtime.Allocator* %65, i8* %68)
  %69 = load %..string, %..string* %14, align 8
  %70 = getelementptr %..string, %..string* %46, i64 1
  store %..string %69, %..string* %70, align 8
  %71 = extractvalue { %..string*, i64 } %44, 1
  %72 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 0
  store %..string* %46, %..string** %72, align 8
  %73 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 1
  store i64 %71, i64* %73, align 8
  %74 = load { %..string*, i64 }, { %..string*, i64 }* %8, align 8
  %75 = getelementptr inbounds %runtime.Context, %runtime.Context* %22, i32 0, i32 0
  %76 = load %runtime.Allocator, %runtime.Allocator* %75, align 8
  %77 = bitcast %..string* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 16, i1 false)
  %78 = bitcast %runtime.Context* %22 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %15, { %..string*, i64 }* %8, %runtime.Allocator* %75, i8* %78)
  %79 = load %..string, %..string* %15, align 8
  %80 = getelementptr %..string, %..string* %29, i64 0
  %81 = getelementptr %..string, %..string* %29, i64 4
  store %..string %39, %..string* %80, align 8
  store %..string %79, %..string* %81, align 8
  %82 = extractvalue { %..string*, i64 } %27, 1
  %83 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %4, i32 0, i32 0
  store %..string* %29, %..string** %83, align 8
  %84 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %4, i32 0, i32 1
  store i64 %82, i64* %84, align 8
  %85 = load { %..string*, i64 }, { %..string*, i64 }* %4, align 8
  %86 = getelementptr inbounds %runtime.Context, %runtime.Context* %22, i32 0, i32 0
  %87 = load %runtime.Allocator, %runtime.Allocator* %86, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$221", i64 0, i64 0), i64 1 }, %..string* %16, align 8
  %88 = bitcast %..string* %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* %88, i8 0, i64 16, i1 false)
  %89 = bitcast %runtime.Context* %22 to i8*
  call void @strings.join(%..string* sret(%..string*) %17, { %..string*, i64 }* %4, %..string* %16, %runtime.Allocator* %86, i8* %89)
  %90 = load %..string, %..string* %17, align 8
  store %..string %90, %..string* %3, align 8
  %91 = bitcast { %..string*, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %91, i8 0, i64 16, i1 false)
  store [3 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c4", i64 0, i64 0), i64 3 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }], [3 x %..string]* %19, align 8
  %92 = getelementptr inbounds [3 x %..string], [3 x %..string]* %19, i64 0, i64 0
  %93 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  store %..string* %92, %..string** %93, align 8
  %94 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 1
  store i64 3, i64* %94, align 8
  %95 = load { %..string*, i64 }, { %..string*, i64 }* %20, align 8
  %96 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  %97 = load %..string*, %..string** %96, align 8
  %98 = load %..string, %..string* %3, align 8
  %99 = getelementptr %..string, %..string* %97, i64 0
  store %..string %98, %..string* %99, align 8
  %100 = extractvalue { %..string*, i64 } %95, 1
  %101 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 0
  store %..string* %97, %..string** %101, align 8
  %102 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 1
  store i64 %100, i64* %102, align 8
  %103 = load { %..string*, i64 }, { %..string*, i64 }* %18, align 8
  %104 = getelementptr inbounds %runtime.Context, %runtime.Context* %22, i32 0, i32 0
  %105 = load %runtime.Allocator, %runtime.Allocator* %104, align 8
  %106 = bitcast %..string* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %106, i8 0, i64 16, i1 false)
  %107 = bitcast %runtime.Context* %22 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %21, { %..string*, i64 }* %18, %runtime.Allocator* %104, i8* %107)
  %108 = load %..string, %..string* %21, align 8
  %109 = bitcast %..string* %agg.result to i8*
  %110 = bitcast %..string* %21 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %109, i8* %110, i64 16, i1 false)
  ret void
}

define internal void @enbench.ODINSOURCE_make_e2e_relation(%..string* noalias sret(%..string) %agg.result, i64 %0, %enbench.ENUM* %1, %enbench.ENUM_CASE_RELATIONS* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { i64*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %..string, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { i64*, i64 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { %..string*, i64 }, align 8
  %13 = alloca [6 x %..string], align 16
  %14 = alloca { %..string*, i64 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %17 = alloca %runtime.Source_Code_Location, align 8
  %18 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca %..string, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca %..string, align 8
  %26 = alloca %..string, align 8
  %27 = alloca %..string, align 8
  %28 = alloca %..any, align 8
  %29 = alloca %..any, align 8
  %30 = alloca { %..any*, i64 }, align 8
  %31 = alloca [2 x %..any], align 8
  %32 = alloca %..string, align 8
  %33 = alloca %..string, align 8
  %34 = alloca %runtime.Source_Code_Location, align 8
  %35 = alloca { %..string*, i64 }, align 8
  %36 = alloca [4 x %..string], align 16
  %37 = alloca { %..string*, i64 }, align 8
  %38 = alloca { %..string*, i64 }, align 8
  %39 = alloca %..string, align 8
  %40 = alloca %..string, align 8
  %41 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  %42 = bitcast i8* %__.context_ptr to %runtime.Context*
  %43 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 0
  %44 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %43, align 8
  %45 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %43, i32 0, i32 0
  %46 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %45, align 8
  %47 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %43, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %4, align 8
  call void @runtime.bounds_check_error(%..string* %4, i32 120, i32 34, i64 %49, i64 %48)
  %50 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %46, i64 %49
  %51 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %50, align 8
  %52 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %50, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %50, i32 0, i32 0
  %55 = load i64*, i64** %54, align 8
  %56 = getelementptr i64, i64* %55, i64 0
  %57 = sub i64 %53, 0
  %58 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %5, i32 0, i32 0
  store i64* %56, i64** %58, align 8
  %59 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %5, i32 0, i32 1
  store i64 %57, i64* %59, align 8
  %60 = load { i64*, i64 }, { i64*, i64 }* %5, align 8
  %61 = bitcast %runtime.Context* %42 to i8*
  %62 = call i8 @slice.all_of-51951({ i64*, i64 }* %5, i64 -1, i8* %61)
  %63 = trunc i8 %62 to i1
  br i1 %63, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  store %..string zeroinitializer, %..string* %agg.result, align 8
  ret void

if.done:                                          ; preds = %entry
  %64 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %65 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %64, align 8
  %66 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %64, i32 0, i32 0
  %67 = load %..string*, %..string** %66, align 8
  %68 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %64, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 121, i32 35, i64 %70, i64 %69)
  %71 = getelementptr %..string, %..string* %67, i64 %70
  %72 = load %..string, %..string* %71, align 8
  %73 = load %..string, %..string* %71, align 8
  store %..string %73, %..string* %6, align 8
  %74 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 0
  %75 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %74, align 8
  %76 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %74, i32 0, i32 0
  %77 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %76, align 8
  %78 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %74, i32 0, i32 1
  %79 = load i64, i64* %78, align 8
  %80 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %9, align 8
  call void @runtime.bounds_check_error(%..string* %9, i32 122, i32 49, i64 %80, i64 %79)
  %81 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %77, i64 %80
  %82 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %81, align 8
  %83 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %81, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %81, i32 0, i32 0
  %86 = load i64*, i64** %85, align 8
  %87 = getelementptr i64, i64* %86, i64 0
  %88 = sub i64 %84, 0
  %89 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %10, i32 0, i32 0
  store i64* %87, i64** %89, align 8
  %90 = getelementptr inbounds { i64*, i64 }, { i64*, i64 }* %10, i32 0, i32 1
  store i64 %88, i64* %90, align 8
  %91 = load { i64*, i64 }, { i64*, i64 }* %10, align 8
  %92 = bitcast %runtime.Context* %42 to i8*
  %93 = call i8 @slice.any_of-51964({ i64*, i64 }* %10, i64 -1, i8* %92)
  %94 = trunc i8 %93 to i1
  br i1 %94, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.done
  br label %if.done2

if.else:                                          ; preds = %if.done
  br label %if.done2

if.done2:                                         ; preds = %if.else, %if.then1
  %95 = phi %..string [ { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2c5", i64 0, i64 0), i64 9 }, %if.then1 ], [ zeroinitializer, %if.else ]
  store %..string %95, %..string* %8, align 8
  %96 = bitcast { %..string*, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %96, i8 0, i64 16, i1 false)
  store [6 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2c6", i64 0, i64 0), i64 18 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c7", i64 0, i64 0), i64 1 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2c8", i64 0, i64 0), i64 9 }], [6 x %..string]* %13, align 8
  %97 = getelementptr inbounds [6 x %..string], [6 x %..string]* %13, i64 0, i64 0
  %98 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %14, i32 0, i32 0
  store %..string* %97, %..string** %98, align 8
  %99 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %14, i32 0, i32 1
  store i64 6, i64* %99, align 8
  %100 = load { %..string*, i64 }, { %..string*, i64 }* %14, align 8
  %101 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %14, i32 0, i32 0
  %102 = load %..string*, %..string** %101, align 8
  %103 = load %..string, %..string* %6, align 8
  %104 = load %..string, %..string* %8, align 8
  %105 = load %..string, %..string* %6, align 8
  %106 = getelementptr %..string, %..string* %102, i64 0
  %107 = getelementptr %..string, %..string* %102, i64 2
  %108 = getelementptr %..string, %..string* %102, i64 4
  store %..string %103, %..string* %106, align 8
  store %..string %104, %..string* %107, align 8
  store %..string %105, %..string* %108, align 8
  %109 = extractvalue { %..string*, i64 } %100, 1
  %110 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 0
  store %..string* %102, %..string** %110, align 8
  %111 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %12, i32 0, i32 1
  store i64 %109, i64* %111, align 8
  %112 = load { %..string*, i64 }, { %..string*, i64 }* %12, align 8
  %113 = getelementptr inbounds %runtime.Context, %runtime.Context* %42, i32 0, i32 0
  %114 = load %runtime.Allocator, %runtime.Allocator* %113, align 8
  %115 = bitcast %..string* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %115, i8 0, i64 16, i1 false)
  %116 = bitcast %runtime.Context* %42 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %15, { %..string*, i64 }* %12, %runtime.Allocator* %113, i8* %116)
  %117 = load %..string, %..string* %15, align 8
  store %..string %117, %..string* %11, align 8
  %118 = getelementptr inbounds %runtime.Context, %runtime.Context* %42, i32 0, i32 0
  %119 = load %runtime.Allocator, %runtime.Allocator* %118, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 124, i32 11, %..string { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"csbs$2c9", i64 0, i64 0), i64 28 } }, %runtime.Source_Code_Location* %17, align 8
  %120 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %120, i8 0, i64 48, i1 false)
  %121 = bitcast %runtime.Context* %42 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %18, %runtime.Allocator* %118, %runtime.Source_Code_Location* %17, i8* %121)
  %122 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18, align 8
  %123 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %18, i32 0, i32 0
  %124 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %123, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %124, { %..string*, i64, i64, %runtime.Allocator }* %16, align 8
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  %125 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 0
  %126 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %125, align 8
  %127 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %125, i32 0, i32 0
  %128 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %127, align 8
  %129 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %125, i32 0, i32 1
  %130 = load i64, i64* %129, align 8
  %131 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %21, align 8
  call void @runtime.bounds_check_error(%..string* %21, i32 125, i32 49, i64 %131, i64 %130)
  %132 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %128, i64 %131
  %133 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %132, i32 0, i32 1
  store i64 -1, i64* %22, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %if.done4, %if.then3, %if.done2
  %134 = load i64, i64* %22, align 8
  %135 = add i64 %134, 1
  store i64 %135, i64* %22, align 8
  %136 = load i64, i64* %133, align 8
  %137 = icmp slt i64 %135, %136
  br i1 %137, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %138 = load i64, i64* %22, align 8
  %139 = getelementptr inbounds { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %132, i32 0, i32 0
  %140 = load i64*, i64** %139, align 8
  %141 = getelementptr i64, i64* %140, i64 %138
  %142 = load i64, i64* %141, align 8
  store i64 %142, i64* %23, align 8
  store i64 %138, i64* %24, align 8
  %143 = load i64, i64* %23, align 8
  %144 = icmp eq i64 %143, -1
  %145 = zext i1 %144 to i8
  %146 = trunc i8 %145 to i1
  br i1 %146, label %if.then3, label %if.done4

if.then3:                                         ; preds = %for.index.body
  br label %for.index.loop

unreachable:                                      ; No predecessors!
  br label %if.done4

if.done4:                                         ; preds = %unreachable, %for.index.body
  %147 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 1
  %148 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %147, align 8
  %149 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %147, i32 0, i32 0
  %150 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %149, align 8
  %151 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %147, i32 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %25, align 8
  call void @runtime.bounds_check_error(%..string* %25, i32 127, i32 57, i64 %153, i64 %152)
  %154 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %150, i64 %153
  %155 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %154, align 8
  %156 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %154, i32 0, i32 0
  %157 = load %..string*, %..string** %156, align 8
  %158 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %154, i32 0, i32 1
  %159 = load i64, i64* %158, align 8
  %160 = load i64, i64* %24, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %26, align 8
  call void @runtime.bounds_check_error(%..string* %26, i32 127, i32 62, i64 %160, i64 %159)
  %161 = getelementptr %..string, %..string* %157, i64 %160
  %162 = load %..string, %..string* %161, align 8
  %163 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %164 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %163, align 8
  %165 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %163, i32 0, i32 0
  %166 = load %..string*, %..string** %165, align 8
  %167 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %163, i32 0, i32 1
  %168 = load i64, i64* %167, align 8
  %169 = load i64, i64* %23, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %27, align 8
  call void @runtime.bounds_check_error(%..string* %27, i32 127, i32 85, i64 %169, i64 %168)
  %170 = getelementptr %..string, %..string* %166, i64 %169
  %171 = load %..string, %..string* %170, align 8
  %172 = bitcast %..any* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* %172, i8 0, i64 16, i1 false)
  %173 = bitcast %..string* %161 to i8*
  %174 = getelementptr inbounds %..any, %..any* %28, i32 0, i32 0
  %175 = getelementptr inbounds %..any, %..any* %28, i32 0, i32 1
  store i8* %173, i8** %174, align 8
  store i64 432345564227567617, i64* %175, align 8
  %176 = load %..any, %..any* %28, align 8
  %177 = bitcast %..any* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %177, i8 0, i64 16, i1 false)
  %178 = bitcast %..string* %170 to i8*
  %179 = getelementptr inbounds %..any, %..any* %29, i32 0, i32 0
  %180 = getelementptr inbounds %..any, %..any* %29, i32 0, i32 1
  store i8* %178, i8** %179, align 8
  store i64 2738188573441261731, i64* %180, align 8
  %181 = load %..any, %..any* %29, align 8
  %182 = bitcast { %..any*, i64 }* %30 to i8*
  call void @llvm.memset.p0i8.i64(i8* %182, i8 0, i64 16, i1 false)
  %183 = bitcast [2 x %..any]* %31 to i8*
  call void @llvm.memset.p0i8.i64(i8* %183, i8 0, i64 32, i1 false)
  %184 = getelementptr [2 x %..any], [2 x %..any]* %31, i64 0, i64 0
  store %..any %176, %..any* %184, align 8
  %185 = getelementptr [2 x %..any], [2 x %..any]* %31, i64 0, i64 1
  store %..any %181, %..any* %185, align 8
  %186 = getelementptr [2 x %..any], [2 x %..any]* %31, i64 0, i64 0
  %187 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %30, i32 0, i32 0
  store %..any* %186, %..any** %187, align 8
  %188 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %30, i32 0, i32 1
  store i64 2, i64* %188, align 8
  %189 = load { %..any*, i64 }, { %..any*, i64 }* %30, align 8
  store %..string { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"csbs$2ca", i64 0, i64 0), i64 10 }, %..string* %32, align 8
  %190 = bitcast %..string* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* %190, i8 0, i64 16, i1 false)
  %191 = bitcast %runtime.Context* %42 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %33, %..string* %32, { %..any*, i64 }* %30, i8* %191)
  %192 = load %..string, %..string* %33, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 127, i32 3, %..string { i8* getelementptr inbounds ([29 x i8], [29 x i8]* @"csbs$2c9", i64 0, i64 0), i64 28 } }, %runtime.Source_Code_Location* %34, align 8
  %193 = bitcast %runtime.Context* %42 to i8*
  %194 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %16, %..string* %33, %runtime.Source_Code_Location* %34, i8* %193)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %195 = bitcast { %..string*, i64 }* %35 to i8*
  call void @llvm.memset.p0i8.i64(i8* %195, i8 0, i64 16, i1 false)
  store [4 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c0", i64 0, i64 0), i64 2 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c4", i64 0, i64 0), i64 3 }], [4 x %..string]* %36, align 8
  %196 = getelementptr inbounds [4 x %..string], [4 x %..string]* %36, i64 0, i64 0
  %197 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %37, i32 0, i32 0
  store %..string* %196, %..string** %197, align 8
  %198 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %37, i32 0, i32 1
  store i64 4, i64* %198, align 8
  %199 = load { %..string*, i64 }, { %..string*, i64 }* %37, align 8
  %200 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %37, i32 0, i32 0
  %201 = load %..string*, %..string** %200, align 8
  %202 = load %..string, %..string* %11, align 8
  %203 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %16, align 8
  %204 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %16, i32 0, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %16, i32 0, i32 0
  %207 = load %..string*, %..string** %206, align 8
  %208 = getelementptr %..string, %..string* %207, i64 0
  %209 = sub i64 %205, 0
  %210 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %38, i32 0, i32 0
  store %..string* %208, %..string** %210, align 8
  %211 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %38, i32 0, i32 1
  store i64 %209, i64* %211, align 8
  %212 = load { %..string*, i64 }, { %..string*, i64 }* %38, align 8
  %213 = getelementptr inbounds %runtime.Context, %runtime.Context* %42, i32 0, i32 0
  %214 = load %runtime.Allocator, %runtime.Allocator* %213, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %39, align 8
  %215 = bitcast %..string* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %215, i8 0, i64 16, i1 false)
  %216 = bitcast %runtime.Context* %42 to i8*
  call void @strings.join(%..string* sret(%..string*) %40, { %..string*, i64 }* %38, %..string* %39, %runtime.Allocator* %213, i8* %216)
  %217 = load %..string, %..string* %40, align 8
  %218 = getelementptr %..string, %..string* %201, i64 0
  %219 = getelementptr %..string, %..string* %201, i64 2
  store %..string %202, %..string* %218, align 8
  store %..string %217, %..string* %219, align 8
  %220 = extractvalue { %..string*, i64 } %199, 1
  %221 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %35, i32 0, i32 0
  store %..string* %201, %..string** %221, align 8
  %222 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %35, i32 0, i32 1
  store i64 %220, i64* %222, align 8
  %223 = load { %..string*, i64 }, { %..string*, i64 }* %35, align 8
  %224 = getelementptr inbounds %runtime.Context, %runtime.Context* %42, i32 0, i32 0
  %225 = load %runtime.Allocator, %runtime.Allocator* %224, align 8
  %226 = bitcast %..string* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %226, i8 0, i64 16, i1 false)
  %227 = bitcast %runtime.Context* %42 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %41, { %..string*, i64 }* %35, %runtime.Allocator* %224, i8* %227)
  %228 = load %..string, %..string* %41, align 8
  %229 = bitcast %..string* %agg.result to i8*
  %230 = bitcast %..string* %41 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %229, i8* %230, i64 16, i1 false)
  ret void
}

define internal void @enbench.ODINSOURCE_make_view_description({ %..string, i8 }* noalias sret({ %..string, i8 }) %agg.result, i64 %0, %enbench.ENUM* %1, %enbench.ENUM_CASE_RELATIONS* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { %..string*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { %..string*, i64 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..any, align 8
  %12 = alloca { %..any*, i64 }, align 8
  %13 = alloca [1 x %..any], align 8
  %14 = alloca %..string, align 8
  %15 = alloca %..string, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { %..string*, i64 }, align 8
  %19 = alloca [5 x %..string], align 16
  %20 = alloca { %..string*, i64 }, align 8
  %21 = alloca %..string, align 8
  %22 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %23 = alloca %runtime.Source_Code_Location, align 8
  %24 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %25 = alloca %..any, align 8
  %26 = alloca { %..any*, i64 }, align 8
  %27 = alloca [1 x %..any], align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca i64, align 8
  %31 = alloca %..string, align 8
  %32 = alloca i64, align 8
  %33 = alloca %..string, align 8
  %34 = alloca i64, align 8
  %35 = alloca %..string, align 8
  %36 = alloca %..string, align 8
  %37 = alloca %..any, align 8
  %38 = alloca %..any, align 8
  %39 = alloca { %..any*, i64 }, align 8
  %40 = alloca [2 x %..any], align 8
  %41 = alloca %..string, align 8
  %42 = alloca %..string, align 8
  %43 = alloca %runtime.Source_Code_Location, align 8
  %44 = alloca { %..string*, i64 }, align 8
  %45 = alloca [4 x %..string], align 16
  %46 = alloca { %..string*, i64 }, align 8
  %47 = alloca { %..string*, i64 }, align 8
  %48 = alloca %..string, align 8
  %49 = alloca %..string, align 8
  %50 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  %51 = bitcast i8* %__.context_ptr to %runtime.Context*
  %52 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 1
  %53 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, align 8
  %54 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, i32 0, i32 0
  %55 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %54, align 8
  %56 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %4, align 8
  call void @runtime.bounds_check_error(%..string* %4, i32 134, i32 41, i64 %58, i64 %57)
  %59 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %55, i64 %58
  %60 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, align 8
  %61 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, i32 0, i32 0
  %64 = load %..string*, %..string** %63, align 8
  %65 = getelementptr %..string, %..string* %64, i64 0
  %66 = sub i64 %62, 0
  %67 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 0
  store %..string* %65, %..string** %67, align 8
  %68 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 1
  store i64 %66, i64* %68, align 8
  %69 = load { %..string*, i64 }, { %..string*, i64 }* %5, align 8
  store %..string zeroinitializer, %..string* %6, align 8
  %70 = bitcast %runtime.Context* %51 to i8*
  %71 = call i8 @slice.all_of-52031({ %..string*, i64 }* %5, %..string* %6, i8* %70)
  %72 = trunc i8 %71 to i1
  br i1 %72, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %73 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %74 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %73, align 8
  store i8 1, i8* %74, align 1
  ret void

if.done:                                          ; preds = %entry
  %75 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 1
  %76 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, align 8
  %77 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, i32 0, i32 0
  %78 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %77, align 8
  %79 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 135, i32 41, i64 %81, i64 %80)
  %82 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %78, i64 %81
  %83 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, align 8
  %84 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, i32 0, i32 0
  %87 = load %..string*, %..string** %86, align 8
  %88 = getelementptr %..string, %..string* %87, i64 0
  %89 = sub i64 %85, 0
  %90 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 0
  store %..string* %88, %..string** %90, align 8
  %91 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 1
  store i64 %89, i64* %91, align 8
  %92 = load { %..string*, i64 }, { %..string*, i64 }* %8, align 8
  store %..string zeroinitializer, %..string* %9, align 8
  %93 = bitcast %runtime.Context* %51 to i8*
  %94 = call i8 @slice.any_of-52042({ %..string*, i64 }* %8, %..string* %9, i8* %93)
  %95 = trunc i8 %94 to i1
  br i1 %95, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %96 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %97 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, align 8
  %98 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, i32 0, i32 0
  %99 = load %..string*, %..string** %98, align 8
  %100 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 136, i32 61, i64 %102, i64 %101)
  %103 = getelementptr %..string, %..string* %99, i64 %102
  %104 = load %..string, %..string* %103, align 8
  %105 = bitcast %..any* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %105, i8 0, i64 16, i1 false)
  %106 = bitcast %..string* %103 to i8*
  %107 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 0
  %108 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 1
  store i8* %106, i8** %107, align 8
  store i64 2738188573441261731, i64* %108, align 8
  %109 = load %..any, %..any* %11, align 8
  %110 = bitcast { %..any*, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %110, i8 0, i64 16, i1 false)
  %111 = bitcast [1 x %..any]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %111, i8 0, i64 16, i1 false)
  %112 = getelementptr [1 x %..any], [1 x %..any]* %13, i64 0, i64 0
  store %..any %109, %..any* %112, align 8
  %113 = getelementptr [1 x %..any], [1 x %..any]* %13, i64 0, i64 0
  %114 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %12, i32 0, i32 0
  store %..any* %113, %..any** %114, align 8
  %115 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %12, i32 0, i32 1
  store i64 1, i64* %115, align 8
  %116 = load { %..any*, i64 }, { %..any*, i64 }* %12, align 8
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$2cb", i64 0, i64 0), i64 32 }, %..string* %14, align 8
  %117 = bitcast %runtime.Context* %51 to i8*
  %118 = call i64 @fmt.printf(%..string* %14, { %..any*, i64 }* %12, i8* %117)
  %119 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %120 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %119, align 8
  store i8 0, i8* %120, align 1
  ret void

if.done2:                                         ; preds = %if.done
  %121 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %122 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, align 8
  %123 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, i32 0, i32 0
  %124 = load %..string*, %..string** %123, align 8
  %125 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %16, align 8
  call void @runtime.bounds_check_error(%..string* %16, i32 140, i32 35, i64 %127, i64 %126)
  %128 = getelementptr %..string, %..string* %124, i64 %127
  %129 = load %..string, %..string* %128, align 8
  %130 = load %..string, %..string* %128, align 8
  store %..string %130, %..string* %15, align 8
  %131 = bitcast { %..string*, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %131, i8 0, i64 16, i1 false)
  store [5 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$2cc", i64 0, i64 0), i64 22 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c7", i64 0, i64 0), i64 1 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2cd", i64 0, i64 0), i64 9 }], [5 x %..string]* %19, align 8
  %132 = getelementptr inbounds [5 x %..string], [5 x %..string]* %19, i64 0, i64 0
  %133 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  store %..string* %132, %..string** %133, align 8
  %134 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 1
  store i64 5, i64* %134, align 8
  %135 = load { %..string*, i64 }, { %..string*, i64 }* %20, align 8
  %136 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  %137 = load %..string*, %..string** %136, align 8
  %138 = load %..string, %..string* %15, align 8
  %139 = load %..string, %..string* %15, align 8
  %140 = getelementptr %..string, %..string* %137, i64 0
  %141 = getelementptr %..string, %..string* %137, i64 3
  store %..string %138, %..string* %140, align 8
  store %..string %139, %..string* %141, align 8
  %142 = extractvalue { %..string*, i64 } %135, 1
  %143 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 0
  store %..string* %137, %..string** %143, align 8
  %144 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 1
  store i64 %142, i64* %144, align 8
  %145 = load { %..string*, i64 }, { %..string*, i64 }* %18, align 8
  %146 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %147 = load %runtime.Allocator, %runtime.Allocator* %146, align 8
  %148 = bitcast %..string* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %148, i8 0, i64 16, i1 false)
  %149 = bitcast %runtime.Context* %51 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %21, { %..string*, i64 }* %18, %runtime.Allocator* %146, i8* %149)
  %150 = load %..string, %..string* %21, align 8
  store %..string %150, %..string* %17, align 8
  %151 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %152 = load %runtime.Allocator, %runtime.Allocator* %151, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 142, i32 11, %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$2ce", i64 0, i64 0), i64 32 } }, %runtime.Source_Code_Location* %23, align 8
  %153 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %153, i8 0, i64 48, i1 false)
  %154 = bitcast %runtime.Context* %51 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %24, %runtime.Allocator* %151, %runtime.Source_Code_Location* %23, i8* %154)
  %155 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24, align 8
  %156 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24, i32 0, i32 0
  %157 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %156, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %157, { %..string*, i64, i64, %runtime.Allocator }* %22, align 8
  %158 = load %..string, %..string* %17, align 8
  %159 = bitcast %..any* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %159, i8 0, i64 16, i1 false)
  %160 = bitcast %..string* %17 to i8*
  %161 = getelementptr inbounds %..any, %..any* %25, i32 0, i32 0
  %162 = getelementptr inbounds %..any, %..any* %25, i32 0, i32 1
  store i8* %160, i8** %161, align 8
  store i64 432345564227567617, i64* %162, align 8
  %163 = load %..any, %..any* %25, align 8
  %164 = bitcast { %..any*, i64 }* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %164, i8 0, i64 16, i1 false)
  %165 = bitcast [1 x %..any]* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %165, i8 0, i64 16, i1 false)
  %166 = getelementptr [1 x %..any], [1 x %..any]* %27, i64 0, i64 0
  store %..any %163, %..any* %166, align 8
  %167 = getelementptr [1 x %..any], [1 x %..any]* %27, i64 0, i64 0
  %168 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %26, i32 0, i32 0
  store %..any* %167, %..any** %168, align 8
  %169 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %26, i32 0, i32 1
  store i64 1, i64* %169, align 8
  %170 = load { %..any*, i64 }, { %..any*, i64 }* %26, align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2cf", i64 0, i64 0), i64 9 }, %..string* %28, align 8
  %171 = bitcast %runtime.Context* %51 to i8*
  %172 = call i64 @fmt.printf(%..string* %28, { %..any*, i64 }* %26, i8* %171)
  %173 = bitcast %..string* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %173, i8 0, i64 16, i1 false)
  store i64 0, i64* %30, align 8
  %174 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 1
  %175 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, align 8
  %176 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 0
  %177 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %176, align 8
  %178 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 1
  %179 = load i64, i64* %178, align 8
  %180 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %31, align 8
  call void @runtime.bounds_check_error(%..string* %31, i32 144, i32 55, i64 %180, i64 %179)
  %181 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %177, i64 %180
  %182 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %181, i32 0, i32 1
  store i64 -1, i64* %32, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.done2
  %183 = load i64, i64* %32, align 8
  %184 = add i64 %183, 1
  store i64 %184, i64* %32, align 8
  %185 = load i64, i64* %182, align 8
  %186 = icmp slt i64 %184, %185
  br i1 %186, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %187 = load i64, i64* %32, align 8
  %188 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %181, i32 0, i32 0
  %189 = load %..string*, %..string** %188, align 8
  %190 = getelementptr %..string, %..string* %189, i64 %187
  %191 = load %..string, %..string* %190, align 8
  store %..string %191, %..string* %33, align 8
  store i64 %187, i64* %34, align 8
  %192 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 1
  %193 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, align 8
  %194 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, i32 0, i32 0
  %195 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %194, align 8
  %196 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, i32 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %35, align 8
  call void @runtime.bounds_check_error(%..string* %35, i32 145, i32 61, i64 %198, i64 %197)
  %199 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %195, i64 %198
  %200 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, align 8
  %201 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, i32 0, i32 0
  %202 = load %..string*, %..string** %201, align 8
  %203 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, i32 0, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = load i64, i64* %34, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %36, align 8
  call void @runtime.bounds_check_error(%..string* %36, i32 145, i32 66, i64 %205, i64 %204)
  %206 = getelementptr %..string, %..string* %202, i64 %205
  %207 = load %..string, %..string* %206, align 8
  %208 = load %..string, %..string* %33, align 8
  %209 = bitcast %..any* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* %209, i8 0, i64 16, i1 false)
  %210 = bitcast %..string* %206 to i8*
  %211 = getelementptr inbounds %..any, %..any* %37, i32 0, i32 0
  %212 = getelementptr inbounds %..any, %..any* %37, i32 0, i32 1
  store i8* %210, i8** %211, align 8
  store i64 432345564227567617, i64* %212, align 8
  %213 = load %..any, %..any* %37, align 8
  %214 = bitcast %..any* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* %214, i8 0, i64 16, i1 false)
  %215 = bitcast %..string* %33 to i8*
  %216 = getelementptr inbounds %..any, %..any* %38, i32 0, i32 0
  %217 = getelementptr inbounds %..any, %..any* %38, i32 0, i32 1
  store i8* %215, i8** %216, align 8
  store i64 432345564227567617, i64* %217, align 8
  %218 = load %..any, %..any* %38, align 8
  %219 = bitcast { %..any*, i64 }* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* %219, i8 0, i64 16, i1 false)
  %220 = bitcast [2 x %..any]* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %220, i8 0, i64 32, i1 false)
  %221 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 0
  store %..any %213, %..any* %221, align 8
  %222 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 1
  store %..any %218, %..any* %222, align 8
  %223 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 0
  %224 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %39, i32 0, i32 0
  store %..any* %223, %..any** %224, align 8
  %225 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %39, i32 0, i32 1
  store i64 2, i64* %225, align 8
  %226 = load { %..any*, i64 }, { %..any*, i64 }* %39, align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2d0", i64 0, i64 0), i64 12 }, %..string* %41, align 8
  %227 = bitcast %..string* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %227, i8 0, i64 16, i1 false)
  %228 = bitcast %runtime.Context* %51 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %42, %..string* %41, { %..any*, i64 }* %39, i8* %228)
  %229 = load %..string, %..string* %42, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 145, i32 3, %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$2ce", i64 0, i64 0), i64 32 } }, %runtime.Source_Code_Location* %43, align 8
  %230 = bitcast %runtime.Context* %51 to i8*
  %231 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %22, %..string* %42, %runtime.Source_Code_Location* %43, i8* %230)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %232 = bitcast { %..string*, i64 }* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* %232, i8 0, i64 16, i1 false)
  store [4 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c0", i64 0, i64 0), i64 2 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c4", i64 0, i64 0), i64 3 }], [4 x %..string]* %45, align 8
  %233 = getelementptr inbounds [4 x %..string], [4 x %..string]* %45, i64 0, i64 0
  %234 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 0
  store %..string* %233, %..string** %234, align 8
  %235 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 1
  store i64 4, i64* %235, align 8
  %236 = load { %..string*, i64 }, { %..string*, i64 }* %46, align 8
  %237 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 0
  %238 = load %..string*, %..string** %237, align 8
  %239 = load %..string, %..string* %17, align 8
  %240 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, align 8
  %241 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, i32 0, i32 1
  %242 = load i64, i64* %241, align 8
  %243 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, i32 0, i32 0
  %244 = load %..string*, %..string** %243, align 8
  %245 = getelementptr %..string, %..string* %244, i64 0
  %246 = sub i64 %242, 0
  %247 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 0
  store %..string* %245, %..string** %247, align 8
  %248 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 1
  store i64 %246, i64* %248, align 8
  %249 = load { %..string*, i64 }, { %..string*, i64 }* %47, align 8
  %250 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %251 = load %runtime.Allocator, %runtime.Allocator* %250, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %48, align 8
  %252 = bitcast %..string* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* %252, i8 0, i64 16, i1 false)
  %253 = bitcast %runtime.Context* %51 to i8*
  call void @strings.join(%..string* sret(%..string*) %49, { %..string*, i64 }* %47, %..string* %48, %runtime.Allocator* %250, i8* %253)
  %254 = load %..string, %..string* %49, align 8
  %255 = getelementptr %..string, %..string* %238, i64 0
  %256 = getelementptr %..string, %..string* %238, i64 2
  store %..string %239, %..string* %255, align 8
  store %..string %254, %..string* %256, align 8
  %257 = extractvalue { %..string*, i64 } %236, 1
  %258 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %44, i32 0, i32 0
  store %..string* %238, %..string** %258, align 8
  %259 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %44, i32 0, i32 1
  store i64 %257, i64* %259, align 8
  %260 = load { %..string*, i64 }, { %..string*, i64 }* %44, align 8
  %261 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %262 = load %runtime.Allocator, %runtime.Allocator* %261, align 8
  %263 = bitcast %..string* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* %263, i8 0, i64 16, i1 false)
  %264 = bitcast %runtime.Context* %51 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %50, { %..string*, i64 }* %44, %runtime.Allocator* %261, i8* %264)
  %265 = load %..string, %..string* %50, align 8
  %266 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %267 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %265, %..string* %266, align 8
  store i8 1, i8* %267, align 1
  ret void
}

define internal void @enbench.ODINSOURCE_make_inv_description({ %..string, i8 }* noalias sret({ %..string, i8 }) %agg.result, i64 %0, %enbench.ENUM* %1, %enbench.ENUM_CASE_RELATIONS* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca { %..string*, i64 }, align 8
  %6 = alloca %..string, align 8
  %7 = alloca %..string, align 8
  %8 = alloca { %..string*, i64 }, align 8
  %9 = alloca %..string, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %..any, align 8
  %12 = alloca { %..any*, i64 }, align 8
  %13 = alloca [1 x %..any], align 8
  %14 = alloca %..string, align 8
  %15 = alloca %..string, align 8
  %16 = alloca %..string, align 8
  %17 = alloca %..string, align 8
  %18 = alloca { %..string*, i64 }, align 8
  %19 = alloca [5 x %..string], align 16
  %20 = alloca { %..string*, i64 }, align 8
  %21 = alloca %..string, align 8
  %22 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %23 = alloca %runtime.Source_Code_Location, align 8
  %24 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %25 = alloca %..any, align 8
  %26 = alloca { %..any*, i64 }, align 8
  %27 = alloca [1 x %..any], align 8
  %28 = alloca %..string, align 8
  %29 = alloca %..string, align 8
  %30 = alloca i64, align 8
  %31 = alloca %..string, align 8
  %32 = alloca i64, align 8
  %33 = alloca %..string, align 8
  %34 = alloca i64, align 8
  %35 = alloca %..string, align 8
  %36 = alloca %..string, align 8
  %37 = alloca %..any, align 8
  %38 = alloca %..any, align 8
  %39 = alloca { %..any*, i64 }, align 8
  %40 = alloca [2 x %..any], align 8
  %41 = alloca %..string, align 8
  %42 = alloca %..string, align 8
  %43 = alloca %runtime.Source_Code_Location, align 8
  %44 = alloca { %..string*, i64 }, align 8
  %45 = alloca [4 x %..string], align 16
  %46 = alloca { %..string*, i64 }, align 8
  %47 = alloca { %..string*, i64 }, align 8
  %48 = alloca %..string, align 8
  %49 = alloca %..string, align 8
  %50 = alloca %..string, align 8
  br label %entry

entry:                                            ; preds = %decls
  store i64 %0, i64* %3, align 8
  %51 = bitcast i8* %__.context_ptr to %runtime.Context*
  %52 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 2
  %53 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, align 8
  %54 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, i32 0, i32 0
  %55 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %54, align 8
  %56 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %52, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %4, align 8
  call void @runtime.bounds_check_error(%..string* %4, i32 152, i32 40, i64 %58, i64 %57)
  %59 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %55, i64 %58
  %60 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, align 8
  %61 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, i32 0, i32 0
  %64 = load %..string*, %..string** %63, align 8
  %65 = getelementptr %..string, %..string* %64, i64 0
  %66 = sub i64 %62, 0
  %67 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 0
  store %..string* %65, %..string** %67, align 8
  %68 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %5, i32 0, i32 1
  store i64 %66, i64* %68, align 8
  %69 = load { %..string*, i64 }, { %..string*, i64 }* %5, align 8
  store %..string zeroinitializer, %..string* %6, align 8
  %70 = bitcast %runtime.Context* %51 to i8*
  %71 = call i8 @slice.all_of-52031({ %..string*, i64 }* %5, %..string* %6, i8* %70)
  %72 = trunc i8 %71 to i1
  br i1 %72, label %if.then, label %if.done

if.then:                                          ; preds = %entry
  %73 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %74 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %73, align 8
  store i8 1, i8* %74, align 1
  ret void

if.done:                                          ; preds = %entry
  %75 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 2
  %76 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, align 8
  %77 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, i32 0, i32 0
  %78 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %77, align 8
  %79 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %75, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 153, i32 40, i64 %81, i64 %80)
  %82 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %78, i64 %81
  %83 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, align 8
  %84 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, i32 0, i32 0
  %87 = load %..string*, %..string** %86, align 8
  %88 = getelementptr %..string, %..string* %87, i64 0
  %89 = sub i64 %85, 0
  %90 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 0
  store %..string* %88, %..string** %90, align 8
  %91 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %8, i32 0, i32 1
  store i64 %89, i64* %91, align 8
  %92 = load { %..string*, i64 }, { %..string*, i64 }* %8, align 8
  store %..string zeroinitializer, %..string* %9, align 8
  %93 = bitcast %runtime.Context* %51 to i8*
  %94 = call i8 @slice.any_of-52042({ %..string*, i64 }* %8, %..string* %9, i8* %93)
  %95 = trunc i8 %94 to i1
  br i1 %95, label %if.then1, label %if.done2

if.then1:                                         ; preds = %if.done
  %96 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %97 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, align 8
  %98 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, i32 0, i32 0
  %99 = load %..string*, %..string** %98, align 8
  %100 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %96, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 154, i32 61, i64 %102, i64 %101)
  %103 = getelementptr %..string, %..string* %99, i64 %102
  %104 = load %..string, %..string* %103, align 8
  %105 = bitcast %..any* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %105, i8 0, i64 16, i1 false)
  %106 = bitcast %..string* %103 to i8*
  %107 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 0
  %108 = getelementptr inbounds %..any, %..any* %11, i32 0, i32 1
  store i8* %106, i8** %107, align 8
  store i64 2738188573441261731, i64* %108, align 8
  %109 = load %..any, %..any* %11, align 8
  %110 = bitcast { %..any*, i64 }* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %110, i8 0, i64 16, i1 false)
  %111 = bitcast [1 x %..any]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* %111, i8 0, i64 16, i1 false)
  %112 = getelementptr [1 x %..any], [1 x %..any]* %13, i64 0, i64 0
  store %..any %109, %..any* %112, align 8
  %113 = getelementptr [1 x %..any], [1 x %..any]* %13, i64 0, i64 0
  %114 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %12, i32 0, i32 0
  store %..any* %113, %..any** %114, align 8
  %115 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %12, i32 0, i32 1
  store i64 1, i64* %115, align 8
  %116 = load { %..any*, i64 }, { %..any*, i64 }* %12, align 8
  store %..string { i8* getelementptr inbounds ([33 x i8], [33 x i8]* @"csbs$2cb", i64 0, i64 0), i64 32 }, %..string* %14, align 8
  %117 = bitcast %runtime.Context* %51 to i8*
  %118 = call i64 @fmt.printf(%..string* %14, { %..any*, i64 }* %12, i8* %117)
  %119 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %120 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string zeroinitializer, %..string* %119, align 8
  store i8 0, i8* %120, align 1
  ret void

if.done2:                                         ; preds = %if.done
  %121 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 0
  %122 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, align 8
  %123 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, i32 0, i32 0
  %124 = load %..string*, %..string** %123, align 8
  %125 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %121, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %16, align 8
  call void @runtime.bounds_check_error(%..string* %16, i32 158, i32 35, i64 %127, i64 %126)
  %128 = getelementptr %..string, %..string* %124, i64 %127
  %129 = load %..string, %..string* %128, align 8
  %130 = load %..string, %..string* %128, align 8
  store %..string %130, %..string* %15, align 8
  %131 = bitcast { %..string*, i64 }* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %131, i8 0, i64 16, i1 false)
  store [5 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"csbs$2d1", i64 0, i64 0), i64 21 }, %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$2c7", i64 0, i64 0), i64 1 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2cd", i64 0, i64 0), i64 9 }], [5 x %..string]* %19, align 8
  %132 = getelementptr inbounds [5 x %..string], [5 x %..string]* %19, i64 0, i64 0
  %133 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  store %..string* %132, %..string** %133, align 8
  %134 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 1
  store i64 5, i64* %134, align 8
  %135 = load { %..string*, i64 }, { %..string*, i64 }* %20, align 8
  %136 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %20, i32 0, i32 0
  %137 = load %..string*, %..string** %136, align 8
  %138 = load %..string, %..string* %15, align 8
  %139 = load %..string, %..string* %15, align 8
  %140 = getelementptr %..string, %..string* %137, i64 0
  %141 = getelementptr %..string, %..string* %137, i64 3
  store %..string %138, %..string* %140, align 8
  store %..string %139, %..string* %141, align 8
  %142 = extractvalue { %..string*, i64 } %135, 1
  %143 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 0
  store %..string* %137, %..string** %143, align 8
  %144 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %18, i32 0, i32 1
  store i64 %142, i64* %144, align 8
  %145 = load { %..string*, i64 }, { %..string*, i64 }* %18, align 8
  %146 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %147 = load %runtime.Allocator, %runtime.Allocator* %146, align 8
  %148 = bitcast %..string* %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* %148, i8 0, i64 16, i1 false)
  %149 = bitcast %runtime.Context* %51 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %21, { %..string*, i64 }* %18, %runtime.Allocator* %146, i8* %149)
  %150 = load %..string, %..string* %21, align 8
  store %..string %150, %..string* %17, align 8
  %151 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %152 = load %runtime.Allocator, %runtime.Allocator* %151, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 160, i32 11, %..string { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"csbs$2d2", i64 0, i64 0), i64 31 } }, %runtime.Source_Code_Location* %23, align 8
  %153 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %153, i8 0, i64 48, i1 false)
  %154 = bitcast %runtime.Context* %51 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %24, %runtime.Allocator* %151, %runtime.Source_Code_Location* %23, i8* %154)
  %155 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24, align 8
  %156 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %24, i32 0, i32 0
  %157 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %156, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %157, { %..string*, i64, i64, %runtime.Allocator }* %22, align 8
  %158 = load %..string, %..string* %17, align 8
  %159 = bitcast %..any* %25 to i8*
  call void @llvm.memset.p0i8.i64(i8* %159, i8 0, i64 16, i1 false)
  %160 = bitcast %..string* %17 to i8*
  %161 = getelementptr inbounds %..any, %..any* %25, i32 0, i32 0
  %162 = getelementptr inbounds %..any, %..any* %25, i32 0, i32 1
  store i8* %160, i8** %161, align 8
  store i64 432345564227567617, i64* %162, align 8
  %163 = load %..any, %..any* %25, align 8
  %164 = bitcast { %..any*, i64 }* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* %164, i8 0, i64 16, i1 false)
  %165 = bitcast [1 x %..any]* %27 to i8*
  call void @llvm.memset.p0i8.i64(i8* %165, i8 0, i64 16, i1 false)
  %166 = getelementptr [1 x %..any], [1 x %..any]* %27, i64 0, i64 0
  store %..any %163, %..any* %166, align 8
  %167 = getelementptr [1 x %..any], [1 x %..any]* %27, i64 0, i64 0
  %168 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %26, i32 0, i32 0
  store %..any* %167, %..any** %168, align 8
  %169 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %26, i32 0, i32 1
  store i64 1, i64* %169, align 8
  %170 = load { %..any*, i64 }, { %..any*, i64 }* %26, align 8
  store %..string { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"csbs$2cf", i64 0, i64 0), i64 9 }, %..string* %28, align 8
  %171 = bitcast %runtime.Context* %51 to i8*
  %172 = call i64 @fmt.printf(%..string* %28, { %..any*, i64 }* %26, i8* %171)
  %173 = bitcast %..string* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* %173, i8 0, i64 16, i1 false)
  store i64 0, i64* %30, align 8
  %174 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %2, i32 0, i32 2
  %175 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, align 8
  %176 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 0
  %177 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %176, align 8
  %178 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %174, i32 0, i32 1
  %179 = load i64, i64* %178, align 8
  %180 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %31, align 8
  call void @runtime.bounds_check_error(%..string* %31, i32 162, i32 54, i64 %180, i64 %179)
  %181 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %177, i64 %180
  %182 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %181, i32 0, i32 1
  store i64 -1, i64* %32, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.body, %if.done2
  %183 = load i64, i64* %32, align 8
  %184 = add i64 %183, 1
  store i64 %184, i64* %32, align 8
  %185 = load i64, i64* %182, align 8
  %186 = icmp slt i64 %184, %185
  br i1 %186, label %for.index.body, label %for.index.done

for.index.body:                                   ; preds = %for.index.loop
  %187 = load i64, i64* %32, align 8
  %188 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %181, i32 0, i32 0
  %189 = load %..string*, %..string** %188, align 8
  %190 = getelementptr %..string, %..string* %189, i64 %187
  %191 = load %..string, %..string* %190, align 8
  store %..string %191, %..string* %33, align 8
  store i64 %187, i64* %34, align 8
  %192 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %1, i32 0, i32 1
  %193 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, align 8
  %194 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, i32 0, i32 0
  %195 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %194, align 8
  %196 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %192, i32 0, i32 1
  %197 = load i64, i64* %196, align 8
  %198 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %35, align 8
  call void @runtime.bounds_check_error(%..string* %35, i32 163, i32 61, i64 %198, i64 %197)
  %199 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %195, i64 %198
  %200 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, align 8
  %201 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, i32 0, i32 0
  %202 = load %..string*, %..string** %201, align 8
  %203 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %199, i32 0, i32 1
  %204 = load i64, i64* %203, align 8
  %205 = load i64, i64* %34, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %36, align 8
  call void @runtime.bounds_check_error(%..string* %36, i32 163, i32 66, i64 %205, i64 %204)
  %206 = getelementptr %..string, %..string* %202, i64 %205
  %207 = load %..string, %..string* %206, align 8
  %208 = load %..string, %..string* %33, align 8
  %209 = bitcast %..any* %37 to i8*
  call void @llvm.memset.p0i8.i64(i8* %209, i8 0, i64 16, i1 false)
  %210 = bitcast %..string* %206 to i8*
  %211 = getelementptr inbounds %..any, %..any* %37, i32 0, i32 0
  %212 = getelementptr inbounds %..any, %..any* %37, i32 0, i32 1
  store i8* %210, i8** %211, align 8
  store i64 432345564227567617, i64* %212, align 8
  %213 = load %..any, %..any* %37, align 8
  %214 = bitcast %..any* %38 to i8*
  call void @llvm.memset.p0i8.i64(i8* %214, i8 0, i64 16, i1 false)
  %215 = bitcast %..string* %33 to i8*
  %216 = getelementptr inbounds %..any, %..any* %38, i32 0, i32 0
  %217 = getelementptr inbounds %..any, %..any* %38, i32 0, i32 1
  store i8* %215, i8** %216, align 8
  store i64 432345564227567617, i64* %217, align 8
  %218 = load %..any, %..any* %38, align 8
  %219 = bitcast { %..any*, i64 }* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* %219, i8 0, i64 16, i1 false)
  %220 = bitcast [2 x %..any]* %40 to i8*
  call void @llvm.memset.p0i8.i64(i8* %220, i8 0, i64 32, i1 false)
  %221 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 0
  store %..any %213, %..any* %221, align 8
  %222 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 1
  store %..any %218, %..any* %222, align 8
  %223 = getelementptr [2 x %..any], [2 x %..any]* %40, i64 0, i64 0
  %224 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %39, i32 0, i32 0
  store %..any* %223, %..any** %224, align 8
  %225 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %39, i32 0, i32 1
  store i64 2, i64* %225, align 8
  %226 = load { %..any*, i64 }, { %..any*, i64 }* %39, align 8
  store %..string { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"csbs$2d0", i64 0, i64 0), i64 12 }, %..string* %41, align 8
  %227 = bitcast %..string* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %227, i8 0, i64 16, i1 false)
  %228 = bitcast %runtime.Context* %51 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %42, %..string* %41, { %..any*, i64 }* %39, i8* %228)
  %229 = load %..string, %..string* %42, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 163, i32 3, %..string { i8* getelementptr inbounds ([32 x i8], [32 x i8]* @"csbs$2d2", i64 0, i64 0), i64 31 } }, %runtime.Source_Code_Location* %43, align 8
  %230 = bitcast %runtime.Context* %51 to i8*
  %231 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %22, %..string* %42, %runtime.Source_Code_Location* %43, i8* %230)
  br label %for.index.loop

for.index.done:                                   ; preds = %for.index.loop
  %232 = bitcast { %..string*, i64 }* %44 to i8*
  call void @llvm.memset.p0i8.i64(i8* %232, i8 0, i64 16, i1 false)
  store [4 x %..string] [%..string zeroinitializer, %..string { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @"csbs$2c0", i64 0, i64 0), i64 2 }, %..string zeroinitializer, %..string { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"csbs$2c4", i64 0, i64 0), i64 3 }], [4 x %..string]* %45, align 8
  %233 = getelementptr inbounds [4 x %..string], [4 x %..string]* %45, i64 0, i64 0
  %234 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 0
  store %..string* %233, %..string** %234, align 8
  %235 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 1
  store i64 4, i64* %235, align 8
  %236 = load { %..string*, i64 }, { %..string*, i64 }* %46, align 8
  %237 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %46, i32 0, i32 0
  %238 = load %..string*, %..string** %237, align 8
  %239 = load %..string, %..string* %17, align 8
  %240 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, align 8
  %241 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, i32 0, i32 1
  %242 = load i64, i64* %241, align 8
  %243 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %22, i32 0, i32 0
  %244 = load %..string*, %..string** %243, align 8
  %245 = getelementptr %..string, %..string* %244, i64 0
  %246 = sub i64 %242, 0
  %247 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 0
  store %..string* %245, %..string** %247, align 8
  %248 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 1
  store i64 %246, i64* %248, align 8
  %249 = load { %..string*, i64 }, { %..string*, i64 }* %47, align 8
  %250 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %251 = load %runtime.Allocator, %runtime.Allocator* %250, align 8
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %48, align 8
  %252 = bitcast %..string* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* %252, i8 0, i64 16, i1 false)
  %253 = bitcast %runtime.Context* %51 to i8*
  call void @strings.join(%..string* sret(%..string*) %49, { %..string*, i64 }* %47, %..string* %48, %runtime.Allocator* %250, i8* %253)
  %254 = load %..string, %..string* %49, align 8
  %255 = getelementptr %..string, %..string* %238, i64 0
  %256 = getelementptr %..string, %..string* %238, i64 2
  store %..string %239, %..string* %255, align 8
  store %..string %254, %..string* %256, align 8
  %257 = extractvalue { %..string*, i64 } %236, 1
  %258 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %44, i32 0, i32 0
  store %..string* %238, %..string** %258, align 8
  %259 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %44, i32 0, i32 1
  store i64 %257, i64* %259, align 8
  %260 = load { %..string*, i64 }, { %..string*, i64 }* %44, align 8
  %261 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 0
  %262 = load %runtime.Allocator, %runtime.Allocator* %261, align 8
  %263 = bitcast %..string* %50 to i8*
  call void @llvm.memset.p0i8.i64(i8* %263, i8 0, i64 16, i1 false)
  %264 = bitcast %runtime.Context* %51 to i8*
  call void @strings.concatenate(%..string* sret(%..string*) %50, { %..string*, i64 }* %44, %runtime.Allocator* %261, i8* %264)
  %265 = load %..string, %..string* %50, align 8
  %266 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 0
  %267 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %agg.result, i32 0, i32 1
  store %..string %265, %..string* %266, align 8
  store i8 1, i8* %267, align 1
  ret void
}

; Function Attrs: alwaysinline
define internal void @enbench.make_writeable({ i8*, i64 }* noalias sret({ i8*, i64 }) %agg.result, %..string* %0, i8* noalias nocapture nonnull %__.context_ptr) #3 {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %1 = bitcast i8* %__.context_ptr to %runtime.Context*
  %2 = load %..string, %..string* %0, align 8
  %3 = bitcast %..string* %0 to { i8*, i64 }*
  %4 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %5 = bitcast { i8*, i64 }* %agg.result to i8*
  %6 = bitcast { i8*, i64 }* %3 to i8*
  call void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* %5, i8* %6, i64 16, i1 false)
  ret void
}

define internal void @enbench.delete_enum(%enbench.DataToWrite* %0, i64 %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %enbench.DataToWrite*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %..string, align 8
  %5 = alloca %runtime.Source_Code_Location, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %runtime.Source_Code_Location, align 8
  %9 = alloca %runtime.Source_Code_Location, align 8
  %10 = alloca %..string, align 8
  %11 = alloca %runtime.Source_Code_Location, align 8
  %12 = alloca %runtime.Source_Code_Location, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  %14 = alloca %..string, align 8
  %15 = alloca %runtime.Source_Code_Location, align 8
  %16 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %0, %enbench.DataToWrite** %2, align 8
  store i64 %1, i64* %3, align 8
  %17 = bitcast i8* %__.context_ptr to %runtime.Context*
  %18 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %19 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %18, i32 0, i32 1
  %20 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %19, i32 0, i32 0
  %21 = load { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %20, align 8
  %22 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %20, i32 0, i32 0
  %23 = load { i64*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }** %22, align 8
  %24 = getelementptr inbounds { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %20, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %4, align 8
  call void @runtime.bounds_check_error(%..string* %4, i32 212, i32 38, i64 %26, i64 %25)
  %27 = getelementptr { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %23, i64 %26
  %28 = load { i64*, i64, i64, %runtime.Allocator }, { i64*, i64, i64, %runtime.Allocator }* %27, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 212, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %5, align 8
  %29 = bitcast %runtime.Context* %17 to i8*
  %30 = call i8 @runtime.delete_dynamic_array-52179({ i64*, i64, i64, %runtime.Allocator }* %27, %runtime.Source_Code_Location* %5, i8* %29)
  %31 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %32 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %31, i32 0, i32 1
  %33 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %32, i32 0, i32 0
  %34 = load i64, i64* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 213, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %6, align 8
  %35 = bitcast %runtime.Context* %17 to i8*
  call void @runtime.ordered_remove-52210({ { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %33, i64 %34, %runtime.Source_Code_Location* %6, i8* %35)
  %36 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %37 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %36, i32 0, i32 1
  %38 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %37, i32 0, i32 2
  %39 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %38, align 8
  %40 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %38, i32 0, i32 0
  %41 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %40, align 8
  %42 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %38, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %7, align 8
  call void @runtime.bounds_check_error(%..string* %7, i32 214, i32 44, i64 %44, i64 %43)
  %45 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %41, i64 %44
  %46 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %45, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 214, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %8, align 8
  %47 = bitcast %runtime.Context* %17 to i8*
  %48 = call i8 @runtime.delete_dynamic_array-52221({ %..string*, i64, i64, %runtime.Allocator }* %45, %runtime.Source_Code_Location* %8, i8* %47)
  %49 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %50 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %49, i32 0, i32 1
  %51 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %50, i32 0, i32 2
  %52 = load i64, i64* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 215, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %9, align 8
  %53 = bitcast %runtime.Context* %17 to i8*
  call void @runtime.ordered_remove-52252({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %51, i64 %52, %runtime.Source_Code_Location* %9, i8* %53)
  %54 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %55 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %54, i32 0, i32 1
  %56 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %55, i32 0, i32 1
  %57 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %56, align 8
  %58 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %56, i32 0, i32 0
  %59 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %58, align 8
  %60 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %56, i32 0, i32 1
  %61 = load i64, i64* %60, align 8
  %62 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %10, align 8
  call void @runtime.bounds_check_error(%..string* %10, i32 216, i32 45, i64 %62, i64 %61)
  %63 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %59, i64 %62
  %64 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %63, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 216, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %11, align 8
  %65 = bitcast %runtime.Context* %17 to i8*
  %66 = call i8 @runtime.delete_dynamic_array-52221({ %..string*, i64, i64, %runtime.Allocator }* %63, %runtime.Source_Code_Location* %11, i8* %65)
  %67 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %68 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %67, i32 0, i32 1
  %69 = getelementptr inbounds %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %68, i32 0, i32 1
  %70 = load i64, i64* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 217, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %12, align 8
  %71 = bitcast %runtime.Context* %17 to i8*
  call void @runtime.ordered_remove-52252({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %69, i64 %70, %runtime.Source_Code_Location* %12, i8* %71)
  %72 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %73 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %72, i32 0, i32 0
  %74 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %73, i32 0, i32 0
  %75 = load i64, i64* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 218, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %13, align 8
  %76 = bitcast %runtime.Context* %17 to i8*
  call void @runtime.ordered_remove-52298({ %..string*, i64, i64, %runtime.Allocator }* %74, i64 %75, %runtime.Source_Code_Location* %13, i8* %76)
  %77 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %78 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %77, i32 0, i32 0
  %79 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %78, i32 0, i32 1
  %80 = load { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %79, align 8
  %81 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %79, i32 0, i32 0
  %82 = load { %..string*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }** %81, align 8
  %83 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %79, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = load i64, i64* %3, align 8
  store %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, %..string* %14, align 8
  call void @runtime.bounds_check_error(%..string* %14, i32 219, i32 24, i64 %85, i64 %84)
  %86 = getelementptr { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %82, i64 %85
  %87 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %86, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 219, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %15, align 8
  %88 = bitcast %runtime.Context* %17 to i8*
  %89 = call i8 @runtime.delete_dynamic_array-52221({ %..string*, i64, i64, %runtime.Allocator }* %86, %runtime.Source_Code_Location* %15, i8* %88)
  %90 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %91 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %90, i32 0, i32 0
  %92 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %91, i32 0, i32 1
  %93 = load i64, i64* %3, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 220, i32 2, %..string { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"csbs$2d3", i64 0, i64 0), i64 11 } }, %runtime.Source_Code_Location* %16, align 8
  %94 = bitcast %runtime.Context* %17 to i8*
  call void @runtime.ordered_remove-52252({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }* %92, i64 %93, %runtime.Source_Code_Location* %16, i8* %94)
  ret void
}

define internal void @enbench.read_file_by_lines_in_whole_sweepscan(%..string* %0, %enbench.DataToWrite* %1, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %2 = alloca %enbench.DataToWrite*, align 8
  %3 = alloca { i8*, i64 }, align 8
  %4 = alloca i8, align 1
  %5 = alloca { { i8*, i64 }, i8 }, align 8
  %6 = alloca { %..any*, i64 }, align 8
  %7 = alloca %..string, align 8
  %8 = alloca %..string, align 8
  %9 = alloca %..string, align 8
  %10 = alloca { %..string, i8 }, align 8
  %11 = alloca %..string, align 8
  %12 = alloca { %..string*, i64 }, align 8
  %13 = alloca { %..string*, i64 }, align 8
  %14 = alloca { %..string*, i64 }, align 8
  %15 = alloca %..string, align 8
  %16 = alloca { %..string, i8 }, align 8
  %17 = alloca %..string, align 8
  %18 = alloca %runtime.Source_Code_Location, align 8
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %1, %enbench.DataToWrite** %2, align 8
  %19 = bitcast i8* %__.context_ptr to %runtime.Context*
  %20 = load %..string, %..string* %0, align 8
  %21 = getelementptr inbounds %runtime.Context, %runtime.Context* %19, i32 0, i32 0
  %22 = load %runtime.Allocator, %runtime.Allocator* %21, align 8
  %23 = bitcast { { i8*, i64 }, i8 }* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* %23, i8 0, i64 24, i1 false)
  %24 = bitcast %runtime.Context* %19 to i8*
  call void @os.read_entire_file_from_filename({ { i8*, i64 }, i8 }* sret({ { i8*, i64 }, i8 }*) %5, %..string* %0, %runtime.Allocator* %21, i8* %24)
  %25 = load { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, align 8
  %26 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 0
  %27 = load { i8*, i64 }, { i8*, i64 }* %26, align 8
  %28 = getelementptr inbounds { { i8*, i64 }, i8 }, { { i8*, i64 }, i8 }* %5, i32 0, i32 1
  %29 = load i8, i8* %28, align 1
  store { i8*, i64 } %27, { i8*, i64 }* %3, align 8
  store i8 %29, i8* %4, align 1
  %30 = load i8, i8* %4, align 1
  %31 = trunc i8 %30 to i1
  br i1 %31, label %if.done, label %if.then

if.then:                                          ; preds = %entry
  %32 = bitcast { %..any*, i64 }* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* %32, i8 0, i64 16, i1 false)
  %33 = load { %..any*, i64 }, { %..any*, i64 }* %6, align 8
  store %..string { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"csbs$2d4", i64 0, i64 0), i64 22 }, %..string* %7, align 8
  %34 = bitcast %runtime.Context* %19 to i8*
  %35 = call i64 @fmt.printf(%..string* %7, { %..any*, i64 }* %6, i8* %34)
  ret void

if.done:                                          ; preds = %entry
  %36 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %37 = bitcast { i8*, i64 }* %3 to %..string*
  %38 = load %..string, %..string* %37, align 8
  store %..string %38, %..string* %8, align 8
  %39 = bitcast %..string* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %39, i8 0, i64 16, i1 false)
  br label %for.tuple.loop

for.tuple.loop:                                   ; preds = %for.tuple.body, %if.done
  %40 = bitcast { %..string, i8 }* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %40, i8 0, i64 24, i1 false)
  %41 = bitcast %runtime.Context* %19 to i8*
  call void @strings.split_lines_iterator({ %..string, i8 }* sret({ %..string, i8 }*) %10, %..string* %8, i8* %41)
  %42 = load { %..string, i8 }, { %..string, i8 }* %10, align 8
  %43 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 1
  %44 = load i8, i8* %43, align 1
  %45 = trunc i8 %44 to i1
  br i1 %45, label %for.tuple.body, label %for.tuple.done

for.tuple.body:                                   ; preds = %for.tuple.loop
  %46 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 0
  %47 = load %..string, %..string* %46, align 8
  %48 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %10, i32 0, i32 1
  %49 = load i8, i8* %48, align 1
  store %..string %47, %..string* %11, align 8
  %50 = load %..string, %..string* %11, align 8
  %51 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %52 = bitcast %runtime.Context* %19 to i8*
  call void @enbench.read_file_by_lines_in_whole_sweepscan.enum_scanning_proc-0(%..string* %11, %enbench.DataToWrite* %51, i8* %52)
  br label %for.tuple.loop

for.tuple.done:                                   ; preds = %for.tuple.loop
  %53 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %54 = bitcast %runtime.Context* %19 to i8*
  call void @enbench.init_case_relations(%enbench.DataToWrite* %53, i8* %54)
  %55 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %56 = bitcast { i8*, i64 }* %3 to %..string*
  %57 = load %..string, %..string* %56, align 8
  store %..string %57, %..string* %8, align 8
  %58 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %59 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %58, i32 0, i32 0
  %60 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %59, i32 0, i32 0
  %61 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %60, align 8
  %62 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %60, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %60, i32 0, i32 0
  %65 = load %..string*, %..string** %64, align 8
  %66 = getelementptr %..string, %..string* %65, i64 0
  %67 = sub i64 %63, 0
  %68 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 0
  store %..string* %66, %..string** %68, align 8
  %69 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %13, i32 0, i32 1
  store i64 %67, i64* %69, align 8
  %70 = load { %..string*, i64 }, { %..string*, i64 }* %13, align 8
  %71 = getelementptr inbounds %runtime.Context, %runtime.Context* %19, i32 0, i32 0
  %72 = load %runtime.Allocator, %runtime.Allocator* %71, align 8
  %73 = bitcast { %..string*, i64 }* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* %73, i8 0, i64 16, i1 false)
  %74 = bitcast %runtime.Context* %19 to i8*
  call void @slice.mapper-49087({ %..string*, i64 }* sret({ %..string*, i64 }*) %14, { %..string*, i64 }* %13, i8* bitcast (void (%..string*, %..string*, i8*)* @"enbench.read_file_by_lines_in_whole_sweepscan$anon-14" to i8*), %runtime.Allocator* %71, i8* %74)
  %75 = load { %..string*, i64 }, { %..string*, i64 }* %14, align 8
  store { %..string*, i64 } %75, { %..string*, i64 }* %12, align 8
  %76 = bitcast %..string* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* %76, i8 0, i64 16, i1 false)
  br label %for.tuple.loop1

for.tuple.loop1:                                  ; preds = %for.tuple.body2, %for.tuple.done
  %77 = bitcast { %..string, i8 }* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* %77, i8 0, i64 24, i1 false)
  %78 = bitcast %runtime.Context* %19 to i8*
  call void @strings.split_lines_iterator({ %..string, i8 }* sret({ %..string, i8 }*) %16, %..string* %8, i8* %78)
  %79 = load { %..string, i8 }, { %..string, i8 }* %16, align 8
  %80 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %16, i32 0, i32 1
  %81 = load i8, i8* %80, align 1
  %82 = trunc i8 %81 to i1
  br i1 %82, label %for.tuple.body2, label %for.tuple.done3

for.tuple.body2:                                  ; preds = %for.tuple.loop1
  %83 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %16, i32 0, i32 0
  %84 = load %..string, %..string* %83, align 8
  %85 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %16, i32 0, i32 1
  %86 = load i8, i8* %85, align 1
  store %..string %84, %..string* %17, align 8
  %87 = load %..string, %..string* %17, align 8
  %88 = load %enbench.DataToWrite*, %enbench.DataToWrite** %2, align 8
  %89 = load { %..string*, i64 }, { %..string*, i64 }* %12, align 8
  %90 = bitcast %runtime.Context* %19 to i8*
  call void @enbench.read_file_by_lines_in_whole_sweepscan.relation_scanning_proc-1(%..string* %17, %enbench.DataToWrite* %88, { %..string*, i64 }* %12, i8* %90)
  br label %for.tuple.loop1

for.tuple.done3:                                  ; preds = %for.tuple.loop1
  br label %defer

defer:                                            ; preds = %for.tuple.done3
  %91 = load { i8*, i64 }, { i8*, i64 }* %3, align 8
  %92 = getelementptr inbounds %runtime.Context, %runtime.Context* %19, i32 0, i32 0
  %93 = load %runtime.Allocator, %runtime.Allocator* %92, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 230, i32 8, %..string { i8* getelementptr inbounds ([38 x i8], [38 x i8]* @"csbs$2d5", i64 0, i64 0), i64 37 } }, %runtime.Source_Code_Location* %18, align 8
  %94 = bitcast %runtime.Context* %19 to i8*
  %95 = call i8 @runtime.delete_slice-50594({ i8*, i64 }* %3, %runtime.Allocator* %92, %runtime.Source_Code_Location* %18, i8* %94)
  ret void
}

define internal void @enbench.write_data_to_file(%..string* %0, %..string* %1, %enbench.DataToWrite* %2, i8* noalias nocapture nonnull %__.context_ptr) {
decls:
  %3 = alloca %enbench.DataToWrite*, align 8
  %4 = alloca %runtime.Context, align 8
  %5 = alloca { %..string*, i64, i64, %runtime.Allocator }, align 8
  %6 = alloca %runtime.Source_Code_Location, align 8
  %7 = alloca { { %..string*, i64, i64, %runtime.Allocator }, i8 }, align 8
  %8 = alloca %..any, align 8
  %9 = alloca { %..any*, i64 }, align 8
  %10 = alloca [1 x %..any], align 8
  %11 = alloca %..string, align 8
  %12 = alloca %..string, align 8
  %13 = alloca %runtime.Source_Code_Location, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %..string, align 8
  %18 = alloca %..string, align 8
  %19 = alloca %runtime.Source_Code_Location, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca %..string, align 8
  %24 = alloca %..string, align 8
  %25 = alloca %runtime.Source_Code_Location, align 8
  %26 = alloca %..string, align 8
  %27 = alloca %runtime.Source_Code_Location, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca { i8**, i64 }, align 8
  %32 = alloca { i8**, i64 }, align 8
  %33 = alloca [2 x void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*], align 16
  %34 = alloca { i8**, i64 }, align 8
  %35 = alloca void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*, align 8
  %39 = alloca %..string, align 8
  %40 = alloca i8, align 1
  %41 = alloca { %..string, i8 }, align 8
  %42 = alloca { %..any*, i64 }, align 8
  %43 = alloca %runtime.Source_Code_Location, align 8
  %44 = alloca %..string, align 8
  %45 = alloca %runtime.Source_Code_Location, align 8
  %46 = alloca { i8*, i64 }, align 8
  %47 = alloca { %..string*, i64 }, align 8
  %48 = alloca { { i8*, i64 }*, i64 }, align 8
  %49 = alloca { i8*, i64 }, align 8
  %50 = alloca i8, align 1
  br label %entry

entry:                                            ; preds = %decls
  store %enbench.DataToWrite* %2, %enbench.DataToWrite** %3, align 8
  %51 = bitcast i8* %__.context_ptr to %runtime.Context*
  %52 = getelementptr inbounds %runtime.Context, %runtime.Context* %51, i32 0, i32 1
  %53 = load %runtime.Allocator, %runtime.Allocator* %52, align 8
  %54 = load %runtime.Context, %runtime.Context* %51, align 8
  %55 = bitcast %runtime.Context* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* %55, i8 0, i64 96, i1 false)
  %56 = bitcast %runtime.Context* %4 to i8*
  %57 = bitcast %runtime.Context* %51 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %56, i8* align 1 %57, i64 96, i1 false)
  %58 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  store %runtime.Allocator %53, %runtime.Allocator* %58, align 8
  %59 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  %60 = load %runtime.Allocator, %runtime.Allocator* %59, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 335, i32 15, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %6, align 8
  %61 = bitcast { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* %61, i8 0, i64 48, i1 false)
  %62 = bitcast %runtime.Context* %4 to i8*
  call void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }*) %7, %runtime.Allocator* %59, %runtime.Source_Code_Location* %6, i8* %62)
  %63 = load { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7, align 8
  %64 = getelementptr inbounds { { %..string*, i64, i64, %runtime.Allocator }, i8 }, { { %..string*, i64, i64, %runtime.Allocator }, i8 }* %7, i32 0, i32 0
  %65 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %64, align 8
  store { %..string*, i64, i64, %runtime.Allocator } %65, { %..string*, i64, i64, %runtime.Allocator }* %5, align 8
  %66 = load %..string, %..string* %1, align 8
  %67 = bitcast %..any* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* %67, i8 0, i64 16, i1 false)
  %68 = bitcast %..string* %1 to i8*
  %69 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 0
  %70 = getelementptr inbounds %..any, %..any* %8, i32 0, i32 1
  store i8* %68, i8** %69, align 8
  store i64 432345564227567617, i64* %70, align 8
  %71 = load %..any, %..any* %8, align 8
  %72 = bitcast { %..any*, i64 }* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* %72, i8 0, i64 16, i1 false)
  %73 = bitcast [1 x %..any]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* %73, i8 0, i64 16, i1 false)
  %74 = getelementptr [1 x %..any], [1 x %..any]* %10, i64 0, i64 0
  store %..any %71, %..any* %74, align 8
  %75 = getelementptr [1 x %..any], [1 x %..any]* %10, i64 0, i64 0
  %76 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %9, i32 0, i32 0
  store %..any* %75, %..any** %76, align 8
  %77 = getelementptr inbounds { %..any*, i64 }, { %..any*, i64 }* %9, i32 0, i32 1
  store i64 1, i64* %77, align 8
  %78 = load { %..any*, i64 }, { %..any*, i64 }* %9, align 8
  store %..string { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"csbs$2d7", i64 0, i64 0), i64 13 }, %..string* %11, align 8
  %79 = bitcast %..string* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* %79, i8 0, i64 16, i1 false)
  %80 = bitcast %runtime.Context* %4 to i8*
  call void @fmt.tprintf(%..string* sret(%..string*) %12, %..string* %11, { %..any*, i64 }* %9, i8* %80)
  %81 = load %..string, %..string* %12, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 336, i32 2, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %13, align 8
  %82 = bitcast %runtime.Context* %4 to i8*
  %83 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %12, %runtime.Source_Code_Location* %13, i8* %82)
  store i64 0, i64* %14, align 8
  store i64 0, i64* %15, align 8
  br label %for.interval.loop

for.interval.loop:                                ; preds = %for.interval.post, %entry
  %84 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %85 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %84, i32 0, i32 0
  %86 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %85, i32 0, i32 0
  %87 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %86, align 8
  %88 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %86, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = load i64, i64* %14, align 8
  %91 = icmp slt i64 %90, %89
  br i1 %91, label %for.interval.body, label %for.interval.done

for.interval.body:                                ; preds = %for.interval.loop
  %92 = load i64, i64* %14, align 8
  %93 = load i64, i64* %15, align 8
  store i64 %92, i64* %16, align 8
  %94 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %95 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %94, i32 0, i32 0
  %96 = load %enbench.ENUM, %enbench.ENUM* %95, align 8
  %97 = load i64, i64* %16, align 8
  %98 = bitcast %..string* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* %98, i8 0, i64 16, i1 false)
  %99 = bitcast %runtime.Context* %4 to i8*
  call void @enbench.ODINSOURCE_make_enum(%..string* sret(%..string*) %18, %enbench.ENUM* %95, i64 %97, i8* %99)
  %100 = load %..string, %..string* %18, align 8
  store %..string %100, %..string* %17, align 8
  %101 = load %..string, %..string* %17, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 340, i32 3, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %19, align 8
  %102 = bitcast %runtime.Context* %4 to i8*
  %103 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %17, %runtime.Source_Code_Location* %19, i8* %102)
  br label %for.interval.post

for.interval.post:                                ; preds = %for.interval.body
  %104 = load i64, i64* %14, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %14, align 8
  %106 = load i64, i64* %15, align 8
  %107 = add i64 %106, 1
  store i64 %107, i64* %15, align 8
  br label %for.interval.loop

for.interval.done:                                ; preds = %for.interval.loop
  store i64 0, i64* %20, align 8
  store i64 0, i64* %21, align 8
  br label %for.interval.loop1

for.interval.loop1:                               ; preds = %for.interval.post3, %for.interval.done
  %108 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %109 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %108, i32 0, i32 0
  %110 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %109, i32 0, i32 0
  %111 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %110, align 8
  %112 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %110, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = load i64, i64* %20, align 8
  %115 = icmp slt i64 %114, %113
  br i1 %115, label %for.interval.body2, label %for.interval.done4

for.interval.body2:                               ; preds = %for.interval.loop1
  %116 = load i64, i64* %20, align 8
  %117 = load i64, i64* %21, align 8
  store i64 %116, i64* %22, align 8
  %118 = load i64, i64* %22, align 8
  %119 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %120 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %119, i32 0, i32 0
  %121 = load %enbench.ENUM, %enbench.ENUM* %120, align 8
  %122 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %123 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %122, i32 0, i32 1
  %124 = load %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %123, align 8
  %125 = bitcast %..string* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* %125, i8 0, i64 16, i1 false)
  %126 = bitcast %runtime.Context* %4 to i8*
  call void @enbench.ODINSOURCE_make_e2e_relation(%..string* sret(%..string*) %24, i64 %118, %enbench.ENUM* %120, %enbench.ENUM_CASE_RELATIONS* %123, i8* %126)
  %127 = load %..string, %..string* %24, align 8
  store %..string %127, %..string* %23, align 8
  %128 = load %..string, %..string* %23, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 344, i32 3, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %25, align 8
  %129 = bitcast %runtime.Context* %4 to i8*
  %130 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %23, %runtime.Source_Code_Location* %25, i8* %129)
  br label %for.interval.post3

for.interval.post3:                               ; preds = %for.interval.body2
  %131 = load i64, i64* %20, align 8
  %132 = add i64 %131, 1
  store i64 %132, i64* %20, align 8
  %133 = load i64, i64* %21, align 8
  %134 = add i64 %133, 1
  store i64 %134, i64* %21, align 8
  br label %for.interval.loop1

for.interval.done4:                               ; preds = %for.interval.loop1
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %26, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 346, i32 2, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %27, align 8
  %135 = bitcast %runtime.Context* %4 to i8*
  %136 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %26, %runtime.Source_Code_Location* %27, i8* %135)
  store i64 0, i64* %28, align 8
  %137 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %138 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %137, i32 0, i32 0
  %139 = getelementptr inbounds %enbench.ENUM, %enbench.ENUM* %138, i32 0, i32 0
  %140 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %139, i32 0, i32 1
  store i64 -1, i64* %29, align 8
  br label %for.index.loop

for.index.loop:                                   ; preds = %for.index.done, %for.interval.done4
  %141 = load i64, i64* %29, align 8
  %142 = add i64 %141, 1
  store i64 %142, i64* %29, align 8
  %143 = load i64, i64* %140, align 8
  %144 = icmp slt i64 %142, %143
  br i1 %144, label %for.index.body, label %for.index.done7

for.index.body:                                   ; preds = %for.index.loop
  %145 = load i64, i64* %29, align 8
  store i64 %145, i64* %30, align 8
  %146 = bitcast { i8**, i64 }* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* %146, i8 0, i64 16, i1 false)
  store [2 x void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*] [void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)* @enbench.ODINSOURCE_make_view_description, void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)* @enbench.ODINSOURCE_make_inv_description], [2 x void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*]* %33, align 8
  %147 = getelementptr inbounds [2 x void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*], [2 x void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*]* %33, i64 0, i64 0
  %148 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %34, i32 0, i32 0
  %149 = bitcast i8*** %148 to i8**
  %150 = bitcast void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %147 to i8*
  store i8* %150, i8** %149, align 8
  %151 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %34, i32 0, i32 1
  store i64 2, i64* %151, align 8
  %152 = load { i8**, i64 }, { i8**, i64 }* %34, align 8
  %153 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %34, i32 0, i32 0
  %154 = load void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)**, i8*** %153, align 8
  %155 = extractvalue { i8**, i64 } %152, 1
  %156 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %32, i32 0, i32 0
  %157 = bitcast i8*** %156 to i8**
  %158 = bitcast void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %154 to i8*
  store i8* %158, i8** %157, align 8
  %159 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %32, i32 0, i32 1
  store i64 %155, i64* %159, align 8
  %160 = load { i8**, i64 }, { i8**, i64 }* %32, align 8
  %161 = bitcast { i8**, i64 }* %31 to i8**
  %162 = addrspacecast { i8**, i64 } %160 to i8*
  store i8* %162, i8** %161, align 8
  store void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)* null, void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %35, align 8
  %163 = load { i8**, i64 }, { i8**, i64 }* %31, align 8
  %164 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %31, i32 0, i32 1
  %165 = load i64, i64* %164, align 8
  store i64 %165, i64* %36, align 8
  store i64 -1, i64* %37, align 8
  br label %for.index.loop5

for.index.loop5:                                  ; preds = %if.done, %for.index.body
  %166 = load i64, i64* %37, align 8
  %167 = add i64 %166, 1
  store i64 %167, i64* %37, align 8
  %168 = load i64, i64* %36, align 8
  %169 = icmp slt i64 %167, %168
  br i1 %169, label %for.index.body6, label %for.index.done

for.index.body6:                                  ; preds = %for.index.loop5
  %170 = load i64, i64* %37, align 8
  %171 = getelementptr inbounds { i8**, i64 }, { i8**, i64 }* %31, i32 0, i32 0
  %172 = load void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)**, i8*** %171, align 8
  %173 = getelementptr void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*, void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %172, i64 %170
  %174 = load void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*, void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %173, align 8
  %175 = bitcast void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %38 to i8**
  %176 = bitcast void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)* %174 to i8*
  store i8* %176, i8** %175, align 8
  %177 = load void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)*, void ({ %..string, i8 }*, i64, %enbench.ENUM*, %enbench.ENUM_CASE_RELATIONS*, i8*)** %38, align 8
  %178 = load i64, i64* %30, align 8
  %179 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %180 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %179, i32 0, i32 0
  %181 = load %enbench.ENUM, %enbench.ENUM* %180, align 8
  %182 = load %enbench.DataToWrite*, %enbench.DataToWrite** %3, align 8
  %183 = getelementptr inbounds %enbench.DataToWrite, %enbench.DataToWrite* %182, i32 0, i32 1
  %184 = load %enbench.ENUM_CASE_RELATIONS, %enbench.ENUM_CASE_RELATIONS* %183, align 8
  %185 = bitcast { %..string, i8 }* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* %185, i8 0, i64 24, i1 false)
  %186 = bitcast %runtime.Context* %4 to i8*
  call void %177({ %..string, i8 }* sret({ %..string, i8 }*) %41, i64 %178, %enbench.ENUM* %180, %enbench.ENUM_CASE_RELATIONS* %183, i8* %186)
  %187 = load { %..string, i8 }, { %..string, i8 }* %41, align 8
  %188 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %41, i32 0, i32 0
  %189 = load %..string, %..string* %188, align 8
  %190 = getelementptr inbounds { %..string, i8 }, { %..string, i8 }* %41, i32 0, i32 1
  %191 = load i8, i8* %190, align 1
  store %..string %189, %..string* %39, align 8
  store i8 %191, i8* %40, align 1
  %192 = load i8, i8* %40, align 1
  %193 = trunc i8 %192 to i1
  br i1 %193, label %if.done, label %if.then

if.then:                                          ; preds = %for.index.body6
  %194 = load %..string, %..string* %39, align 8
  %195 = bitcast { %..any*, i64 }* %42 to i8*
  call void @llvm.memset.p0i8.i64(i8* %195, i8 0, i64 16, i1 false)
  %196 = load { %..any*, i64 }, { %..any*, i64 }* %42, align 8
  %197 = bitcast %runtime.Context* %4 to i8*
  %198 = call i64 @fmt.printf(%..string* %39, { %..any*, i64 }* %42, i8* %197)
  ret void

if.done:                                          ; preds = %for.index.body6
  %199 = load %..string, %..string* %39, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 356, i32 4, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %43, align 8
  %200 = bitcast %runtime.Context* %4 to i8*
  %201 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %39, %runtime.Source_Code_Location* %43, i8* %200)
  store %..string { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"csbs$27f", i64 0, i64 0), i64 1 }, %..string* %44, align 8
  store %runtime.Source_Code_Location { %..string { i8* getelementptr inbounds ([83 x i8], [83 x i8]* @"csbs$197", i64 0, i64 0), i64 82 }, i32 357, i32 4, %..string { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"csbs$2d6", i64 0, i64 0), i64 18 } }, %runtime.Source_Code_Location* %45, align 8
  %202 = bitcast %runtime.Context* %4 to i8*
  %203 = call i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }* %5, %..string* %44, %runtime.Source_Code_Location* %45, i8* %202)
  br label %for.index.loop5

for.index.done:                                   ; preds = %for.index.loop5
  br label %for.index.loop

for.index.done7:                                  ; preds = %for.index.loop
  %204 = load { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %5, align 8
  %205 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %5, i32 0, i32 1
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds { %..string*, i64, i64, %runtime.Allocator }, { %..string*, i64, i64, %runtime.Allocator }* %5, i32 0, i32 0
  %208 = load %..string*, %..string** %207, align 8
  %209 = getelementptr %..string, %..string* %208, i64 0
  %210 = sub i64 %206, 0
  %211 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 0
  store %..string* %209, %..string** %211, align 8
  %212 = getelementptr inbounds { %..string*, i64 }, { %..string*, i64 }* %47, i32 0, i32 1
  store i64 %210, i64* %212, align 8
  %213 = load { %..string*, i64 }, { %..string*, i64 }* %47, align 8
  %214 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  %215 = load %runtime.Allocator, %runtime.Allocator* %214, align 8
  %216 = bitcast { { i8*, i64 }*, i64 }* %48 to i8*
  call void @llvm.memset.p0i8.i64(i8* %216, i8 0, i64 16, i1 false)
  %217 = bitcast %runtime.Context* %4 to i8*
  call void @slice.mapper-52631({ { i8*, i64 }*, i64 }* sret({ { i8*, i64 }*, i64 }*) %48, { %..string*, i64 }* %47, i8* bitcast (void ({ i8*, i64 }*, %..string*, i8*)* @enbench.make_writeable to i8*), %runtime.Allocator* %214, i8* %217)
  %218 = load { { i8*, i64 }*, i64 }, { { i8*, i64 }*, i64 }* %48, align 8
  %219 = getelementptr inbounds %runtime.Context, %runtime.Context* %4, i32 0, i32 0
  %220 = load %runtime.Allocator, %runtime.Allocator* %219, align 8
  %221 = bitcast { i8*, i64 }* %49 to i8*
  call void @llvm.memset.p0i8.i64(i8* %221, i8 0, i64 16, i1 false)
  %222 = bitcast %runtime.Context* %4 to i8*
  call void @slice.concatenate-52642({ i8*, i64 }* sret({ i8*, i64 }*) %49, { { i8*, i64 }*, i64 }* %48, %runtime.Allocator* %219, i8* %222)
  %223 = load { i8*, i64 }, { i8*, i64 }* %49, align 8
  store { i8*, i64 } %223, { i8*, i64 }* %46, align 8
  %224 = load %..string, %..string* %0, align 8
  %225 = load { i8*, i64 }, { i8*, i64 }* %46, align 8
  %226 = bitcast %runtime.Context* %4 to i8*
  %227 = call i8 @os.write_entire_file(%..string* %0, { i8*, i64 }* %46, i1 true, i8* %226)
  store i8 %227, i8* %50, align 1
  ret void
}

declare internal i8* @mem.zero(i8*, i64)

declare internal i8 @mem.check_zero_ptr(i8*, i64, i8* noalias nocapture nonnull)

declare internal i8 @mem.is_power_of_two(i64)

declare internal i64 @mem.align_forward_uintptr(i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @mem.align_backward_uintptr(i64, i64, i8* noalias nocapture nonnull)

declare internal void @log.create_console_logger(%runtime.Logger* noalias sret(%runtime.Logger), i64, i16, %..string*, i8* noalias nocapture nonnull)

declare internal void @log.file_console_logger_proc(i8*, i64, %..string*, i16, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.do_level_header(i16, i64, %strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @log.do_location_header(i16, %strings.Builder*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.debugf(%..string*, { %..any*, i64 }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.errorf(%..string*, { %..any*, i64 }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.info({ %..any*, i64 }*, %..string*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.log(i64, { %..any*, i64 }*, %..string*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @log.logf(i64, %..string*, { %..any*, i64 }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %strings.Builder* @strings.builder_init_none(%strings.Builder*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings.to_stream(%io.Stream* noalias sret(%io.Stream), %strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @strings.to_writer(%io.Writer* noalias sret(%io.Writer), %strings.Builder*, i8* noalias nocapture nonnull)

declare internal void @strings.builder_from_bytes(%strings.Builder* noalias sret(%strings.Builder), { i8*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @strings.to_string(%..string* noalias sret(%..string), %strings.Builder*, i8* noalias nocapture nonnull)

declare internal i64 @strings.write_byte(%strings.Builder*, i8, i8* noalias nocapture nonnull)

declare internal i64 @strings.write_bytes(%strings.Builder*, { i8*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @strings.clone(%..string* noalias sret(%..string), %..string*, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8* @strings.clone_to_cstring(%..string*, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @strings.clone_from_bytes(%..string* noalias sret(%..string), { i8*, i64 }*, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @strings.contains(%..string*, %..string*, i8* noalias nocapture nonnull)

declare internal i64 @strings.rune_count(%..string*, i8* noalias nocapture nonnull)

declare internal void @strings.join(%..string* noalias sret(%..string), { %..string*, i64 }*, %..string*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings.concatenate(%..string* noalias sret(%..string), { %..string*, i64 }*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings._split-1431({ %..string*, i64 }* noalias sret({ %..string*, i64 }), %..string*, %..string*, i64, i64, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings.split({ %..string*, i64 }* noalias sret({ %..string*, i64 }), %..string*, %..string*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings._split_iterator-1436({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, %..string*, i64, i8* noalias nocapture nonnull)

declare internal void @strings._trim_cr-1440(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

declare internal void @strings.split_lines_iterator({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, i8* noalias nocapture nonnull)

declare internal i64 @strings.index_byte(%..string*, i8, i8* noalias nocapture nonnull)

declare internal i64 @strings.index(%..string*, %..string*, i8* noalias nocapture nonnull)

declare internal i64 @strings.count(%..string*, %..string*, i8* noalias nocapture nonnull)

declare internal void @strings.replace({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, %..string*, %..string*, i64, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings.remove({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, %..string*, i64, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @strings.remove_all({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, %..string*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal i8 @strings.is_space(i32, i8* noalias nocapture nonnull)

declare internal i64 @strings.index_proc(%..string*, i8*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i64 @strings.last_index_proc(%..string*, i8*, i1 zeroext, i8* noalias nocapture nonnull)

declare internal void @strings.trim_left_proc(%..string* noalias sret(%..string), %..string*, i8*, i8* noalias nocapture nonnull)

declare internal void @strings.trim_right_proc(%..string* noalias sret(%..string), %..string*, i8*, i8* noalias nocapture nonnull)

declare internal void @strings.trim_left_space(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

declare internal void @strings.trim_right_space(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

declare internal void @strings.trim_space(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

declare i32 @SDL_Init(i32)

declare void @SDL_Quit()

declare i32 @SDL_SetClipboardText(i8*)

declare i8* @SDL_GetClipboardText()

declare i8* @SDL_GetError()

declare i32 @SDL_PollEvent(%sdl2.Event*)

declare i32 @SDL_PushEvent(%sdl2.Event*)

declare %sdl2.Window* @SDL_GetKeyboardFocus()

; Function Attrs: alwaysinline
declare internal i16 @sdl2.GetModState() #3

declare i32 @SDL_GetModState()

declare i32 @SDL_GetMouseState(i32*, i32*)

declare %sdl2.Cursor* @SDL_CreateSystemCursor(i32)

declare void @SDL_SetCursor(%sdl2.Cursor*)

declare i32 @SDL_ShowCursor(i32)

declare void @SDL_free(i8*)

declare i64 @SDL_GetPerformanceCounter()

declare i64 @SDL_GetPerformanceFrequency()

declare %sdl2.Window* @SDL_CreateWindow(i8*, i32, i32, i32, i32, i32)

declare i32 @SDL_GetWindowFlags(%sdl2.Window*)

declare void @SDL_GetWindowSize(%sdl2.Window*, i32*, i32*)

declare void @SDL_DestroyWindow(%sdl2.Window*)

declare i8* @SDL_GL_GetProcAddress(i8*)

declare i32 @SDL_GL_SetAttribute(i32, i32)

declare i8* @SDL_GL_CreateContext(%sdl2.Window*)

declare i32 @SDL_GL_MakeCurrent(%sdl2.Window*, i8*)

declare void @SDL_GL_GetDrawableSize(%sdl2.Window*, i32*, i32*)

declare i32 @SDL_GL_SetSwapInterval(i32)

declare void @SDL_GL_SwapWindow(%sdl2.Window*)

declare void @SDL_GL_DeleteContext(i8*)

declare internal void @sdl2.gl_set_proc_address(i8*, i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_up_to(i64, i64, i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_4(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_1_5(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_2_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_2_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_3_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_0(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_1(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_2(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_3(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_4(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_5(i8*, i8* noalias nocapture nonnull)

declare internal void @odin_gl.load_4_6(i8*, i8* noalias nocapture nonnull)

declare void @ImFontAtlas_GetTexDataAsRGBA32(%imgui.Font_Atlas*, i8**, i32*, i32*, i32*)

declare void @ImGuiIO_AddInputCharactersUTF8(%imgui.IO*, i8*)

declare i8 @igBegin(i8*, i8*, i32)

declare i8 @igBeginCombo(i8*, i8*, i32)

declare i8 @igBeginListBox(i8*, i64)

declare i8 @igBeginTabBar(i8*, i32)

declare i8 @igBeginTabItem(i8*, i8*, i32)

declare i8 @igButton(i8*, i64)

declare %imgui.Context* @igCreateContext(%imgui.Font_Atlas*)

declare void @igEnd()

declare void @igEndCombo()

declare void @igEndListBox()

declare void @igEndTabBar()

declare void @igEndTabItem()

declare %imgui.Draw_Data* @igGetDrawData()

declare %imgui.IO* @igGetIO()

declare i32 @igGetMouseCursor()

declare i8 @igInputText(i8*, i8*, i64, i32, i8*, i8*)

declare void @igNewFrame()

declare void @igRender()

declare void @igSameLine(float, float)

declare i8 @igSelectable_Bool(i8*, i1 zeroext, i32, i64)

declare void @igSetItemDefaultFocus()

declare void @igSetNextWindowBgAlpha(float)

declare void @igSetNextWindowPos(i64, i32, i64)

declare void @igShowDemoWindow(i8*)

declare void @igStyleColorsDark(%imgui.Style*)

declare void @igTextUnformatted(i8*, i8*)

; Function Attrs: alwaysinline
declare internal void @imgui.font_atlas_get_tex_data_as_rgba32(%imgui.Font_Atlas*, i8**, i32*, i32*, i32*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.begin(%..string*, i8*, i32, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.begin_combo(%..string*, %..string*, i32, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.begin_list_box(%..string*, i64, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.begin_tab_bar(%..string*, i32, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.begin_tab_item(%..string*, i8*, i32, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.button(%..string*, i64, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal %imgui.Context* @imgui.create_context(%imgui.Font_Atlas*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.end(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.end_combo(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.end_list_box(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.end_tab_bar(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.end_tab_item(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal %imgui.Draw_Data* @imgui.get_draw_data(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal %imgui.IO* @imgui.get_io(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i32 @imgui.get_mouse_cursor(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.input_text(%..string*, { i8*, i64 }*, i32, i8*, i8*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.new_frame(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.render(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.same_line(float, float, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i8 @imgui.selectable_bool(%..string*, i1 zeroext, i32, i64, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.set_item_default_focus(i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.set_next_window_bg_alpha(float, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.set_next_window_pos(i64, i32, i64, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.show_demo_window(i8*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.style_colors_dark(%imgui.Style*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.text(%..string*, { %..any*, i64 }*, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal void @imgui.text_unformatted(%..string*, i8* noalias nocapture nonnull) #3

declare internal i8 @imgui.swr_igBegin(%..string*, i8*, i32, i8* noalias nocapture nonnull)

declare internal i8 @imgui.swr_igBeginCombo(%..string*, %..string*, i32, i8* noalias nocapture nonnull)

declare internal i8 @imgui.swr_igBeginListBox(%..string*, i64, i8* noalias nocapture nonnull)

declare internal i8 @imgui.swr_igBeginTabBar(%..string*, i32, i8* noalias nocapture nonnull)

declare internal i8 @imgui.swr_igBeginTabItem(%..string*, i8*, i32, i8* noalias nocapture nonnull)

declare internal i8 @imgui.swr_igButton(%..string*, i64, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @imgui.wrapper_input_text(%..string*, { i8*, i64 }*, i32, i8*, i8*, i8* noalias nocapture nonnull) #3

declare internal i8 @imgui.swr_igSelectable_Bool(%..string*, i1 zeroext, i32, i64, i8* noalias nocapture nonnull)

declare internal void @imgui.wrapper_text(%..string*, { %..any*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @imgui.wrapper_unformatted_text(%..string*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_opengl.setup_state(%imgui_impl_opengl.OpenGL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_opengl.imgui_render(%imgui.Draw_Data*, %imgui_impl_opengl.OpenGL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_opengl.imgui_setup_render_state(%imgui.Draw_Data*, %imgui_impl_opengl.OpenGL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_opengl.backup_opengl_state(%imgui_impl_opengl.OpenGL_Backup_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_opengl.restore_opengl_state(%imgui_impl_opengl.OpenGL_Backup_State*, i8* noalias nocapture nonnull)

declare internal i32 @imgui_impl_opengl.compile_shader-6603(i32, %..string*, i8* noalias nocapture nonnull)

declare internal i32 @imgui_impl_opengl.setup_imgui_shaders-6604(i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.setup_state(%imgui_impl_sdl.SDL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.process_event(%sdl2.Event*, %imgui_impl_sdl.SDL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.update_dt(%imgui_impl_sdl.SDL_State*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.update_mouse(%imgui_impl_sdl.SDL_State*, %sdl2.Window*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.update_display_size(%sdl2.Window*, i8* noalias nocapture nonnull)

declare internal void @imgui_impl_sdl.set_clipboard_text(i8*, i8*)

declare internal i8* @imgui_impl_sdl.get_clipboard_text(i8*)

declare internal void @io.to_writer({ %io.Writer, i8 }* noalias sret({ %io.Writer, i8 }), %io.Stream*, i8* noalias nocapture nonnull)

declare internal void @io.write({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, { i8*, i64 }*, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io.flush(%io.Flusher*, i8* noalias nocapture nonnull)

declare internal i32 @io.write_byte_to_writer(%io.Writer*, i8, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io._write_byte-6695(%io.Byte_Writer*, i8, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_string({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, %..string*, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_rune({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i32, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_i64({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i64, i64, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_int({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i64, i64, i64*, i8* noalias nocapture nonnull)

declare internal i32 @io.n_wrapper(i64, i32, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_encoded_rune({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i32, i1 zeroext, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_escaped_rune({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i32, i8, i1 zeroext, i64*, i8* noalias nocapture nonnull)

declare internal void @io.write_quoted_string({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, %..string*, i8, i64*, i8* noalias nocapture nonnull)

declare internal i64 @io.write_quoted_rune(%io.Writer*, i32, i8* noalias nocapture nonnull)

declare x86_stdcallcc i32 @ReadConsoleW(i8*, i8*, i32, i32*, %sys_windows.CONSOLE_READCONSOLE_CONTROL*)

declare x86_stdcallcc i32 @GetConsoleMode(i8*, i32*)

declare x86_stdcallcc i32 @GetCurrentThreadId()

declare x86_stdcallcc i32 @MultiByteToWideChar(i32, i32, i8*, i32, i16*, i32)

declare x86_stdcallcc i32 @ReadFile(i8*, i8*, i32, i32*, %sys_windows.OVERLAPPED*)

declare x86_stdcallcc i32 @CloseHandle(i8*)

declare x86_stdcallcc i32 @FlushFileBuffers(i8*)

declare x86_stdcallcc i8* @CreateFileW(i16*, i32, i32, %sys_windows.SECURITY_ATTRIBUTES*, i32, i32, i8*)

declare x86_stdcallcc void @GetSystemTimeAsFileTime(%sys_windows.FILETIME*)

declare x86_stdcallcc i32 @GetFileType(i8*)

declare x86_stdcallcc i32 @SetFilePointer(i8*, i32, i32*, i32)

declare x86_stdcallcc i32 @GetFileSizeEx(i8*, i64*)

declare internal i64 @sys_windows.FILETIME_as_unix_nanoseconds(i64)

declare internal void @sys_windows.utf8_to_utf16({ i16*, i64 }* noalias sret({ i16*, i64 }), %..string*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal i16* @sys_windows.utf8_to_wstring(%..string*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal i64 @time.now()

declare internal void @time.date({ i64, i64, i64 }* noalias sret({ i64, i64, i64 }), i64, i8* noalias nocapture nonnull)

declare internal void @time.clock_from_time({ i64, i64, i64 }* noalias sret({ i64, i64, i64 }), i64, i8* noalias nocapture nonnull)

declare internal void @time.clock_from_seconds({ i64, i64, i64 }* noalias sret({ i64, i64, i64 }), i64, i8* noalias nocapture nonnull)

declare internal i64 @time._time_abs-10588(i64, i8* noalias nocapture nonnull)

declare internal void @time._abs_date-10589({ i64, i64, i64, i64 }* noalias sret({ i64, i64, i64, i64 }), i64, i1 zeroext, i8* noalias nocapture nonnull)

declare internal i64 @time._now-10600()

declare internal void @strconv.generic_ftoa({ i8*, i64 }* noalias sret({ i8*, i64 }), { i8*, i64 }*, double, i8, i64, i64, i8* noalias nocapture nonnull)

declare internal void @strconv.format_digits({ i8*, i64 }* noalias sret({ i8*, i64 }), { i8*, i64 }*, i1 zeroext, i1 zeroext, %strconv.Decimal_Slice*, i64, i8, i8* noalias nocapture nonnull)

declare internal void @strconv.round_shortest(%strconv_decimal.Decimal*, i64, i64, %strconv.Float_Info*, i8* noalias nocapture nonnull)

declare internal void @strconv.is_integer_negative({ i64, i8 }* noalias sret({ i64, i8 }), i64, i1 zeroext, i64, i8* noalias nocapture nonnull)

declare internal void @strconv.append_bits(%..string* noalias sret(%..string), { i8*, i64 }*, i64, i64, i1 zeroext, i64, %..string*, i8, i8* noalias nocapture nonnull)

declare internal void @strconv.is_integer_negative_128({ i128, i8 }* noalias sret({ i128, i8 }), i128*, i1 zeroext, i64, i8* noalias nocapture nonnull)

declare internal void @strconv.append_bits_128(%..string* noalias sret(%..string), { i8*, i64 }*, i128*, i64, i1 zeroext, i64, %..string*, i8, i8* noalias nocapture nonnull)

declare internal void @strconv.append_float(%..string* noalias sret(%..string), { i8*, i64 }*, double, i8, i64, i64, i8* noalias nocapture nonnull)

declare internal void @utf8.encode_rune({ [4 x i8], i64 }* noalias sret({ [4 x i8], i64 }), i32, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal void @utf8.decode_rune_in_string({ i32, i64 }* noalias sret({ i32, i64 }), %..string*, i8* noalias nocapture nonnull) #3

declare internal void @utf8.decode_rune_in_bytes({ i32, i64 }* noalias sret({ i32, i64 }), { i8*, i64 }*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal void @utf8.decode_last_rune_in_string({ i32, i64 }* noalias sret({ i32, i64 }), %..string*, i8* noalias nocapture nonnull) #3

declare internal void @utf8.decode_last_rune_in_bytes({ i32, i64 }* noalias sret({ i32, i64 }), { i8*, i64 }*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @utf8.rune_start(i8, i8* noalias nocapture nonnull) #3

; Function Attrs: alwaysinline
declare internal i64 @utf8.rune_count_in_string(%..string*, i8* noalias nocapture nonnull) #3

declare internal i64 @utf8.rune_count_in_bytes({ i8*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.trim(%strconv_decimal.Decimal*, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.assign(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift_right(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift_left(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.shift(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal i8 @strconv_decimal.can_round_up(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round_up(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal void @strconv_decimal.round_down(%strconv_decimal.Decimal*, i64, i8* noalias nocapture nonnull)

declare internal i32 @utf16.decode_surrogate_pair(i32, i32, i8* noalias nocapture nonnull)

declare internal i64 @utf16.decode_to_utf8({ i8*, i64 }*, { i16*, i64 }*, i8* noalias nocapture nonnull)

declare internal i64 @reflect.type_kind(i64, i8* noalias nocapture nonnull)

declare internal %runtime.Type_Info* @reflect.type_info_base(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal void @reflect.struct_tag_lookup({ %..string, i8 }* noalias sret({ %..string, i8 }), %..string*, %..string*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.type_info_union_is_pure_maybe(%runtime.Type_Info_Union*, i8* noalias nocapture nonnull)

declare internal void @reflect.as_int({ i64, i8 }* noalias sret({ i64, i8 }), %..any*, i8* noalias nocapture nonnull)

declare internal void @reflect.as_i64({ i64, i8 }* noalias sret({ i64, i8 }), %..any*, i8* noalias nocapture nonnull)

declare internal i8* @reflect.relative_pointer_to_absolute_raw(i8*, i64, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_rune(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_any(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_string(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_pointer(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal i8 @reflect.is_enum(%runtime.Type_Info*, i8* noalias nocapture nonnull)

declare internal void @reflect.write_typeid_writer({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, i64, i64*, i8* noalias nocapture nonnull)

declare internal void @reflect.write_type_writer({ i64, i32 }* noalias sret({ i64, i32 }), %io.Writer*, %runtime.Type_Info*, i64*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.typeid_base(i64)

declare internal void @runtime.default_allocator_proc({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_allocator(%runtime.Allocator* noalias sret(%runtime.Allocator), i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_init(%runtime.Default_Temp_Allocator*, i64, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_destroy(%runtime.Default_Temp_Allocator*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_alloc-14220({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), %runtime.Default_Temp_Allocator*, i64, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.default_temp_allocator_free-14221(%runtime.Default_Temp_Allocator*, i8*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_free_all-14222(%runtime.Default_Temp_Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_resize-14223({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), %runtime.Default_Temp_Allocator*, i8*, i64, i64, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.default_temp_allocator_proc({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), i8*, i8, i64, i64, i8*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare dso_local i32 @main(i32, i8**)

declare internal void @runtime.type_assertion_check(i1 zeroext, %..string*, i32, i32, i64, i64)

declare internal void @runtime.type_assertion_check2(i1 zeroext, %..string*, i32, i32, i64, i64, i8*)

declare internal i8* @runtime.memset(i8*, i32, i64)

declare internal void @odin_gl.PolygonMode(i32, i32)

declare internal void @odin_gl.Scissor(i32, i32, i32, i32)

declare internal void @odin_gl.TexParameteri(i32, i32, i32)

declare internal void @odin_gl.TexImage2D(i32, i32, i32, i32, i32, i32, i32, i32, i8*)

declare internal void @odin_gl.Clear(i32)

declare internal void @odin_gl.ClearColor(float, float, float, float)

declare internal void @odin_gl.Disable(i32)

declare internal void @odin_gl.Enable(i32)

declare internal void @odin_gl.BlendFunc(i32, i32)

declare internal void @odin_gl.GetIntegerv(i32, i32*)

declare internal i8 @odin_gl.IsEnabled(i32)

declare internal void @odin_gl.Viewport(i32, i32, i32, i32)

declare internal void @odin_gl.DrawElements(i32, i32, i32, i8*)

declare internal void @odin_gl.BindTexture(i32, i32)

declare internal void @odin_gl.GenTextures(i32, i32*)

declare internal void @odin_gl.ActiveTexture(i32)

declare internal void @odin_gl.BlendFuncSeparate(i32, i32, i32, i32)

declare internal void @odin_gl.BlendEquation(i32)

declare internal void @odin_gl.BindBuffer(i32, i32)

declare internal void @odin_gl.GenBuffers(i32, i32*)

declare internal void @odin_gl.BufferData(i32, i64, i8*, i32)

declare internal void @odin_gl.BlendEquationSeparate(i32, i32)

declare internal void @odin_gl.AttachShader(i32, i32)

declare internal void @odin_gl.CompileShader(i32)

declare internal i32 @odin_gl.CreateProgram()

declare internal i32 @odin_gl.CreateShader(i32)

declare internal void @odin_gl.EnableVertexAttribArray(i32)

declare internal i32 @odin_gl.GetAttribLocation(i32, i8*)

declare internal void @odin_gl.GetProgramiv(i32, i32, i32*)

declare internal void @odin_gl.GetShaderiv(i32, i32, i32*)

declare internal i32 @odin_gl.GetUniformLocation(i32, i8*)

declare internal void @odin_gl.LinkProgram(i32)

declare internal void @odin_gl.ShaderSource(i32, i32, i8**, i32*)

declare internal void @odin_gl.UseProgram(i32)

declare internal void @odin_gl.Uniform1i(i32, i32)

declare internal void @odin_gl.UniformMatrix4fv(i32, i32, i1 zeroext, float*)

declare internal void @odin_gl.VertexAttribPointer(i32, i32, i32, i1 zeroext, i32, i64)

declare internal void @odin_gl.BindVertexArray(i32)

declare internal void @odin_gl.DeleteVertexArrays(i32, i32*)

declare internal void @odin_gl.GenVertexArrays(i32, i32*)

declare internal void @odin_gl.DrawElementsBaseVertex(i32, i32, i32, i8*, i32)

declare internal i8* @runtime.raw_string_data-47860(%..string*)

declare internal i8* @runtime.raw_slice_data-47893({ i8*, i64 }*)

; Function Attrs: alwaysinline
declare internal i64 @runtime._default_hasher_const-48055(i8*, i64) #3

declare internal i8 @runtime.__slice_resize-48175({ i64*, i64 }*, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-48381({ i8*, i64 }*, { i8*, i64 }*)

declare internal void @runtime.make_dynamic_array-48751({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-48779({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @slice.concatenate-48804({ %..string*, i64 }* noalias sret({ %..string*, i64 }), { { %..string*, i64 }*, i64 }*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-48837({ [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-48848({ %..string*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.new-48863({ [64 x i8]*, i8 }* noalias sret({ [64 x i8]*, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-48892({ [64 x i8]*, i64, i64, %runtime.Allocator }*, [64 x i8]*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-48925({ %..string*, i64, i64, %runtime.Allocator }*, %..string*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-48958({ i64*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @mem.zero_slice-48987({ i8*, i64 }* noalias sret({ i8*, i64 }), { i8*, i64 }*)

declare internal void @runtime.make_dynamic_array-49024({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-49037({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, { [64 x i8]*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @slice.mapper-49087({ %..string*, i64 }* noalias sret({ %..string*, i64 }), { %..string*, i64 }*, i8*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-49099({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-49127({ { i64*, i64 }, i8 }* noalias sret({ { i64*, i64 }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @slice.linear_search-49187({ i64, i8 }* noalias sret({ i64, i8 }), { %..string*, i64 }*, %..string*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_from_string-49546({ i8*, i64 }*, %..string*)

declare internal void @runtime.make_slice-49856({ { i16*, i64 }, i8 }* noalias sret({ { i16*, i64 }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i16* @runtime.raw_slice_data-49959({ i16*, i64 }*)

declare internal void @runtime.make_dynamic_array_len-50132({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-50149({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-50435({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_slice-50594({ i8*, i64 }*, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-50650({ { %..string*, i64 }, i8 }* noalias sret({ { %..string*, i64 }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51202({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-51215({ { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, { [128 x i8]*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.new-51356({ [128 x i8]*, i8 }* noalias sret({ [128 x i8]*, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-51386({ [128 x i8]*, i64, i64, %runtime.Allocator }*, [128 x i8]*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51490({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51521({ { i64*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { i64*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-51566({ { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, { i64*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51615({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-51660({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, { %..string*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51793({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-51821({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-51834({ %..string*, i64, i64, %runtime.Allocator }*, %..string*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @slice.all_of-51951({ i64*, i64 }*, i64, i8* noalias nocapture nonnull)

declare internal i8 @slice.any_of-51964({ i64*, i64 }*, i64, i8* noalias nocapture nonnull)

declare internal i8 @slice.all_of-52031({ %..string*, i64 }*, %..string*, i8* noalias nocapture nonnull)

declare internal i8 @slice.any_of-52042({ %..string*, i64 }*, %..string*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-52179({ i64*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-52210({ { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-52221({ %..string*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-52252({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-52298({ %..string*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @slice.mapper-52631({ { i8*, i64 }*, i64 }* noalias sret({ { i8*, i64 }*, i64 }), { %..string*, i64 }*, i8*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal void @slice.concatenate-52642({ i8*, i64 }* noalias sret({ i8*, i64 }), { { i8*, i64 }*, i64 }*, %runtime.Allocator*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-53013({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, { i8*, i64 }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.ordered_remove-53105({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.clear_dynamic_array-53113({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.new-54113({ %log.File_Console_Logger_Data*, i8 }* noalias sret({ %log.File_Console_Logger_Data*, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-54284({ { i8*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { i8*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-54402({ { i8*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { i8*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-54576({ i8*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-54658({ i8*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elem-54706({ i8*, i64, i64, %runtime.Allocator }*, i8, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.append_elems-54719({ i8*, i64, i64, %runtime.Allocator }*, { i8*, i64 }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @mem.slice_ptr-57271({ %imgui.Draw_List**, i64 }* noalias sret({ %imgui.Draw_List**, i64 }), %imgui.Draw_List**, i64)

declare internal void @mem.slice_ptr-57282({ %imgui.Draw_Cmd*, i64 }* noalias sret({ %imgui.Draw_Cmd*, i64 }), %imgui.Draw_Cmd*, i64)

declare internal i8 @runtime.delete_slice-57828({ i16*, i64 }*, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-60074({ { i8*, i64 }, i8 }* noalias sret({ { i8*, i64 }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.delete_dynamic_array-60113({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array-60248({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }), %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-60932({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-60949({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-61014({ %..string*, i64 }*, { %..string*, i64 }*)

declare internal i64 @runtime.copy_slice-61031({ [64 x i8]*, i64 }*, { [64 x i8]*, i64 }*)

declare internal void @runtime.new_aligned-61066({ [64 x i8]*, i8 }* noalias sret({ [64 x i8]*, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61080({ [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61110({ %..string*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61140({ i64*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-61200({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { [64 x i8]*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61214({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-61294({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64 }*, { { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal void @runtime.make_aligned-61317({ { i64*, i64 }, i8 }* noalias sret({ { i64*, i64 }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-61502({ { i16*, i64 }, i8 }* noalias sret({ { i16*, i64 }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_aligned-61758({ { %..string*, i64 }, i8 }* noalias sret({ { %..string*, i64 }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-61863({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { [128 x i8]*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61877({ { [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.new_aligned-61906({ [128 x i8]*, i8 }* noalias sret({ [128 x i8]*, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61920({ [128 x i8]*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-61953({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-61970({ { i64*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { i64*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-61984({ { i64*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-62022({ { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-62055({ { %..string*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { %..string*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_dynamic_array_len_cap-62072({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { %..string*, i64, i64, %runtime.Allocator }*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8 @runtime.reserve_dynamic_array-62086({ %..string*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64* @runtime.raw_dynamic_array_data-62125({ i64*, i64, i64, %runtime.Allocator }*)

declare internal i64 @runtime.copy_slice-62145({ { i64*, i64, i64, %runtime.Allocator }*, i64 }*, { { i64*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal %..string* @runtime.raw_dynamic_array_data-62170({ %..string*, i64, i64, %runtime.Allocator }*)

declare internal i64 @runtime.copy_slice-62190({ { %..string*, i64, i64, %runtime.Allocator }*, i64 }*, { { %..string*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal i64 @runtime.copy_slice-62207({ %..string*, i64 }*, { %..string*, i64 }*)

declare internal i8 @slice.contains-62228({ %..string*, i64 }*, %..string*, i8* noalias nocapture nonnull)

declare internal [32 x %..string]* @mem.zero_item-62353([32 x %..string]*)

declare internal void @slice.linear_search-62384({ i64, i8 }* noalias sret({ i64, i8 }), { %..string*, i64 }*, %..string*, i8* noalias nocapture nonnull)

declare internal void @runtime.make_slice-62430({ { { i8*, i64 }*, i64 }, i8 }* noalias sret({ { { i8*, i64 }*, i64 }, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i8*, i64 }* @runtime.raw_dynamic_array_data-62592({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*)

declare internal i8 @runtime.reserve_dynamic_array-62659({ { i8*, i64 }*, i64, i64, %runtime.Allocator }*, i64, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i64 @runtime.copy_slice-62686({ { i8*, i64 }*, i64 }*, { { i8*, i64 }*, i64 }*)

declare internal void @runtime.new_aligned-63019({ %log.File_Console_Logger_Data*, i8 }* noalias sret({ %log.File_Console_Logger_Data*, i8 }), i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal i8* @runtime.raw_dynamic_array_data-63223({ i8*, i64, i64, %runtime.Allocator }*)

declare internal void @runtime.make_dynamic_array_len_cap-64102({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }* noalias sret({ { { i8*, i64 }*, i64, i64, %runtime.Allocator }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal %..string* @runtime.raw_slice_data-64182({ %..string*, i64 }*)

declare internal [64 x i8]* @runtime.raw_slice_data-64265({ [64 x i8]*, i64 }*)

declare internal { [64 x i8]*, i64, i64, %runtime.Allocator }* @runtime.raw_slice_data-64537({ { [64 x i8]*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal { i64*, i64, i64, %runtime.Allocator }* @runtime.raw_slice_data-65112({ { i64*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal { %..string*, i64, i64, %runtime.Allocator }* @runtime.raw_slice_data-65196({ { %..string*, i64, i64, %runtime.Allocator }*, i64 }*)

declare internal %..string* @runtime.raw_slice_data-65279({ %..string*, i64 }*)

declare internal void @runtime.make_aligned-65373({ { { i8*, i64 }*, i64 }, i8 }* noalias sret({ { { i8*, i64 }*, i64 }, i8 }), i64, i64, %runtime.Allocator*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull)

declare internal { i8*, i64 }* @runtime.raw_slice_data-65452({ { i8*, i64 }*, i64 }*)

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

; Function Attrs: cold
declare internal void @runtime.assert.internal-0(%..string*, %runtime.Source_Code_Location*, i8* noalias nocapture nonnull) #6

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.inline.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64 immarg, i1 immarg) #0

; Function Attrs: cold
declare internal void @runtime.bounds_check_error.handle_error-0(%..string*, i32, i32, i64, i64) #6

; Function Attrs: cold
declare internal void @runtime.matrix_bounds_check_error.handle_error-0(%..string*, i32, i32, i64, i64, i64, i64) #6

; Function Attrs: cold
declare internal void @runtime.make_slice_error_loc.handle_error-0(%runtime.Source_Code_Location*, i64) #6

; Function Attrs: cold
declare internal void @runtime.make_dynamic_array_error_loc.handle_error-0(%runtime.Source_Code_Location*, i64, i64) #6

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i128 @llvm.ctlz.i128(i128, i1 immarg) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.cttz.i64(i64, i1 immarg) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.ctlz.i64(i64, i1 immarg) #7

declare internal void @"main.input_text_window$anon-12"(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

declare internal void @"main.input_text_window$anon-13"(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

; Function Attrs: alwaysinline
declare internal i8 @fmt._parse_int.is_digit-0(i8, i8* noalias nocapture nonnull) #3

declare internal void @fmt._arg_number.parse_arg_number-0({ i64, i64, i8 }* noalias sret({ i64, i64, i8 }), %..string*, i8* noalias nocapture nonnull)

declare internal i8 @fmt.fmt_bit_set.is_bit_set_different_endian_to_platform-0(%runtime.Type_Info*, i8* noalias nocapture nonnull)

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i16 @llvm.bswap.i16(i16) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.bswap.i32(i32) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i64 @llvm.bswap.i64(i64) #7

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare i128 @llvm.bswap.i128(i128) #7

declare internal void @fmt.handle_tag-830.handle_optional_len-0(i8*, %runtime.Type_Info_Struct*, %..string*, i64*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf16-0(%fmt.Info*, { i16*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf16-1(%fmt.Info*, { i16*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf16-2(%fmt.Info*, { i16*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf32-3(%fmt.Info*, { i32*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf32-4(%fmt.Info*, { i32*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf32-5(%fmt.Info*, { i32*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_array.print_utf32-6(%fmt.Info*, { i32*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_named.write_padded_number-0(%fmt.Info*, i64, i64, i8* noalias nocapture nonnull)

declare internal void @fmt.fmt_named.ffrac-1({ i64, i64 }* noalias sret({ i64, i64 }), { i8*, i64 }*, i64, i64, i8* noalias nocapture nonnull)

declare internal i64 @fmt.fmt_named.fint-2({ i8*, i64 }*, i64, i8* noalias nocapture nonnull)

define i8 @"__$equal3"(i8* %0, i8* %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = bitcast i8* %0 to i64*
  %3 = bitcast i8* %1 to i64*
  %4 = icmp eq i64* %2, %3
  br i1 %4, label %same_ptr, label %diff_ptr

same_ptr:                                         ; preds = %entry
  ret i8 1

diff_ptr:                                         ; preds = %entry
  %5 = load i64, i64* %2, align 8
  %6 = load i64, i64* %3, align 8
  %7 = icmp eq i64 %5, %6
  %8 = zext i1 %7 to i8
  ret i8 %8
}

define i64 @"__$hasher1"(i8* nonnull %0, i64 %1) {
decls:
  br label %entry

entry:                                            ; preds = %decls
  %2 = call i64 @runtime.default_hasher8(i8* %0, i64 %1)
  ret i64 %2
}

declare internal void @enbench.read_file_by_lines_in_whole_sweepscan.enum_scanning_proc-0(%..string*, %enbench.DataToWrite*, i8* noalias nocapture nonnull)

declare internal void @enbench.read_file_by_lines_in_whole_sweepscan.relation_scanning_proc-1(%..string*, %enbench.DataToWrite*, { %..string*, i64 }*, i8* noalias nocapture nonnull)

declare internal void @"enbench.read_file_by_lines_in_whole_sweepscan$anon-14"(%..string* noalias sret(%..string), %..string*, i8* noalias nocapture nonnull)

attributes #0 = { argmemonly nofree nosync nounwind willreturn }
attributes #1 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #2 = { noreturn }
attributes #3 = { alwaysinline }
attributes #4 = { noinline }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { cold }
attributes #7 = { nofree nosync nounwind readnone speculatable willreturn }
